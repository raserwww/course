1
00:03:00,000 --> 00:03:15,040
 Ven.

2
00:03:15,040 --> 00:03:22,040
 Okay, we'll come back.

3
00:03:22,040 --> 00:03:30,480
 Can you just check?

4
00:03:30,480 --> 00:03:35,799
 Because this is the new LTA for me to conduct here.

5
00:03:35,799 --> 00:03:41,519
 So I also want to see whether the arrangement is most optimal for a lecture.

6
00:03:41,520 --> 00:03:46,520
 So those students at the back, can you see the screen in front?

7
00:03:46,520 --> 00:03:50,000
 Is the screen over there switch on?

8
00:03:50,000 --> 00:03:52,080
 It's also on this view screen.

9
00:03:52,080 --> 00:03:53,080
 Is that also on?

10
00:03:53,080 --> 00:03:55,400
 Okay, then that's good.

11
00:04:53,080 --> 00:05:21,680
 Okay.

12
00:05:21,680 --> 00:05:32,680
 The screen's all turned on.

13
00:05:32,680 --> 00:05:35,760
 So we'll come back to the lecture.

14
00:05:35,760 --> 00:05:42,200
 So I've actually posted part three of the lecture notes already, so you can proceed to the course

15
00:05:42,200 --> 00:05:43,520
 side to download it.

16
00:05:43,520 --> 00:05:49,760
 On top of that, I've also posted this assignment one, home assignment one.

17
00:05:50,000 --> 00:05:55,200
 Right, okay, so you can actually go to the course side.

18
00:05:55,200 --> 00:05:57,560
 You can come to the assignment.

19
00:05:57,560 --> 00:06:02,400
 Okay, so I just want to very quickly share with you regarding some of the information

20
00:06:02,400 --> 00:06:06,680
 for the assignment and also some of the things that you need to be careful of.

21
00:06:06,680 --> 00:06:11,760
 Right, okay, so as I mentioned, I already posted the two announcements.

22
00:06:11,760 --> 00:06:17,280
 One is regarding the CA one, and then the homework home assignment.

23
00:06:17,320 --> 00:06:20,159
 The second one is regarding the lecture note part three.

24
00:06:20,159 --> 00:06:25,679
 Right, so for the assignment, when you are ready and you want to submit your assignment,

25
00:06:25,679 --> 00:06:30,719
 what you need to do is you need to go to the course side, and then you click on this particular

26
00:06:30,719 --> 00:06:32,239
 button called assignment.

27
00:06:32,239 --> 00:06:34,840
 Okay, so just click on the button.

28
00:06:34,840 --> 00:06:37,880
 So when you click on the button, you'll come to this particular page here.

29
00:06:37,880 --> 00:06:42,679
 Right, so in the page, you'll see that there's a few instructions.

30
00:06:42,679 --> 00:06:46,320
 Number one is to submit only a single soft copy PDF file.

31
00:06:46,360 --> 00:06:51,599
 Right, so in the past, we have students who submit, for one such assignment, they submit

32
00:06:51,599 --> 00:06:55,840
 a few multiple files, and this is going to create problems because when we download the

33
00:06:55,840 --> 00:06:58,159
 file, sometimes you only download one file.

34
00:06:58,159 --> 00:07:03,719
 Right, so if you split your assignment into a few parts, it's going to make marking very

35
00:07:03,719 --> 00:07:08,440
 complicated, and also sometimes we may even miss some of the files.

36
00:07:08,440 --> 00:07:13,760
 Right, because you have to bear in mind that there's about more than 500 of you.

37
00:07:13,800 --> 00:07:20,840
 Okay, so therefore when you submit, please submit only one single soft copy PDF file.

38
00:07:20,840 --> 00:07:21,960
 Right, only one file.

39
00:07:21,960 --> 00:07:24,280
 Okay, don't submit multiple files.

40
00:07:24,280 --> 00:07:29,320
 Okay, so through this particular course side, okay, like this particular link that I mentioned,

41
00:07:29,320 --> 00:07:32,599
 so that that line is 4th of October.

42
00:07:32,599 --> 00:07:36,240
 Right, so you have more than four weeks to do that.

43
00:07:36,240 --> 00:07:41,120
 Okay, and then when you submit your file, please name your file, right, using this name.

44
00:07:41,120 --> 00:07:41,840
 Okay.

45
00:07:41,880 --> 00:07:48,440
 So name your submitted file using surname underscore given name underscore metriclation

46
00:07:48,440 --> 00:07:49,320
 number.

47
00:07:49,320 --> 00:07:54,880
 Okay, so for example, if your name is Tan Yiming, right, so then it's Tan underscore

48
00:07:54,880 --> 00:07:59,400
 Yiming underscore your metriclation number and dot PDF.

49
00:07:59,400 --> 00:08:05,120
 Okay, so please follow this particular naming strictly because in the past, sometimes I even

50
00:08:05,120 --> 00:08:09,120
 have to take like couple of hours to sort out some of the file.

51
00:08:09,120 --> 00:08:11,080
 Some students didn't follow the instruction.

52
00:08:11,560 --> 00:08:14,960
 They just simply use whatever name it is and we will download.

53
00:08:14,960 --> 00:08:20,400
 We do not know who make the submission, right, which this particular submission is coming

54
00:08:20,400 --> 00:08:24,599
 from which student and we need to take a long time to trace it.

55
00:08:24,599 --> 00:08:26,760
 So this is going to be very cumbersome.

56
00:08:26,760 --> 00:08:31,280
 So please make sure that you follow this particular naming terminology strictly.

57
00:08:31,280 --> 00:08:35,640
 Okay, right, so that when I download it, I have all the files ready and I can just proceed

58
00:08:35,640 --> 00:08:40,159
 to do the marking, right, instead of trying to file, you know, this particular submission

59
00:08:40,199 --> 00:08:41,839
 is coming from which student.

60
00:08:41,839 --> 00:08:48,680
 Right, in addition to that, also make sure that you write your full name, okay, as well

61
00:08:48,680 --> 00:08:53,280
 as metriclation number on the first page of your submitted assignment, right.

62
00:08:53,280 --> 00:08:59,640
 Okay, so this is especially true for sometimes students, they don't follow this name, right,

63
00:08:59,640 --> 00:09:02,079
 and then we do not know who make the submission.

64
00:09:02,079 --> 00:09:07,280
 Sometimes some students is called, you know, assignment one and I don't know where it

65
00:09:07,280 --> 00:09:08,280
 does come from.

66
00:09:08,400 --> 00:09:13,720
 So, you know, at the last case scenario, at least I can look at the first page to find

67
00:09:13,720 --> 00:09:16,400
 who, you know, this assignment belongs to.

68
00:09:16,400 --> 00:09:22,720
 Okay, right, and then the last point is that late submission and noncompliance of the instruction

69
00:09:22,720 --> 00:09:24,280
 may be penalized, right.

70
00:09:24,280 --> 00:09:27,040
 So if you don't follow this instruction, you can be penalized.

71
00:09:27,040 --> 00:09:32,560
 Yeah, because in the past, yeah, I actually took one day just to figure out, you know,

72
00:09:32,560 --> 00:09:36,240
 this assignment because there are quite a large number of students who don't follow

73
00:09:36,240 --> 00:09:37,360
 the instruction.

74
00:09:37,440 --> 00:09:41,560
 Take me a long time really to find out where the files is coming, who make the submission.

75
00:09:41,560 --> 00:09:45,400
 Okay, so if you don't follow the instruction, you may be penalized, right.

76
00:09:45,400 --> 00:09:48,440
 So this mainly to make sure that you follow this instruction.

77
00:09:48,440 --> 00:09:52,840
 Okay, so after going through the instruction, the next is that the assignment is actually

78
00:09:52,840 --> 00:09:54,560
 given in this tab here.

79
00:09:54,560 --> 00:09:58,960
 So you can just click on this tab and then you'll be able to see the assignment, right.

80
00:09:58,960 --> 00:10:04,360
 So in this CA1 home assignment, you can see these instructions are exactly the same as

81
00:10:04,360 --> 00:10:06,440
 what I've gone through.

82
00:10:06,440 --> 00:10:08,280
 So the assignment itself have two questions.

83
00:10:08,280 --> 00:10:14,240
 The first question is asking you to do some calculations of the DCT manually.

84
00:10:14,240 --> 00:10:17,120
 So don't use a program like MATLAB to calculate.

85
00:10:17,120 --> 00:10:18,880
 You have to do it by hand.

86
00:10:18,880 --> 00:10:21,800
 Okay, so yeah, so this is the first question.

87
00:10:21,800 --> 00:10:27,720
 The second question is that actually I asked you to write a short kind of abstract or a

88
00:10:27,720 --> 00:10:29,080
 report, right.

89
00:10:29,080 --> 00:10:38,520
 So the particular abstract or report is centered on generative AI in video signal processing,

90
00:10:38,520 --> 00:10:39,520
 right.

91
00:10:39,520 --> 00:10:42,600
 Generative AI in image of video signal processing.

92
00:10:42,600 --> 00:10:46,680
 Okay, so you'll do some studies yourself, right.

93
00:10:46,680 --> 00:10:50,720
 And then afterwards, you're supposed to write this short report.

94
00:10:50,720 --> 00:10:57,240
 So the report is one page, okay, using time in romance, font 11 and single column, right.

95
00:10:57,240 --> 00:10:59,680
 So I don't expect you to write a very long report.

96
00:10:59,680 --> 00:11:02,080
 Just a short report will do, right.

97
00:11:02,080 --> 00:11:06,160
 If you read up some material, right, sometimes you have some references, right, just include

98
00:11:06,160 --> 00:11:10,600
 the references, no, at, no, as a separate page.

99
00:11:10,600 --> 00:11:13,680
 Okay, so this reference page will not be counted, right.

100
00:11:13,680 --> 00:11:17,920
 So this individual homework assignment, so do not plagiarize and do not use generative

101
00:11:17,920 --> 00:11:18,920
 AI.

102
00:11:18,920 --> 00:11:23,640
 The topic is on generative AI, so don't, don't showcase a skills of generative AI.

103
00:11:23,640 --> 00:11:25,480
 You can use it as a research, right.

104
00:11:25,480 --> 00:11:30,360
 You can, you know, go use it as a research tool, but ultimately when you write, you have

105
00:11:30,360 --> 00:11:32,000
 to write in your own works.

106
00:11:32,000 --> 00:11:36,120
 Yeah, I'm going to do some, you know, try out different combinations of the question

107
00:11:36,120 --> 00:11:37,800
 in the chap GPT.

108
00:11:37,800 --> 00:11:41,800
 So once your answer come out, I'll roughly know, right, or at least I guess I'm sense

109
00:11:41,800 --> 00:11:45,240
 whether you're just copying from, you know, chat GPT directly.

110
00:11:45,240 --> 00:11:50,160
 So long story short, right, don't copy from your friend and don't copy from, you know,

111
00:11:50,160 --> 00:11:52,000
 generative AI, you know, directly.

112
00:11:52,040 --> 00:11:55,360
 Okay, you must understand and write in your own works.

113
00:11:55,920 --> 00:11:59,920
 Okay, so conduct research brainstorming and explain your own thought.

114
00:12:00,320 --> 00:12:05,680
 Right, so this pretty much, okay, first assignment, right, any questions so far?

115
00:12:07,800 --> 00:12:11,680
 Right, so if there's no question, but you want to do the submissions, say, suppose you

116
00:12:11,680 --> 00:12:16,560
 have a complete birth of this exercises and you want to do the submission, it's actually

117
00:12:16,560 --> 00:12:17,280
 quite straightforward.

118
00:12:17,280 --> 00:12:19,800
 You just come to this particular link and you click on it.

119
00:12:20,439 --> 00:12:24,920
 Right, so once you click on it, you will bring you to this particular page here.

120
00:12:25,599 --> 00:12:29,560
 Right, so this page will ask you to create submission, upload the file and add some

121
00:12:29,560 --> 00:12:32,880
 comment, but the only thing you need to do is just simply upload the file.

122
00:12:33,120 --> 00:12:37,160
 So upload one single PDF file that I mentioned to you.

123
00:12:37,520 --> 00:12:41,439
 Okay, so there's two question, question one and question two, right, you can probably

124
00:12:41,439 --> 00:12:42,800
 create a work document.

125
00:12:43,040 --> 00:12:47,959
 Yeah, so for example, question one, we got it, we require you to write some equation.

126
00:12:48,280 --> 00:12:52,400
 So if you find it is easier for you to write on some paper, you can do that.

127
00:12:52,600 --> 00:12:54,920
 And afterwards you can take picture or you can scan it.

128
00:12:55,200 --> 00:12:59,240
 Right, and then afterwards you copy into a work document.

129
00:12:59,520 --> 00:13:03,200
 And then the second question, second part of the questions you can type up.

130
00:13:03,240 --> 00:13:08,080
 So it's in a work document and afterwards you just convert it into the PDF format.

131
00:13:08,440 --> 00:13:11,720
 So I, it doesn't matter which way you use.

132
00:13:11,920 --> 00:13:17,240
 So long as at the end, you can only submit one PDF file, don't submit multiple file, only

133
00:13:17,240 --> 00:13:18,360
 one single PDF file.

134
00:13:18,680 --> 00:13:21,200
 So you just need to click on this upload button.

135
00:13:21,400 --> 00:13:25,200
 You can see that right then you just browse your local file and then you just

136
00:13:25,200 --> 00:13:25,720
 upload it.

137
00:13:26,040 --> 00:13:29,160
 And once you're done, you just click the submit button.

138
00:13:29,800 --> 00:13:35,320
 Okay, so also please make sure that you check your answer, no, uh, carefully and

139
00:13:35,320 --> 00:13:40,200
 also make sure that you check your name, the name of the file, uh, properly because

140
00:13:40,200 --> 00:13:44,480
 there's only certain number of times you can submit because we do want too many

141
00:13:44,480 --> 00:13:45,480
 multiple submission.

142
00:13:45,840 --> 00:13:49,560
 So actually I'm quite, uh, linear already.

143
00:13:49,560 --> 00:13:52,720
 So for each student, you are given three chance to submit.

144
00:13:53,280 --> 00:13:53,640
 Okay.

145
00:13:53,720 --> 00:13:57,160
 So once you use up those three times, there's no more, uh, submission anymore.

146
00:13:57,480 --> 00:13:57,640
 Right.

147
00:13:57,640 --> 00:14:00,280
 So make sure that you check carefully before you do the submission.

148
00:14:01,080 --> 00:14:01,280
 Right.

149
00:14:01,480 --> 00:14:01,720
 Okay.

150
00:14:01,800 --> 00:14:04,680
 Is everyone clear about this assignment?

151
00:14:06,120 --> 00:14:06,320
 All right.

152
00:14:06,320 --> 00:14:06,560
 Okay.

153
00:14:06,560 --> 00:14:06,880
 Good.

154
00:14:06,960 --> 00:14:09,480
 Then we are done with this particular assignment already.

155
00:14:15,480 --> 00:14:16,080
 Okay.

156
00:14:16,080 --> 00:14:42,480
 So next, uh, next topic we're going to cover today is, uh, DCT, district,

157
00:14:42,480 --> 00:14:44,800
 cosine transform, right?

158
00:14:44,800 --> 00:14:46,600
 So, um, what is DCT?

159
00:14:46,640 --> 00:14:48,520
 Actually, there's a few way you can interpret it.

160
00:14:48,760 --> 00:14:54,160
 One way you can interpret is, is just a simply, uh, kind of mathematical operation.

161
00:14:54,440 --> 00:14:54,680
 Yeah.

162
00:14:54,840 --> 00:14:59,080
 So you can interpret this DCT operation is a transformation that involves some

163
00:14:59,080 --> 00:15:01,600
 mathematical mapping or transformation.

164
00:15:01,880 --> 00:15:07,000
 So later on in the lectures, I'll also try to, uh, provide another interpretation

165
00:15:07,000 --> 00:15:11,080
 or intuition on DCT from the basis perspective.

166
00:15:11,600 --> 00:15:11,800
 Right.

167
00:15:11,800 --> 00:15:15,079
 So first of all, let's try to look at, uh, from the mathematical viewpoint.

168
00:15:15,520 --> 00:15:18,640
 How do we perform a DCT or district cosine transform?

169
00:15:18,959 --> 00:15:22,439
 So for example, given a particular, uh, pixel block, right?

170
00:15:22,479 --> 00:15:28,640
 In our context here, this is, uh, either, uh, you know, main matrix or a pixel block here.

171
00:15:28,640 --> 00:15:31,599
 So you have this particular, uh, pixel block, right?

172
00:15:31,599 --> 00:15:32,640
 We call it Sij.

173
00:15:32,839 --> 00:15:34,520
 So the subscript is i and j.

174
00:15:34,959 --> 00:15:35,240
 Okay.

175
00:15:35,240 --> 00:15:39,560
 So this I refer to the number of row and j refer to the number of column.

176
00:15:39,880 --> 00:15:41,599
 So I here and j here.

177
00:15:42,199 --> 00:15:42,400
 Right.

178
00:15:42,400 --> 00:15:42,640
 Okay.

179
00:15:42,640 --> 00:15:47,359
 And then afterwards, when you perform to the DCT, right, what you obtain is SUV.

180
00:15:47,400 --> 00:15:50,920
 So this SUV is known as a DCT transform.

181
00:15:52,199 --> 00:15:53,240
 So it's a transform.

182
00:15:54,240 --> 00:15:54,439
 Right.

183
00:15:54,439 --> 00:15:56,479
 You can see the substrate is you and V.

184
00:15:56,560 --> 00:16:01,000
 So the row now is the index is you, right?

185
00:16:01,040 --> 00:16:04,040
 The column index now is V in the transform index.

186
00:16:04,560 --> 00:16:04,920
 Okay.

187
00:16:05,280 --> 00:16:05,520
 Right.

188
00:16:05,520 --> 00:16:07,839
 So how do we perform this particular transformation?

189
00:16:07,960 --> 00:16:12,400
 You can actually interpret this particular mathematical operation using this formula here.

190
00:16:13,480 --> 00:16:13,680
 Right.

191
00:16:13,680 --> 00:16:17,840
 So if you look at this particular formula in first glance, if this is the first time you

192
00:16:17,840 --> 00:16:22,240
 encountered, it may look a little bit complicated, but actually it's not that much.

193
00:16:22,680 --> 00:16:23,960
 It's not really that complicated.

194
00:16:24,080 --> 00:16:28,520
 Later on, we're going to go through one exercise together using hand and then you will have

195
00:16:28,520 --> 00:16:33,640
 a certain, uh, appreciation and understanding of the, uh, formula here.

196
00:16:33,960 --> 00:16:37,200
 So, but if you look at the first glance of this equations here, you can see, first of

197
00:16:37,200 --> 00:16:39,240
 all, we have this Sij here.

198
00:16:39,480 --> 00:16:40,320
 The entry is here.

199
00:16:40,960 --> 00:16:41,120
 Right.

200
00:16:41,120 --> 00:16:42,440
 So this is the pixel value.

201
00:16:42,880 --> 00:16:46,600
 And afterwards we go through these two, uh, no cost function.

202
00:16:46,680 --> 00:16:48,840
 That's why it's called district cosine transform.

203
00:16:49,440 --> 00:16:49,680
 Okay.

204
00:16:49,680 --> 00:16:53,160
 So it's cosine transform because we're using this particular cost functions here.

205
00:16:53,720 --> 00:16:56,440
 And afterwards you perform a double summation, right?

206
00:16:56,440 --> 00:16:59,400
 Running from I to N is equal to one.

207
00:16:59,440 --> 00:17:05,880
 So in terms of, okay, first, uh, yeah, I, I from one to N plus one, uh, N minus one is

208
00:17:05,880 --> 00:17:10,280
 the number of row and J from zero to M minus one is a number of column here,

209
00:17:10,440 --> 00:17:11,280
 column index.

210
00:17:11,560 --> 00:17:16,160
 So you do a double summation and afterwards you also multiply with these two functions

211
00:17:16,160 --> 00:17:16,360
 here.

212
00:17:16,720 --> 00:17:20,640
 So these two functions here is defined by these expressions here.

213
00:17:21,080 --> 00:17:27,160
 So when the K value is equal to zero, right, then this particular function will take the

214
00:17:27,160 --> 00:17:33,000
 value of one over, uh, you know, square root one over N, take a square root and for

215
00:17:33,000 --> 00:17:36,720
 other values running from N to N, uh, minus one, right?

216
00:17:36,720 --> 00:17:39,280
 This half RK will be taking these particular functions here.

217
00:17:39,640 --> 00:17:44,480
 So in this particular equations here, this big N here referred to the dimensions of the,

218
00:17:44,920 --> 00:17:46,720
 uh, pixel block or image block.

219
00:17:47,760 --> 00:17:47,960
 Right.

220
00:17:48,120 --> 00:17:48,400
 Okay.

221
00:17:51,680 --> 00:17:52,600
 So, right.

222
00:17:52,600 --> 00:17:54,640
 So we have a quick look at this equation.

223
00:17:54,640 --> 00:17:58,960
 As I mentioned later on, we're going to go through one exercise together to see how do

224
00:17:58,960 --> 00:18:02,680
 we, uh, use this formula to, uh, perform this T.

225
00:18:03,880 --> 00:18:04,080
 Right.

226
00:18:04,080 --> 00:18:06,280
 But first, why do we want to perform DCT here?

227
00:18:06,760 --> 00:18:11,960
 So DCT is a very popular transform used in, uh, many transform based image compression.

228
00:18:12,280 --> 00:18:17,800
 So transform based image compression method, as I explained in the previous lecture, is

229
00:18:17,800 --> 00:18:21,080
 a class of method that you take an image, right?

230
00:18:21,080 --> 00:18:21,400
 Okay.

231
00:18:21,680 --> 00:18:27,440
 Typically, but you partition it into numerous pixel block and for each of the pixel block,

232
00:18:27,440 --> 00:18:29,920
 you transform it into the transform domain.

233
00:18:30,640 --> 00:18:35,680
 So the reason why you want to take a pixel block and transform it into a transform domain

234
00:18:36,040 --> 00:18:42,760
 is because the transform CREDCN in the transform domain contains some good property that you

235
00:18:42,760 --> 00:18:45,080
 can exploit to perform compression.

236
00:18:45,320 --> 00:18:51,840
 So that's the high level, uh, explanation that I explained to you in a last lecture.

237
00:18:52,480 --> 00:18:56,160
 So therefore among all these different, so there's many different way you can do this

238
00:18:56,160 --> 00:18:56,920
 transformation.

239
00:18:57,240 --> 00:19:03,560
 So among them, to DDCT is one of the most popular transform use and it's actually used in a

240
00:19:03,560 --> 00:19:05,840
 JPEG compression as well as impact compression.

241
00:19:06,360 --> 00:19:13,320
 So the reason why, specifically the reason why it can, no, it has this good property is

242
00:19:13,320 --> 00:19:18,920
 because it can offer the energy compact, uh, energy compaction for transform CREDCN.

243
00:19:19,400 --> 00:19:21,960
 So if you remember, what's energy compaction?

244
00:19:22,920 --> 00:19:26,840
 So the energy compaction means that, for example, initially if you have a particular

245
00:19:26,840 --> 00:19:28,600
 pixel block here, right?

246
00:19:28,720 --> 00:19:33,280
 So in the original pixel block, you do not know which pixel values are larger.

247
00:19:33,560 --> 00:19:39,160
 So therefore you do not know where the energy is located in a particular given image.

248
00:19:39,400 --> 00:19:44,960
 Because if you think about giving a particular image, energy is defined by the pixel value

249
00:19:44,960 --> 00:19:45,720
 you squared.

250
00:19:46,200 --> 00:19:46,440
 Okay.

251
00:19:46,440 --> 00:19:47,560
 The value is squared.

252
00:19:48,040 --> 00:19:53,159
 So if you think about a general pixel block, for example, N by N pixel block state, 4 by 4

253
00:19:53,720 --> 00:19:55,720
 or 8 by 8 pixel block, right?

254
00:19:55,720 --> 00:20:01,240
 Usually given a typical pixel block, you will not know which pixel value is larger in advance.

255
00:20:01,480 --> 00:20:07,800
 So you do not know in general, given, for example, an N by N pixel block where the energy

256
00:20:07,800 --> 00:20:09,800
 is located in the spatial domain.

257
00:20:10,280 --> 00:20:16,040
 But once you perform the transformation into the transform domain, the energy will be packed

258
00:20:16,120 --> 00:20:18,120
 into a small number of quivicin.

259
00:20:18,520 --> 00:20:18,720
 Right?

260
00:20:18,720 --> 00:20:23,560
 So later on, we are going to see how DCT is able to achieve that.

261
00:20:24,040 --> 00:20:29,520
 But at this stage, just try to understand that DCT has this good property that it can

262
00:20:29,520 --> 00:20:31,560
 perform energy compaction.

263
00:20:31,600 --> 00:20:37,840
 It can take this particular pixel block, once it's transformed into the transform quivicin,

264
00:20:38,159 --> 00:20:41,440
 the energy will be packed into a small number of quivicin.

265
00:20:41,760 --> 00:20:44,800
 That means only a small number of quivicin will have large magnitude.

266
00:20:45,120 --> 00:20:48,280
 The other quivicin will have low magnitude.

267
00:20:48,800 --> 00:20:51,280
 Okay, so that's the first good property of DCT.

268
00:20:52,240 --> 00:20:57,159
 The second good property of DCT is that it can offer redundancy reduction.

269
00:20:57,639 --> 00:20:57,840
 Right?

270
00:20:58,159 --> 00:21:05,200
 So this redundancy reduction actually I explained in the previous lecture.

271
00:21:05,399 --> 00:21:09,879
 So I mentioned that if you look at the original pixel block, if you know this current pixel

272
00:21:09,879 --> 00:21:13,600
 value, do you think you more or less know the pixel value surrounding it?

273
00:21:14,399 --> 00:21:15,600
 Do you know or do not know?

274
00:21:15,840 --> 00:21:19,199
 In the original pixel domain or image domain.

275
00:21:21,159 --> 00:21:24,600
 If you know this pixel value, do you think more or less you know the pixel value around it?

276
00:21:25,439 --> 00:21:25,840
 Yes.

277
00:21:26,120 --> 00:21:27,240
 So what is this property?

278
00:21:27,480 --> 00:21:31,120
 This is known as the spatial redundancy.

279
00:21:31,480 --> 00:21:35,800
 So this spatial redundancy says that if you know this, given a small image neighborhood,

280
00:21:35,840 --> 00:21:38,360
 the pixel value tends to be very similar to each other.

281
00:21:38,879 --> 00:21:42,399
 That means if you know this pixel value, likely you also know the pixel value.

282
00:21:43,360 --> 00:21:44,720
 Pixel value surrounding it.

283
00:21:45,120 --> 00:21:50,680
 And from the compression perspective, this is no good because that means there's lots of redundant

284
00:21:51,680 --> 00:21:54,200
 extra unnecessary information.

285
00:21:54,760 --> 00:21:54,960
 Yeah.

286
00:21:55,160 --> 00:22:00,000
 So therefore, once you have this particular image in the pixel book, in the, we have this

287
00:22:00,520 --> 00:22:04,920
 pixel block in the original image domain, it has lots of redundant information.

288
00:22:05,360 --> 00:22:05,640
 Okay.

289
00:22:05,720 --> 00:22:11,040
 So once we perform the transformation, such as using DCT in your transform quivicin, in your

290
00:22:11,040 --> 00:22:16,600
 transform domain for the transform quivicin, if you know this pixel value, if you know this

291
00:22:16,960 --> 00:22:21,720
 transform quivicin, do you think you know the transform quivicin next to it?

292
00:22:23,080 --> 00:22:29,200
 If you know this DCT quivicin, do you think you know the DCT quivicin next to it?

293
00:22:29,240 --> 00:22:30,879
 Or roughly you can guess what this?

294
00:22:33,480 --> 00:22:35,600
 The answer is actually no.

295
00:22:35,920 --> 00:22:36,120
 Yeah.

296
00:22:36,159 --> 00:22:42,159
 In the transform domain, knowing this DCT quivicin, hardly tell you anything about the DCT quivicin

297
00:22:42,280 --> 00:22:42,679
 around it.

298
00:22:43,040 --> 00:22:47,159
 So this is known as the reductions of the redundancy.

299
00:22:47,560 --> 00:22:50,800
 So why is this good in the compression perspective?

300
00:22:51,280 --> 00:22:56,800
 The reason why it's good in the compression perspective is that you already remove lots of

301
00:22:56,800 --> 00:22:59,719
 redundant information in the transform domain.

302
00:23:00,199 --> 00:23:00,360
 Right.

303
00:23:00,360 --> 00:23:04,639
 So at this stage, I will just make this high level explanation.

304
00:23:04,800 --> 00:23:09,480
 So later on, we are going to go through one or two examples and we will try to explain this

305
00:23:09,480 --> 00:23:12,760
 concept again when we have some concrete example.

306
00:23:12,760 --> 00:23:14,440
 So it's probably easier to understand.

307
00:23:15,800 --> 00:23:15,960
 Right.

308
00:23:15,960 --> 00:23:16,200
 Okay.

309
00:23:16,200 --> 00:23:18,760
 So what are the advantages of using DCT?

310
00:23:19,000 --> 00:23:20,680
 It will give you good compression results.

311
00:23:20,800 --> 00:23:24,960
 That's why many compression standard deploy it.

312
00:23:25,560 --> 00:23:25,800
 Okay.

313
00:23:25,800 --> 00:23:28,560
 The basis functions are fixed and not image dependent.

314
00:23:28,880 --> 00:23:29,080
 Right.

315
00:23:29,080 --> 00:23:32,520
 So this particular basis function at this stage, you may not know what this.

316
00:23:32,560 --> 00:23:37,800
 So later on, we are going to look at the further explanation and then later on, we can come back

317
00:23:37,800 --> 00:23:38,720
 and do look at it.

318
00:23:39,120 --> 00:23:46,000
 But at this stage, just a step it that for DCT, one of the advantages that the basis function is fixed.

319
00:23:46,280 --> 00:23:46,520
 All right.

320
00:23:46,520 --> 00:23:52,440
 So that means you always use the same sets of basis function, no matter what your image is.

321
00:23:52,760 --> 00:23:52,960
 Right.

322
00:23:52,960 --> 00:23:58,080
 So it's fixed and it does not depend on what kind of image you use to perform the compression.

323
00:23:58,520 --> 00:23:58,800
 Okay.

324
00:23:58,800 --> 00:24:01,520
 So later on, we'll explain this a bit more.

325
00:24:01,520 --> 00:24:03,520
 So at this stage, we'll just leave it as it is.

326
00:24:04,240 --> 00:24:12,639
 But the disadvantage of DCT is that the compression is not as effective or as efficient as some other

327
00:24:12,639 --> 00:24:14,320
 transforms such as a KLT.

328
00:24:14,720 --> 00:24:14,920
 Right.

329
00:24:14,920 --> 00:24:21,240
 So KLT is a covenant transform which actually can perform the compression better.

330
00:24:21,760 --> 00:24:25,240
 But of course, KLT also has its own limitation.

331
00:24:25,720 --> 00:24:29,680
 So the main limitations of KLT is that it's image dependent.

332
00:24:30,160 --> 00:24:38,040
 That means depending on what types of images you are using, you have to train different model for

333
00:24:38,040 --> 00:24:39,400
 different types of images.

334
00:24:39,760 --> 00:24:41,720
 So that means it's image dependent.

335
00:24:42,120 --> 00:24:50,000
 That's why no KLT also have a, even though its performance is better, but it suffer from some limitation as well.

336
00:24:50,400 --> 00:24:55,960
 That's why when you talk about the trade off, DCT overall is still better because it does not

337
00:24:55,960 --> 00:24:58,600
 depend on what kind of images you're trying to compress.

338
00:24:58,840 --> 00:24:59,920
 You can always apply it.

339
00:25:02,800 --> 00:25:03,000
 Right.

340
00:25:03,000 --> 00:25:03,320
 Okay.

341
00:25:03,360 --> 00:25:07,320
 So the next thing we're going to explain is no, uh, this legal function.

342
00:25:07,320 --> 00:25:12,920
 So I'm quite sure all of you, when you are young, right, you have played this legal function before.

343
00:25:13,320 --> 00:25:13,560
 Right.

344
00:25:13,560 --> 00:25:19,760
 So the next thing is that we are going to explain this KLT from the perspective of legal function or basis function.

345
00:25:20,080 --> 00:25:27,720
 So the reason why here I call it legal function is that this legal function is like the basis function that we are going to

346
00:25:27,720 --> 00:25:31,840
 introduce later when we try to explain, uh, this DCT.

347
00:25:34,080 --> 00:25:34,320
 Right.

348
00:25:34,320 --> 00:25:34,560
 Okay.

349
00:25:34,560 --> 00:25:38,640
 So let's look at, you know, the relationship between a transform and basis function.

350
00:25:39,120 --> 00:25:39,400
 Right.

351
00:25:39,400 --> 00:25:43,120
 So a transform can always be described as a change of basis function.

352
00:25:43,400 --> 00:25:43,560
 Right.

353
00:25:43,560 --> 00:25:49,720
 So when we are performing, uh, a transformation, for example, given the pixel block, when you perform the

354
00:25:49,760 --> 00:25:59,200
 transformation such as a DCT, right, to obtain the transform, actually it involves a change of the perspective or a

355
00:25:59,200 --> 00:26:00,680
 change of basis function.

356
00:26:01,280 --> 00:26:01,480
 Right.

357
00:26:01,840 --> 00:26:05,000
 So therefore transform can be think of a change of basis function.

358
00:26:05,640 --> 00:26:05,840
 Right.

359
00:26:05,840 --> 00:26:09,320
 So transform involves a change of perspective on the image signal.

360
00:26:09,680 --> 00:26:17,080
 So this, uh, transform or this basis function actually can be also be interpreted as a change of perspective or how you look

361
00:26:17,080 --> 00:26:17,680
 at the signal.

362
00:26:18,240 --> 00:26:18,480
 Okay.

363
00:26:18,880 --> 00:26:24,880
 So the basis function is actually similar to the legal function that I've shown you in the previous slide.

364
00:26:25,200 --> 00:26:25,400
 Okay.

365
00:26:25,400 --> 00:26:27,600
 So we are going to see a little bit more about this.

366
00:26:29,400 --> 00:26:29,600
 Right.

367
00:26:29,600 --> 00:26:29,880
 Okay.

368
00:26:29,960 --> 00:26:37,080
 So before that, now we are going to introduce the basis function or image for four by four DCT.

369
00:26:37,920 --> 00:26:43,600
 So the, when you say four by four DCT, that means the pixel block that we have is a four by four pixel block.

370
00:26:43,960 --> 00:26:45,960
 So we have a four by four pixel block.

371
00:26:46,320 --> 00:26:46,560
 Right.

372
00:26:46,639 --> 00:26:51,879
 Then we'll perform this particular transformation that we have would then be a four by four DCT.

373
00:26:51,879 --> 00:26:53,480
 So you have a four by four pixel block.

374
00:26:53,919 --> 00:26:58,600
 After you perform a four by four DCT, you'll get the four by four transform.

375
00:26:59,639 --> 00:26:59,879
 Right.

376
00:27:00,120 --> 00:27:06,600
 So in order to do this particular transformation, actually it also involves a change of basis function.

377
00:27:06,840 --> 00:27:13,399
 So that's why next we are going to introduce, you know, the basis function for this four by four DCT here.

378
00:27:14,080 --> 00:27:14,280
 Right.

379
00:27:14,280 --> 00:27:20,480
 So these are the sets of basis function or basis image for four by four DCT.

380
00:27:20,840 --> 00:27:29,440
 So this legal, this basis function you can also look at interpret it as if each of this is actually a types of legal function.

381
00:27:29,800 --> 00:27:34,639
 So each of this is a type of legal function, just like what we've seen here.

382
00:27:35,480 --> 00:27:35,760
 Okay.

383
00:27:37,000 --> 00:27:43,080
 So each of this image of functions here is a types of legal function.

384
00:27:43,320 --> 00:27:45,919
 And how do we interpret this legal functions here?

385
00:27:46,320 --> 00:27:46,520
 Right.

386
00:27:46,520 --> 00:27:46,800
 Okay.

387
00:27:46,800 --> 00:27:53,080
 So how we interpret it is that, okay, when the color is white or bright, that means this value is larger.

388
00:27:53,560 --> 00:27:56,960
 When the color is dark or black, the means of value is smaller.

389
00:27:57,320 --> 00:27:57,600
 Okay.

390
00:27:57,720 --> 00:28:07,560
 So now if you look at the first legal function, the first types of legal function that we have or basis function that you have here, you can see it's actually uniform.

391
00:28:07,960 --> 00:28:13,080
 So uniform means that right for this piece of legal function is actually flat.

392
00:28:14,000 --> 00:28:14,280
 Okay.

393
00:28:14,639 --> 00:28:14,800
 Right.

394
00:28:14,800 --> 00:28:20,560
 Actually, this piece of legal functions here, it consists of four by four element here, four by four element.

395
00:28:20,960 --> 00:28:21,240
 Okay.

396
00:28:21,399 --> 00:28:22,879
 Four by four element here.

397
00:28:23,320 --> 00:28:23,560
 Right.

398
00:28:23,560 --> 00:28:31,520
 And when the color is same color, that means this piece of legal function, four by four kind of size of legal function is actually flat.

399
00:28:32,360 --> 00:28:32,600
 Okay.

400
00:28:32,760 --> 00:28:37,120
 So next, these types of legal function here, right, you can see, right.

401
00:28:37,439 --> 00:28:43,679
 If you take a knife and you cut it horizontally, right, this color is brighter than this value is larger.

402
00:28:44,120 --> 00:28:46,879
 This color is darker than this, the value is smaller.

403
00:28:46,879 --> 00:28:55,439
 So imagine if you take a knife and you cut through it horizontally, then actually the profiles of this particular legal function is large and small.

404
00:28:55,959 --> 00:28:56,239
 Okay.

405
00:28:56,439 --> 00:28:57,639
 Large and small.

406
00:28:58,520 --> 00:28:58,719
 Right.

407
00:28:58,719 --> 00:28:58,959
 Okay.

408
00:28:58,959 --> 00:29:06,239
 And then this one, likewise, if you take a knife and you cut horizontally, you can see it's large, small, small, large.

409
00:29:06,679 --> 00:29:06,879
 Okay.

410
00:29:07,360 --> 00:29:12,679
 And afterwards, if you take this one, you cut it is a large, small, large, small.

411
00:29:13,040 --> 00:29:13,280
 All right.

412
00:29:13,439 --> 00:29:19,600
 So you can see that as you move horizontally, right, initially your legal function is flat.

413
00:29:20,120 --> 00:29:20,399
 Okay.

414
00:29:20,719 --> 00:29:25,080
 But the next one that you have now start to change, start to kind of change.

415
00:29:25,520 --> 00:29:25,719
 Right.

416
00:29:25,719 --> 00:29:31,239
 And the more you move in this direction, horizontally, the pattern become faster and faster.

417
00:29:31,600 --> 00:29:31,800
 Okay.

418
00:29:31,800 --> 00:29:33,840
 The fluctuation become faster and faster.

419
00:29:34,280 --> 00:29:43,199
 So therefore this legal function, you can see as you move in the horizontal direction, it has increasing horizontal spatial frequency.

420
00:29:43,520 --> 00:29:51,919
 If you recall in last lecture, we say spatial frequency is in the space based domain, how fast the pixel value change.

421
00:29:52,080 --> 00:29:52,280
 Yeah.

422
00:29:52,639 --> 00:29:54,240
 So therefore this is what we have here.

423
00:29:54,280 --> 00:30:03,320
 As you move it horizontally, you can see initially it's flat, change slowly and then progressively change faster and faster as you move in this direction.

424
00:30:03,840 --> 00:30:07,040
 So likewise, vertically, you can use the same interpretation.

425
00:30:07,080 --> 00:30:08,040
 Initially it's flat.

426
00:30:08,480 --> 00:30:08,760
 Okay.

427
00:30:08,760 --> 00:30:12,360
 Now if you look at this one, you take a knife and you cut it vertically.

428
00:30:12,399 --> 00:30:15,439
 You can see now this part is large, this part small.

429
00:30:15,480 --> 00:30:17,080
 That means it's large and small.

430
00:30:17,520 --> 00:30:17,800
 Okay.

431
00:30:18,320 --> 00:30:22,639
 And then if you take this one, you cut through it is large, small, small, large.

432
00:30:22,919 --> 00:30:23,240
 Okay.

433
00:30:23,639 --> 00:30:27,840
 And then if you take this one, you cut through it is large, small, small, large.

434
00:30:27,840 --> 00:30:40,760
 So that means if you move down this vertically, the legal function that you have initially is flat and then vertically it become initially changed slowly, but progressively change faster and faster.

435
00:30:41,159 --> 00:30:41,439
 Okay.

436
00:30:41,520 --> 00:30:43,679
 So this is the legal function.

437
00:30:43,679 --> 00:30:47,320
 So if you move in this direction, that means it's in a diagonal direction.

438
00:30:47,679 --> 00:30:50,040
 The pattern become changed faster and faster.

439
00:30:50,760 --> 00:30:51,080
 Right.

440
00:30:51,360 --> 00:30:53,199
 So this is the legal function.

441
00:30:54,200 --> 00:31:02,360
 Or more properly, the proper term is called the basis function or the basis image when you are using a four by four DCT.

442
00:31:02,800 --> 00:31:03,040
 Okay.

443
00:31:03,040 --> 00:31:06,840
 So you have 16 different sets of legal function.

444
00:31:07,200 --> 00:31:07,440
 Yeah.

445
00:31:07,880 --> 00:31:11,240
 You have 16 of these different legal functions, 16 different types.

446
00:31:11,600 --> 00:31:11,840
 Okay.

447
00:31:11,840 --> 00:31:13,520
 16 different types of legal function.

448
00:31:14,320 --> 00:31:15,040
 So let me see.

449
00:31:15,040 --> 00:31:17,600
 This 16 different types of legal function.

450
00:31:18,000 --> 00:31:18,240
 Right.

451
00:31:18,440 --> 00:31:23,960
 Each of these legal function is actually has actually four, four by four element like this.

452
00:31:24,560 --> 00:31:24,840
 Okay.

453
00:31:25,000 --> 00:31:28,760
 So that is actually the legal function for DCT.

454
00:31:29,040 --> 00:31:36,160
 So next we are going to see how when we are performing DCT, it involves a change of basis function.

455
00:31:36,240 --> 00:31:36,480
 Right.

456
00:31:36,480 --> 00:31:38,040
 So that's the next thing we're going to do.

457
00:31:39,480 --> 00:31:39,760
 Okay.

458
00:31:39,880 --> 00:31:42,520
 But before that, maybe let me just continue for one more slide.

459
00:31:42,880 --> 00:31:43,200
 Okay.

460
00:31:43,240 --> 00:31:46,680
 So just now the one that we show here is a four by four DCT.

461
00:31:47,120 --> 00:31:47,680
 Transform.

462
00:31:48,000 --> 00:31:56,920
 Now, if we use the, if you try to look at the basis function image for a by a DCT, so a by a DCT means that now, right?

463
00:31:58,000 --> 00:32:02,720
 The original pixel block now is partitioned into eight by eight pixel block.

464
00:32:03,280 --> 00:32:10,120
 So when you're a by a pixel block, when you perform a DCT transform, then it's a eight by eight DCT transform.

465
00:32:10,560 --> 00:32:10,800
 Right.

466
00:32:10,800 --> 00:32:15,280
 And your output will be eight by eight DCT transform crazy.

467
00:32:15,840 --> 00:32:16,160
 Okay.

468
00:32:16,560 --> 00:32:23,360
 And in the process of changing a eight by eight pixel block into an eight by eight transform crazy.

469
00:32:23,520 --> 00:32:27,160
 You will be using this new sets of legal function now.

470
00:32:28,120 --> 00:32:29,760
 So this new sets of legal function.

471
00:32:29,760 --> 00:32:33,440
 Now you can see, actually there are 64 of them.

472
00:32:33,680 --> 00:32:34,000
 Okay.

473
00:32:34,720 --> 00:32:35,280
 Eight by eight.

474
00:32:35,320 --> 00:32:38,080
 So there's 64 different types of legal function.

475
00:32:38,560 --> 00:32:41,440
 So the first legal function that you have here, right?

476
00:32:41,440 --> 00:32:45,320
 You can see if you look at this particular pattern here is the same value.

477
00:32:45,800 --> 00:32:46,600
 It's constant value.

478
00:32:46,600 --> 00:32:49,000
 That means it's actually a flat piece of function.

479
00:32:49,560 --> 00:32:49,720
 Right.

480
00:32:49,720 --> 00:32:51,520
 So your first legal function is very simple.

481
00:32:51,520 --> 00:32:52,600
 It's just a flat piece.

482
00:32:53,080 --> 00:32:55,080
 So the second legal function, right?

483
00:32:55,159 --> 00:32:59,159
 You can see if you take a knife and cut through it, you can see this part is large.

484
00:32:59,200 --> 00:33:00,040
 This part is small.

485
00:33:00,080 --> 00:33:02,320
 So therefore that means it's large and small.

486
00:33:02,919 --> 00:33:03,240
 Okay.

487
00:33:03,639 --> 00:33:05,120
 And then we'll just take one or two more.

488
00:33:05,200 --> 00:33:05,480
 Right.

489
00:33:05,520 --> 00:33:11,399
 If you take this one here, if you cut through it, you can see this is large small, large, so large, small, large.

490
00:33:11,720 --> 00:33:16,760
 So as you move progressively along the horizontal direction, you can see initially it's flat.

491
00:33:17,400 --> 00:33:19,400
 Now afterwards, it changes slowly.

492
00:33:19,560 --> 00:33:23,000
 Now afterwards, it changes faster and changes faster and faster.

493
00:33:23,320 --> 00:33:29,240
 So as you move in this particular direction, you can see the types of legal functions that you have

494
00:33:29,320 --> 00:33:32,760
 actually changed faster and faster in the horizontal direction.

495
00:33:33,720 --> 00:33:34,040
 Okay.

496
00:33:34,280 --> 00:33:37,880
 So by the same token, we can also interpret vertically this way.

497
00:33:38,680 --> 00:33:41,080
 So we'll just go through a few one.

498
00:33:41,560 --> 00:33:41,800
 Right.

499
00:33:41,800 --> 00:33:45,720
 So if you look at this one, we call it vertically, you can see this is large, this region small.

500
00:33:45,720 --> 00:33:47,480
 So it's actually large and small.

501
00:33:48,200 --> 00:33:48,440
 Okay.

502
00:33:48,720 --> 00:33:52,760
 And this particular piece, if you cut through it is large, small, large.

503
00:33:53,080 --> 00:34:01,560
 So as you move down the number, the, this particular row index, you can see the vertical spatial frequency

504
00:34:01,640 --> 00:34:02,840
 initially is flat.

505
00:34:03,440 --> 00:34:07,560
 Change slowly, change faster and change faster and faster.

506
00:34:08,040 --> 00:34:08,360
 Okay.

507
00:34:08,560 --> 00:34:10,520
 So these are the 64.

508
00:34:11,960 --> 00:34:16,280
 Pieces of legal function for 8 by 8 DCT transfer.

509
00:34:16,680 --> 00:34:17,160
 Okay.

510
00:34:17,160 --> 00:34:21,800
 So at this stage, you may not have a good appreciation of what this legal function is.

511
00:34:21,880 --> 00:34:26,280
 So that's what we are trying to explain to you next using an example.

512
00:34:27,160 --> 00:34:27,480
 Right.

513
00:34:27,480 --> 00:34:31,480
 To let you to have a better appreciation of what this basis function is.

514
00:34:42,280 --> 00:34:42,840
 All right.

515
00:34:42,840 --> 00:34:43,240
 Okay.

516
00:34:43,240 --> 00:34:45,720
 So first of all, let's imagine that.

517
00:34:47,720 --> 00:34:48,200
 Right.

518
00:34:48,200 --> 00:34:50,840
 Imagine that suppose, no, right.

519
00:34:50,840 --> 00:34:54,120
 First of all, we'll start with a 4 by 4 pixel block, right?

520
00:34:54,120 --> 00:34:56,440
 Because this is something that is a bit smaller.

521
00:34:56,440 --> 00:35:00,040
 It's easier for you to appreciate and understand.

522
00:35:00,040 --> 00:35:00,520
 Right.

523
00:35:00,520 --> 00:35:04,760
 Suppose we start off with a, no, a 4 by 4 pixel block here.

524
00:35:04,760 --> 00:35:05,480
 So, right.

525
00:35:05,480 --> 00:35:08,280
 So we're going to start with a 4 by 4 pixel block here.

526
00:35:08,440 --> 00:35:10,280
 No, a 4 by 4 pixel block here.

527
00:35:10,280 --> 00:35:11,400
 So, right.

528
00:35:11,400 --> 00:35:11,640
 Okay.

529
00:35:11,640 --> 00:35:16,280
 So this pixel blocks here, you can see, I do not show all the pixel value because I

530
00:35:16,280 --> 00:35:18,040
 don't want it to look too complicated.

531
00:35:18,040 --> 00:35:20,680
 I only show the first few pixel values here.

532
00:35:20,680 --> 00:35:22,600
 So we have a 4 by 4 pixel block.

533
00:35:23,240 --> 00:35:23,480
 Okay.

534
00:35:23,480 --> 00:35:28,280
 And the pixel value at this top corner is actually 2, 1, 3, 4.

535
00:35:28,280 --> 00:35:31,480
 There are some other values somewhere there, but I do not show it.

536
00:35:31,480 --> 00:35:31,800
 All right.

537
00:35:31,800 --> 00:35:35,960
 I only show the top left corner, the 4 pixel values here.

538
00:35:35,960 --> 00:35:36,280
 All right.

539
00:35:36,280 --> 00:35:42,200
 So we have a 4 by 4 pixel block and the top left corner value here is 2, 1, 3, 4.

540
00:35:42,200 --> 00:35:44,840
 There are some other values here, which is not being shown.

541
00:35:45,560 --> 00:35:46,040
 Okay.

542
00:35:46,040 --> 00:35:51,480
 So now the task that I'm going to give it to you now is that, suppose now you are in

543
00:35:52,760 --> 00:35:54,120
 no kindergarten.

544
00:35:54,120 --> 00:35:57,880
 So in a kindergarten, you are given a simple sets of legal functions.

545
00:35:57,880 --> 00:36:02,280
 Just imagine for one moment, you are given a simple sets of legal function.

546
00:36:02,280 --> 00:36:08,440
 These single sets of legal function actually consist of 16 different types of pieces of

547
00:36:08,440 --> 00:36:09,400
 legal function.

548
00:36:09,400 --> 00:36:10,040
 Okay.

549
00:36:10,040 --> 00:36:14,280
 There are 16 different types of pieces of legal function.

550
00:36:14,280 --> 00:36:18,760
 So the first types of legal function that you have here is, looks like this.

551
00:36:18,760 --> 00:36:19,320
 Okay.

552
00:36:19,320 --> 00:36:24,600
 It has a value 1 at this particular corner here and 0 everywhere else.

553
00:36:25,480 --> 00:36:25,800
 Okay.

554
00:36:25,800 --> 00:36:27,240
 Can you visualize it?

555
00:36:28,440 --> 00:36:28,680
 Right.

556
00:36:28,680 --> 00:36:34,040
 So the first types of legal function has this single value at this corner here and the rest of the

557
00:36:35,480 --> 00:36:37,640
 values here, 15 values are all 0.

558
00:36:38,200 --> 00:36:43,560
 So the second types of legal function that you have here, it has a value 1 here at this corner

559
00:36:44,200 --> 00:36:48,680
 and the rest of the values, okay, rest of the 15 values are 0.

560
00:36:48,680 --> 00:36:48,919
 Okay.

561
00:36:48,919 --> 00:36:50,359
 And then there are some others here.

562
00:36:50,359 --> 00:36:56,120
 I do not show it, but now if you move on to the fifth one here, right, this sets of legal

563
00:36:56,120 --> 00:36:59,960
 function has a value 1 here and is 0 everywhere else.

564
00:36:59,960 --> 00:37:00,440
 Okay.

565
00:37:00,440 --> 00:37:05,640
 So these six types of the legal function here, right, it has a value 1 here and the rest are,

566
00:37:05,640 --> 00:37:07,480
 all of them are 0.

567
00:37:07,480 --> 00:37:14,520
 So can you spend one moment and visualize how this legal function looks like?

568
00:37:14,520 --> 00:37:18,279
 First of all, this is the legal function that you have in kindergarten.

569
00:37:18,279 --> 00:37:19,240
 So very similar.

570
00:37:19,240 --> 00:37:20,440
 It's very simple.

571
00:37:20,440 --> 00:37:23,080
 You have 16 of them, right?

572
00:37:23,080 --> 00:37:27,480
 One, two, three, four, one, two, three, four, one, two, three, four, one, two, three, four.

573
00:37:27,480 --> 00:37:30,440
 You have 16 different types of legal function.

574
00:37:30,440 --> 00:37:31,080
 Okay.

575
00:37:31,080 --> 00:37:35,799
 So the first types of legal function that you have has a value 1 at this corner.

576
00:37:35,799 --> 00:37:36,920
 The rest are all 0.

577
00:37:37,880 --> 00:37:41,960
 The second types of legal function here has a value 1 here and the rest are all 0.

578
00:37:41,960 --> 00:37:42,120
 Right.

579
00:37:42,120 --> 00:37:43,160
 There's a third one here.

580
00:37:43,160 --> 00:37:47,480
 You can kind of imagine the third one is having, you know, at the particular position, it's

581
00:37:48,360 --> 00:37:50,200
 1 and the rest is all 0.

582
00:37:50,200 --> 00:37:50,520
 Okay.

583
00:37:50,520 --> 00:37:55,800
 And now you have, if you go through, you come down to the fifth one here, it has a value 1 here

584
00:37:55,800 --> 00:37:57,320
 and the rest are all 0.

585
00:37:57,320 --> 00:38:02,280
 So now can you visualize these 16 different types of legal function?

586
00:38:03,240 --> 00:38:04,200
 You can, right?

587
00:38:04,200 --> 00:38:04,520
 Okay.

588
00:38:04,520 --> 00:38:09,080
 So the now, the task that I want to give it to you now is that, okay, now you understand

589
00:38:09,640 --> 00:38:12,360
 you have these 16 different types of legal function.

590
00:38:12,360 --> 00:38:17,080
 And for each of these types of legal function, you can use as many as you want.

591
00:38:17,080 --> 00:38:17,320
 Okay.

592
00:38:17,320 --> 00:38:19,480
 You can use as many as you want.

593
00:38:19,480 --> 00:38:25,000
 Now the task I'm going to give it to you is that suppose I tell you that, you know, I have a

594
00:38:25,000 --> 00:38:31,960
 particular 4x4 pixel block that looks like this with this two value, with the top value here

595
00:38:31,960 --> 00:38:33,400
 being 2, 1, 3, 4.

596
00:38:33,960 --> 00:38:39,320
 So the task I give it to you now is that, okay, please use the legal function that I

597
00:38:39,320 --> 00:38:44,840
 given you just now and try to stack them together such that you can reconstruct

598
00:38:45,720 --> 00:38:48,200
 this particular 4x4 pixel block.

599
00:38:48,839 --> 00:38:54,040
 Do you all understand the question or the task I asked you to do?

600
00:38:55,080 --> 00:38:55,319
 Right?

601
00:38:55,319 --> 00:38:55,560
 Okay.

602
00:38:55,560 --> 00:38:56,200
 So good.

603
00:38:56,200 --> 00:39:02,680
 If you understand the task I asked you to do now is that, okay, so now we want to reconstruct

604
00:39:02,680 --> 00:39:07,720
 this particular pixel block using these 16 different sets of legal functions.

605
00:39:07,720 --> 00:39:13,960
 So now the question is how many of these types of legal function do I need to use to reconstruct

606
00:39:13,960 --> 00:39:15,160
 this particular pixel block?

607
00:39:16,120 --> 00:39:18,279
 How many of these legal functions do I need to use?

608
00:39:23,240 --> 00:39:25,560
 These types of legal functions here that looks like this.

609
00:39:26,440 --> 00:39:31,480
 How many do I need to use in order to reconstruct this pixel block?

610
00:39:33,879 --> 00:39:35,000
 Two, right?

611
00:39:35,000 --> 00:39:35,640
 Why is it two?

612
00:39:37,160 --> 00:39:38,520
 It's not because I write two here.

613
00:39:38,520 --> 00:39:39,399
 Right?

614
00:39:39,399 --> 00:39:43,480
 You can see it's two because, right, okay, you can see this particular pixel block that we have

615
00:39:43,480 --> 00:39:44,759
 has a value two here, right?

616
00:39:45,560 --> 00:39:45,960
 All right.

617
00:39:45,960 --> 00:39:51,080
 And the only types of legal function that can contribute to this particular positions here

618
00:39:51,080 --> 00:39:52,600
 is actually this type, right?

619
00:39:53,160 --> 00:39:58,759
 So therefore this is the only types of legal function that has a non-zero value at this corner.

620
00:39:59,240 --> 00:39:59,879
 Okay.

621
00:39:59,879 --> 00:40:05,000
 So now if this is a legal function, if you want to get a value of two, that means we need

622
00:40:05,000 --> 00:40:10,120
 two pieces of this kind of legal function such that when we stack on top of it, okay,

623
00:40:10,120 --> 00:40:14,440
 this value will be one plus one, okay, and it will become two, right?

624
00:40:14,520 --> 00:40:15,960
 It's quite simple to understand.

625
00:40:16,520 --> 00:40:20,440
 Next, how many of these types of legal functions is required

626
00:40:21,160 --> 00:40:23,560
 for you to reconstruct this pixel block?

627
00:40:24,600 --> 00:40:25,400
 One, right?

628
00:40:25,400 --> 00:40:27,720
 It's quite, again, quite easy to understand.

629
00:40:27,720 --> 00:40:34,360
 The only types of legal function that is non-zero at this position here is this one.

630
00:40:34,360 --> 00:40:38,680
 So therefore whatever value that is being shown here, you need to use it, okay?

631
00:40:38,680 --> 00:40:39,960
 So it's one pieces.

632
00:40:39,960 --> 00:40:40,120
 Right?

633
00:40:40,120 --> 00:40:41,960
 So the other two, I'll just skip it.

634
00:40:41,960 --> 00:40:44,600
 Now let's look at this the fifth one already.

635
00:40:44,600 --> 00:40:48,840
 So how many types of legal function, this type of legal function is required

636
00:40:48,840 --> 00:40:50,760
 for you to reconstruct this pixel block?

637
00:40:53,000 --> 00:40:53,480
 How many?

638
00:40:58,920 --> 00:40:59,720
 All right.

639
00:40:59,720 --> 00:41:01,560
 I think some of you definitely know.

640
00:41:01,560 --> 00:41:06,040
 Okay, some of you show me a bit shy, just show me three.

641
00:41:06,040 --> 00:41:06,280
 Right?

642
00:41:06,280 --> 00:41:07,560
 Okay, it's three.

643
00:41:07,560 --> 00:41:07,960
 Okay.

644
00:41:07,960 --> 00:41:10,920
 So the reason why it's three is because, right, if you look at this,

645
00:41:10,920 --> 00:41:16,040
 but this position here, this is the only legal function, okay?

646
00:41:16,040 --> 00:41:18,520
 That has non-zero value at this position.

647
00:41:18,520 --> 00:41:21,720
 All the others are zeros at this position.

648
00:41:21,720 --> 00:41:26,200
 So therefore only one that you can use to reconstruct this particular pixel block is this.

649
00:41:26,840 --> 00:41:31,320
 So therefore you need three of these types of legal function to reconstruct this.

650
00:41:31,320 --> 00:41:31,800
 Okay?

651
00:41:31,800 --> 00:41:35,000
 So by the same token, by now you can see already, right?

652
00:41:35,000 --> 00:41:40,440
 How many of these types of legal functions is required to reconstruct this pixel block is actually four.

653
00:41:40,440 --> 00:41:41,160
 Okay?

654
00:41:41,160 --> 00:41:42,920
 Using the same argument.

655
00:41:42,920 --> 00:41:43,160
 Right?

656
00:41:43,160 --> 00:41:43,640
 Okay.

657
00:41:43,640 --> 00:41:48,120
 So this, you can see here, what we have learned is that in kindergarten,

658
00:41:48,120 --> 00:41:52,040
 you have this 16 different types of legal function.

659
00:41:52,600 --> 00:41:53,080
 Right?

660
00:41:53,080 --> 00:41:57,480
 So in order to reconstruct this particular pixel block here, okay?

661
00:41:57,480 --> 00:42:02,520
 This particular pixel block, the numbers of the types, the numbers of legal functions that

662
00:42:02,520 --> 00:42:09,720
 you need for each of these legal functions is simply the pixel values on this four by four

663
00:42:09,720 --> 00:42:10,839
 pixel block.

664
00:42:10,839 --> 00:42:15,799
 So therefore this particular first sets of legal function is actually very intuitive.

665
00:42:15,799 --> 00:42:21,959
 It's, that's why it's known as the kindergarten kind of legal function because it's very intuitive.

666
00:42:21,959 --> 00:42:22,359
 Right?

667
00:42:22,359 --> 00:42:29,080
 With this particular legal function, how many pieces you need for you to reconstruct is simply given by the pixel value.

668
00:42:30,040 --> 00:42:30,520
 Okay?

669
00:42:30,520 --> 00:42:36,040
 So these sets of legal function, one, two, three, four, just now the 16 different sets of legal function,

670
00:42:36,040 --> 00:42:44,520
 these sets of legal function is known as the basis function or the basis image and is the most basic one.

671
00:42:44,520 --> 00:42:45,080
 Okay?

672
00:42:45,080 --> 00:42:50,759
 So therefore you just learn the first sets of basis image or basis function.

673
00:42:50,759 --> 00:42:51,640
 It's very simple.

674
00:42:51,640 --> 00:42:51,880
 Right?

675
00:42:51,880 --> 00:42:53,640
 That's why it's very intuitive.

676
00:42:53,640 --> 00:43:02,120
 So this 16 different types is the first sets of legal function or basis function or basis images you have learned.

677
00:43:02,120 --> 00:43:02,840
 Okay?

678
00:43:02,840 --> 00:43:03,160
 Right?

679
00:43:03,160 --> 00:43:13,319
 So now next we are going to learn another more complicated sets of legal function or basis function or image.

680
00:43:13,319 --> 00:43:17,399
 So what's the second sets of the more complex legal function that we have?

681
00:43:17,399 --> 00:43:25,640
 The second sets of more complex legal function that we have now is the DCT, the DCT basis function or legal function.

682
00:43:25,640 --> 00:43:37,560
 So if you remember, this is the four by four DCT basis function or image or legal function that I've explained to you a short moment ago.

683
00:43:37,560 --> 00:43:43,480
 So you can see for this new set of legal function now is a lot more complicated now because now you're in university.

684
00:43:43,480 --> 00:43:47,240
 So the legal function you're going to play with is a lot more complicated.

685
00:43:47,240 --> 00:43:50,759
 So now you have this second set of these legal functions here.

686
00:43:50,759 --> 00:43:50,920
 Right?

687
00:43:50,920 --> 00:43:54,440
 So if you remember the interpretation, this one means that it's flat.

688
00:43:54,440 --> 00:43:55,240
 Okay?

689
00:43:55,240 --> 00:44:00,040
 This type of legal function means that large and small horizontally.

690
00:44:00,040 --> 00:44:06,359
 And if you move in this direction here, that means it's changing faster and faster horizontally.

691
00:44:06,359 --> 00:44:12,759
 And if you move down this particular direction here, that means your legal function now is changing faster and faster vertically.

692
00:44:12,759 --> 00:44:13,080
 Okay?

693
00:44:13,080 --> 00:44:16,279
 And in this direction is faster and faster diagonally.

694
00:44:16,279 --> 00:44:22,040
 So now imagine that you have these new sets of legal function now, 16 of them.

695
00:44:22,040 --> 00:44:28,600
 And you can use as many of each of these legal function you want to stack them together.

696
00:44:28,600 --> 00:44:30,600
 So the task, what's the new task now?

697
00:44:30,600 --> 00:44:33,720
 The new task is that you are given the same pixel block.

698
00:44:33,720 --> 00:44:36,840
 So you can see that it's the same pixel block as before.

699
00:44:36,840 --> 00:44:42,920
 But right, you are asked, okay, in order to reconstruct this pixel block.

700
00:44:42,920 --> 00:44:43,560
 Okay?

701
00:44:43,560 --> 00:44:45,960
 How many of this legal function?

702
00:44:45,960 --> 00:44:48,040
 How many of this legal function?

703
00:44:48,040 --> 00:44:49,880
 How many of this legal function?

704
00:44:49,880 --> 00:44:51,480
 How many of this legal function?

705
00:44:51,480 --> 00:44:57,240
 Actually, how many of each of this legal function do you need to stack them together,

706
00:44:57,240 --> 00:45:02,600
 such that you can reconstruct this pixel block?

707
00:45:02,600 --> 00:45:02,920
 Okay?

708
00:45:02,920 --> 00:45:05,240
 So that's the question.

709
00:45:05,240 --> 00:45:07,240
 Do you understand the task that you have?

710
00:45:07,240 --> 00:45:07,480
 Yeah?

711
00:45:07,480 --> 00:45:13,160
 So you can see now it's not so simple as your previous kindergarten legal function.

712
00:45:13,160 --> 00:45:13,640
 Right?

713
00:45:13,640 --> 00:45:16,840
 Your legal function now is a lot more complex now.

714
00:45:16,840 --> 00:45:17,720
 Okay?

715
00:45:17,720 --> 00:45:18,920
 So let's see.

716
00:45:18,920 --> 00:45:19,160
 Right?

717
00:45:19,160 --> 00:45:21,399
 We have the same pixel block as before.

718
00:45:21,399 --> 00:45:21,720
 Right?

719
00:45:21,720 --> 00:45:26,440
 Let's say that how many of this legal function, right, this type of legal function that's

720
00:45:26,440 --> 00:45:29,080
 required to reconstruct this pixel block?

721
00:45:29,080 --> 00:45:31,640
 Suppose at first glance, you can't tell, right?

722
00:45:31,640 --> 00:45:32,920
 Because it's very complicated.

723
00:45:32,920 --> 00:45:38,040
 Let's say that the number of this type of legal function that's required for you to

724
00:45:38,040 --> 00:45:42,040
 reconstruct this pixel block, let's call it S00.

725
00:45:42,040 --> 00:45:42,279
 Okay?

726
00:45:42,279 --> 00:45:44,040
 For one moment, let's say it's S00.

727
00:45:44,040 --> 00:45:48,359
 We do not know how to find yet, but let's call it S00.

728
00:45:48,360 --> 00:45:53,160
 And how many of these types of legal function is required to reconstruct this?

729
00:45:53,160 --> 00:45:53,400
 Okay?

730
00:45:53,400 --> 00:45:56,200
 So this here corresponds to this.

731
00:45:56,200 --> 00:45:59,160
 This one here corresponds to this legal function.

732
00:45:59,160 --> 00:46:03,800
 So how many of this legal function is required to reconstruct this?

733
00:46:03,800 --> 00:46:07,240
 Suppose I call S01.

734
00:46:07,240 --> 00:46:07,720
 Okay?

735
00:46:07,720 --> 00:46:11,080
 So by the same token, there's one more here, one more here.

736
00:46:11,080 --> 00:46:12,360
 Next, this one here.

737
00:46:12,360 --> 00:46:16,840
 So how many of these types of legal function is required to reconstruct this?

738
00:46:16,840 --> 00:46:17,160
 Okay?

739
00:46:17,160 --> 00:46:18,760
 So this block here is this.

740
00:46:18,760 --> 00:46:19,000
 Right?

741
00:46:19,000 --> 00:46:22,120
 The number here I call S10 now.

742
00:46:22,120 --> 00:46:22,680
 Okay?

743
00:46:22,680 --> 00:46:24,920
 So this is this legal function here.

744
00:46:24,920 --> 00:46:28,040
 Now it's S11 and so on and so forth.

745
00:46:28,040 --> 00:46:28,760
 Okay?

746
00:46:28,760 --> 00:46:30,520
 So it turned out that, right?

747
00:46:30,520 --> 00:46:39,320
 This number, this, the number of each of this legal function that is required for you to

748
00:46:39,320 --> 00:46:41,480
 reconstruct this pixel block.

749
00:46:41,480 --> 00:46:42,440
 What is this number?

750
00:46:43,800 --> 00:46:44,280
 How?

751
00:46:44,280 --> 00:46:44,920
 Okay.

752
00:46:44,920 --> 00:46:50,120
 So this S00, S01, S02, S10, S11.

753
00:46:50,120 --> 00:46:54,440
 This number here, do you want to take a guess what are all these capabilities here?

754
00:46:58,600 --> 00:46:59,000
 Right?

755
00:46:59,000 --> 00:47:03,720
 So it turned out that the number of this, each of these types of legal function,

756
00:47:05,480 --> 00:47:11,720
 that's required for you to add up, to stack together to reconstruct this particular pixel

757
00:47:11,720 --> 00:47:17,080
 block can be obtained by simply, you know, performing the 2D DCT.

758
00:47:17,720 --> 00:47:24,759
 So therefore, for example, your original pixel block 2134 here, after you perform the 2D DCT,

759
00:47:25,399 --> 00:47:32,359
 right, the DCT coefficient that you have here, this coefficient we call S00,

760
00:47:32,359 --> 00:47:35,879
 this coefficient we call S01 and so on and so forth.

761
00:47:35,879 --> 00:47:41,080
 This coefficient now is S10, this one is S11 and so on and so forth.

762
00:47:41,160 --> 00:47:41,400
 Right?

763
00:47:41,400 --> 00:47:48,680
 So if you take a pixel block, right, 4x4 pixel block, you perform a 4x4 2D DCT, then you are,

764
00:47:49,400 --> 00:47:52,520
 you know, you'll get the 4x4 DCT coefficient.

765
00:47:52,520 --> 00:48:00,520
 So these are the 4x4 DCT coefficient and each of the DCT coefficient, actually behind the

766
00:48:00,520 --> 00:48:07,319
 scene, each of this particular DCT coefficient actually implies how many of this corresponding

767
00:48:08,200 --> 00:48:15,960
 legal function that is required for you to stack together to reconstruct your pixel block.

768
00:48:16,600 --> 00:48:21,480
 Okay, so therefore, this is the second interpretation on performing DCT.

769
00:48:21,480 --> 00:48:26,360
 So you can see now performing DCT, actually the signal that you are dealing with is the same

770
00:48:26,360 --> 00:48:32,680
 signal. Okay, this, the signal or the pixel blocks that you're dealing with is the same pixel block,

771
00:48:32,680 --> 00:48:37,160
 but you are using different sets of legal function to reconstruct it.

772
00:48:37,160 --> 00:48:41,720
 Okay, so in kindergarten, you're using these simple sets of legal functions.

773
00:48:41,720 --> 00:48:46,040
 So this is the first basis function, right, or legal function.

774
00:48:46,040 --> 00:48:51,399
 In university now, you are using these new sets of legal function, right, but the task is still

775
00:48:51,399 --> 00:48:57,480
 the same. So you can see essentially it's the same problem, even a pixel block, you want to use

776
00:48:57,480 --> 00:49:03,480
 these sets of legal function or basis function, or you want to use a more complex sets of legal

777
00:49:03,480 --> 00:49:10,760
 function to represent the same, this pixel block. So that's why this is known as transformation.

778
00:49:10,760 --> 00:49:16,200
 It's a change of basis function. It's a change of perspective on how you represent the signal,

779
00:49:16,760 --> 00:49:22,200
 right? So it's a change of perspective, right, or change of how you represent the signal using

780
00:49:22,200 --> 00:49:28,359
 different legal function or basis function, right? So therefore, this is the second interpretation of

781
00:49:28,919 --> 00:49:35,640
 how we perform DCT, right? But what is important about this, right? So why do we need to have this

782
00:49:35,640 --> 00:49:41,000
 levels of understanding? Because you could just simply interpret it as a mathematical operation.

783
00:49:41,000 --> 00:49:45,160
 So now the next question I want to ask you is that, right, suppose you have these particular

784
00:49:45,240 --> 00:49:51,720
 blocks here, okay? Right? Do you think you need more of these types of legal function

785
00:49:52,600 --> 00:49:59,080
 or more of these type of legal function to reconstruct a typical 4 by 4 pixel block, right?

786
00:49:59,080 --> 00:50:04,600
 So suppose you have a 4 by 4 pixel block here, right? Do you think you need more of these types

787
00:50:04,600 --> 00:50:11,160
 of legal function or do you think you need more of this type of legal function in order to reconstruct

788
00:50:11,160 --> 00:50:16,520
 a typical 4 by 4 pixel block, right? So if you think that you need more of these types of legal

789
00:50:16,520 --> 00:50:21,799
 function, okay, we call it A. If you think that we need more of these types of legal function,

790
00:50:21,799 --> 00:50:31,000
 we call it B. So can I have a show of hand? Who thinks it's A, right? If you think you need more

791
00:50:31,000 --> 00:50:38,279
 of these types of legal function to reconstruct this pixel block, just raise your hand. Let me

792
00:50:38,280 --> 00:50:49,400
 get a few. Probably I only see one, two, very, very few hands, right? If you feel that we need

793
00:50:49,400 --> 00:50:55,560
 more of this type of legal function to build this pixel block, raise your hand. Let me get a few.

794
00:50:56,120 --> 00:51:03,320
 But okay, actually the second one is more. Yeah. Okay, so which one is correct? Actually,

795
00:51:03,320 --> 00:51:09,000
 the answer is A. You need more of this type of legal function than this type of legal function

796
00:51:09,000 --> 00:51:16,600
 to reconstruct a typical 4 by 4 pixel block. But now the question is why? Given a typical 4 by 4

797
00:51:16,600 --> 00:51:23,400
 pixel block, why do we need more of this type of legal function than this type of legal function to

798
00:51:23,400 --> 00:51:45,240
 reconstruct it? Anyone? So the answer actually come down to one of the redundancy that I mentioned

799
00:51:45,240 --> 00:51:52,200
 many times so far, since lecture one until today, I actually repeated quite a couple of times. So

800
00:51:52,919 --> 00:51:56,919
 in image domain, there's one very basic redundancy. What's that?

801
00:52:01,319 --> 00:52:06,279
 What's the redundancy that you feel is maybe relevant to this issue that we are talking about?

802
00:52:12,120 --> 00:52:12,520
 Anyone?

803
00:52:13,240 --> 00:52:22,840
 It's actually the spatial redundancy. Spatial redundancy tells us what. It says that for

804
00:52:23,400 --> 00:52:28,360
 a general image, if you look at small pixel neighbourhood, the pixel values tend to be very

805
00:52:28,360 --> 00:52:36,920
 similar to each other for most image patches. So if given a small image neighbourhood such as a 4

806
00:52:36,920 --> 00:52:42,920
 by 4 pixel block that you have, the pixel values tend to be very similar to each other. If the

807
00:52:42,920 --> 00:52:50,520
 pixel values tend to be very, very similar to each other, that means its frequency is very low or its

808
00:52:50,520 --> 00:52:58,360
 change is very slow, right? It's changed slowly. So if even a typical 4 by 4 pixel block, the pixel

809
00:52:58,360 --> 00:53:04,520
 value changes very slowly, therefore you probably need more of this kind of legal function because

810
00:53:04,520 --> 00:53:11,800
 this kind of legal function corresponds to the legal function which changes slowly, right?

811
00:53:11,800 --> 00:53:16,680
 These are the legal functions which change very quickly. So therefore this is the high level

812
00:53:16,680 --> 00:53:25,880
 intuition. So for a typical 4 by 4 pixel block, usually you need more of this type of legal function

813
00:53:25,880 --> 00:53:30,120
 than this type of legal function to reconstruct it because our pixel value changes slowly.

814
00:53:30,680 --> 00:53:35,000
 So what it means now is that if you need more of this type of legal function than this type of

815
00:53:35,000 --> 00:53:42,520
 legal function, that means the DCT coefficient near this corner here will be larger or smaller.

816
00:53:44,839 --> 00:53:48,759
 The DCT coefficient near this corner here will be large or small,

817
00:53:50,440 --> 00:53:56,279
 will be large, right? Because you need more of this type of legal function, right? If you need

818
00:53:56,280 --> 00:54:03,080
 more of this type of legal function, that means the coefficients here S00, S01, S10, S11 will be

819
00:54:03,080 --> 00:54:11,400
 larger, right? And earlier we have just mentioned that this S00, S01, S11, all this coefficient is

820
00:54:11,400 --> 00:54:17,800
 nothing but your DCT coefficient, okay? So therefore even a typical 4 by 4 pixel block,

821
00:54:18,600 --> 00:54:23,640
 if you need more of this type of legal function, that means the coefficients near this top corner

822
00:54:23,640 --> 00:54:29,000
 will be larger. If the coefficient near this top corner will be larger, right? That means we know

823
00:54:29,000 --> 00:54:35,080
 the DCT coefficient near these values will be larger, okay? And the DCT coefficient near this

824
00:54:35,080 --> 00:54:39,720
 corner will be smaller, okay? In other words, you need less of this type of legal function,

825
00:54:40,279 --> 00:54:45,000
 that means the coefficient near this corner will be smaller, that means the value near this corner

826
00:54:45,000 --> 00:54:52,680
 will be smaller. So now you can see, right, why we have this energy compaction properties of DCT,

827
00:54:52,680 --> 00:54:58,680
 because the DCT coefficient now, even a typical 4 by 4 pixel block, after you perform the DCT

828
00:54:58,680 --> 00:55:04,839
 transform, you can see that the coefficient near this corner will be very large and the coefficient

829
00:55:04,839 --> 00:55:10,680
 near this corner will be very small, right? Because the coefficient near this corner is very large

830
00:55:10,680 --> 00:55:17,640
 and energy is defined as each of the coefficient or each of the pixel value you squared. So now you

831
00:55:17,640 --> 00:55:23,960
 can see now, because these values are large, these values are very small, so now the energy is packed

832
00:55:23,960 --> 00:55:30,279
 to this small number of coefficient. So this is exactly the properties of energy compaction.

833
00:55:30,279 --> 00:55:35,720
 So let me just repeat one more time. If you look at this particular 4 by 4 pixel block, right,

834
00:55:36,359 --> 00:55:40,839
 even a typical 4 by 4 pixel block, do you know which pixel will have large value

835
00:55:41,879 --> 00:55:46,920
 in advance? A typical 4 by 4 pixel block. You do not know which pixel will be large or which

836
00:55:46,920 --> 00:55:54,200
 will be small. That means you do not know where the energy will be distributed, right? But after

837
00:55:54,200 --> 00:56:02,040
 you perform 2 d d c t, you can see that the energy now is packed at this coefficient, right? So if

838
00:56:02,040 --> 00:56:08,680
 the coefficient energy is packed at this coefficient, that means now we can develop some strategy,

839
00:56:09,240 --> 00:56:15,000
 right, to represent this coefficient more effectively, okay? Right? So that means we can

840
00:56:15,000 --> 00:56:21,960
 dedicate more resources for us to help to encode coefficient near this corner, and the coefficient

841
00:56:21,960 --> 00:56:27,800
 near the rest of the corner, because their values are small, so we probably do not have to spare

842
00:56:27,800 --> 00:56:34,280
 as much attention on it. So this is the basic properties of the energy compaction. So therefore,

843
00:56:34,280 --> 00:56:39,960
 these properties of energy compaction, you can explain it quite readily using this change of

844
00:56:39,960 --> 00:56:45,080
 basis function. But if you use a formula just now that we showed, actually it is not immediately

845
00:56:45,080 --> 00:56:50,840
 clear. So that is why one of the advantages of trying to explain this using this basis function

846
00:56:50,840 --> 00:56:57,560
 here, okay? So we have just explained why d c t actually can offer energy compaction

847
00:56:57,560 --> 00:57:03,240
 through this change of basis function now. Okay, the second important properties that we

848
00:57:03,240 --> 00:57:11,479
 mentioned for d c t is we say that it can reduce the redundancy reduction. So what it means is that,

849
00:57:11,479 --> 00:57:17,080
 right? If you look at, for example, this 4x4 pixel block, if you know this pixel value, do you

850
00:57:17,080 --> 00:57:22,439
 know, do you think more or less you know the pixel value around it? I know I asked many, quite a

851
00:57:22,439 --> 00:57:27,080
 number of times already, but I just want to drive home the message so that all of you understand

852
00:57:27,720 --> 00:57:32,840
 what we are saying because we are not just studying about d c t. This concept is actually,

853
00:57:34,680 --> 00:57:41,080
 it's an important concept used in every type of transform, not just d c t. Right? So if you

854
00:57:41,080 --> 00:57:45,720
 know this particular pixel value, do you think you more or less know the pixel value around it?

855
00:57:47,560 --> 00:57:53,799
 Yes, right? Okay. So this is due to spatial redundancy. So, and from the compression perspective,

856
00:57:53,800 --> 00:58:00,200
 this is not good. From the compression perspective, this is not good because you have lots of redundant,

857
00:58:00,200 --> 00:58:06,040
 extra unnecessary information that exists among your pixel value. Right? And we need to remove

858
00:58:06,760 --> 00:58:12,520
 this redundancy. So now after you perform the transformation, okay, you have all this different

859
00:58:12,520 --> 00:58:17,880
 d c t coefficient now. So the same question now is that if you know this d c t coefficient,

860
00:58:17,960 --> 00:58:21,240
 do you think you know the d c t coefficient around it?

861
00:58:23,560 --> 00:58:27,640
 No, right? So I hope you get the gist of what I'm trying to say. Right?

862
00:58:27,640 --> 00:58:32,920
 In after you perform d c t, right, knowing this particular d c t coefficient doesn't tell you

863
00:58:32,920 --> 00:58:39,080
 much about the d c t coefficient around it. And this is good from the compression perspective

864
00:58:39,080 --> 00:58:45,640
 because you have removed a lot of the extra unnecessary redundant information. If there's

865
00:58:45,640 --> 00:58:49,400
 still some redundant information, that means you should continue to remove it. But after you

866
00:58:49,400 --> 00:58:54,839
 perform the transformation, once it's in the transform domain, okay, knowing this coefficient

867
00:58:54,839 --> 00:58:59,000
 doesn't tell you much about the coefficient next to it. That means you have removed a lot of

868
00:58:59,000 --> 00:59:05,720
 an extra unnecessary information and you have removed the redundancy. Okay? Right? Okay. So I

869
00:59:05,720 --> 00:59:09,960
 know that we have spent quite a fair bit of time explaining about this, but this is actually,

870
00:59:09,960 --> 00:59:15,000
 as I mentioned, if you are starting many different types of transform, not just for d c t,

871
00:59:15,000 --> 00:59:19,720
 for d f t, you know, discrete Fourier transform, discrete wavelet transform,

872
00:59:19,720 --> 00:59:22,680
 you know, for many different types of transform, actually the basic

873
00:59:23,880 --> 00:59:27,960
 concept behind is the same. It says that you are using different sets of

874
00:59:27,960 --> 00:59:32,200
 this basis function or legal function now. So if you can understand this particular point,

875
00:59:32,200 --> 00:59:40,360
 that means you have a good or at least learn something quite useful today. Right?

876
00:59:45,960 --> 00:59:55,720
 Okay. So now we are ready to do one exercise now. Okay. So this exercise says that, huh?

877
00:59:56,360 --> 01:00:03,240
 Okay. Right. Two d d c t of an n by n data matrix is given by this equation, right? So this is

878
01:00:03,240 --> 01:00:10,920
 actually what I've shown you earlier on, right, in the previous slides. And it says that, okay,

879
01:00:11,000 --> 01:00:15,400
 use this equation to calculate the two d d c of the following four by four pixel block.

880
01:00:16,520 --> 01:00:22,760
 Right? So, yeah, I know that I've not really explained the detail exactly how to calculate,

881
01:00:22,760 --> 01:00:28,360
 but just, you know, try to see, right, you can think about how we can manipulate this

882
01:00:28,360 --> 01:00:32,520
 particular equation to solve this problem for one moment. Yeah. And then we'll try to go through

883
01:00:32,520 --> 01:00:38,200
 the answer together shortly. So I'll give you just one moment to think about it. And afterwards,

884
01:00:38,200 --> 01:00:50,040
 I'll go through the answer together.

885
01:01:08,200 --> 01:01:18,040
 Okay.

886
01:01:38,200 --> 01:01:48,040
 Okay.

887
01:02:08,200 --> 01:02:35,560
 So, yeah, well, if you have not learned about this before, this will look, you know, at first

888
01:02:35,880 --> 01:02:41,080
 quite daunting, right? But actually, there's a systematic way to solve it. So for this,

889
01:02:41,720 --> 01:02:46,120
 you know, how to find the two d d c t, we are going to introduce two different approaches

890
01:02:46,120 --> 01:02:51,880
 of it. So the first approach that we are going to show is this in this exercise here. Right? So

891
01:02:52,440 --> 01:02:57,160
 before that, let me just quickly show you the

892
01:02:57,720 --> 01:03:07,960
 right. Okay. So let me just try to go through with you the, you know, the early step to solve

893
01:03:07,960 --> 01:03:14,520
 this particular problem. Right? Okay. So in order to, again, there's no need for you to,

894
01:03:15,319 --> 01:03:20,520
 you know, download or copy this answer, I'll make it available tomorrow. Right? So after tomorrow,

895
01:03:20,520 --> 01:03:27,240
 you can download it. Right? Okay. So first of all, we have this particular given formula.

896
01:03:27,240 --> 01:03:32,280
 All right? So this two d d c t. So the first thing that we look at is that if you look at this

897
01:03:32,280 --> 01:03:38,680
 particular first inner summation here is respect to this index j. So though, therefore those terms

898
01:03:38,680 --> 01:03:44,600
 that is independent of j, we can bring it out of the inner summation. So we bring up this term,

899
01:03:44,600 --> 01:03:51,400
 which is independent of j outside of this inner summation. Right? So we bring it out here. Okay.

900
01:03:51,400 --> 01:03:57,799
 And then this particular r, r, v here, actually we can bring it inward to this particular some

901
01:03:57,799 --> 01:04:03,480
 outer summation. So in other, we can just simply rewrite a little bit to obtain this particular

902
01:04:03,480 --> 01:04:08,360
 form here. So this form is obtained from this form here. So now if you look at this particular

903
01:04:08,360 --> 01:04:13,880
 inner term here, so this particular inner term here, you can see that is that okay, you have the

904
01:04:13,880 --> 01:04:21,240
 coefficient, you multiply with this particular costum, and you sum it up with the index j running

905
01:04:21,240 --> 01:04:28,920
 from zero to n minus one. So previously, if you remember j in i index is row index, j is the

906
01:04:28,920 --> 01:04:34,200
 column index. So if you sum it from zero to n minus one, that means actually you're performing

907
01:04:34,200 --> 01:04:42,120
 this particular computation row by row. Okay. So this particular equation is known as the

908
01:04:42,120 --> 01:04:49,560
 1d dct. So therefore this particular term here, you can interpret as performing 1d dct row by row.

909
01:04:50,279 --> 01:04:55,799
 Okay. So if you, given a particular pixel block, if you perform the 1d dct row by row,

910
01:04:55,799 --> 01:05:02,520
 okay, then the intermediate result that you obtain, suppose we call fiv here. Okay. You can see the

911
01:05:02,520 --> 01:05:08,600
 index now has been changed in terms of j index now has been changing to v because we've operated 1d

912
01:05:08,600 --> 01:05:15,960
 dct row by row now. Okay. So this particular result, suppose we intermediate result, we call fiv,

913
01:05:16,759 --> 01:05:22,440
 then now this term here can be represented as fiv now. So now if you look at this particular

914
01:05:22,440 --> 01:05:28,040
 term again, you can see that this particular term, for those of you who have studied dct before,

915
01:05:28,040 --> 01:05:34,520
 you'll recognize that this actually 1d dct column by column. Right. So again, you have this intermediate

916
01:05:34,520 --> 01:05:42,360
 result, you multiply with this particular custom, you sum it from zero to n minus one. Right. i is the

917
01:05:43,080 --> 01:05:49,240
 this particular row index. So that means you're performing your 1d dct column by column now.

918
01:05:49,240 --> 01:05:56,200
 Right. So if you do that, then this result will be, you know, what you obtain will be the 2d dct.

919
01:05:56,200 --> 01:06:04,520
 So in short, therefore, a 2d dct can be computed using a two-stage 1d dct. So the first stage is

920
01:06:04,520 --> 01:06:12,520
 performing this. Right. So the first stage is that performing the 1d dct row by row. Okay. And the

921
01:06:12,520 --> 01:06:18,600
 second stage is performing the 1d dct column by column. So therefore, when you want to calculate

922
01:06:18,600 --> 01:06:24,279
 a 2d dct, of course, there are many different way you can do it. This one of the most classical

923
01:06:24,280 --> 01:06:32,520
 way of doing the 1d dct through a two-stage 1d dct decomposition here. Right. So if you look at

924
01:06:32,520 --> 01:06:37,960
 this particular process here, essentially it's equivalent to this. Right. So you can see,

925
01:06:37,960 --> 01:06:46,040
 suppose you have, you know, fix a block, you want to calculate, right, is, you want to calculate

926
01:06:46,040 --> 01:06:53,400
 is 2d dct. So the index is i and j. i is the row index. j is the column index. Right. In the dct

927
01:06:53,480 --> 01:07:00,280
 coefficient here, right, the row index is u, the column index is v. Right. So this is a 2d dct.

928
01:07:00,280 --> 01:07:07,480
 So just now the process that we mentioned just now to decompose a 2d dct into two 1-stage 1d

929
01:07:07,480 --> 01:07:16,360
 dct is that, first of all, for each of this particular row, okay, you perform 1d dct row by row.

930
01:07:16,360 --> 01:07:21,960
 If you do that, then you'll obtain your intermediate result, which is we call FIV. Yeah.

931
01:07:21,960 --> 01:07:26,440
 So afterwards, right, once you take this, you obtain this intermediate result, you perform the

932
01:07:26,440 --> 01:07:35,080
 1d dct column by column, then you obtain your final 2d dct. So that's essentially the main idea of

933
01:07:35,080 --> 01:07:45,240
 what we need to do. Okay. So let's continue. Right. So these two equations here is essentially

934
01:07:45,240 --> 01:07:50,440
 shown in just now the slide. You perform 1d dct row by row, you get the intermediate result,

935
01:07:50,440 --> 01:07:56,680
 and afterwards you perform 1d dct column by column. Right. So that's what we will do here.

936
01:07:56,680 --> 01:08:01,800
 Right. Okay. So now let's look at this particular, so these are the two equations here. Right. And

937
01:08:01,800 --> 01:08:07,800
 in these equations here, n refer to the size of the pixel block. Right. So in our example,

938
01:08:07,800 --> 01:08:13,960
 it's a 4 by 4 pixel block. That means this big n is equal to 4. Right. So therefore, right,

939
01:08:13,960 --> 01:08:19,720
 we substitute for this a 4 by 4 2d dct. We let n be equal to 4. We substitute into these two

940
01:08:19,720 --> 01:08:26,040
 equations. So therefore, now you can see for the 4 by 4 2d dct, the first stage now, when you

941
01:08:26,040 --> 01:08:31,960
 substitute n is equal to 4 into this formula, you'll be able to obtain this. Okay. And when

942
01:08:31,960 --> 01:08:36,920
 you substitute n is equal to 4 into the second formula, this is what you have. So now it can

943
01:08:36,920 --> 01:08:42,600
 be reduced more concretely into these two equations now. Okay. So let's continue. So now

944
01:08:43,560 --> 01:08:49,320
 we have these two, you know, this particular pixel block here. Right. So this particular pixel

945
01:08:49,319 --> 01:08:54,120
 block, you can see it's 4 by 4 pixel block here. Right. So now if you want to perform 1d dct

946
01:08:55,160 --> 01:09:00,920
 row by row in the first stage, so the first stage is to perform the 1d dc row by row. So,

947
01:09:00,920 --> 01:09:06,679
 right, you can see the first row. Okay. The index that we use here, the index is actually starting

948
01:09:06,679 --> 01:09:11,960
 from zero. So therefore, for example, the row and the column index is zero, one, two, three.

949
01:09:12,519 --> 01:09:18,439
 The column index is also zero, one, two, three. So the index start from zero. Okay. So now we can

950
01:09:18,439 --> 01:09:22,919
 see the first row and the fourth row here because it's all zero. So after you perform

951
01:09:23,960 --> 01:09:29,479
 1d dct is also zero. Right. So those two rows, then you don't have to do any calculation.

952
01:09:29,479 --> 01:09:33,000
 Yeah. But the second row that you have, so you can see the first and fourth row,

953
01:09:33,639 --> 01:09:40,040
 if you perform the 1d dct, right, you can see they're all zero. Next, if you look at the second and

954
01:09:40,040 --> 01:09:45,960
 the third row, so let's look at, for example, the second row first. So if you look at the second row

955
01:09:45,960 --> 01:09:51,720
 here, right, so you can see the row index is actually one. Okay. Because we start with a zero

956
01:09:51,720 --> 01:09:58,120
 index here. So the second row, S1J is zero, 10, 10, zero, which is this particular row here.

957
01:09:59,320 --> 01:10:06,360
 This particular row here. So now we'll substitute this particular zero, 10, 10, zero into this

958
01:10:06,360 --> 01:10:11,720
 equations here. So we'll expand out this particular summation, but we'll expand out this summation.

959
01:10:11,720 --> 01:10:17,000
 So if you expand out the summations here, right, you'll see that this is what you have. You can go

960
01:10:17,000 --> 01:10:24,600
 back and verify. Right. So if you expand out this particular summations here, right, and you

961
01:10:24,600 --> 01:10:30,360
 substitute in just now, this rows of value, this is what you're going to obtain here. Okay.

962
01:10:31,400 --> 01:10:38,760
 The first stage 1d dct. Okay. So now this is the formula. So the next thing is that, right,

963
01:10:38,760 --> 01:10:46,440
 okay. So this is general 1d dct for the second row. So in this formula here, we can see that V,

964
01:10:47,000 --> 01:10:53,560
 right, is actually the column index. And this V value can run from zero, one, two, three.

965
01:10:53,560 --> 01:10:59,480
 So therefore we need to substitute in different values of V into this formula. So if you let V be

966
01:10:59,480 --> 01:11:05,400
 equal to zero, the substituted in, you're simplified, your C is 10. Right. Okay. And afterwards you let

967
01:11:05,400 --> 01:11:11,000
 V be equal to one, V be equal to two, V be equal to three. If you plug it into this particular

968
01:11:11,000 --> 01:11:19,160
 expression and simplify, you'll see that its value is 10, zero, minus 10, zero. So therefore your

969
01:11:19,160 --> 01:11:27,400
 result of performing 1d dct for the second row after you have done the calculation is 10, zero,

970
01:11:27,400 --> 01:11:34,920
 minus 10, zero. Okay. So we have actually obtained the 1d dct for this particular

971
01:11:36,360 --> 01:11:40,920
 second row already. So because third row is the same as the second row, so therefore

972
01:11:41,879 --> 01:11:47,559
 you will expect that the third row will have the same 1d dct as the second row. So you can just

973
01:11:47,559 --> 01:11:55,000
 write down the answer directly. So therefore after you have performed the 1d dct, no, first stage

974
01:11:55,000 --> 01:12:02,440
 1d dct row by row, this is the intermediate result that you obtained. Okay. FIV. So once you obtain

975
01:12:02,440 --> 01:12:10,920
 this 1d dct, right, after first stage, what is the second stage? The second stage is you have to

976
01:12:10,920 --> 01:12:18,120
 perform the 1d dct column by column. Right. Okay. Of course, this is a simple example. Right. So if

977
01:12:18,120 --> 01:12:24,280
 you look at now, this particular column here, zero, 10, 10, zero. So this zero, 10, 10, zero

978
01:12:25,480 --> 01:12:31,240
 is just like the first row that we have just now, zero, 10. I said this zero, 10, 10, zero is row.

979
01:12:31,240 --> 01:12:38,680
 Okay. In this case here, zero, 10, 10, zero is column, but you have already found the 1d dct

980
01:12:38,680 --> 01:12:45,640
 just now for this row. Okay. And this is the result. So if you are now interpreting it column-wise,

981
01:12:45,640 --> 01:12:51,800
 you expect you'll be obtaining the same 1d dct in a column direction. So therefore,

982
01:12:51,800 --> 01:12:57,320
 without even doing the calculation, yeah, you can see that the 1d dct for this column now,

983
01:12:57,960 --> 01:13:03,720
 okay, would be, okay. So because the first column here is this value, all right. And just now from

984
01:13:03,720 --> 01:13:11,160
 our row-wise operation, you can see when the row is this, this is this 1d dct. Now your column

985
01:13:11,960 --> 01:13:17,080
 is the same as your row structure. The value is the same. So if you perform the 1d dct, you

986
01:13:17,080 --> 01:13:22,599
 will expect it to have the same result as before. Okay. Which is, you can see just now the result is

987
01:13:22,599 --> 01:13:28,599
 10, zero, minus 10, zero. So in this case here now is 10, zero, minus 10, zero, but except in

988
01:13:28,599 --> 01:13:36,280
 column-wise now. Okay. So now you have obtained the 1d dct for this. And next the 1d dct for this.

989
01:13:36,360 --> 01:13:41,880
 So the 1d dct for this, if you look at column-wise, this column and this column only differ by a

990
01:13:41,880 --> 01:13:49,320
 negative sign. So therefore, you expect the 1d dct column-wise would have a negative sign in front.

991
01:13:49,880 --> 01:13:55,480
 Okay. So this is the first column. This is the third column. You'll notice that differ by a negative

992
01:13:55,480 --> 01:14:02,200
 sign. So therefore, you expect the resultant 1d dct to have a negative sign in front as well. So this

993
01:14:02,200 --> 01:14:08,679
 become minus 10. This become 10. Okay. So now for the second and the fourth column, because this

994
01:14:08,679 --> 01:14:15,880
 are all zero. So the output is also zero after 1d dct. So therefore, by completing it, you'll be able

995
01:14:15,880 --> 01:14:22,440
 to write down the 1d dct for the first column, for the third column, and the other two columns is zero.

996
01:14:22,440 --> 01:14:29,400
 So this is the 1d dct after, sorry, the 2d dct already. Okay. Because you perform the 1d dct

997
01:14:29,960 --> 01:14:33,000
 row-wise and afterwards column-wise.

998
01:14:40,360 --> 01:14:48,519
 All right. Okay. So let's continue. Right. Okay. There's actually a part b. So part b says that

999
01:14:48,519 --> 01:14:54,519
 based on your result in part a, calculate the 2d dct of the following pixel block b.

1000
01:14:54,840 --> 01:15:02,840
 Right. So this is the pixel block b. It asked you to calculate the 2d dct for this particular

1001
01:15:02,840 --> 01:15:08,120
 pixel block b. Right. So I'll give you a bit of time to think about it and then we'll go through the

1002
01:15:08,120 --> 01:15:17,640
 answers together. So let me also put the answers side by side.

1003
01:15:25,160 --> 01:15:49,160
 Okay. So just now for part a, this is 2d dct. Right. So for part b, right, you are supposed to make

1004
01:15:49,160 --> 01:15:56,519
 use of your result in the earlier part to found is the 2d dct. Right. For this pixel block.

1005
01:15:56,519 --> 01:16:06,280
 So I'll give you a bit of time to think about it and then we'll go through the answers together.

1006
01:16:19,160 --> 01:16:30,280
 Okay.

1007
01:16:49,160 --> 01:17:00,280
 Okay.

1008
01:17:19,160 --> 01:17:30,280
 Okay.

1009
01:17:49,160 --> 01:18:00,280
 Okay.

1010
01:18:19,160 --> 01:18:30,280
 Okay.

1011
01:18:50,040 --> 01:19:04,280
 Okay. So anyone has any suggestion? How do we solve it?

1012
01:19:05,000 --> 01:19:15,400
 Okay.

1013
01:19:17,960 --> 01:19:25,400
 Okay. So if you compare this pixel block b and this pixel block a, what is the relationship between them?

1014
01:19:26,120 --> 01:19:38,519
 Okay. Can we express b in terms of some simple expressions of a?

1015
01:19:38,520 --> 01:19:49,640
 Okay.

1016
01:19:50,680 --> 01:20:00,440
 Can we? Yes. You take the a and after works. So first of all, you have a uniform pixel block.

1017
01:20:00,440 --> 01:20:07,480
 Right. And this uniform pixel block should be 20 throughout. Right.

1018
01:20:07,480 --> 01:20:15,160
 Okay. And then after works the minus half of a. Right. Okay. So that's actually exactly right.

1019
01:20:16,759 --> 01:20:22,360
 So therefore, right, in order to solve this problem, you can observe that b is actually

1020
01:20:22,360 --> 01:20:28,120
 consists of this pixel blocks of all 20 minus half a. Right. So you can just observe it quite

1021
01:20:28,120 --> 01:20:36,120
 readily. So now if you want to find the 2d dct of b, so the 2d dct of b is a 2d dct of this

1022
01:20:36,120 --> 01:20:45,960
 pixel block minus the 2d dct of this. Okay. So next, what is the 2d dct of this particular

1023
01:20:45,960 --> 01:20:51,400
 pixel block? So this is the question. What is the 2d dct of this particular pixel block?

1024
01:20:51,400 --> 01:21:01,240
 So in order to answer the questions, right.

1025
01:21:06,120 --> 01:21:19,800
 Okay. So in order to answer the questions, we will need to look at, okay, for example,

1026
01:21:19,800 --> 01:21:29,800
 if you consider a 1d dct and this 1d dct right, consists of values of 10, 10, 10, 10. So this

1027
01:21:29,880 --> 01:21:37,160
 sequence of values of 10, 10, 10, 10, if you perform the 1d dct, 1d dct, if the values are all

1028
01:21:37,160 --> 01:21:44,280
 the same 10, 10, 10, 10, when you perform the 1d dct, the first coefficient that we have, we call

1029
01:21:44,280 --> 01:21:51,480
 it the dc coefficient, dc coefficient. The rest of the coefficients that we have, we call it the ac

1030
01:21:51,959 --> 01:21:58,440
 coefficient, right, ac coefficient. So when your values are constant, right, then is ac

1031
01:21:58,440 --> 01:22:06,599
 coefficients are all 0 because ac, this word ac, come from this term alternating current. I think

1032
01:22:07,160 --> 01:22:14,599
 many of you have studied in your, you know, in your bachelor degree before, right. So alternating

1033
01:22:14,599 --> 01:22:20,679
 current means it's fluctuating. So if all your values are the same, that means all the rest of

1034
01:22:20,680 --> 01:22:26,680
 the ac values are 0. So these are the properties of dct. Without doing any calculation, you will

1035
01:22:26,680 --> 01:22:32,120
 know right away, okay. If all the values are the same, that means it's constant, there's no change,

1036
01:22:32,120 --> 01:22:39,240
 then we can write down right away the rest of the ac coefficients are 0. So on top of that,

1037
01:22:39,800 --> 01:22:45,640
 okay, this coefficient here is known as a dc coefficient. So dc is a direct current. So the

1038
01:22:45,640 --> 01:22:53,560
 dc coefficients here is actually the double, the average intensity or brightness of this particular

1039
01:22:53,560 --> 01:23:02,200
 row here. So the average values here is 10, right. So double is 20. So therefore the dc coefficient

1040
01:23:02,200 --> 01:23:11,800
 is double the average, okay, intensity or pixel values of this value here. So the average here,

1041
01:23:11,800 --> 01:23:17,640
 you can see quite clearly is 10. So when you double it is 20. So therefore these are basic

1042
01:23:17,640 --> 01:23:23,800
 properties of the dct. If you have a constant value here, we know the ac coefficients are 0.

1043
01:23:23,800 --> 01:23:30,120
 We know the dc coefficients is double the average, okay. So therefore write this one, we can write

1044
01:23:30,120 --> 01:23:37,160
 down as 20, 0, 0, 0. So now let's look at this particular pixel block now. So if you do the one

1045
01:23:37,160 --> 01:23:45,400
 dct for this particular row here, 20, 20, 20, 20, what do you think will be the resulting one dct?

1046
01:23:47,720 --> 01:23:54,360
 If you take 20, 20, 20, 20, right, this row, we take this one dct, what will be the value?

1047
01:23:55,320 --> 01:24:06,200
 It will be 40, 0, 0, 0, right. So therefore if you perform this in the first stage,

1048
01:24:06,200 --> 01:24:11,639
 first stage which is we process it row by row, we process it row by row, this row will give you

1049
01:24:11,639 --> 01:24:19,559
 the one dct will be 40, 0, 0, 0, correct. Second row will also be 40, 0, 0, 0. Third row 40, 0, 0.

1050
01:24:19,640 --> 01:24:27,320
 Last row 40, 0, 0, 0. So now after the first stage, okay, only your first column is 40,

1051
01:24:27,320 --> 01:24:32,760
 the rest are all 0, correct. So what's the second stage? Second stage is you need to

1052
01:24:32,760 --> 01:24:40,680
 perform the one dct column by column. So the first column is 40, 40, 40, 40. So after you perform

1053
01:24:40,680 --> 01:24:50,520
 the one dct column wise will become 80, 0, 0, 0. So the first column now will be 80, 0, 0, 0.

1054
01:24:50,520 --> 01:24:57,080
 So the rest of the three columns we already see earlier, they are all 0. So therefore performing

1055
01:24:57,080 --> 01:25:03,880
 one dct will also be 0. So therefore by looking at this pixel block, you can write down the two dct

1056
01:25:03,880 --> 01:25:08,920
 directly, okay. We can write down the answer directly, okay. And a is already obtained,

1057
01:25:08,920 --> 01:25:14,040
 the one dct from the previous questions already. So therefore doing some simple manipulation,

1058
01:25:14,040 --> 01:25:23,400
 you'll see this is the result, right? Okay. So this is the, yeah, so this is the one d,

1059
01:25:24,040 --> 01:25:29,000
 okay. So for this exercise, for this particular exercise here,

1060
01:25:29,000 --> 01:25:44,680
 all right, okay. All right, so I think, yeah, probably this is a good time to take a short

1061
01:25:44,680 --> 01:25:52,040
 break. But before the break actually, yeah, so the other day, last week my wife actually

1062
01:25:52,040 --> 01:25:58,600
 come to me and yeah, she say that she saw lots of this videos on toying and, you know, the video,

1063
01:25:58,600 --> 01:26:09,640
 he said, she told me that she know how to beat this particular monster already. So I think by now

1064
01:26:09,640 --> 01:26:15,000
 all of you should know, right? And according to what I heard, no, this particular monster kill many

1065
01:26:15,960 --> 01:26:22,440
 new players and many new players spend hours to try to beat this particular big head monster. So

1066
01:26:22,440 --> 01:26:31,240
 anyway, yeah, let me just play this. Okay, we will see the, in case some of you still do not know.

1067
01:27:15,160 --> 01:27:34,760
 All right. Okay, I will not play the whole video, right? But I hope my wife really know what she

1068
01:27:35,720 --> 01:27:46,280
 said. Okay, so the next one is that, right? So just about half an hour or one hour ago before

1069
01:27:46,280 --> 01:27:52,760
 the lecture, I actually use a chat GPT, the Dali Tree, no, to try to generate this, the

1070
01:27:52,760 --> 01:27:58,600
 Wukong in NTU, right? So this is what Wukong in NTU looks like, right, according to the interpretation.

1071
01:27:58,600 --> 01:28:10,440
 Right, okay, so we think a short break will come back at 8.15, right? Let's come back at 8.15.

1072
01:45:58,840 --> 01:46:25,000
 Okay, so let's continue. So in the first half of the lecture, we explain about the basic definitions

1073
01:46:25,080 --> 01:46:34,680
 of the 2-DDCT formula, and then we show how we can perform 2-DDCT by changing it into a 2-stage 1-DDCT.

1074
01:46:34,680 --> 01:46:40,280
 So there's actually an alternative way of calculating the 2-DDCT, which is through the

1075
01:46:40,280 --> 01:46:46,440
 matrix implementation or multiplication. So that's why we are going to now look at the second approach

1076
01:46:46,440 --> 01:46:54,600
 to calculate the 2-DDCT, right? Okay, so we can see that previously the factorizations of the 2-DDCT,

1077
01:46:54,600 --> 01:47:00,520
 the previous example, into the 1-DDCT, this particular process actually can be also be

1078
01:47:00,520 --> 01:47:07,400
 implemented using this matrix multiplication, right? So therefore, if you want to calculate 2-DDCT,

1079
01:47:07,400 --> 01:47:13,480
 you can also use the matrix multiplication to perform it. So in these equations here,

1080
01:47:13,480 --> 01:47:18,600
 this is your pixel block, okay? For example, our earlier example, this is the 4x4 pixel block,

1081
01:47:18,600 --> 01:47:25,640
 right? So this t here is a DCT matrix, okay? So this t is a DCT matrix, right? So you can see it's t

1082
01:47:26,280 --> 01:47:33,640
 multiply with your pixel block and multiply with this t transpose. This is a transpose here.

1083
01:47:33,640 --> 01:47:40,120
 So by performing this matrix multiplication, then you'll obtain your 2-DDCT transform.

1084
01:47:41,320 --> 01:47:47,480
 Right? Okay, so and now if you look at this particular DCT matrix a little bit closer,

1085
01:47:47,480 --> 01:47:55,719
 so you can see this tij here, i is actually the row index, j is a column index. So tij actually

1086
01:47:55,719 --> 01:48:05,320
 just refers to different values in this particular DCT matrix. So the, right, so now if you look at

1087
01:48:05,320 --> 01:48:11,160
 this DCT matrix here, when i is equal to zero, that means for the first row, okay? So for the first

1088
01:48:11,160 --> 01:48:18,120
 row, they all have the same value, which is one over root n. n is the size of the pixel block. For

1089
01:48:18,120 --> 01:48:26,680
 example, 4x4 or 8x8. If it's 4x4, then n is equal to 4. If it's 8x8 pixel block, then n is equal to 8.

1090
01:48:26,680 --> 01:48:32,440
 So this is for the first row. And for all the other subsequent rows, okay, is given by this

1091
01:48:32,440 --> 01:48:39,559
 particular expressions here. Okay, right, so again, i is actually the row index,

1092
01:48:41,400 --> 01:48:47,240
 j is actually the column index. So you just need to remember it. And the block size is n by n.

1093
01:48:49,960 --> 01:48:56,040
 So, right, let's look at one particular example here. Okay, so if you look at the case, if you are

1094
01:48:56,040 --> 01:49:02,840
 performing an 8x8 DCT transform, then n is equal to 8, right? So if you plug this n is equal to 8

1095
01:49:03,480 --> 01:49:09,640
 into this previous formula and simplify a little bit, then this is the expressions you are going to

1096
01:49:09,640 --> 01:49:16,040
 obtain. So now if you look at i is equal to zero, so this is the i index, this is the j index here.

1097
01:49:16,040 --> 01:49:22,040
 So when i is equal to zero, it refers to the first row. So that means now the first row will have

1098
01:49:22,040 --> 01:49:28,200
 all the same value here. And this row here is corresponding to when i is equal to 1.

1099
01:49:28,200 --> 01:49:34,440
 So when i is equal to 1, right, then we have to use this formula. Okay, so for this row,

1100
01:49:34,440 --> 01:49:40,360
 when i is equal to 1, we have to use this formula and we let i be equal to 1 into here.

1101
01:49:40,360 --> 01:49:48,519
 Then you can see this row here is defined by half cos 2j plus 1 multiplied by pi divided by 16.

1102
01:49:48,520 --> 01:49:55,240
 Okay, this row here. And then now for all the different values here is with respect to j index

1103
01:49:55,240 --> 01:50:01,560
 now. So j is equal to zero, j is equal to 1, j is equal to 2, and so on and so forth. So when j is

1104
01:50:01,560 --> 01:50:09,160
 equal to zero, you put it here, you can see it's actually half cos, okay, pi over 16. When j is

1105
01:50:09,160 --> 01:50:16,600
 equal to 1, this particular column here, when j is equal to 1, you can see this is 3 pi over 16.

1106
01:50:16,600 --> 01:50:23,080
 So 3 pi over 16. So by the same token, you'll be able to actually write down all the coefficients in

1107
01:50:23,080 --> 01:50:32,200
 this DCT matrix by using this formula. Right, okay, so just now we have actually mentioned that

1108
01:50:32,200 --> 01:50:37,640
 if you can write down this DCT matrix, or if you are provided with the DCT matrix,

1109
01:50:37,640 --> 01:50:45,000
 then to calculate the DCT coefficient, right, is simply by this matrix multiplication,

1110
01:50:45,000 --> 01:50:51,320
 T multiplied by the pixel block multiplied by T transpose. Now, for example, if you are given

1111
01:50:51,320 --> 01:50:57,560
 this particular DCT coefficient, if you want to obtain the pixel block, how do we do it?

1112
01:50:57,560 --> 01:51:03,400
 So what we can do is that, right, we perform, you know, inverse transform, okay, we multiply

1113
01:51:03,400 --> 01:51:10,520
 free multiply with T transpose on both sides, then this will become, you know, T inverse

1114
01:51:10,520 --> 01:51:15,560
 multiplied by T, we multiply with T inverse on both sides, then this will become 1. So we have

1115
01:51:15,560 --> 01:51:22,920
 a T inverse here, and we multiply with T transpose inverse here, then we'll have this term here.

1116
01:51:22,920 --> 01:51:29,160
 So anyway, because the matrix T is orthogonal, right, actually you can go home and verify quite

1117
01:51:29,160 --> 01:51:37,000
 readily, because this DCT matrix is orthogonal. So orthogonal means that, you know, T multiplied

1118
01:51:37,000 --> 01:51:42,120
 with T transpose, right, T multiplied with T transpose is the same as T transpose multiplied

1119
01:51:42,120 --> 01:51:50,360
 by T, which is equal to identity, or in other words, T transpose is equal to T inverse, okay.

1120
01:51:50,360 --> 01:51:56,280
 So because this DCT matrix that we have just studied satisfied this particular condition,

1121
01:51:56,280 --> 01:52:01,560
 therefore actually just now, you know, from the earlier equation, by multiplying with the inverse

1122
01:52:01,560 --> 01:52:07,880
 on both sides, you can readily show that, okay, if you are given the DCT coefficient,

1123
01:52:08,440 --> 01:52:12,360
 and if you want to obtain the pixel block, you just need to perform this multiplication,

1124
01:52:12,360 --> 01:52:18,520
 which is T transpose multiplied with your DCT coefficient, multiplied with a T will give you

1125
01:52:18,520 --> 01:52:24,120
 the pixel block, okay. So now we have a simple relationship to do the transform in both the

1126
01:52:24,120 --> 01:52:32,360
 forework as well as the inverse direction now, okay. So with that now, we are ready to, you know,

1127
01:52:32,360 --> 01:52:38,840
 solve this particular, we'll solve this problem. So this question says that a 2D DCT

1128
01:52:39,640 --> 01:52:45,240
 of an n by n pixel block is given here, okay, right, which is what we have just gone through just

1129
01:52:45,240 --> 01:52:52,440
 now, okay. So determine the 2D DCT matrix T, 4 by 4 pixel block, ground your answer to

1130
01:52:53,400 --> 01:52:59,559
 4 decimal places, okay. So I'll give you one moment to familiarize yourself with, you know,

1131
01:52:59,559 --> 01:53:08,360
 to write down the DCT matrix given the formula, okay. So I'll give you a bit of time to try it out.

1132
01:54:52,440 --> 01:55:02,360
 Okay.

1133
01:55:22,440 --> 01:55:32,360
 Okay.

1134
01:55:52,440 --> 01:56:08,360
 Okay.

1135
01:56:22,440 --> 01:56:38,360
 Okay.

1136
01:56:43,960 --> 01:56:48,919
 Okay. So yeah, at least you have some time to think about it. So let's try to go through the

1137
01:56:48,920 --> 01:57:04,840
 answers together.

1138
01:57:19,240 --> 01:57:30,840
 Okay.

1139
01:57:33,400 --> 01:57:40,040
 Okay. So pretty much, right, as I mentioned here, right, what you need to do now is that in this

1140
01:57:40,040 --> 01:57:49,240
 case, because it's a 4 by 4 pixel block, right. So, okay, because it's a 4 by 4 pixel blocks here.

1141
01:57:49,240 --> 01:57:54,840
 So what you need to do is simply let m be equal to 4 into this formula. So the first row now is

1142
01:57:54,840 --> 01:58:01,000
 actually 1 over 2, right. So square root of 4 is 2. So it's 1 over 2. So first row is actually

1143
01:58:01,000 --> 01:58:07,880
 0.5 here, right. Then the second row, no, you just let, for example, this i is equal to 1 is this

1144
01:58:07,880 --> 01:58:14,280
 row, i is equal to 2, i is equal to 2, 3. So for i is equal to 1, then the first row is that you have

1145
01:58:15,320 --> 01:58:25,480
 2 over 4, which is 1 over root 2, okay. And then cos, right, 2j plus 1pi divided by 8 here, right.

1146
01:58:25,480 --> 01:58:30,120
 And then you substitute in different values of j, right. You'll be able to write this thing down.

1147
01:58:30,120 --> 01:58:35,320
 So anyway, I'll not, you can go home and verify yourself, right, to make sure you know how to

1148
01:58:35,320 --> 01:58:42,519
 evaluate this. So by doing that, you'll be able to write down this particular DCT matrix, okay.

1149
01:58:42,519 --> 01:58:48,920
 So once you've calculated the DCT matrix next, it says that basically you result in part A1,

1150
01:58:48,920 --> 01:58:54,759
 calculate the 2-D DCT of the following pixel block A, and round your answer to the 3 nearest

1151
01:58:55,320 --> 01:59:01,000
 decimal places, okay. So again, I'll give you a bit of time to, you know, to try it out,

1152
01:59:01,000 --> 01:59:10,680
 and then we'll go through the answers together.

1153
02:03:01,160 --> 02:03:27,320
 Okay, so you probably have some time to think about it. So how do we find the

1154
02:03:27,320 --> 02:03:31,400
 the DCT transform.

1155
02:03:35,900 --> 02:03:36,740
 How do we do it?

1156
02:03:41,340 --> 02:03:45,540
 So the 2D DCT, the DCT coefficient should be equal to,

1157
02:03:46,599 --> 02:03:47,880
 is a matrix multiplication.

1158
02:03:47,880 --> 02:03:49,360
 So what's a matrix multiplication?

1159
02:03:49,360 --> 02:03:52,620
 It should be, what's our first matrix?

1160
02:03:53,260 --> 02:03:57,980
 What's our first matrix?

1161
02:03:59,980 --> 02:04:01,320
 T, right?

1162
02:04:01,320 --> 02:04:04,260
 And then multiply with A,

1163
02:04:04,260 --> 02:04:07,599
 and then multiply with T transpose, yeah?

1164
02:04:07,599 --> 02:04:12,599
 So we have, the matrix A is already given, right?

1165
02:04:12,940 --> 02:04:17,340
 And then the T transpose, I mean the, sorry,

1166
02:04:17,340 --> 02:04:20,120
 the DCT matrix is also given.

1167
02:04:20,160 --> 02:04:23,640
 So pretty much is reduced into a,

1168
02:04:23,640 --> 02:04:26,559
 matrix multiplication problem, right?

1169
02:04:26,559 --> 02:04:29,680
 Okay, so you can see the 2D DCT of A, right?

1170
02:04:29,680 --> 02:04:32,120
 Is T, A, T transpose, yeah?

1171
02:04:33,120 --> 02:04:37,200
 So now, okay, so this is your matrix A,

1172
02:04:37,200 --> 02:04:40,440
 this is your matrix T that you have found from earlier, right?

1173
02:04:40,440 --> 02:04:42,519
 So T transpose just means that, no,

1174
02:04:42,519 --> 02:04:44,320
 the row become column, okay?

1175
02:04:44,320 --> 02:04:45,720
 The row become column.

1176
02:04:45,720 --> 02:04:47,840
 So now you have these three matrix, yeah?

1177
02:04:47,840 --> 02:04:49,880
 You just need to do some multiplication,

1178
02:04:49,880 --> 02:04:51,720
 and if you are careful, at the end,

1179
02:04:51,720 --> 02:04:55,280
 you'll find the DCT coefficient.

1180
02:04:55,280 --> 02:05:00,280
 So this is the 2D DCT coefficient of the pixel block A, right?

1181
02:05:01,960 --> 02:05:04,280
 So are there any questions?

1182
02:05:07,960 --> 02:05:10,320
 Right, so if not, then let's continue.

1183
02:05:20,040 --> 02:05:25,040
 Okay, so now we have the basic tools, right?

1184
02:05:26,760 --> 02:05:28,680
 We have studied about DCT transform,

1185
02:05:28,680 --> 02:05:32,160
 and also we know some basic properties of image.

1186
02:05:32,160 --> 02:05:33,960
 So next we are going to look into the

1187
02:05:33,960 --> 02:05:37,120
 JPEG image compression standard, right?

1188
02:05:37,120 --> 02:05:39,880
 So let's look at some of the key observations

1189
02:05:39,880 --> 02:05:42,880
 that help us to design JPEG compression.

1190
02:05:42,880 --> 02:05:45,480
 So the first observation is that we notice that

1191
02:05:45,480 --> 02:05:47,760
 the image content changed relatively slowly

1192
02:05:47,760 --> 02:05:51,880
 across the image, for example, within an eight by eight

1193
02:05:51,880 --> 02:05:52,720
 pixel block.

1194
02:05:52,720 --> 02:05:55,560
 So this is pretty much the spatial redundancy

1195
02:05:55,560 --> 02:05:57,280
 that we mentioned before, right?

1196
02:05:57,280 --> 02:06:00,840
 So if even a particular image, especially if you look

1197
02:06:00,840 --> 02:06:04,320
 at a small pixel neighborhood, such as the eight by eight

1198
02:06:04,320 --> 02:06:06,600
 pixel neighborhood, right, the pixel values

1199
02:06:06,600 --> 02:06:08,960
 tend to change very slowly, right?

1200
02:06:08,960 --> 02:06:11,800
 Okay, so this is just the nature of the images, right?

1201
02:06:11,800 --> 02:06:14,800
 So if the pixel values tend to change very slowly,

1202
02:06:14,800 --> 02:06:18,120
 what kind of things can we do to exploit

1203
02:06:18,120 --> 02:06:21,720
 this particular property in order to help?

1204
02:06:21,720 --> 02:06:23,960
 Suppose you want to develop some algorithm

1205
02:06:23,960 --> 02:06:28,160
 or some standard to help us to perform image compression,

1206
02:06:28,160 --> 02:06:33,000
 yeah, okay, and we know that small pixel neighborhood,

1207
02:06:33,000 --> 02:06:35,200
 such as an eight by eight pixel neighborhood,

1208
02:06:35,200 --> 02:06:36,600
 tends to change very slowly.

1209
02:06:36,600 --> 02:06:39,680
 Given a small eight by eight pixel neighborhood,

1210
02:06:39,680 --> 02:06:41,520
 the value tends to change very slowly.

1211
02:06:41,520 --> 02:06:44,120
 So what are the things that you have learned so far, right?

1212
02:06:44,120 --> 02:06:49,040
 What kind of clue or some suggestion or some strategy

1213
02:06:49,040 --> 02:06:52,080
 for us to help to perform the compression?

1214
02:06:59,880 --> 02:07:02,240
 Actually, we just studied a few minutes ago.

1215
02:07:03,240 --> 02:07:05,480
 So what it means now is that if you know the pixel

1216
02:07:05,480 --> 02:07:08,200
 neighborhoods change very slowly,

1217
02:07:08,200 --> 02:07:10,559
 then what it would suggest to you is that perhaps

1218
02:07:10,559 --> 02:07:13,200
 you can consider to use some transform,

1219
02:07:13,240 --> 02:07:18,240
 such as DCT for you to transform the image

1220
02:07:19,519 --> 02:07:22,160
 in the original kind of pixel domain

1221
02:07:22,160 --> 02:07:23,679
 into the transform domain.

1222
02:07:23,679 --> 02:07:28,480
 Because once the pixels are transformed

1223
02:07:28,480 --> 02:07:30,599
 into the DCT coefficient, right?

1224
02:07:30,599 --> 02:07:32,360
 The coefficient is actually packed

1225
02:07:32,360 --> 02:07:34,840
 over a small number of coefficient,

1226
02:07:34,840 --> 02:07:37,280
 which is known as the energy compaction.

1227
02:07:37,280 --> 02:07:39,960
 So once we know that the energy is actually packed

1228
02:07:39,960 --> 02:07:42,120
 into a small number of KVC,

1229
02:07:42,120 --> 02:07:45,440
 then we can subsequently develop some strategy

1230
02:07:45,440 --> 02:07:48,240
 to help to compress it more effectively.

1231
02:07:48,240 --> 02:07:51,320
 So therefore, the answer to the first question is that,

1232
02:07:51,320 --> 02:07:53,360
 then we can consider to, for example,

1233
02:07:53,360 --> 02:07:56,120
 deploy some transform, okay?

1234
02:07:56,120 --> 02:07:59,920
 Especially in the context of JPEG is DCT transform, okay?

1235
02:07:59,920 --> 02:08:02,760
 So the answer to the first question is that,

1236
02:08:02,760 --> 02:08:06,519
 therefore we should leverage on DCT transform

1237
02:08:06,519 --> 02:08:09,320
 to help us to perform energy compaction, right?

1238
02:08:09,320 --> 02:08:11,599
 So that's the answer to the first question.

1239
02:08:11,600 --> 02:08:13,960
 So the second observation is that,

1240
02:08:13,960 --> 02:08:16,440
 human are less sensitive to distortion

1241
02:08:16,440 --> 02:08:18,800
 in high spatial frequency component

1242
02:08:18,800 --> 02:08:21,200
 than low frequency component.

1243
02:08:21,200 --> 02:08:23,920
 So this observation is like what we mentioned

1244
02:08:23,920 --> 02:08:26,000
 in lecture one, right?

1245
02:08:26,000 --> 02:08:30,080
 So high spatial frequency component means that,

1246
02:08:30,080 --> 02:08:32,240
 the pixel value change very quickly.

1247
02:08:32,240 --> 02:08:34,920
 Low frequency component means

1248
02:08:34,920 --> 02:08:37,000
 that the pixel value change very slowly.

1249
02:08:37,000 --> 02:08:40,600
 So if you remember the example that I mentioned is that,

1250
02:08:40,600 --> 02:08:43,240
 if I'm eating dinner and if my shirt,

1251
02:08:43,240 --> 02:08:46,120
 you notice that I always like to wear this plain shirt,

1252
02:08:46,120 --> 02:08:48,200
 if there's a spot, for example, a white spot here,

1253
02:08:48,200 --> 02:08:50,360
 every one of you can see it quite readily

1254
02:08:50,360 --> 02:08:53,080
 because our eyes are very sensitive to any changes

1255
02:08:53,080 --> 02:08:56,320
 or distortion in low frequency component.

1256
02:08:56,320 --> 02:08:58,680
 This black patch here is low frequency component,

1257
02:08:58,680 --> 02:09:00,800
 because the pixel value change slowly.

1258
02:09:00,800 --> 02:09:03,640
 So when there's any change or any distortion

1259
02:09:03,640 --> 02:09:06,320
 or any noise in low frequency component,

1260
02:09:06,320 --> 02:09:10,040
 our human visual system can spot that quite readily.

1261
02:09:10,040 --> 02:09:12,160
 So this is opposed to, for example,

1262
02:09:12,160 --> 02:09:15,440
 if I'm wearing a shirt that has lots of stripes,

1263
02:09:15,440 --> 02:09:17,360
 vertical and horizontal stripes.

1264
02:09:17,360 --> 02:09:18,760
 And if there's a spot here,

1265
02:09:18,760 --> 02:09:21,840
 in other words, if there's a distortion or noise,

1266
02:09:21,840 --> 02:09:24,480
 your eye cannot spot it so readily.

1267
02:09:24,480 --> 02:09:28,840
 So this to explain that our eyes are less sensitive

1268
02:09:28,840 --> 02:09:32,280
 to any noise or distortion in high frequency component,

1269
02:09:32,280 --> 02:09:34,480
 but our eyes are more sensitive to distortion

1270
02:09:34,480 --> 02:09:36,200
 in low frequency component.

1271
02:09:36,200 --> 02:09:39,440
 So based on the particular observation,

1272
02:09:39,440 --> 02:09:41,360
 how do we design our JPEG?

1273
02:09:43,040 --> 02:09:47,639
 So earlier on, okay, if we look at just now

1274
02:09:47,639 --> 02:09:50,519
 the example that we have.

1275
02:09:50,520 --> 02:09:51,360
 Here we go.

1276
02:10:08,480 --> 02:10:11,880
 The DCT coefficients, all right,

1277
02:10:11,880 --> 02:10:14,560
 this is known as a DC coefficient,

1278
02:10:14,560 --> 02:10:18,040
 and this is known as a low AC coefficient,

1279
02:10:18,040 --> 02:10:21,640
 and this is known as a high AC coefficient, right?

1280
02:10:21,640 --> 02:10:25,560
 So from the context of the DCT coefficient here,

1281
02:10:25,560 --> 02:10:29,880
 this value is known as a DC, okay, DC, direct current,

1282
02:10:29,880 --> 02:10:33,519
 right, these regions here are known as a low AC,

1283
02:10:33,519 --> 02:10:36,400
 these regions are known as a high AC.

1284
02:10:36,400 --> 02:10:39,600
 So the reason why it's known as a low AC and high AC

1285
02:10:39,600 --> 02:10:43,800
 is because if you look at this underlying legal function,

1286
02:10:43,800 --> 02:10:46,880
 low AC means that the patterns are changing,

1287
02:10:46,880 --> 02:10:50,560
 they are corresponding legal function is changing slowly.

1288
02:10:50,560 --> 02:10:54,320
 High AC coefficient means that the underlying legal functions

1289
02:10:54,320 --> 02:10:56,080
 are changing much faster.

1290
02:10:56,080 --> 02:10:59,400
 So that's the low AC and the high AC coefficient.

1291
02:10:59,400 --> 02:11:03,800
 So because our eyes are, actually our eyes are more sensitive

1292
02:11:03,800 --> 02:11:07,960
 to distortion in low frequency component, right,

1293
02:11:07,960 --> 02:11:11,920
 and the low frequency component actually is in this region.

1294
02:11:11,920 --> 02:11:14,200
 High frequency component, right,

1295
02:11:15,040 --> 02:11:17,960
 correspond to the high AC coefficients here.

1296
02:11:17,960 --> 02:11:20,480
 So therefore what it means is that we should actually

1297
02:11:20,480 --> 02:11:23,240
 dedicate more resources, right,

1298
02:11:23,240 --> 02:11:28,240
 to represent or to encode this DC and low AC coefficient.

1299
02:11:29,160 --> 02:11:31,200
 Okay, so therefore question number two is that,

1300
02:11:31,200 --> 02:11:33,440
 since our eyes are more sensitive to, you know,

1301
02:11:33,440 --> 02:11:37,519
 any changes or distortion in this low AC coefficient

1302
02:11:37,519 --> 02:11:40,960
 as compared to high AC, high AC coefficient,

1303
02:11:40,960 --> 02:11:44,680
 therefore we should dedicate more resources

1304
02:11:44,680 --> 02:11:49,280
 to encode this low AC coefficient.

1305
02:11:49,280 --> 02:11:50,880
 Right, so this is just the first card,

1306
02:11:50,880 --> 02:11:54,040
 no it's the first time I'm trying to introduce this concept,

1307
02:11:54,040 --> 02:11:55,520
 but later on there are some slides

1308
02:11:55,520 --> 02:11:58,560
 and then each of this concept will be further explained

1309
02:11:58,560 --> 02:12:00,360
 and reinforced, right, okay.

1310
02:12:11,280 --> 02:12:16,280
 Right, okay, so the second question is that,

1311
02:12:19,000 --> 02:12:24,000
 no, right, so how does it define this, a JPEG design?

1312
02:12:24,040 --> 02:12:26,080
 That means the answer to the question is that

1313
02:12:26,080 --> 02:12:29,600
 we'll dedicate more resources to try to represent

1314
02:12:29,600 --> 02:12:31,640
 the low AC coefficients here, right,

1315
02:12:31,640 --> 02:12:35,080
 and this is done through a quantization matrix

1316
02:12:35,080 --> 02:12:37,520
 that you're going to study later, okay.

1317
02:12:37,520 --> 02:12:40,640
 So the last observation is that human is more sensitive

1318
02:12:40,640 --> 02:12:44,520
 to luminance, okay, or the intensity component

1319
02:12:44,520 --> 02:12:48,160
 as compared to the color or the chrominance component.

1320
02:12:48,160 --> 02:12:50,960
 So how does this affect the JPEG design?

1321
02:12:52,080 --> 02:12:53,800
 All right, again, this observation we know,

1322
02:12:53,800 --> 02:12:56,360
 human is more sensitive to the brightness

1323
02:12:56,360 --> 02:12:58,160
 or the luminance component

1324
02:12:58,160 --> 02:13:00,640
 as compared to the chrominance component.

1325
02:13:00,640 --> 02:13:03,680
 So how can we use this knowledge

1326
02:13:03,680 --> 02:13:05,760
 to help us to perform compression?

1327
02:13:05,880 --> 02:13:11,360
 So what we can do is that because our human

1328
02:13:11,360 --> 02:13:13,320
 is more sensitive to the luminance

1329
02:13:13,320 --> 02:13:14,760
 than the chrominance component,

1330
02:13:14,760 --> 02:13:17,520
 that means we can drop some pixel value

1331
02:13:17,520 --> 02:13:19,680
 from the chrominance component.

1332
02:13:19,680 --> 02:13:22,040
 Since our eyes are less sensitive about color,

1333
02:13:22,040 --> 02:13:24,480
 that means we can drop some of the pixel value

1334
02:13:24,480 --> 02:13:26,560
 from the color component, right.

1335
02:13:26,560 --> 02:13:29,600
 By doing that, we'll reduce the number of bits

1336
02:13:29,600 --> 02:13:32,400
 that we need to compress or store, right,

1337
02:13:32,400 --> 02:13:36,280
 but it makes very little perceptual difference to our eye, okay.

1338
02:13:36,280 --> 02:13:38,120
 So that's the answer.

1339
02:13:38,120 --> 02:13:40,480
 So the answer to this question is by dropping some

1340
02:13:40,480 --> 02:13:44,679
 of the pixels from the color or the chrominance component,

1341
02:13:44,679 --> 02:13:48,400
 and this particular process is known as trauma subsampling,

1342
02:13:48,400 --> 02:13:51,519
 okay, but again, we'll also study later, right.

1343
02:13:51,519 --> 02:13:54,400
 So anyway, we just want to provide some high level

1344
02:13:54,400 --> 02:13:56,920
 kind of observation from our observation,

1345
02:13:56,920 --> 02:13:58,839
 then we develop some strategy

1346
02:13:58,839 --> 02:14:00,799
 to help us to perform the compression.

1347
02:14:01,800 --> 02:14:04,840
 Right, okay, so now with that,

1348
02:14:04,840 --> 02:14:07,840
 we'll try to give some high level kind of

1349
02:14:07,840 --> 02:14:10,560
 a fact-share information to describe about JPEG.

1350
02:14:10,560 --> 02:14:11,680
 So JPEG, all of you know,

1351
02:14:11,680 --> 02:14:14,840
 is a very popular image compression standard, okay.

1352
02:14:14,840 --> 02:14:19,000
 It can handle both lossy and lossy compression, okay.

1353
02:14:19,000 --> 02:14:21,360
 Right, so the compression ratio typically is

1354
02:14:21,360 --> 02:14:22,960
 from 10 to one to 20 to one,

1355
02:14:22,960 --> 02:14:25,240
 that means you can compress the file size

1356
02:14:25,240 --> 02:14:28,120
 into one, you know, one 10 of it,

1357
02:14:28,120 --> 02:14:31,000
 or 120 of the original file size here.

1358
02:14:31,000 --> 02:14:32,880
 So there's a four modes of operation,

1359
02:14:32,880 --> 02:14:35,599
 which is known as a sequential DCT mode,

1360
02:14:35,599 --> 02:14:38,880
 progressive DCT mode, lossless mode, and hierarchical mode.

1361
02:14:38,880 --> 02:14:40,559
 So there's these four different modes

1362
02:14:40,559 --> 02:14:43,320
 of JPEG compression, but for this course,

1363
02:14:43,320 --> 02:14:48,320
 we'll only be focusing on this sequential DCT mode here.

1364
02:14:49,240 --> 02:14:52,480
 So this sequential DCT mode is also known

1365
02:14:52,480 --> 02:14:54,519
 as a baseline JPEG, right.

1366
02:14:54,519 --> 02:14:55,960
 It's also known as a baseline JPEG,

1367
02:14:55,960 --> 02:15:00,000
 and is one of the most popular and important mode

1368
02:15:00,000 --> 02:15:02,320
 among these four modes of JPEGs here.

1369
02:15:02,320 --> 02:15:03,360
 So therefore for this course,

1370
02:15:03,360 --> 02:15:06,720
 we'll be focusing on sequential DCT mode, right,

1371
02:15:06,720 --> 02:15:09,200
 and is also known as a baseline JPEG, right.

1372
02:15:09,200 --> 02:15:11,960
 So for this course, we'll study about this mode only.

1373
02:15:13,400 --> 02:15:15,840
 Right, okay, so what are the main stages

1374
02:15:15,840 --> 02:15:17,040
 in a baseline JPEG here?

1375
02:15:17,040 --> 02:15:18,240
 So for baseline JPEG,

1376
02:15:18,240 --> 02:15:20,960
 it can be divided into the following steps.

1377
02:15:20,960 --> 02:15:23,800
 First, you have the image of block processing,

1378
02:15:23,840 --> 02:15:26,400
 okay, followed by DCT transform,

1379
02:15:26,400 --> 02:15:29,160
 followed by quantization, entropy coding,

1380
02:15:29,160 --> 02:15:30,600
 and frame building.

1381
02:15:30,600 --> 02:15:33,760
 So moving forward from now, this juncture on work,

1382
02:15:33,760 --> 02:15:36,680
 every time we talk about DCT,

1383
02:15:36,680 --> 02:15:38,640
 we are referring to 2D DCT,

1384
02:15:38,640 --> 02:15:40,880
 because I don't want to keep repeating 2D DCT,

1385
02:15:40,880 --> 02:15:43,880
 2D DCT, you know that we're dealing with images.

1386
02:15:43,880 --> 02:15:46,520
 So definitely the DCT is a 2D DCT.

1387
02:15:46,520 --> 02:15:48,400
 So sometimes we're just simply,

1388
02:15:48,400 --> 02:15:50,520
 in shock, we just call it DCT, okay.

1389
02:15:51,360 --> 02:15:55,120
 Right, okay, so this is the general overviews

1390
02:15:55,120 --> 02:15:56,880
 of the JPEG encoder.

1391
02:15:56,880 --> 02:15:59,760
 So if you remember, the ideas of the encoder

1392
02:15:59,760 --> 02:16:02,680
 means that you have an original image, right.

1393
02:16:02,680 --> 02:16:04,800
 So after you go through this encoder,

1394
02:16:04,800 --> 02:16:09,320
 it will compress it into a smaller file size of bit stream.

1395
02:16:09,320 --> 02:16:12,360
 So this is the ideas of the encoder,

1396
02:16:12,360 --> 02:16:14,800
 right, in the context of compressions here.

1397
02:16:14,800 --> 02:16:16,680
 So therefore, JPEG encoder,

1398
02:16:16,680 --> 02:16:18,800
 the goal of this JPEG encoder is,

1399
02:16:18,800 --> 02:16:21,160
 even an input image, right,

1400
02:16:21,160 --> 02:16:24,600
 your output is actually a compressed image of bit stream.

1401
02:16:24,600 --> 02:16:28,240
 So this is a compressed image of bit stream here, right.

1402
02:16:28,240 --> 02:16:30,120
 So let's look at how do we do that.

1403
02:16:30,120 --> 02:16:31,680
 So first of all, this particular image,

1404
02:16:31,680 --> 02:16:33,120
 if you remember, right,

1405
02:16:33,120 --> 02:16:36,320
 we mentioned that typically for JPEG compression,

1406
02:16:36,320 --> 02:16:39,760
 even an image will try to convict into

1407
02:16:39,760 --> 02:16:41,920
 YCBCR representation.

1408
02:16:43,000 --> 02:16:44,440
 So can you remember,

1409
02:16:44,440 --> 02:16:48,000
 why do we want to convict into the YCBCR representation?

1410
02:16:49,799 --> 02:16:52,639
 For example, given RGB image,

1411
02:16:52,639 --> 02:16:58,639
 it's quite common that you convert it into the YCBCR color space,

1412
02:16:58,679 --> 02:17:00,679
 or color model, but why?

1413
02:17:05,240 --> 02:17:06,080
 Why?

1414
02:17:07,719 --> 02:17:11,439
 Because once it's expressed or converted

1415
02:17:11,439 --> 02:17:14,279
 into this YCBCR color space,

1416
02:17:14,279 --> 02:17:16,799
 we know that our eye is more sensitive

1417
02:17:16,799 --> 02:17:19,439
 to the luminance component, Y,

1418
02:17:19,439 --> 02:17:22,559
 and less sensitive to the chrominance component,

1419
02:17:22,559 --> 02:17:25,320
 or the color component, CB and CR.

1420
02:17:25,320 --> 02:17:27,240
 So since our eyes are less sensitive

1421
02:17:27,240 --> 02:17:29,320
 to the CB and CR component,

1422
02:17:29,320 --> 02:17:32,400
 that means we can perform some subsampling,

1423
02:17:32,400 --> 02:17:33,279
 chroma subsampling,

1424
02:17:33,279 --> 02:17:35,719
 that means we can drop some pixels

1425
02:17:35,719 --> 02:17:40,719
 in the CB and CR component or channel.

1426
02:17:41,759 --> 02:17:44,039
 So that's why you can see that

1427
02:17:44,040 --> 02:17:47,080
 this particular first channel is actually your Y channel.

1428
02:17:47,080 --> 02:17:51,520
 This CB, the next two channels is a CB and CR here.

1429
02:17:51,520 --> 02:17:53,280
 You can see actually the number of pixels

1430
02:17:53,280 --> 02:17:55,280
 that it has is smaller.

1431
02:17:55,280 --> 02:17:59,840
 So for example, this every four by four Y channel pixel block,

1432
02:17:59,840 --> 02:18:02,640
 you only have one CB and one CR.

1433
02:18:02,640 --> 02:18:05,840
 That means you actually only keep a small subsets

1434
02:18:05,840 --> 02:18:08,640
 of the CB and CR pixel.

1435
02:18:08,640 --> 02:18:10,920
 Why is it you can do that?

1436
02:18:10,920 --> 02:18:12,120
 The reason why we can do that is

1437
02:18:12,120 --> 02:18:13,800
 because our eyes are less sensitive

1438
02:18:13,800 --> 02:18:16,520
 to the CB and CR component.

1439
02:18:16,520 --> 02:18:18,560
 So therefore we can afford to drop it

1440
02:18:18,560 --> 02:18:22,880
 and you will make little perception difference to our eye.

1441
02:18:22,880 --> 02:18:24,760
 So that's why very often we convert it

1442
02:18:24,760 --> 02:18:26,480
 into Y CB, CR color space,

1443
02:18:26,480 --> 02:18:29,400
 and we can afford to drop some of the pixels

1444
02:18:29,400 --> 02:18:31,360
 from the CB and the CR channel.

1445
02:18:32,360 --> 02:18:35,280
 So once you have this particular image here now,

1446
02:18:35,280 --> 02:18:37,560
 so the next thing is that we try to partition

1447
02:18:37,560 --> 02:18:39,720
 into eight by eight pixel block.

1448
02:18:39,719 --> 02:18:44,719
 So for JPEG image, given a particular image,

1449
02:18:45,160 --> 02:18:49,039
 we'll try to partition into numerous eight by eight

1450
02:18:49,039 --> 02:18:50,559
 pixel block, okay?

1451
02:18:50,559 --> 02:18:54,639
 But for the Y as well as CB and CR channel, okay?

1452
02:18:54,639 --> 02:18:58,639
 So therefore after this, you have eight by eight,

1453
02:18:58,639 --> 02:19:00,559
 numerous eight by eight pixel block,

1454
02:19:00,559 --> 02:19:03,559
 and we use this notation FIJ to represent

1455
02:19:03,559 --> 02:19:06,920
 this numerous eight by eight pixel block.

1456
02:19:06,920 --> 02:19:08,719
 So the next thing is that we are going to let it go

1457
02:19:08,760 --> 02:19:11,480
 through the DCT transform for each of this block.

1458
02:19:11,480 --> 02:19:13,359
 So if it's an eight by eight pixel block,

1459
02:19:13,359 --> 02:19:15,879
 after you perform the DCT, what you obtain

1460
02:19:15,879 --> 02:19:19,359
 is a eight by eight DCT coefficient, okay?

1461
02:19:19,359 --> 02:19:21,199
 So it's a eight by eight DCT coefficient.

1462
02:19:21,199 --> 02:19:24,840
 Now we use FUV to denote it, right?

1463
02:19:24,840 --> 02:19:28,000
 Okay, FUV, capital FUV to denote it.

1464
02:19:28,000 --> 02:19:29,400
 So the next step that we're going to do

1465
02:19:29,400 --> 02:19:31,279
 is that we are going to perform quantization.

1466
02:19:31,279 --> 02:19:32,799
 So each of this step later on,

1467
02:19:32,799 --> 02:19:35,559
 we are going to have some slides to further explain it.

1468
02:19:35,559 --> 02:19:37,519
 So this is the first time we're explaining

1469
02:19:37,520 --> 02:19:41,040
 the key steps that are more due in the JPEG encoder.

1470
02:19:42,240 --> 02:19:43,680
 So the next steps that we are going to do

1471
02:19:43,680 --> 02:19:46,200
 is that we have a quantization here.

1472
02:19:46,200 --> 02:19:49,360
 So if you remember, what's the objective of the quantization?

1473
02:19:49,360 --> 02:19:51,840
 So the objective of the quantization is that

1474
02:19:51,840 --> 02:19:55,440
 because we are representing images using computer,

1475
02:19:55,440 --> 02:19:58,720
 and computer only have a finite number of bits.

1476
02:19:58,720 --> 02:20:00,680
 So when you have a finite number of bits,

1477
02:20:00,680 --> 02:20:04,000
 that means you only can represent finite levels,

1478
02:20:04,000 --> 02:20:05,520
 finite number of levels.

1479
02:20:05,520 --> 02:20:08,520
 Therefore, you must perform quantization.

1480
02:20:08,520 --> 02:20:11,000
 So therefore, we'll perform the quantizations here.

1481
02:20:11,000 --> 02:20:13,120
 In order to perform the quantization,

1482
02:20:13,120 --> 02:20:15,280
 we'll be using a quantization table

1483
02:20:15,280 --> 02:20:17,480
 that we'll explain the process later.

1484
02:20:17,480 --> 02:20:21,680
 So anyway, after you have performed the quantization,

1485
02:20:21,680 --> 02:20:23,280
 so for each block now,

1486
02:20:23,280 --> 02:20:26,600
 we have a quantized DCT coefficient now.

1487
02:20:26,600 --> 02:20:28,480
 So you can see we use F cap,

1488
02:20:28,480 --> 02:20:31,040
 there's a cap on top to denote

1489
02:20:31,040 --> 02:20:34,280
 is a quantized DCT coefficient.

1490
02:20:34,320 --> 02:20:36,600
 So this quantized DCT coefficient now

1491
02:20:36,600 --> 02:20:40,480
 is going to go through a process known as a zigzag scanning.

1492
02:20:40,480 --> 02:20:41,920
 So zigzag scanning.

1493
02:20:41,920 --> 02:20:46,920
 So zigzag scanning is a way to convert 2D matrix

1494
02:20:49,360 --> 02:20:50,880
 into a vector.

1495
02:20:50,880 --> 02:20:53,280
 So later on, we'll see more about it.

1496
02:20:53,280 --> 02:20:57,040
 But anyway, is to convert this particular matrix

1497
02:20:57,040 --> 02:20:58,920
 into a vector.

1498
02:20:58,920 --> 02:21:01,280
 So once you convert into the vector,

1499
02:21:01,280 --> 02:21:03,480
 the first value is a DC coefficient.

1500
02:21:03,480 --> 02:21:07,800
 So the DC coefficient will let it go through a DPCM,

1501
02:21:07,800 --> 02:21:09,520
 differential pulse code modulation,

1502
02:21:09,520 --> 02:21:11,800
 which is a differential coding.

1503
02:21:11,800 --> 02:21:13,880
 Again, we'll study a bit more about it.

1504
02:21:13,880 --> 02:21:15,800
 So for the DC coefficient,

1505
02:21:15,800 --> 02:21:18,880
 we use a differential coding to encode it.

1506
02:21:18,880 --> 02:21:20,480
 And for the AC coefficient,

1507
02:21:20,480 --> 02:21:22,800
 we'll let it go through a run length coding.

1508
02:21:24,000 --> 02:21:26,520
 Again, later on, we'll learn more about it.

1509
02:21:26,520 --> 02:21:28,279
 Here it's just to introduce to you

1510
02:21:28,279 --> 02:21:30,880
 the general blocks of all the steps.

1511
02:21:30,880 --> 02:21:34,880
 Okay, so now once you have this differential coding

1512
02:21:34,880 --> 02:21:36,320
 and the running coding,

1513
02:21:36,320 --> 02:21:38,679
 the output you are going to pass through

1514
02:21:38,679 --> 02:21:40,560
 an entropy coding.

1515
02:21:40,560 --> 02:21:41,759
 So the output here,

1516
02:21:41,759 --> 02:21:43,439
 because when you look at this output here,

1517
02:21:43,439 --> 02:21:46,679
 some pattern occur more often than the others.

1518
02:21:46,679 --> 02:21:49,320
 So once you know that some patterns occur more often

1519
02:21:49,320 --> 02:21:51,679
 than the others, right away, when it comes to your mind,

1520
02:21:51,679 --> 02:21:53,640
 you know you have to use techniques

1521
02:21:53,640 --> 02:21:55,599
 such as entropy encoding.

1522
02:21:55,599 --> 02:21:58,160
 So this is exactly what we are going to do here.

1523
02:21:58,160 --> 02:22:00,519
 So we are going to use this entropy encoding

1524
02:22:00,520 --> 02:22:05,520
 to encode this DC coefficient and the AC coefficient.

1525
02:22:05,520 --> 02:22:06,600
 And to do that,

1526
02:22:06,600 --> 02:22:08,480
 you will be using a particular,

1527
02:22:08,480 --> 02:22:11,320
 you know, code work or coding table

1528
02:22:11,320 --> 02:22:13,360
 that has been generated earlier.

1529
02:22:13,360 --> 02:22:15,280
 Okay, so finally, all this information

1530
02:22:15,280 --> 02:22:18,440
 is going to pack into the data in the bit stream, right?

1531
02:22:18,440 --> 02:22:20,240
 You also have the header information

1532
02:22:20,240 --> 02:22:22,160
 and the table information, right?

1533
02:22:22,160 --> 02:22:24,520
 So this will be packed into your JPEG bit stream.

1534
02:22:24,520 --> 02:22:27,920
 Then it can either be stored or it can be transmitted.

1535
02:22:27,920 --> 02:22:32,000
 So that's a general overview of the JPEG encoder.

1536
02:22:34,040 --> 02:22:36,240
 Right, okay, so now once we have understood

1537
02:22:36,240 --> 02:22:37,080
 the general overview,

1538
02:22:37,080 --> 02:22:39,600
 we are going to look at each of these particular steps

1539
02:22:39,600 --> 02:22:41,280
 a bit more in detail now.

1540
02:22:41,280 --> 02:22:42,680
 So the first steps that we have

1541
02:22:42,680 --> 02:22:45,280
 is to perform the image partitioning.

1542
02:22:45,280 --> 02:22:48,080
 So the ideal image partitioning is quite intuitive.

1543
02:22:48,080 --> 02:22:49,600
 That means given a particular image,

1544
02:22:49,600 --> 02:22:53,440
 we try to partition it into numerous eight by eight

1545
02:22:53,440 --> 02:22:54,280
 pixel block.

1546
02:22:54,280 --> 02:22:57,080
 So we partition it into numerous eight by eight

1547
02:22:57,120 --> 02:22:57,960
 pixel block.

1548
02:22:59,560 --> 02:23:01,480
 Right, okay, and then afterwards,

1549
02:23:01,480 --> 02:23:03,360
 okay, if you look at further a little bit more

1550
02:23:03,360 --> 02:23:04,880
 about this image here,

1551
02:23:04,880 --> 02:23:07,320
 actually, even though in JPEG compression,

1552
02:23:07,320 --> 02:23:11,400
 we tend to use this YCVCR color space

1553
02:23:11,400 --> 02:23:13,200
 or color model more often,

1554
02:23:13,200 --> 02:23:14,400
 but actually for JPEG,

1555
02:23:14,400 --> 02:23:19,200
 it can also handle other types of color images as well,

1556
02:23:19,200 --> 02:23:22,280
 such as monochrome, that means a grayscale image,

1557
02:23:22,280 --> 02:23:23,760
 color lookup table,

1558
02:23:23,760 --> 02:23:26,320
 it can also handle RGB image, right?

1559
02:23:26,320 --> 02:23:28,640
 It can handle YCVCR,

1560
02:23:28,640 --> 02:23:33,240
 but by far, YCVCR is the most commonly used color space

1561
02:23:33,240 --> 02:23:36,800
 if you want to perform JPEG compression, right?

1562
02:23:36,800 --> 02:23:37,760
 So either way,

1563
02:23:37,760 --> 02:23:39,800
 no matter which is the mode you're using,

1564
02:23:39,800 --> 02:23:40,640
 what you are going to do

1565
02:23:40,640 --> 02:23:43,160
 is that you're going to partition it into numerous

1566
02:23:43,160 --> 02:23:45,160
 eight by eight pixel block here.

1567
02:23:45,160 --> 02:23:47,640
 So each of this eight by eight pixel block here now,

1568
02:23:47,640 --> 02:23:49,680
 so you are going to take this image,

1569
02:23:49,680 --> 02:23:52,480
 you partition it into numerous eight by eight pixel block.

1570
02:23:52,480 --> 02:23:54,600
 So each of this particular pixel block now

1571
02:23:54,600 --> 02:23:58,600
 is going to be passed to your DCT transform, okay?

1572
02:23:58,600 --> 02:23:59,600
 So it's very simple,

1573
02:23:59,600 --> 02:24:00,640
 give it an image,

1574
02:24:00,640 --> 02:24:04,280
 you just partition it into numerous eight by eight pixel block.

1575
02:24:04,280 --> 02:24:06,280
 So each of the pixel block now,

1576
02:24:06,280 --> 02:24:08,920
 you are going to pass it through DCT, okay?

1577
02:24:10,680 --> 02:24:12,080
 So therefore, the next step is that

1578
02:24:12,080 --> 02:24:15,320
 we are going to let it go through the DCT here now.

1579
02:24:15,320 --> 02:24:19,120
 So the DCT is applied to each of the pixel blocks here.

1580
02:24:19,120 --> 02:24:21,000
 So if you look at this particular equations here,

1581
02:24:21,000 --> 02:24:22,600
 this equations is actually,

1582
02:24:22,720 --> 02:24:27,720
 just slightly right of just now the DCT transform equation

1583
02:24:27,960 --> 02:24:31,120
 that we have learned in the first half of the lecture.

1584
02:24:31,120 --> 02:24:34,520
 So we just let it go through the DCT transform,

1585
02:24:34,520 --> 02:24:36,760
 we have this particular eight by eight pixel block,

1586
02:24:36,760 --> 02:24:38,640
 after you go through this transform,

1587
02:24:38,640 --> 02:24:42,880
 then you'll get your eight by eight DCT coefficient, okay?

1588
02:24:44,720 --> 02:24:46,240
 Right, so a recap,

1589
02:24:46,240 --> 02:24:49,080
 why do you want to do this two-DDCT?

1590
02:24:49,080 --> 02:24:50,020
 By now you should know,

1591
02:24:50,020 --> 02:24:52,120
 the reason why we want to do the two-DDCT

1592
02:24:52,120 --> 02:24:54,680
 is because it has some good property.

1593
02:24:54,680 --> 02:24:57,160
 So exactly what are the good properties?

1594
02:24:57,160 --> 02:25:01,240
 So what are the good properties for that DCT can offer?

1595
02:25:03,400 --> 02:25:04,440
 Can you still remember?

1596
02:25:05,440 --> 02:25:10,440
 Number one, it offer energy compaction, right?

1597
02:25:11,400 --> 02:25:16,400
 Number two, it reduce the correlation

1598
02:25:17,520 --> 02:25:20,480
 between the coefficient or it perform this

1599
02:25:20,920 --> 02:25:24,480
 redundancy reductions here.

1600
02:25:24,480 --> 02:25:26,760
 All right, okay, so the reason why we want to perform

1601
02:25:26,760 --> 02:25:30,160
 the DCT is it convert the image data into a form,

1602
02:25:30,160 --> 02:25:32,800
 which is the DCT transform coefficient,

1603
02:25:32,800 --> 02:25:35,039
 which is more suitable for compression.

1604
02:25:35,039 --> 02:25:36,439
 That means it has some property

1605
02:25:36,439 --> 02:25:39,720
 that we can exploit to perform compression, right?

1606
02:25:39,720 --> 02:25:43,760
 So by now we know two-DDCT offer energy compaction, right?

1607
02:25:43,760 --> 02:25:45,520
 So given a particular pixel block,

1608
02:25:45,520 --> 02:25:48,480
 it try to, once you have the transform coefficient,

1609
02:25:48,480 --> 02:25:51,560
 the energy is packed to the top left corner.

1610
02:25:51,560 --> 02:25:53,880
 The reason why it's packed to the top left corner by now

1611
02:25:53,880 --> 02:25:58,680
 is because we know that the number of legal function

1612
02:25:58,680 --> 02:26:02,760
 that you use is more slowly changing.

1613
02:26:02,760 --> 02:26:05,880
 So number two is that offer redundancy reduction

1614
02:26:05,880 --> 02:26:08,880
 by reducing the correlation between transform coefficient.

1615
02:26:08,880 --> 02:26:11,800
 That means in a transform coefficient now,

1616
02:26:11,800 --> 02:26:15,359
 knowing this DCT coefficient doesn't really tell you much

1617
02:26:15,359 --> 02:26:17,920
 about the surrounding DCT coefficient.

1618
02:26:17,920 --> 02:26:21,560
 That means you already remove the correlation.

1619
02:26:21,560 --> 02:26:24,960
 Correlation means similarity, okay, or relatedness.

1620
02:26:24,960 --> 02:26:28,140
 So once you remove all this similarity and relatedness,

1621
02:26:28,140 --> 02:26:31,240
 that means there's no extra unnecessary information

1622
02:26:31,240 --> 02:26:32,720
 in your transform domain.

1623
02:26:32,720 --> 02:26:35,520
 So from the context of compression, this is good.

1624
02:26:38,120 --> 02:26:40,000
 Right, okay, so this is the recaps

1625
02:26:40,000 --> 02:26:42,920
 of the JPEG DCT basis function.

1626
02:26:42,920 --> 02:26:45,160
 So in our previous lecture,

1627
02:26:45,160 --> 02:26:47,680
 we start off with a four by four pixel block

1628
02:26:47,680 --> 02:26:50,320
 because four by four pixel block is actually much easier

1629
02:26:50,320 --> 02:26:52,440
 for you to understand and visualize.

1630
02:26:52,440 --> 02:26:56,880
 But for JPEG because they are using eight by eight

1631
02:26:56,880 --> 02:26:57,880
 pixel block.

1632
02:26:57,880 --> 02:27:00,000
 So if they're using eight by eight pixel block,

1633
02:27:00,000 --> 02:27:02,800
 then the corresponding legal function

1634
02:27:02,800 --> 02:27:05,600
 and basis function looks like this.

1635
02:27:05,600 --> 02:27:08,320
 So if you remember, you have eight by eight,

1636
02:27:08,320 --> 02:27:11,280
 16 different types of legal function.

1637
02:27:11,280 --> 02:27:13,000
 Okay, so the interpretation,

1638
02:27:13,000 --> 02:27:15,360
 actually I've explained to you before.

1639
02:27:16,360 --> 02:27:19,120
 Right, okay, so next we are going to,

1640
02:27:19,120 --> 02:27:23,960
 just try to look at this particular process,

1641
02:27:23,960 --> 02:27:27,120
 especially the change of basis in the DCT now.

1642
02:27:27,120 --> 02:27:31,960
 Right, okay, so when you're trying to perform DCT

1643
02:27:31,960 --> 02:27:33,600
 for the JPEG compression,

1644
02:27:33,600 --> 02:27:35,800
 so first of all, given an image,

1645
02:27:35,800 --> 02:27:38,920
 you partition it into numerous eight by eight pixel block.

1646
02:27:38,920 --> 02:27:41,800
 So therefore what we have now is that the input

1647
02:27:41,800 --> 02:27:44,000
 is the eight by eight pixel block here.

1648
02:27:44,040 --> 02:27:47,000
 So after you perform DCT,

1649
02:27:47,000 --> 02:27:51,280
 what you'll obtain is an eight by eight DCT coefficient here.

1650
02:27:51,280 --> 02:27:52,840
 Right, so eight by eight pixel block,

1651
02:27:52,840 --> 02:27:55,560
 after you calculate the DCT,

1652
02:27:55,560 --> 02:27:58,880
 you'll get the eight by eight DCT coefficient.

1653
02:27:58,880 --> 02:28:00,720
 So this particular process, if you want,

1654
02:28:00,720 --> 02:28:03,200
 you can think of it as just a mathematical process.

1655
02:28:03,200 --> 02:28:06,640
 Just now using a formula, using MATLAB, using Python,

1656
02:28:06,640 --> 02:28:10,280
 actually you can just use the pixel block

1657
02:28:10,280 --> 02:28:12,840
 and you can generate this DCT coefficient.

1658
02:28:12,840 --> 02:28:15,800
 But earlier on in the first half of the lecture,

1659
02:28:15,800 --> 02:28:19,440
 we tried to also introduce the concepts of basis function

1660
02:28:19,440 --> 02:28:21,600
 so that you have a better understanding

1661
02:28:21,600 --> 02:28:24,680
 and appreciation of what is happening, okay?

1662
02:28:24,680 --> 02:28:27,200
 So therefore an alternative interpretations

1663
02:28:27,200 --> 02:28:29,920
 of when you perform the DCT transform

1664
02:28:29,920 --> 02:28:32,080
 is this particular question here, right,

1665
02:28:32,080 --> 02:28:34,600
 which is when you are performing DCT,

1666
02:28:34,600 --> 02:28:37,080
 it involves a change of perspective

1667
02:28:37,080 --> 02:28:41,560
 or now you are trying to represent this pixel block

1668
02:28:41,560 --> 02:28:44,519
 using these new sets of legal function.

1669
02:28:44,519 --> 02:28:46,199
 So these new sets of legal function,

1670
02:28:46,199 --> 02:28:50,160
 you can see there are 64 different types

1671
02:28:50,160 --> 02:28:52,080
 of this legal function, right?

1672
02:28:52,080 --> 02:28:54,760
 So these 64 different types of legal function,

1673
02:28:54,760 --> 02:28:58,880
 each type you can have as many pieces as you want.

1674
02:28:58,880 --> 02:29:00,320
 Right, so now the questions,

1675
02:29:00,320 --> 02:29:03,720
 when you are performing the DCT transform for JPEG

1676
02:29:03,720 --> 02:29:05,560
 can be put in this way.

1677
02:29:05,560 --> 02:29:08,039
 If you are given an eight by eight pixel block,

1678
02:29:08,039 --> 02:29:11,439
 how many of this legal function, right,

1679
02:29:11,440 --> 02:29:13,240
 and how many of this legal function,

1680
02:29:13,240 --> 02:29:14,920
 and how many of this legal function,

1681
02:29:14,920 --> 02:29:17,400
 actually how many of each of the legal function

1682
02:29:18,840 --> 02:29:21,960
 that you need to stack them together

1683
02:29:21,960 --> 02:29:23,960
 to reconstruct this pixel block.

1684
02:29:25,000 --> 02:29:29,500
 So the number of this legal function that's required

1685
02:29:29,500 --> 02:29:32,320
 is your, this DCT coefficient.

1686
02:29:32,320 --> 02:29:35,520
 The number of these types of legal function that's required

1687
02:29:35,520 --> 02:29:37,520
 for you to reconstruct this pixel block

1688
02:29:37,520 --> 02:29:40,120
 is this DCT coefficient, okay?

1689
02:29:40,120 --> 02:29:42,160
 So the number of this type of legal function

1690
02:29:42,160 --> 02:29:45,320
 that's required for you to reconstruct this pixel block

1691
02:29:45,320 --> 02:29:48,280
 is given by the corresponding DCT coefficient.

1692
02:29:48,280 --> 02:29:50,880
 So by doing that, you'll be able to interpret

1693
02:29:50,880 --> 02:29:54,320
 what's the meaning of each of this DCT coefficient,

1694
02:29:54,320 --> 02:29:57,080
 which is the number of this legal function,

1695
02:29:57,080 --> 02:30:00,520
 which is required for you to stack them together

1696
02:30:00,520 --> 02:30:03,000
 to reconstruct your pixel block.

1697
02:30:03,000 --> 02:30:06,320
 Now, okay, just to make sure that you wanna understand,

1698
02:30:06,320 --> 02:30:09,800
 right, okay, so do you think you need more

1699
02:30:09,800 --> 02:30:11,560
 of this type of legal function,

1700
02:30:11,560 --> 02:30:14,039
 or you need more of this type of legal function?

1701
02:30:14,039 --> 02:30:17,039
 So if you need more of this type of legal function,

1702
02:30:17,039 --> 02:30:18,720
 the answer is A.

1703
02:30:18,720 --> 02:30:20,599
 If you need more of this type of legal function,

1704
02:30:20,599 --> 02:30:21,519
 the answer is B.

1705
02:30:21,519 --> 02:30:23,199
 So who thinks it's A?

1706
02:30:25,480 --> 02:30:26,800
 Okay, who thinks it's B?

1707
02:30:28,119 --> 02:30:29,960
 Okay, good, everyone learn.

1708
02:30:29,960 --> 02:30:32,400
 Right, so now we know that we need more

1709
02:30:32,400 --> 02:30:33,759
 of this type of legal function

1710
02:30:33,759 --> 02:30:34,920
 than this type of legal function.

1711
02:30:34,920 --> 02:30:35,759
 Why?

1712
02:30:35,759 --> 02:30:37,920
 Because given an 8 by 8 pixel block,

1713
02:30:37,920 --> 02:30:39,119
 which is a small neighborhood,

1714
02:30:39,240 --> 02:30:41,760
 pixel value generally tends to change slowly.

1715
02:30:41,760 --> 02:30:42,920
 So if we change slowly,

1716
02:30:42,920 --> 02:30:45,240
 that means we need more of this type of legal function

1717
02:30:45,240 --> 02:30:47,160
 than this type of legal function.

1718
02:30:47,160 --> 02:30:49,040
 If we need more of this type of legal function,

1719
02:30:49,040 --> 02:30:52,000
 that means the coefficient near this corner will be large,

1720
02:30:52,000 --> 02:30:55,120
 and the coefficient near this corner will be small.

1721
02:30:55,120 --> 02:30:59,600
 But so if the coefficient near this corner is large,

1722
02:30:59,600 --> 02:31:02,440
 then we can actually come up with a strategy

1723
02:31:02,440 --> 02:31:06,440
 to try to provide more emphasis to encode

1724
02:31:06,440 --> 02:31:09,680
 or to represent coefficient near this corner.

1725
02:31:09,680 --> 02:31:10,840
 Since the value is large,

1726
02:31:10,840 --> 02:31:13,320
 if it's large, we need to pay more attention to it.

1727
02:31:15,360 --> 02:31:16,360
 And also as I mentioned,

1728
02:31:16,360 --> 02:31:19,480
 this coefficient is known as DC,

1729
02:31:19,480 --> 02:31:21,600
 and the rest of the 63 coefficient

1730
02:31:21,600 --> 02:31:23,640
 are known as the AC coefficient.

1731
02:31:25,520 --> 02:31:28,240
 Right, okay, so this is another visualization.

1732
02:31:28,240 --> 02:31:30,200
 So this visualization is now,

1733
02:31:30,200 --> 02:31:33,440
 for example, these are now the DCT coefficients here.

1734
02:31:33,440 --> 02:31:35,040
 So actually it's the same story,

1735
02:31:35,040 --> 02:31:38,080
 it's just trying to explain it in some slightly different way

1736
02:31:38,080 --> 02:31:41,200
 and also have some graphics to help you to appreciate.

1737
02:31:41,200 --> 02:31:43,440
 So right, if you have the DCT coefficient,

1738
02:31:43,440 --> 02:31:45,200
 so what it means is that suppose it starts

1739
02:31:45,200 --> 02:31:47,680
 with a eight by eight pixel block,

1740
02:31:47,680 --> 02:31:49,760
 after you perform the DCT transform,

1741
02:31:49,760 --> 02:31:52,760
 this is your eight by eight DCT coefficient.

1742
02:31:52,760 --> 02:31:54,720
 So the eight by eight DCT coefficient,

1743
02:31:54,720 --> 02:31:56,320
 the first value actually means that

1744
02:31:56,320 --> 02:31:58,680
 how many of this block is required.

1745
02:31:58,680 --> 02:32:01,800
 So you can see this block is actually a flat block.

1746
02:32:01,800 --> 02:32:04,080
 So this DCT coefficient means that

1747
02:32:04,080 --> 02:32:06,720
 how many of this Lego function is required.

1748
02:32:06,720 --> 02:32:09,039
 Now you can see this Lego function is,

1749
02:32:09,039 --> 02:32:10,760
 if you cut through it horizontally,

1750
02:32:10,760 --> 02:32:12,320
 it's actually look like that.

1751
02:32:12,320 --> 02:32:14,240
 So there's a 3D view,

1752
02:32:14,240 --> 02:32:16,120
 a bit easier for you to appreciate.

1753
02:32:16,120 --> 02:32:17,480
 Right, so let's just take one more.

1754
02:32:17,480 --> 02:32:20,000
 How many, for example, this DCT coefficient,

1755
02:32:20,000 --> 02:32:21,920
 so this DCT coefficient means that

1756
02:32:21,920 --> 02:32:24,720
 how many of this Lego function is required

1757
02:32:24,720 --> 02:32:26,440
 for you to stack together

1758
02:32:26,440 --> 02:32:28,800
 to reconstruct the original pixel block.

1759
02:32:28,800 --> 02:32:31,880
 So this one here, the underlying Lego function

1760
02:32:31,880 --> 02:32:33,480
 is if you take a knife,

1761
02:32:33,480 --> 02:32:37,240
 you cut vertically, it's changing like this.

1762
02:32:37,240 --> 02:32:39,920
 So this is exactly what we have explained before,

1763
02:32:39,920 --> 02:32:42,840
 but now they use some 3D visualization

1764
02:32:42,840 --> 02:32:46,880
 to help you to appreciate and understand a little bit more.

1765
02:32:48,359 --> 02:32:50,359
 Right, okay, so yeah, we'll just continue.

1766
02:32:50,359 --> 02:32:54,520
 So for example, if you take a particular pixel block,

1767
02:32:54,520 --> 02:32:56,359
 for example, now this is the pixel block,

1768
02:32:56,359 --> 02:32:57,960
 eight by eight pixel block.

1769
02:32:57,960 --> 02:32:59,840
 If you look at this pixel value,

1770
02:32:59,840 --> 02:33:02,720
 so these are some pixel values here.

1771
02:33:03,160 --> 02:33:05,080
 The reason why you have some negative value

1772
02:33:05,080 --> 02:33:09,400
 is because probably they minus some average value

1773
02:33:09,400 --> 02:33:10,240
 or something first.

1774
02:33:10,240 --> 02:33:12,240
 They do some pre-processing first.

1775
02:33:12,240 --> 02:33:15,760
 So anyway, this is the eight by eight pixel block

1776
02:33:15,760 --> 02:33:18,480
 from the image, and this is the corresponding value.

1777
02:33:18,480 --> 02:33:21,240
 So you can see brighter value corresponding

1778
02:33:21,240 --> 02:33:23,320
 to larger value, okay?

1779
02:33:23,320 --> 02:33:25,240
 Yeah, and then darker value corresponding

1780
02:33:25,240 --> 02:33:26,760
 to a smaller value here.

1781
02:33:26,760 --> 02:33:29,880
 So now, for example, if you have this pixel block,

1782
02:33:29,880 --> 02:33:33,160
 when you perform 2D DCT, right,

1783
02:33:33,160 --> 02:33:35,439
 what you obtain is the coefficient

1784
02:33:35,439 --> 02:33:36,480
 will look something like this.

1785
02:33:36,480 --> 02:33:40,000
 For example, this is your DCT coefficients here.

1786
02:33:40,000 --> 02:33:42,800
 So what you notice is that the coefficient

1787
02:33:42,800 --> 02:33:47,240
 near these corners here, the magnitude is larger.

1788
02:33:47,240 --> 02:33:49,160
 The coefficient near these corners here,

1789
02:33:49,160 --> 02:33:50,800
 the magnitude is smaller.

1790
02:33:50,800 --> 02:33:55,000
 So this is exactly what I've tried to explain before.

1791
02:33:55,000 --> 02:33:58,960
 And because energy is defined as each coefficient squared,

1792
02:33:58,960 --> 02:34:01,039
 so therefore you can see energy is actually

1793
02:34:01,039 --> 02:34:03,439
 packed at this corner, okay?

1794
02:34:03,439 --> 02:34:07,320
 And this region here, energy is very small, right?

1795
02:34:07,320 --> 02:34:09,119
 So you can see therefore these corners here,

1796
02:34:09,119 --> 02:34:11,400
 the value is much larger, okay?

1797
02:34:11,400 --> 02:34:14,080
 So therefore you can see in the original pixel domain,

1798
02:34:14,080 --> 02:34:17,679
 you do not know where the energy is distributed

1799
02:34:17,679 --> 02:34:20,039
 because you do not know how the pixel block looks like.

1800
02:34:20,039 --> 02:34:22,279
 But if you perform DCT now,

1801
02:34:22,279 --> 02:34:24,320
 we know that energy is packed

1802
02:34:24,320 --> 02:34:26,679
 into this top corner coefficient.

1803
02:34:26,720 --> 02:34:29,480
 So therefore now we have a good way to, you know,

1804
02:34:29,480 --> 02:34:33,320
 to exploit, to perform compression by concentrating

1805
02:34:33,320 --> 02:34:37,560
 our emphasis on this coefficient near this corner.

1806
02:34:37,560 --> 02:34:39,240
 Right, this corner, not so important

1807
02:34:39,240 --> 02:34:40,400
 because their values are small.

1808
02:34:40,400 --> 02:34:42,280
 So we can just enum most of the,

1809
02:34:42,280 --> 02:34:44,360
 and we have come up with some strategy

1810
02:34:44,360 --> 02:34:47,840
 to put more emphasis to this top corner.

1811
02:34:48,720 --> 02:34:50,440
 So let's continue.

1812
02:34:50,440 --> 02:34:52,920
 Right, okay, so, right, yeah,

1813
02:34:52,920 --> 02:34:55,240
 this is just one more example.

1814
02:34:55,240 --> 02:34:59,039
 For example, this is actually your DCT coefficients here.

1815
02:34:59,039 --> 02:35:00,800
 Right, so DCT coefficient.

1816
02:35:00,800 --> 02:35:02,800
 So for example, this coefficient means

1817
02:35:02,800 --> 02:35:05,680
 that how many of this Lego function,

1818
02:35:05,680 --> 02:35:08,320
 this coefficient, DCT coefficient means

1819
02:35:08,320 --> 02:35:09,760
 how many of this Lego function,

1820
02:35:09,760 --> 02:35:12,640
 this coefficient means how many of this Lego function

1821
02:35:12,640 --> 02:35:15,320
 is required for you to reconstruct

1822
02:35:15,320 --> 02:35:16,600
 your original pixel block.

1823
02:35:16,600 --> 02:35:20,760
 Again, we repeat this message a number of times

1824
02:35:20,760 --> 02:35:23,880
 so that you can fully appreciate and understand it, yeah?

1825
02:35:23,880 --> 02:35:25,320
 In the context of JPEG.

1826
02:35:25,320 --> 02:35:28,199
 So in JPEG, this is exactly what happened.

1827
02:35:31,039 --> 02:35:34,240
 Right, okay, so now let's look at, for example,

1828
02:35:34,240 --> 02:35:35,599
 this particular image here.

1829
02:35:35,599 --> 02:35:37,720
 So if you have this image, if you remember,

1830
02:35:37,720 --> 02:35:40,560
 we partitioned into numerous A by A pixel blocks.

1831
02:35:40,560 --> 02:35:43,599
 Suppose you take this current pixel block here.

1832
02:35:43,599 --> 02:35:46,439
 So you take this pixel block, this is how it looks like.

1833
02:35:46,439 --> 02:35:51,439
 Okay, this is corresponding, you know, pixel value.

1834
02:35:51,440 --> 02:35:54,040
 So if you perform 2D DCT, right,

1835
02:35:54,040 --> 02:35:56,560
 so you can see this is a DCT coefficient,

1836
02:35:56,560 --> 02:35:59,560
 values near these corners are much larger,

1837
02:35:59,560 --> 02:36:01,800
 generally speaking, the value near this corner.

1838
02:36:01,800 --> 02:36:04,040
 So this is energy compaction, right?

1839
02:36:04,040 --> 02:36:08,240
 So if you use a color bar to make it easier to visualize,

1840
02:36:08,240 --> 02:36:11,000
 yellow color means that the magnitude are larger.

1841
02:36:11,000 --> 02:36:15,040
 Okay, so now you can see now the energy is packed

1842
02:36:15,040 --> 02:36:17,160
 to this top left corner.

1843
02:36:18,160 --> 02:36:21,600
 Right, okay, so now with the understanding,

1844
02:36:21,600 --> 02:36:24,720
 we can proceed a bit more now.

1845
02:36:24,720 --> 02:36:29,039
 Okay, so next, right, so this is your original

1846
02:36:29,039 --> 02:36:30,160
 A by A pixel block.

1847
02:36:30,160 --> 02:36:32,280
 After you perform the DCT transform,

1848
02:36:32,280 --> 02:36:34,920
 you'll get the 8 by 8 DCT coefficient.

1849
02:36:34,920 --> 02:36:37,360
 So early on, we already see this first coefficient

1850
02:36:37,360 --> 02:36:40,000
 is known as the DC coefficient.

1851
02:36:40,000 --> 02:36:44,640
 The rest of the 63 coefficient are known as the AC coefficient.

1852
02:36:44,640 --> 02:36:49,480
 So in particular, the AC coefficient near this region,

1853
02:36:49,480 --> 02:36:51,720
 we call it low AC coefficient.

1854
02:36:52,640 --> 02:36:55,080
 The AC coefficient near this region,

1855
02:36:55,080 --> 02:36:57,880
 we call it the high AC coefficient, right?

1856
02:36:57,880 --> 02:37:00,439
 Because of what we mentioned before, right?

1857
02:37:00,439 --> 02:37:03,680
 So near this, the coefficient near here,

1858
02:37:03,680 --> 02:37:08,359
 the underlying legal function is changing much slowly, right?

1859
02:37:08,359 --> 02:37:10,680
 The AC coefficient near this corner,

1860
02:37:10,680 --> 02:37:14,420
 the underlying legal function is changing much faster.

1861
02:37:14,420 --> 02:37:18,020
 So therefore, we call this low AC coefficient,

1862
02:37:18,020 --> 02:37:20,740
 we call this high AC coefficient here.

1863
02:37:20,740 --> 02:37:22,220
 And if you look at this coefficient,

1864
02:37:22,220 --> 02:37:25,140
 if you move it horizontally, right?

1865
02:37:25,140 --> 02:37:27,100
 If you move in this direction here, right?

1866
02:37:27,100 --> 02:37:31,900
 The coefficient shows increasing horizontal spatial frequency.

1867
02:37:31,900 --> 02:37:33,580
 Right, that means if you move in this direction,

1868
02:37:33,580 --> 02:37:35,300
 if you remember initially it's flat,

1869
02:37:35,300 --> 02:37:38,420
 it changes slowly, it changes faster and faster.

1870
02:37:38,420 --> 02:37:42,300
 So this is the increasing horizontal spatial frequency.

1871
02:37:42,300 --> 02:37:44,100
 Right, if you look at this coefficient,

1872
02:37:44,100 --> 02:37:45,380
 if you move down here,

1873
02:37:45,380 --> 02:37:50,380
 this is increasing vertical spatial frequency.

1874
02:37:51,900 --> 02:37:52,740
 All right?

1875
02:37:55,060 --> 02:37:58,620
 Okay, so we'll probably just look at the quantization next.

1876
02:37:58,620 --> 02:38:01,300
 So for quantization, early on as I mentioned,

1877
02:38:01,300 --> 02:38:04,260
 because we're using computer to represent,

1878
02:38:04,260 --> 02:38:06,500
 so we only have a finite number of bits

1879
02:38:06,500 --> 02:38:09,900
 to represent the DCT coefficient, all right?

1880
02:38:09,900 --> 02:38:12,340
 So because we only have a finite number of bits,

1881
02:38:12,340 --> 02:38:14,820
 therefore we must perform quantization.

1882
02:38:14,820 --> 02:38:17,980
 So quantization is required to map the continuous value

1883
02:38:17,980 --> 02:38:19,740
 into the discrete value.

1884
02:38:19,740 --> 02:38:22,200
 So how do we perform this quantization?

1885
02:38:22,200 --> 02:38:23,980
 In order to perform the quantization,

1886
02:38:23,980 --> 02:38:27,060
 we'll be using a quantization table, right?

1887
02:38:27,060 --> 02:38:29,140
 So whenever we use quantization,

1888
02:38:29,140 --> 02:38:31,300
 we know that some information is lost,

1889
02:38:31,300 --> 02:38:34,220
 just like what we have studied before

1890
02:38:34,220 --> 02:38:36,420
 in previous lecture, quantization,

1891
02:38:36,420 --> 02:38:38,420
 because it's a many to one mapping,

1892
02:38:38,420 --> 02:38:40,660
 I mean some information will be lost.

1893
02:38:40,660 --> 02:38:44,619
 So information lost will occur during quantization.

1894
02:38:45,980 --> 02:38:50,460
 Right, okay, so next let's look at this quantization table.

1895
02:38:50,460 --> 02:38:52,860
 So before that, let's look at how do we perform

1896
02:38:52,860 --> 02:38:54,740
 the quantization.

1897
02:38:54,740 --> 02:38:58,500
 So we just skip a few steps forward

1898
02:38:58,500 --> 02:39:01,100
 and afterwards we'll come back to the previous slides.

1899
02:39:01,100 --> 02:39:04,780
 Okay, so right, this is our DCT coefficient here.

1900
02:39:04,780 --> 02:39:07,539
 So if you remember, we have a A by A prixer block

1901
02:39:07,540 --> 02:39:10,820
 after we perform the DCT transform.

1902
02:39:10,820 --> 02:39:14,260
 Suppose for one moment this is our DCT coefficient here.

1903
02:39:14,260 --> 02:39:16,100
 Yeah, it's highly simplified here,

1904
02:39:16,100 --> 02:39:18,780
 but this is the DCT coefficient here, right?

1905
02:39:18,780 --> 02:39:21,220
 Okay, so in order to perform quantization,

1906
02:39:21,220 --> 02:39:22,700
 we need to make use of this,

1907
02:39:22,700 --> 02:39:24,860
 what's known as a quantization table.

1908
02:39:24,860 --> 02:39:28,020
 So this is a quantization table here, right?

1909
02:39:28,020 --> 02:39:30,380
 So this quantization table here, right?

1910
02:39:30,380 --> 02:39:31,660
 When we perform quantization,

1911
02:39:31,660 --> 02:39:35,420
 what we do is we perform an element by element quantization.

1912
02:39:35,420 --> 02:39:37,820
 We take this particular value here,

1913
02:39:37,820 --> 02:39:40,860
 we divide by this quantization step size

1914
02:39:40,860 --> 02:39:43,900
 and we round to the nearest integer, okay?

1915
02:39:43,900 --> 02:39:47,260
 So for example, 120 divided by 10 will give you 12, right?

1916
02:39:47,260 --> 02:39:50,620
 So 12 is exact integer, so we can just write down as 12.

1917
02:39:50,620 --> 02:39:53,660
 Right, but if for example we have 40, right?

1918
02:39:53,660 --> 02:39:56,700
 We divide that by this 15 here, right?

1919
02:39:56,700 --> 02:39:58,660
 And then if we round to the nearest integer,

1920
02:39:58,660 --> 02:40:00,300
 you'll see that it's three.

1921
02:40:00,300 --> 02:40:02,340
 So in other words, right,

1922
02:40:02,340 --> 02:40:03,500
 when we perform quantization,

1923
02:40:03,500 --> 02:40:05,500
 it's an element by element operation.

1924
02:40:05,500 --> 02:40:09,460
 You take the value, you divide by the corresponding value

1925
02:40:09,460 --> 02:40:11,860
 or step size in the quantization table,

1926
02:40:11,860 --> 02:40:14,220
 you round it to the nearest integer.

1927
02:40:14,220 --> 02:40:17,460
 So this particular operation is given here.

1928
02:40:17,460 --> 02:40:19,500
 You have your DCT coefficient,

1929
02:40:19,500 --> 02:40:23,100
 you divide by the corresponding quantization value

1930
02:40:23,100 --> 02:40:26,140
 or step size, you round to the nearest integer

1931
02:40:26,140 --> 02:40:29,980
 and then you have the quantized DCT coefficient, okay?

1932
02:40:29,980 --> 02:40:33,180
 So the process actually is simple.

1933
02:40:33,180 --> 02:40:35,460
 But if we spend one moment here

1934
02:40:35,460 --> 02:40:38,540
 to look at this particular quantization table, right?

1935
02:40:38,540 --> 02:40:41,980
 So this is the quantization, a sample quantization table,

1936
02:40:41,980 --> 02:40:43,820
 right, a sample quantization table.

1937
02:40:43,820 --> 02:40:46,940
 What do you notice about this sample quantization table?

1938
02:40:49,240 --> 02:40:50,080
 What do you notice?

1939
02:40:50,080 --> 02:40:52,860
 Is that a certain pattern for this quantization table?

1940
02:40:52,860 --> 02:40:57,860
 Do you notice certain pattern for this quantization table?

1941
02:41:06,300 --> 02:41:08,820
 You'll see that the values near this DC

1942
02:41:08,820 --> 02:41:11,460
 and low AC coefficients, yeah.

1943
02:41:11,460 --> 02:41:14,060
 Okay, this value inside, we call it value

1944
02:41:14,060 --> 02:41:15,660
 or sometimes we call it step size.

1945
02:41:15,660 --> 02:41:17,380
 It refers to the same thing.

1946
02:41:17,380 --> 02:41:20,740
 So you can see that this value near the low AC coefficients,

1947
02:41:20,740 --> 02:41:24,699
 their values are small or large.

1948
02:41:27,060 --> 02:41:29,539
 Their values, okay, as compared to here,

1949
02:41:29,539 --> 02:41:32,980
 these values are small or large, small, right?

1950
02:41:32,980 --> 02:41:35,820
 Okay, so the step size of the quantization value

1951
02:41:35,820 --> 02:41:40,820
 near this high AC coefficients, their values are large, right?

1952
02:41:41,180 --> 02:41:43,260
 Okay, now the question is why?

1953
02:41:43,260 --> 02:41:45,660
 Why do we have a quantization table

1954
02:41:45,660 --> 02:41:49,500
 such that the step size near these corners are small

1955
02:41:49,500 --> 02:41:51,980
 but the step size near these corners are large?

1956
02:41:58,340 --> 02:41:59,860
 Right, if you can answer this question,

1957
02:41:59,860 --> 02:42:01,920
 then we can finish the class today.

1958
02:42:01,920 --> 02:42:04,340
 I know some of you are already just waiting

1959
02:42:04,340 --> 02:42:06,860
 for the goal signal, right?

1960
02:42:06,860 --> 02:42:11,860
 So why do you think the step size here is smaller

1961
02:42:13,260 --> 02:42:14,760
 and the step size here is larger?

1962
02:42:19,780 --> 02:42:24,280
 I'm sorry, say something, I can't hear clearly.

1963
02:42:33,660 --> 02:42:36,900
 Okay, so I guess what you're trying to say

1964
02:42:36,900 --> 02:42:41,900
 is that because the DC and low AC coefficients are large

1965
02:42:43,380 --> 02:42:46,820
 and these high AC coefficients are already very small.

1966
02:42:46,820 --> 02:42:50,140
 So therefore, right, because the values here are large

1967
02:42:50,140 --> 02:42:52,940
 in order to reduce the quantization error,

1968
02:42:52,940 --> 02:42:55,539
 because we know most of the values here are large.

1969
02:42:55,539 --> 02:42:58,380
 So if you want to reduce the quantization error

1970
02:42:58,380 --> 02:43:02,340
 that is being incurred, we must use small step size here

1971
02:43:02,340 --> 02:43:04,820
 because the larger the step size,

1972
02:43:04,820 --> 02:43:07,300
 the more loss you are going to introduce, correct?

1973
02:43:07,300 --> 02:43:08,900
 So therefore, since this values,

1974
02:43:08,900 --> 02:43:12,140
 most of the values are focused on at this corner,

1975
02:43:12,140 --> 02:43:13,860
 we must use small step size here

1976
02:43:13,860 --> 02:43:18,340
 so that we'll introduce much lesser quantization error.

1977
02:43:18,340 --> 02:43:21,380
 Okay, I think this is, yeah, it makes sense.

1978
02:43:21,380 --> 02:43:22,380
 And this corner here,

1979
02:43:22,380 --> 02:43:24,300
 because the values are already very small,

1980
02:43:24,300 --> 02:43:27,500
 so it doesn't matter, we can use a larger value, right?

1981
02:43:27,500 --> 02:43:30,220
 Okay, so that is the first reason.

1982
02:43:30,220 --> 02:43:31,940
 Actually, there's one more reason.

1983
02:43:33,020 --> 02:43:36,900
 So the first reason is because the value near this

1984
02:43:36,900 --> 02:43:38,660
 low AC coefficients are large,

1985
02:43:38,660 --> 02:43:41,340
 so therefore to reduce quantization error,

1986
02:43:41,340 --> 02:43:43,340
 we should use small step size here.

1987
02:43:44,620 --> 02:43:46,420
 Right, what's the second reason?

1988
02:43:46,420 --> 02:43:48,460
 Why we want to use small steps size here?

1989
02:43:51,260 --> 02:43:54,740
 It's because our human visual systems

1990
02:43:54,740 --> 02:43:59,220
 is more sensitive to just now, low AC or high.

1991
02:43:59,220 --> 02:44:01,260
 Our human visual system is more sensitive

1992
02:44:01,260 --> 02:44:06,260
 to changes or distortion in low AC or high AC coefficient.

1993
02:44:06,900 --> 02:44:07,940
 Low AC, right?

1994
02:44:07,940 --> 02:44:11,460
 So that means our eyes are more sensitive to any changes

1995
02:44:11,460 --> 02:44:14,580
 or any distortion in this low AC coefficient.

1996
02:44:14,580 --> 02:44:17,900
 If our eyes are more sensitive to any changes

1997
02:44:17,900 --> 02:44:21,660
 or quantization error in this low AC coefficient,

1998
02:44:21,660 --> 02:44:24,900
 then we better make sure that we use a smaller step size

1999
02:44:24,900 --> 02:44:28,900
 to make sure that we do not introduce so much distortion.

2000
02:44:30,140 --> 02:44:33,699
 In our, this low AC coefficient.

2001
02:44:33,699 --> 02:44:35,500
 So these are the two reasons why

2002
02:44:35,500 --> 02:44:38,699
 we designed the quantization table in this way.

2003
02:44:38,980 --> 02:44:41,540
 Okay, I think we'll finish the class today.

2004
02:44:41,540 --> 02:44:42,700
 We'll continue next week.

2005
02:44:42,700 --> 02:44:44,260
 So next week we'll be here again.

2006
02:44:46,260 --> 02:44:47,100
 Thank you.

2007
02:44:47,100 --> 02:44:47,940
 Thank you.

2008
02:45:08,700 --> 02:45:09,540
 Thank you.

2009
02:45:38,700 --> 02:45:39,540
 Thank you.

2010
02:46:08,700 --> 02:46:09,540
 Thank you.

2011
02:46:38,700 --> 02:46:39,540
 Thank you.

2012
02:47:08,700 --> 02:47:09,540
 Thank you.

2013
02:47:38,700 --> 02:47:39,540
 Thank you.

2014
02:48:08,700 --> 02:48:09,540
 Thank you.

2015
02:48:38,700 --> 02:48:39,540
 Thank you.

2016
02:49:08,700 --> 02:49:09,540
 Thank you.

2017
02:49:38,700 --> 02:49:39,540
 Thank you.

2018
02:50:08,700 --> 02:50:09,540
 Thank you.

2019
02:50:38,700 --> 02:50:39,540
 Thank you.

2020
02:51:08,700 --> 02:51:09,540
 Thank you.

2021
02:51:38,700 --> 02:51:39,540
 Thank you.

2022
02:52:08,700 --> 02:52:09,540
 Thank you.

2023
02:52:38,700 --> 02:52:39,540
 Thank you.

2024
02:53:08,700 --> 02:53:09,540
 Thank you.

2025
02:53:38,700 --> 02:53:39,540
 Thank you.

2026
02:54:08,700 --> 02:54:09,540
 Thank you.

2027
02:54:38,700 --> 02:54:39,540
 Thank you.

2028
02:55:08,700 --> 02:55:09,540
 Thank you.

2029
02:55:38,700 --> 02:55:39,540
 Thank you.

2030
02:56:08,700 --> 02:56:09,540
 Thank you.

2031
02:56:38,700 --> 02:56:39,540
 Thank you.

2032
02:57:08,700 --> 02:57:09,540
 Thank you.

2033
02:57:38,700 --> 02:57:39,540
 Thank you.

2034
02:58:08,700 --> 02:58:09,540
 Thank you.

2035
02:58:38,700 --> 02:58:39,540
 Thank you.

2036
02:59:08,700 --> 02:59:09,540
 Thank you.

2037
02:59:38,700 --> 02:59:39,540
 Thank you.

