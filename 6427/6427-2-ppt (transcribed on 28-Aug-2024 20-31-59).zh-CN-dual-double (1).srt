1
00:00:00,000 --> 00:00:12,100
 driving and sounds

1
00:00:00,000 --> 00:00:12,100
驾驶和声音

2
00:01:12,100 --> 00:01:19,100
 th

2
00:01:12,100 --> 00:01:19,100
th

3
00:01:42,100 --> 00:01:49,100
 th

3
00:01:42,100 --> 00:01:49,100
th

4
00:02:12,100 --> 00:02:19,100
 th

4
00:02:12,100 --> 00:02:19,100
th

5
00:02:25,299 --> 00:02:27,820
 okay uh... greening class

5
00:02:25,299 --> 00:02:27,820
好吧呃...绿化课

6
00:02:27,820 --> 00:02:32,940
 right so we'll come back uh... so before we start the lecture today just want to

6
00:02:27,820 --> 00:02:32,940
是的，所以我们会回来呃...所以在我们今天开始讲座之前只想

7
00:02:32,940 --> 00:02:36,420
 remind you right in case some of you uh...

7
00:02:32,940 --> 00:02:36,420
提醒你一下，以防你们中的一些人呃...

8
00:02:36,420 --> 00:02:38,240
 may not be aware

8
00:02:36,420 --> 00:02:38,240
可能不知道

9
00:02:38,240 --> 00:02:43,560
 so uh... today is twenty second of august so we are supposed to have a lecture in this LT

9
00:02:38,240 --> 00:02:43,560
所以呃...今天是八月二十二号所以我们应该有一个关于这个LT的讲座

10
00:02:43,560 --> 00:02:45,280
 which is LT2A

10
00:02:43,560 --> 00:02:45,280
这是 LT2A

11
00:02:45,280 --> 00:02:50,760
 but for the next two weeks we'll be having our lectures in this Lee Koon Cheon LT here

11
00:02:45,280 --> 00:02:50,760
但接下来的两周我们将在 Lee Koon Cheon LT 中进行讲座

12
00:02:50,760 --> 00:02:54,480
 so this is the LT near Can Thim B

12
00:02:50,760 --> 00:02:54,480
这是 Can Thim B 附近的 LT

13
00:02:54,480 --> 00:02:56,760
 okay so just to remind you that

13
00:02:54,480 --> 00:02:56,760
好的，只是提醒你一下

14
00:02:56,760 --> 00:03:00,840
 for the next two weeks the lectures will be in Lee Koon Cheon LT

14
00:02:56,760 --> 00:03:00,840
接下来两周的讲座将在 Lee Koon Cheon LT 进行

15
00:03:00,840 --> 00:03:03,760
 above or near Can Thim B

15
00:03:00,840 --> 00:03:03,760
Can Thim B 上方或附近

16
00:03:03,760 --> 00:03:07,600
 okay and also uh... in case some of you are not aware

16
00:03:03,760 --> 00:03:07,600
好吧，呃……以防万一你们中有些人不知道

17
00:03:07,640 --> 00:03:12,480
 right so you can uh... download the lecture notes and some

17
00:03:07,640 --> 00:03:12,480
是的，所以你可以呃...下载讲义和一些

18
00:03:12,480 --> 00:03:16,440
 uh... exercises from the uh... folder

18
00:03:12,480 --> 00:03:16,440
呃...来自呃...文件夹的练习

19
00:03:16,440 --> 00:03:21,280
 right so from the course folder and also there's some recorded lectures so each week

19
00:03:16,440 --> 00:03:21,280
就在课程文件夹中，还有一些每周录制的讲座

20
00:03:21,280 --> 00:03:23,880
 the lectures will be recorded

20
00:03:21,280 --> 00:03:23,880
讲座将被记录

21
00:03:23,880 --> 00:03:28,720
 okay so if you want to do some revision you are welcome to

21
00:03:23,880 --> 00:03:28,720
好的，如果您想做一些修改，欢迎您

22
00:03:28,720 --> 00:03:32,920
 uh... watch these particular lectures

22
00:03:28,720 --> 00:03:32,920
呃...观看这些特别的讲座

23
00:03:32,920 --> 00:03:35,160
 so also from

23
00:03:32,920 --> 00:03:35,160
所以也从

24
00:03:35,160 --> 00:03:37,440
 can you all hear me from the back

24
00:03:35,160 --> 00:03:37,440
你们能从后面听到我的声音吗

25
00:03:37,440 --> 00:03:40,000
 yeah also from past experience we will

25
00:03:37,440 --> 00:03:40,000
是的，根据过去的经验，我们也会

26
00:03:40,000 --> 00:03:42,320
 you know tends to notice that as

26
00:03:40,000 --> 00:03:42,320
你知道往往会注意到

27
00:03:42,320 --> 00:03:43,880
 you know the lecture progress

27
00:03:42,320 --> 00:03:43,880
你知道讲座进度

28
00:03:43,880 --> 00:03:46,680
 the number of students will start to decrease

28
00:03:43,880 --> 00:03:46,680
学生人数将开始减少

29
00:03:46,680 --> 00:03:50,840
 so last week you can see lots of seats are taken this week already there are some

29
00:03:46,680 --> 00:03:50,840
所以上周你可以看到很多座位都被占用了，本周已经有一些座位了

30
00:03:50,840 --> 00:03:52,120
 uh... empty seats

30
00:03:50,840 --> 00:03:52,120
呃……空位子

31
00:03:52,120 --> 00:03:54,440
 so we expect the train to continue

31
00:03:52,120 --> 00:03:54,440
所以我们预计火车会继续

32
00:03:54,440 --> 00:03:57,360
 right so one of the possible reason is that

32
00:03:54,440 --> 00:03:57,360
是的，所以可能的原因之一是

33
00:03:57,360 --> 00:03:59,780
 uh... some students told me before they find it

33
00:03:57,360 --> 00:03:59,780
呃...有些学生在找到之前就告诉我了

34
00:03:59,780 --> 00:04:01,960
 you know they can watch this recorded lecture

34
00:03:59,780 --> 00:04:01,960
你知道他们可以观看这个录制的讲座

35
00:04:01,960 --> 00:04:04,440
 and they can make the speed to 1.5

35
00:04:01,960 --> 00:04:04,440
他们可以将速度提高到1.5

36
00:04:04,640 --> 00:04:08,200
 they said that when I speak my pace is a bit slow

36
00:04:04,640 --> 00:04:08,200
他们说我说话的时候步伐有点慢

37
00:04:08,200 --> 00:04:10,760
 so if they speed up the

37
00:04:08,200 --> 00:04:10,760
所以如果他们加快

38
00:04:10,760 --> 00:04:13,920
 this lecture speed by 1.5 times

38
00:04:10,760 --> 00:04:13,920
本讲课速度提高1.5倍

39
00:04:13,920 --> 00:04:18,440
 he can actually cut down one hour so instead of coming here and stay for three hours

39
00:04:13,920 --> 00:04:18,440
他实际上可以减少一个小时，所以不用来这里呆三个小时

40
00:04:18,440 --> 00:04:19,480
 you just need to

40
00:04:18,440 --> 00:04:19,480
你只需要

41
00:04:19,480 --> 00:04:22,800
 you know spend two hours to watch the recorded lecture

41
00:04:19,480 --> 00:04:22,800
你知道花两个小时观看录制的讲座

42
00:04:22,800 --> 00:04:29,600
 okay so anyway that's a joke aside so uh... yeah please continue to come and attend the lecture

42
00:04:22,800 --> 00:04:29,600
好吧，无论如何，这是一个笑话，所以呃...是的，请继续来参加讲座

43
00:04:29,600 --> 00:04:33,159
 but just to let you know that there's this recorded lecture that you can watch

43
00:04:29,600 --> 00:04:33,159
但只是想让你知道，你可以观看这个讲座录音

44
00:04:33,160 --> 00:04:35,800
 uh... afterwards if you find that there are some

44
00:04:33,160 --> 00:04:35,800
呃...之后如果你发现有一些

45
00:04:35,800 --> 00:04:42,800
 uh... concepts that you are not clear with

45
00:04:35,800 --> 00:04:42,800
呃……你不清楚的概念

46
00:04:51,640 --> 00:04:56,160
 okay so uh... today we are going to continue on with our lecture so we are going to move on to

46
00:04:51,640 --> 00:04:56,160
好吧，呃...今天我们将继续我们的讲座，所以我们将继续

47
00:04:56,160 --> 00:04:57,480
 part two now

47
00:04:56,160 --> 00:04:57,480
现在第二部分

48
00:04:57,480 --> 00:05:03,960
 so part two will be mainly dealing with image compression and jpeg standards

48
00:04:57,480 --> 00:05:03,960
所以第二部分将主要处理图像压缩和 jpeg 标准

49
00:05:03,960 --> 00:05:08,880
 right so again these are some references should you have any questions that you want to

49
00:05:03,960 --> 00:05:08,880
是的，如果您有任何疑问，这些是一些参考资料

50
00:05:08,880 --> 00:05:10,840
 uh... find out more about the

50
00:05:08,880 --> 00:05:10,840
呃...了解更多关于

51
00:05:10,840 --> 00:05:15,240
 uh... the topics or the content for this part of the course you can refer to this reference

51
00:05:10,840 --> 00:05:15,240
呃...这部分课程的主题或者内容你可以参考这个参考资料

52
00:05:15,240 --> 00:05:16,040
 material

52
00:05:15,240 --> 00:05:16,040
材料

53
00:05:16,040 --> 00:05:21,280
 or again you can go to google or use chatgpt to help you to

53
00:05:16,040 --> 00:05:21,280
或者您可以再次访问 google 或使用 chatgpt 来帮助您

54
00:05:21,280 --> 00:05:24,800
 improve your learning experience

54
00:05:21,280 --> 00:05:24,800
改善您的学习体验

55
00:05:24,840 --> 00:05:30,320
 right okay so in part two these are the outline for the topics that we are going to cover

55
00:05:24,840 --> 00:05:30,320
好的，所以在第二部分中，这些是我们将要讨论的主题的大纲

56
00:05:30,320 --> 00:05:34,620
 so first of all we are going to learn some basic terms and concepts

56
00:05:30,320 --> 00:05:34,620
所以首先我们要学习一些基本术语和概念

57
00:05:34,620 --> 00:05:38,720
 and afterwards we'll go through the entropy coding

57
00:05:34,620 --> 00:05:38,720
然后我们将进行熵编码

58
00:05:38,720 --> 00:05:42,560
 and then we'll learn about some basic image and video compression

58
00:05:38,720 --> 00:05:42,560
然后我们将学习一些基本的图像和视频压缩

59
00:05:42,560 --> 00:05:45,560
 okay we'll learn about transform based coding

59
00:05:42,560 --> 00:05:45,560
好的，我们将学习基于变换的编码

60
00:05:45,560 --> 00:05:49,440
 and afterwards we'll move on to DCT which is a very popular

60
00:05:45,560 --> 00:05:49,440
然后我们将继续讨论 DCT，这是一种非常流行的方法

61
00:05:49,440 --> 00:05:54,720
 uh... you know transform technique that's used in many media compression including

61
00:05:49,440 --> 00:05:54,720
呃...您知道许多媒体压缩中使用的变换技术，包括

62
00:05:55,120 --> 00:05:57,400
 jpeg as well as mpeg compression

62
00:05:55,120 --> 00:05:57,400
jpeg 以及 mpeg 压缩

63
00:05:57,400 --> 00:06:02,800
 so we'll spend some time to learn about this particular DCT, discrete cosine transform

63
00:05:57,400 --> 00:06:02,800
所以我们将花一些时间来学习这个特殊的 DCT，离散余弦变换

64
00:06:02,800 --> 00:06:06,280
 and afterwards we'll learn about the jpeg standards

64
00:06:02,800 --> 00:06:06,280
然后我们将了解 jpeg 标准

65
00:06:06,280 --> 00:06:11,360
 so these are the topics that we are going to cover in part two

65
00:06:06,280 --> 00:06:11,360
这些是我们将在第二部分中讨论的主题

66
00:06:11,360 --> 00:06:15,720
 right okay so first let's try to go through some basic terms and concepts

66
00:06:11,360 --> 00:06:15,720
好的，首先让我们尝试了解一些基本术语和概念

67
00:06:15,720 --> 00:06:20,520
 just to make sure that everyone is on the same page

67
00:06:15,720 --> 00:06:20,520
只是为了确保每个人都在同一页面上

68
00:06:20,520 --> 00:06:23,240
 right okay so what is compression

68
00:06:20,520 --> 00:06:23,240
好吧，那么什么是压缩

69
00:06:23,280 --> 00:06:27,680
 or coding so in the context of media compression

69
00:06:23,280 --> 00:06:27,680
或在媒体压缩的背景下进行编码

70
00:06:27,680 --> 00:06:32,400
 right when we say compression it actually means the same thing as in coding

70
00:06:27,680 --> 00:06:32,400
当我们说压缩时，它实际上与编码中的意思相同

71
00:06:32,400 --> 00:06:34,240
 so in this article course

71
00:06:32,400 --> 00:06:34,240
所以在这篇文章课程中

72
00:06:34,240 --> 00:06:39,840
 when we refer to compression it means the same thing as coding or encoding

72
00:06:34,240 --> 00:06:39,840
当我们提到压缩时，它与编码或编码具有相同的含义

73
00:06:39,840 --> 00:06:41,240
 they are all the same

73
00:06:39,840 --> 00:06:41,240
他们都是一样的

74
00:06:41,240 --> 00:06:44,880
 right so what is the objective of performing compression

74
00:06:41,240 --> 00:06:44,880
是的，那么执行压缩的目的是什么

75
00:06:44,880 --> 00:06:50,600
 right so if you think about for typical for example image and video so from

75
00:06:44,880 --> 00:06:50,600
是的，如果您考虑典型的图像和视频，那么来自

76
00:06:50,600 --> 00:06:55,520
 last week we just do a simple calculation to see if you have a small video

76
00:06:50,600 --> 00:06:55,520
上周我们只是做了一个简单的计算，看看你是否有一个小视频

77
00:06:55,520 --> 00:06:58,840
 right it already require a very large bit rate

77
00:06:55,520 --> 00:06:58,840
是的，它已经需要非常大的比特率

78
00:06:58,840 --> 00:07:00,600
 okay hundreds of uh...

78
00:06:58,840 --> 00:07:00,600
好吧，几百个呃……

79
00:07:00,600 --> 00:07:04,520
 megabits per second so therefore there's a very strong motivation for us to

79
00:07:00,600 --> 00:07:04,520
每秒兆位，因此我们有非常强烈的动机

80
00:07:04,520 --> 00:07:06,040
 perform the compression

80
00:07:04,520 --> 00:07:06,040
执行压缩

81
00:07:06,040 --> 00:07:09,760
 because if you don't compress it then it's very hard for us to store

81
00:07:06,040 --> 00:07:09,760
因为如果不压缩它我们就很难存储

82
00:07:09,760 --> 00:07:14,280
 in some uh... storage devices or transmit over the network

82
00:07:09,760 --> 00:07:14,280
在一些呃...存储设备中或通过网络传输

83
00:07:14,280 --> 00:07:18,200
 so therefore there's a strong motivation for us to perform compression

83
00:07:14,280 --> 00:07:18,200
因此我们有很强的动机去执行压缩

84
00:07:18,200 --> 00:07:20,080
 because without compression

84
00:07:18,200 --> 00:07:20,080
因为没有压缩

85
00:07:20,080 --> 00:07:24,360
 right the data, original data is just too demanding in terms of

85
00:07:20,080 --> 00:07:24,360
对数据，原始数据要求太高了

86
00:07:24,360 --> 00:07:26,479
 storage and bandwidth requirement

86
00:07:24,360 --> 00:07:26,479
存储和带宽要求

87
00:07:26,479 --> 00:07:30,440
 so therefore we need to perform compression so what's the objective of it

87
00:07:26,479 --> 00:07:30,440
所以我们需要执行压缩，那么它的目的是什么

88
00:07:30,440 --> 00:07:32,400
 is to reduce the number of bits

88
00:07:30,440 --> 00:07:32,400
就是减少位数

89
00:07:32,400 --> 00:07:34,960
 that's needed to represent the information

89
00:07:32,400 --> 00:07:34,960
表示信息所需的

90
00:07:34,960 --> 00:07:37,800
 okay so i think the motivation is quite straightforward

90
00:07:34,960 --> 00:07:37,800
好吧，我认为动机很简单

91
00:07:37,800 --> 00:07:40,919
 so what you have is that you have some input data

91
00:07:37,800 --> 00:07:40,919
所以你拥有的是一些输入数据

92
00:07:40,919 --> 00:07:47,919
 so this input data can be for example text, it can be audio, it can be image, it can be video

92
00:07:40,919 --> 00:07:47,919
所以这个输入数据可以是文本，可以是音频，可以是图像，可以是视频

93
00:07:47,920 --> 00:07:50,840
 but in the context of this particular course

93
00:07:47,920 --> 00:07:50,840
但在这个特定课程的背景下

94
00:07:50,840 --> 00:07:53,080
 our focus mainly will be on

94
00:07:50,840 --> 00:07:53,080
我们的重点将主要集中在

95
00:07:53,080 --> 00:07:54,480
 uh... image and video

95
00:07:53,080 --> 00:07:54,480
呃...图像和视频

96
00:07:54,480 --> 00:07:57,880
 right okay because we are talking about video signal processing

96
00:07:54,480 --> 00:07:57,880
好吧，因为我们正在谈论视频信号处理

97
00:07:57,880 --> 00:08:02,000
 so we have some input data which can be for example image and video

97
00:07:57,880 --> 00:08:02,000
所以我们有一些输入数据，例如图像和视频

98
00:08:02,000 --> 00:08:04,160
 and then you go through the encoder

98
00:08:02,000 --> 00:08:04,160
然后你通过编码器

99
00:08:04,160 --> 00:08:09,240
 right so the encoder in this particular context is actually used for compression

99
00:08:04,160 --> 00:08:09,240
是的，所以这个特定上下文中的编码器实际上用于压缩

100
00:08:09,240 --> 00:08:13,360
 so we have an original for example image file

100
00:08:09,240 --> 00:08:13,360
所以我们有一个原始的例如图像文件

101
00:08:13,400 --> 00:08:17,920
 when we go through the encoder, we try to compress it into a small file

101
00:08:13,400 --> 00:08:17,920
当我们通过编码器时，我们尝试将其压缩成一个小文件

102
00:08:17,920 --> 00:08:19,080
 or low bit rate

102
00:08:17,920 --> 00:08:19,080
或低比特率

103
00:08:19,080 --> 00:08:20,080
 right so that

103
00:08:19,080 --> 00:08:20,080
对所以

104
00:08:20,080 --> 00:08:25,280
 right when the file is small then you can either store it or you can then transmit it

104
00:08:20,080 --> 00:08:25,280
当文件很小时，您可以存储它，也可以传输它

105
00:08:25,280 --> 00:08:27,240
 so you can then either store it

105
00:08:25,280 --> 00:08:27,240
这样你就可以存储它

106
00:08:27,240 --> 00:08:30,880
 right as an image and video file or you can transmit over the network

106
00:08:27,240 --> 00:08:30,880
作为图像和视频文件，或者您可以通过网络传输

107
00:08:30,880 --> 00:08:35,840
 okay so later on, suppose it is a network then at the receiver end

107
00:08:30,880 --> 00:08:35,840
好的，稍后假设它是一个网络然后在接收端

108
00:08:35,840 --> 00:08:37,960
 then you need to perform the decoder

108
00:08:35,840 --> 00:08:37,960
那么你需要执行解码器

109
00:08:37,960 --> 00:08:40,280
 right so you need to let it go through a decoder

109
00:08:37,960 --> 00:08:40,280
是的，所以你需要让它通过解码器

110
00:08:40,319 --> 00:08:44,240
 so this decoder's objective is to perform decompression

110
00:08:40,319 --> 00:08:44,240
所以这个解码器的目标是执行解压缩

111
00:08:44,240 --> 00:08:48,040
 so decompression means that you take some compressed bit stream

111
00:08:44,240 --> 00:08:48,040
所以解压缩意味着你需要一些压缩的比特流

112
00:08:48,040 --> 00:08:50,800
 and you try to recover the original data

112
00:08:48,040 --> 00:08:50,800
并且您尝试恢复原始数据

113
00:08:50,800 --> 00:08:54,319
 so this is the meaning of decompression

113
00:08:50,800 --> 00:08:54,319
这就是减压的意义

114
00:08:54,319 --> 00:08:57,120
 and afterwards you have the output data

114
00:08:54,319 --> 00:08:57,120
然后你就得到了输出数据

115
00:08:57,120 --> 00:09:00,439
 right so that's the very basic ideas of a data compression

115
00:08:57,120 --> 00:09:00,439
是的，这就是数据压缩的基本思想

116
00:09:00,439 --> 00:09:03,680
 framework or pipeline

116
00:09:00,439 --> 00:09:03,680
框架或管道

117
00:09:03,680 --> 00:09:09,920
 right okay so next we need to introduce this concept or this term compression ratio

117
00:09:03,680 --> 00:09:09,920
好吧，接下来我们需要介绍这个概念或者这个术语压缩比

118
00:09:09,959 --> 00:09:13,000
 but so what is the definitions of a compression ratio

118
00:09:09,959 --> 00:09:13,000
那么压缩比的定义是什么

119
00:09:13,000 --> 00:09:17,000
 so the definition of compression ratio is data storage requirement

119
00:09:13,000 --> 00:09:17,000
所以压缩比的定义就是数据存储要求

120
00:09:17,000 --> 00:09:21,560
 of the original data over the storage requirement for the compressed data

120
00:09:17,000 --> 00:09:21,560
原始数据超过压缩数据的存储要求

121
00:09:22,439 --> 00:09:24,839
 so it's a number of bits or the storage requirement

121
00:09:22,439 --> 00:09:24,839
所以这是位数或存储要求

122
00:09:24,839 --> 00:09:27,079
 for the original uncompressed data

122
00:09:24,839 --> 00:09:27,079
对于原始未压缩数据

123
00:09:27,199 --> 00:09:33,400
 over the data storage requirement for a compressed data

123
00:09:27,199 --> 00:09:33,400
超过压缩数据的数据存储要求

124
00:09:33,400 --> 00:09:39,719
 so by the definition, if your method is performing the compression well

124
00:09:33,400 --> 00:09:39,719
所以根据定义，如果你的方法能够很好地执行压缩

125
00:09:39,720 --> 00:09:43,720
 do you think the compression ratio should be greater than one or less than one?

125
00:09:39,720 --> 00:09:43,720
你认为压缩比应该大于1还是小于1？

126
00:09:43,720 --> 00:09:51,720
 If you define compression ratio as the data storage requirement for the original data

126
00:09:43,720 --> 00:09:51,720
如果将压缩比定义为原始数据的数据存储要求

127
00:09:51,720 --> 00:09:55,720
 over data storage requirement for compressed data,

127
00:09:51,720 --> 00:09:55,720
超过压缩数据的数据存储要求，

128
00:09:55,720 --> 00:09:57,720
 and if your method is working properly,

128
00:09:55,720 --> 00:09:57,720
如果你的方法工作正常，

129
00:09:57,720 --> 00:10:02,720
 you expect the compression ratio to be greater than one or less than one?

129
00:09:57,720 --> 00:10:02,720
您期望压缩比大于 1 或小于 1？

130
00:10:02,720 --> 00:10:04,720
 Greater than one.

130
00:10:02,720 --> 00:10:04,720
大于一。

131
00:10:04,720 --> 00:10:08,720
 Because definitely this is the original data storage requirement

131
00:10:04,720 --> 00:10:08,720
因为这肯定是原始的数据存储需求

132
00:10:08,720 --> 00:10:10,720
 therefore your compressed data is going to be much smaller.

132
00:10:08,720 --> 00:10:10,720
因此你的压缩数据会小得多。

133
00:10:10,720 --> 00:10:14,720
 So it's going to be a larger value over a smaller value.

133
00:10:10,720 --> 00:10:14,720
所以它会是一个较大的值而不是一个较小的值。

134
00:10:14,720 --> 00:10:17,720
 Therefore your compression ratio typically should be greater than one.

134
00:10:14,720 --> 00:10:17,720
因此，您的压缩比通常应大于 1。

135
00:10:17,720 --> 00:10:21,720
 So therefore the meaning of a compression ratio is quite straightforward.

135
00:10:17,720 --> 00:10:21,720
因此，压缩比的含义非常简单。

136
00:10:21,720 --> 00:10:26,720
 It's a matrix or a way for you to measure how much the data has been compressed.

136
00:10:21,720 --> 00:10:26,720
它是一个矩阵或一种测量数据压缩程度的方法。

137
00:10:26,720 --> 00:10:29,720
 So it's defined as this B naught,

137
00:10:26,720 --> 00:10:29,720
所以它被定义为这个B无，

138
00:10:29,720 --> 00:10:35,720
 which is the number of bits before compression or is the original data storage requirement,

138
00:10:29,720 --> 00:10:35,720
这是压缩前的位数或者是原始数据存储要求，

139
00:10:35,720 --> 00:10:41,720
 over B1, which is the number of bits or the storage requirement after the compression.

139
00:10:35,720 --> 00:10:41,720
B1 之上，这是压缩后的位数或存储要求。

140
00:10:41,720 --> 00:10:45,720
 So because after compression you expect this number to be smaller than this.

140
00:10:41,720 --> 00:10:45,720
因为压缩后你预计这个数字会比这个小。

141
00:10:45,720 --> 00:10:50,720
 Therefore typically for compression ratio it should be greater than one.

141
00:10:45,720 --> 00:10:50,720
因此，通常对于压缩比来说，它应该大于一。

142
00:10:50,720 --> 00:10:56,720
 And usually the larger the value, that means the smaller size you can compress it into.

142
00:10:50,720 --> 00:10:56,720
通常该值越大，意味着可以压缩的尺寸越小。

143
00:10:56,720 --> 00:11:02,720
 So from the compression perspective you want the value to be as large as possible.

143
00:10:56,720 --> 00:11:02,720
因此，从压缩的角度来看，您希望该值尽可能大。

144
00:11:03,720 --> 00:11:08,720
 Okay, so next we are going to touch on some basics on information theory.

144
00:11:03,720 --> 00:11:08,720
好的，接下来我们将讨论信息论的一些基础知识。

145
00:11:08,720 --> 00:11:11,720
 So the concept that we are going to introduce is the entropy here.

145
00:11:08,720 --> 00:11:11,720
所以这里我们要引入的概念就是熵。

146
00:11:11,720 --> 00:11:20,720
 So this entropy or using this symbol called eta is the measures of the amount of information in some data source.

146
00:11:11,720 --> 00:11:20,720
所以这个熵或者使用这个称为eta的符号是某些数据源中信息量的度量。

147
00:11:20,720 --> 00:11:26,720
 Or sometimes it's also an indication of degree of randomness in the data source.

147
00:11:20,720 --> 00:11:26,720
或者有时它也表明数据源的随机性程度。

148
00:11:27,720 --> 00:11:36,720
 So the entropy eta for an information source, suppose this information source what you have is that you have a set S,

148
00:11:27,720 --> 00:11:36,720
所以信息源的熵 eta，假设你拥有的这个信息源是你有一个集合 S，

149
00:11:36,720 --> 00:11:42,720
 which consists of a number of different symbols, S1 all the way up to Sn.

149
00:11:36,720 --> 00:11:42,720
它由许多不同的符号组成，从 S1 一直到 Sn。

150
00:11:42,720 --> 00:11:48,720
 So we are trying to measure this entropy, that means we are trying to measure the amount of information inside

150
00:11:42,720 --> 00:11:48,720
所以我们正在尝试测量这个熵，这意味着我们正在尝试测量内部的信息量

151
00:11:48,720 --> 00:11:53,720
 or the degree of randomness inside this particular data source here.

151
00:11:48,720 --> 00:11:53,720
或此处特定数据源内部的随机性程度。

152
00:11:53,720 --> 00:11:57,720
 So that's a very formal definition for entropy.

152
00:11:53,720 --> 00:11:57,720
这是熵的一个非常正式的定义。

153
00:11:57,720 --> 00:12:04,720
 So for those of you if you have studied digital communication, you should definitely know the equation.

153
00:11:57,720 --> 00:12:04,720
因此，对于那些研究过数字通信的人来说，您一定应该知道这个方程。

154
00:12:04,720 --> 00:12:10,720
 So the entropy eta is given by this particular symbol here, H.

154
00:12:04,720 --> 00:12:10,720
因此，熵 eta 由此处的特定符号 H 给出。

155
00:12:10,720 --> 00:12:15,720
 The entropy for this set S is defined by this equation here, Pi.

155
00:12:10,720 --> 00:12:15,720
该集合 S 的熵由此处的方程 Pi 定义。

156
00:12:16,720 --> 00:12:26,720
 So this Pi here is the probability of each of this particular symbol in this set here.

156
00:12:16,720 --> 00:12:26,720
所以这里的 Pi 是这个集合中每个特定符号的概率。

157
00:12:26,720 --> 00:12:35,720
 So this Pi, log Pi with a base of 2, and then you sum up over all the possible symbols in the set.

157
00:12:26,720 --> 00:12:35,720
所以这个 Pi，以 2 为底记录 Pi，然后对集合中所有可能的符号求和。

158
00:12:35,720 --> 00:12:38,720
 So that's the definitions of the entropy.

158
00:12:35,720 --> 00:12:38,720
这就是熵的定义。

159
00:12:38,720 --> 00:12:45,720
 And afterwards if you can simplify this a little bit, Pi is P to the power of negative 1, you move it down here,

159
00:12:38,720 --> 00:12:45,720
然后如果你能稍微简化一下，Pi 是 P 的负 1 次方，你把它移到这里，

160
00:12:45,720 --> 00:12:47,720
 then you can rewrite in this form here.

160
00:12:45,720 --> 00:12:47,720
那么你可以在这里重写这个形式。

161
00:12:47,720 --> 00:12:53,720
 So therefore for entropy you can also write it as Pi, log Pi to the base of 2,

161
00:12:47,720 --> 00:12:53,720
因此，对于熵，你也可以将其写为 Pi，将 Pi 记录到 2 的底数，

162
00:12:53,720 --> 00:12:58,720
 you sum up over all the symbols in the set and you put a negative sign in front.

162
00:12:53,720 --> 00:12:58,720
你总结了集合中的所有符号，并在前面加上一个负号。

163
00:12:58,720 --> 00:13:00,720
 So this is the entropy.

163
00:12:58,720 --> 00:13:00,720
这就是熵。

164
00:13:00,720 --> 00:13:07,720
 So as I mentioned before, Pi is the probability of a symbol Si that occurs in this set here.

164
00:13:00,720 --> 00:13:07,720
正如我之前提到的，Pi 是符号 Si 在此集合中出现的概率。

165
00:13:07,720 --> 00:13:13,720
 So what is the significance of this particular entropy in the context of compression is that

165
00:13:07,720 --> 00:13:13,720
那么这个特定的熵在压缩的背景下的意义是什么？

166
00:13:13,720 --> 00:13:20,720
 entropy is the smallest number of bits on average that you need to represent a symbol.

166
00:13:13,720 --> 00:13:20,720
熵是表示符号所需的平均最小位数。

167
00:13:20,720 --> 00:13:24,720
 So for example, now you have a set S, you have many different symbols.

167
00:13:20,720 --> 00:13:24,720
例如，现在你有一个集合 S，你有许多不同的符号。

168
00:13:24,720 --> 00:13:33,720
 So on average, the smallest number of bits that you can use to represent this set of symbols is known as entropy.

168
00:13:24,720 --> 00:13:33,720
因此，平均而言，可用于表示这组符号的最小位数称为熵。

169
00:13:33,720 --> 00:13:42,720
 So for example, if you are given a particular symbol, a set S with a certain number of symbols,

169
00:13:33,720 --> 00:13:42,720
举例来说，如果给你一个特定的符号，一个包含一定数量符号的集合 S，

170
00:13:42,720 --> 00:13:49,720
 say suppose here you have 8 symbols, you can easily use 3 bits to represent it.

170
00:13:42,720 --> 00:13:49,720
假设这里有 8 个符号，您可以轻松地使用 3 位来表示它。

171
00:13:49,720 --> 00:13:53,720
 If you want, you can even use 8 bits or 10 bits to represent it.

171
00:13:49,720 --> 00:13:53,720
如果愿意的话，甚至可以用8位或者10位来表示。

172
00:13:53,720 --> 00:13:56,720
 So you can use a larger number of bits to represent it.

172
00:13:53,720 --> 00:13:56,720
因此可以使用更多的位数来表示。

173
00:13:56,720 --> 00:14:04,720
 But if you want to reduce the number of bits, continue to reduce the number of bits, that is a theoretical lower bound.

173
00:13:56,720 --> 00:14:04,720
但如果要减少位数，就继续减少位数，那就是理论上的下界。

174
00:14:04,720 --> 00:14:14,720
 So the theoretical lower bound, the number of bits on average that you need to represent this particular symbol is known as the entropy.

174
00:14:04,720 --> 00:14:14,720
因此，理论上的下界，即表示该特定符号所需的平均位数，称为熵。

175
00:14:14,720 --> 00:14:20,720
 So that's another interpretation of the entropy in the context of compression.

175
00:14:14,720 --> 00:14:20,720
这是压缩背景下熵的另一种解释。

176
00:14:21,720 --> 00:14:25,720
 Okay, so now we have introduced some basic terms.

176
00:14:21,720 --> 00:14:25,720
好的，现在我们介绍了一些基本术语。

177
00:14:25,720 --> 00:14:31,720
 Now we are ready to cover the next topic, which is the entropy coding.

177
00:14:25,720 --> 00:14:31,720
现在我们准备好讨论下一个主题，即熵编码。

178
00:14:31,720 --> 00:14:35,720
 So as I mentioned, coding and encoding refer to the same thing.

178
00:14:31,720 --> 00:14:35,720
正如我提到的，编码和编码指的是同一件事。

179
00:14:35,720 --> 00:14:38,720
 There's no difference between them.

179
00:14:35,720 --> 00:14:38,720
他们之间没有区别。

180
00:14:38,720 --> 00:14:43,720
 Okay, so there's different ways of performing entropy encoding.

180
00:14:38,720 --> 00:14:43,720
好的，有不同的方法来执行熵编码。

181
00:14:43,720 --> 00:14:46,720
 So for this course, we will be focusing on Huffman coding,

181
00:14:43,720 --> 00:14:46,720
因此，在本课程中，我们将重点关注霍夫曼编码，

182
00:14:46,720 --> 00:14:51,720
 because Huffman coding is one of the most commonly used coding used in media compression,

182
00:14:46,720 --> 00:14:51,720
因为霍夫曼编码是媒体压缩中最常用的编码之一，

183
00:14:51,720 --> 00:14:56,720
 either image compression or video compression, and there are corresponding standards,

183
00:14:51,720 --> 00:14:56,720
无论是图像压缩还是视频压缩，都有相应的标准，

184
00:14:56,720 --> 00:14:59,720
 such as JPEG standard and the MPEG standard.

184
00:14:56,720 --> 00:14:59,720
例如JPEG标准和MPEG标准。

185
00:14:59,720 --> 00:15:02,720
 So therefore, we'll be focusing on Huffman coding here.

185
00:14:59,720 --> 00:15:02,720
因此，我们将在这里重点关注霍夫曼编码。

186
00:15:02,720 --> 00:15:13,720
 And also just to make a note, because for this particular class here, the background is actually quite diverse.

186
00:15:02,720 --> 00:15:13,720
另外，我也想说明一下，因为对于这个特殊的班级来说，背景实际上是相当多样化的。

187
00:15:13,720 --> 00:15:24,720
 I understand that there are students from SPML, students from communication, students from control, even some students from power, and also CCA.

187
00:15:13,720 --> 00:15:24,720
我了解到有SPML的学生，有传播的学生，有控制的学生，甚至还有一些权力的学生，还有CCA。

188
00:15:24,720 --> 00:15:27,720
 So the background is quite diverse.

188
00:15:24,720 --> 00:15:27,720
所以背景是相当多元化的。

189
00:15:27,720 --> 00:15:31,720
 So therefore, in order to make sure that everyone understands it,

189
00:15:27,720 --> 00:15:31,720
所以，为了让大家都能理解，

190
00:15:31,720 --> 00:15:37,720
 we'll try to cover it in such a way that at least the majority of students will be able to understand.

190
00:15:31,720 --> 00:15:37,720
我们将尽力以至少大多数学生能够理解的方式进行介绍。

191
00:15:37,720 --> 00:15:41,720
 So therefore, in case if you're already familiar with some of the concepts,

191
00:15:37,720 --> 00:15:41,720
因此，如果您已经熟悉一些概念，

192
00:15:41,720 --> 00:15:47,720
 just take it as a revision or sometimes you may gain a certain new perspective.

192
00:15:41,720 --> 00:15:47,720
只是把它当作一次修订，有时你可能会获得某种新的视角。

193
00:15:47,720 --> 00:15:52,720
 Right, okay, so having said that, next let's look at what's the Huffman coding.

193
00:15:47,720 --> 00:15:52,720
好了好了，说了这么多，接下来我们看看什么是哈夫曼编码。

194
00:15:52,720 --> 00:15:57,720
 So Huffman coding is the types of variable length coding, or VLCC.

194
00:15:52,720 --> 00:15:57,720
所以哈夫曼编码是可变长度编码的类型，或者VLCC。

195
00:15:57,720 --> 00:16:02,720
 So what is the, you can see by this particular term here, variable length coding,

195
00:15:57,720 --> 00:16:02,720
那么什么是，你可以通过这里的这个特定术语看到，可变长度编码，

196
00:16:02,720 --> 00:16:07,720
 it does already tell you some indication about what this coding scheme is.

196
00:16:02,720 --> 00:16:07,720
它确实已经告诉您有关此编码方案是什么的一些指示。

197
00:16:07,720 --> 00:16:16,720
 So this particular coding scheme means that for different symbols, all right, different symbols, you use different bits to represent this particular symbol.

197
00:16:07,720 --> 00:16:16,720
所以这个特定的编码方案意味着对于不同的符号，好吧，不同的符号，你使用不同的位来表示这个特定的符号。

198
00:16:16,720 --> 00:16:23,720
 So symbol is a very general term to describe any kind of a data source that we have.

198
00:16:16,720 --> 00:16:23,720
因此，符号是一个非常通用的术语，用于描述我们拥有的任何类型的数据源。

199
00:16:23,720 --> 00:16:29,720
 So to give you an example, if we refer to English, right, English, so most of you know English.

199
00:16:23,720 --> 00:16:29,720
举个例子，如果我们指的是英语，对吧，英语，所以你们大多数人都懂英语。

200
00:16:29,720 --> 00:16:33,720
 So English, we have 26 alphabets.

200
00:16:29,720 --> 00:16:33,720
所以英语有 26 个字母。

201
00:16:33,720 --> 00:16:39,720
 So if you want, for example, you can use 8 bits to represent each of these particular alphabets.

201
00:16:33,720 --> 00:16:39,720
例如，如果您愿意，您可以使用 8 位来表示每个特定的字母表。

202
00:16:39,720 --> 00:16:44,720
 So for each English alphabet, if you want, you can use 8 bits to represent it.

202
00:16:39,720 --> 00:16:44,720
所以对于每个英文字母，如果你愿意的话，你可以用8位来表示它。

203
00:16:44,720 --> 00:16:46,720
 It's not a problem.

203
00:16:44,720 --> 00:16:46,720
这不是问题。

204
00:16:46,720 --> 00:16:50,720
 But if you do that, it may not be so efficient, right?

204
00:16:46,720 --> 00:16:50,720
但如果你这样做的话，效率可能就不那么高了，对吧？

205
00:16:50,720 --> 00:16:52,720
 It may not be so efficient.

205
00:16:50,720 --> 00:16:52,720
可能效率不是那么高。

206
00:16:53,720 --> 00:17:01,720
 Okay, another thing about this entropy encoding is that for example, if we take the example of the English, right,

206
00:16:53,720 --> 00:17:01,720
好吧，关于这种熵编码的另一件事是，例如，如果我们以英语为例，对吧，

207
00:17:01,720 --> 00:17:08,720
 some actually alphabets or some letters occur more often than the others.

207
00:17:01,720 --> 00:17:08,720
实际上，有些字母或某些字母比其他字母出现的频率更高。

208
00:17:08,720 --> 00:17:16,720
 So for example, in English, what are the letters that occur very frequently, very often?

208
00:17:08,720 --> 00:17:16,720
比如说，在英语中，出现得非常频繁的字母是什么？

209
00:17:16,720 --> 00:17:21,720
 Can some of you suggest some English letters that occur very often?

209
00:17:16,720 --> 00:17:21,720
你们中的一些人能推荐一些经常出现的英文字母吗？

210
00:17:23,720 --> 00:17:27,720
 First, we have the vowel, A-E-I-O-U, those occur very often.

210
00:17:23,720 --> 00:17:27,720
首先，我们有元音，A-E-I-O-U，这些经常出现。

211
00:17:27,720 --> 00:17:39,720
 And then if you have the consonant, consonant is like T, I just given you one, T, S, M, yeah,

211
00:17:27,720 --> 00:17:39,720
然后如果你有辅音，辅音就像T，我刚刚给了你一个，T，S，M，是的，

212
00:17:39,720 --> 00:17:42,720
 and these are very common kind of a consonant.

212
00:17:39,720 --> 00:17:42,720
这些都是非常常见的辅音。

213
00:17:42,720 --> 00:17:45,720
 So therefore, you have these letters which occur very often.

213
00:17:42,720 --> 00:17:45,720
因此，这些字母经常出现。

214
00:17:45,720 --> 00:17:52,720
 So for these letters that occur very often, if you want to design certain codes to represent it,

214
00:17:45,720 --> 00:17:52,720
那么对于这些​​经常出现的字母，如果你想设计一定的代码来表示它，

215
00:17:52,720 --> 00:17:57,720
 do you think you should use a shorter code work or longer code work to represent it?

215
00:17:52,720 --> 00:17:57,720
您认为应该使用较短的代码工作还是较长的代码工作来表示它？

216
00:17:57,720 --> 00:18:01,720
 Shorter code works means you use a smaller number of bits.

216
00:17:57,720 --> 00:18:01,720
较短的代码意味着您使用较少的位数。

217
00:18:01,720 --> 00:18:05,720
 Longer code works means that you use a larger number of bits to represent.

217
00:18:01,720 --> 00:18:05,720
更长的代码意味着您使用更多的位数来表示。

218
00:18:05,720 --> 00:18:12,720
 So for those letters that occur very often, do you think you should use less letter,

218
00:18:05,720 --> 00:18:12,720
那么对于那些经常出现的字母，你认为你应该少用一些字母吗？

219
00:18:12,720 --> 00:18:17,720
 less number of shorter code work or longer code work to represent?

219
00:18:12,720 --> 00:18:17,720
更少的较短代码工作或较长代码工作来表示？

220
00:18:19,720 --> 00:18:21,720
 Would you use?

220
00:18:19,720 --> 00:18:21,720
你会用吗？

221
00:18:24,720 --> 00:18:30,720
 If they occur so often, because in the context of this particular course is we want to perform compression.

221
00:18:24,720 --> 00:18:30,720
如果它们经常出现，因为在这个特定课程的背景下我们想要执行压缩。

222
00:18:30,720 --> 00:18:38,720
 So when we want to perform compression, that means we want to use as few bits as possible to represent our information source.

222
00:18:30,720 --> 00:18:38,720
因此，当我们想要执行压缩时，这意味着我们想要使用尽可能少的位来表示我们的信息源。

223
00:18:38,720 --> 00:18:44,720
 So if you know that certain letters occur so often, therefore you should use shorter code work,

223
00:18:38,720 --> 00:18:44,720
因此，如果您知道某些字母经常出现，那么您应该使用较短的代码工作，

224
00:18:44,720 --> 00:18:48,720
 that means smaller number of bits or longer number of bits to represent it.

224
00:18:44,720 --> 00:18:48,720
这意味着用更少的位数或更长的位数来表示它。

225
00:18:48,720 --> 00:18:53,720
 Shorter code works or smaller number of bits, it's very intuitive.

225
00:18:48,720 --> 00:18:53,720
较短的代码或较少的位数可以工作，这非常直观。

226
00:18:53,720 --> 00:18:58,720
 So on the other hand, if you think about it, so for some letters like in English,

226
00:18:53,720 --> 00:18:58,720
另一方面，如果你想一想，对于一些字母，比如英语，

227
00:18:58,720 --> 00:19:04,720
 what are the letters that occur very rarely, very infrequently?

227
00:18:58,720 --> 00:19:04,720
很少出现的字母是什么？

228
00:19:05,720 --> 00:19:11,720
 Q, Z or Z depending on whether you're American or British.

228
00:19:05,720 --> 00:19:11,720
Q、Z 或 Z 取决于您是美国人还是英国人。

229
00:19:11,720 --> 00:19:17,720
 So these are some very rare kind of English letters.

229
00:19:11,720 --> 00:19:17,720
所以这些是一些非常罕见的英文字母。

230
00:19:17,720 --> 00:19:23,720
 So for those letters, should you use a longer code work or shorter code work to represent it?

230
00:19:17,720 --> 00:19:23,720
那么对于那些字母，应该用较长的码工还是较短的码工来表示呢？

231
00:19:23,720 --> 00:19:28,720
 You should use a longer code work, because they occur so rarely,

231
00:19:23,720 --> 00:19:28,720
你应该使用更长的代码工作，因为它们很少发生，

232
00:19:28,720 --> 00:19:31,720
 so you can afford to use a longer code work to represent it.

232
00:19:28,720 --> 00:19:31,720
因此您可以使用更长的代码来表示它。

233
00:19:31,720 --> 00:19:39,720
 So therefore, the idea now is quite clear, depending on the probability of how often a letter appears,

233
00:19:31,720 --> 00:19:39,720
因此，现在的想法就很清楚了，取决于一个字母出现的概率，

234
00:19:39,720 --> 00:19:45,720
 you assign different code work length to represent this particular letter.

234
00:19:39,720 --> 00:19:45,720
您分配不同的代码工作长度来表示这个特定的字母。

235
00:19:45,720 --> 00:19:49,720
 So this idea now is reflected by variable length coding.

235
00:19:45,720 --> 00:19:49,720
所以这个思想现在通过变长编码来体现。

236
00:19:49,720 --> 00:19:57,720
 So what it means is that for different symbols or letters, we'll be using different variable,

236
00:19:49,720 --> 00:19:57,720
所以这意味着对于不同的符号或字母，我们将使用不同的变量，

237
00:19:57,720 --> 00:20:01,720
 we'll be using different number of bits to represent the letter.

237
00:19:57,720 --> 00:20:01,720
我们将使用不同的位数来表示字母。

238
00:20:01,720 --> 00:20:04,720
 Hence the name, variable length coding.

238
00:20:01,720 --> 00:20:04,720
因此得名“可变长度编码”。

239
00:20:04,720 --> 00:20:11,720
 So this is as opposed to, for example, just now we say, if you want, we can use 8 bits to represent each letter.

239
00:20:04,720 --> 00:20:11,720
所以这是相对的，比如说刚才我们说，如果你愿意的话，我们可以用8位来表示每个字母。

240
00:20:11,720 --> 00:20:17,720
 But if you do that, we don't take into account the probability distribution of the letter.

240
00:20:11,720 --> 00:20:17,720
但如果你这样做，我们就不会考虑字母的概率分布。

241
00:20:17,720 --> 00:20:20,720
 So therefore, it's not a very clever way of doing it.

241
00:20:17,720 --> 00:20:20,720
因此，这不是一个非常聪明的方法。

242
00:20:20,720 --> 00:20:24,720
 So therefore, the idea now is quite straightforward.

242
00:20:20,720 --> 00:20:24,720
因此，现在的想法非常简单。

243
00:20:24,720 --> 00:20:29,720
 So the idea of variable length coding, we have just gone through an example to provide the motivation.

243
00:20:24,720 --> 00:20:29,720
因此，我们刚刚通过一个示例来提供可变长度编码的想法。

244
00:20:29,720 --> 00:20:35,720
 So the approach is that higher frequency patterns or symbols are assigned shorter code work.

244
00:20:29,720 --> 00:20:35,720
因此，方法是为较高频率的模式或符号分配较短的代码工作。

245
00:20:35,720 --> 00:20:38,720
 Shorter code works means you require smaller number of bits.

245
00:20:35,720 --> 00:20:38,720
较短的代码意味着您需要较少的位数。

246
00:20:38,720 --> 00:20:41,720
 So on the other hand, the reverse is also true.

246
00:20:38,720 --> 00:20:41,720
所以从另一方面来说，反之亦然。

247
00:20:41,720 --> 00:20:46,720
 That means lower frequency patterns or symbols, you will assign longer code work.

247
00:20:41,720 --> 00:20:46,720
这意味着频率较低的模式或符号，您将分配更长的代码工作。

248
00:20:46,720 --> 00:20:52,720
 So the objective of you doing that is that such that on average,

248
00:20:46,720 --> 00:20:52,720
所以你这样做的目标是平均而言，

249
00:20:52,720 --> 00:20:57,720
 the number of bits that is required to represent each pattern or symbol will be reduced.

249
00:20:52,720 --> 00:20:57,720
表示每个模式或符号所需的位数将减少。

250
00:20:57,720 --> 00:21:03,720
 So on average, the average number of bits to represent a symbol now will be shorter.

250
00:20:57,720 --> 00:21:03,720
因此，平均而言，现在表示符号的平均位数会更短。

251
00:21:03,720 --> 00:21:08,720
 So that's the idea of variable length coding.

251
00:21:03,720 --> 00:21:08,720
这就是变长编码的思想。

252
00:21:08,720 --> 00:21:15,720
 So in the context of Huffman coding, as I mentioned, typically we use this work symbol to represent

252
00:21:08,720 --> 00:21:15,720
因此，正如我提到的，在霍夫曼编码的背景下，通常我们使用这个工作符号来表示

253
00:21:15,720 --> 00:21:18,720
 it's a very general term, symbol.

253
00:21:15,720 --> 00:21:18,720
这是一个非常笼统的术语，符号。

254
00:21:18,720 --> 00:21:26,720
 So for example, just now in the context of the English letter, the symbol can be used to represent the letter.

254
00:21:18,720 --> 00:21:26,720
那么比如说刚才在英文字母的上下文中，可以用符号来代表字母。

255
00:21:26,720 --> 00:21:31,720
 So in the context of example, if you are trying to perform some image compression,

255
00:21:26,720 --> 00:21:31,720
因此，在示例中，如果您尝试执行一些图像压缩，

256
00:21:31,720 --> 00:21:35,720
 you may partition the image into small image patches.

256
00:21:31,720 --> 00:21:35,720
您可以将图像分割成小图像块。

257
00:21:35,720 --> 00:21:39,720
 Then the symbol can be used to, for example, represent a small image patch.

257
00:21:35,720 --> 00:21:39,720
然后，该符号可用于表示一个小图像块等。

258
00:21:40,720 --> 00:21:45,720
 So therefore, symbol is a very generic term that we use to describe a pattern.

258
00:21:40,720 --> 00:21:45,720
因此，符号是一个非常通用的术语，我们用来描述模式。

259
00:21:59,720 --> 00:22:07,720
 Okay, so next we'll use a simple example to explain how do we exactly perform this Huffman coding.

259
00:21:59,720 --> 00:22:07,720
好的，接下来我们将用一个简单的例子来解释我们如何准确地执行这个霍夫曼编码。

260
00:22:07,720 --> 00:22:15,720
 So what it means is that given a particular set of symbols with their corresponding probability distribution,

260
00:22:07,720 --> 00:22:15,720
所以这意味着给定一组特定的符号及其相应的概率分布，

261
00:22:15,720 --> 00:22:21,720
 we want to generate the code works that can be used to represent this particular set of symbol.

261
00:22:15,720 --> 00:22:21,720
我们想要生成可用于表示这一特定符号集的代码作品。

262
00:22:21,720 --> 00:22:26,720
 So that's what we plan to do. This is the objective of Huffman coding.

262
00:22:21,720 --> 00:22:26,720
这就是我们计划做的。这就是霍夫曼编码的目标。

263
00:22:26,720 --> 00:22:29,720
 So we take a simple example first.

263
00:22:26,720 --> 00:22:29,720
所以我们先举一个简单的例子。

264
00:22:30,720 --> 00:22:35,720
 Suppose this particular example is that we have strings of character like this.

264
00:22:30,720 --> 00:22:35,720
假设这个特定的例子是我们有这样的字符串。

265
00:22:35,720 --> 00:22:40,720
 So we can see we have four A's, two B's, one C and one D.

265
00:22:35,720 --> 00:22:40,720
所以我们可以看到我们有 4 个 A、2 个 B、1 个 C 和 1 个 D。

266
00:22:40,720 --> 00:22:50,720
 And then we want to generate this Huffman code work set for these sets of letters with this probability distribution.

266
00:22:40,720 --> 00:22:50,720
然后我们要为这些具有这种概率分布的字母集生成霍夫曼代码工作集。

267
00:22:50,720 --> 00:22:58,720
 So we can see in this case here, A occurs four times, B occurs two times, C and D occur once.

267
00:22:50,720 --> 00:22:58,720
所以我们可以看到，在这种情况下，A 出现了四次，B 出现了两次，C 和 D 出现了一次。

268
00:22:58,720 --> 00:23:01,720
 For each of them, it occurs only one time.

268
00:22:58,720 --> 00:23:01,720
对于每个人来说，这种情况只发生一次。

269
00:23:01,720 --> 00:23:08,720
 So therefore, from our understanding, if you want to represent this particular letter A using code work,

269
00:23:01,720 --> 00:23:08,720
因此，根据我们的理解，如果你想使用代码工作来表示这个特定的字母 A，

270
00:23:08,720 --> 00:23:11,720
 you want it to have a shorter code work or longer code work?

270
00:23:08,720 --> 00:23:11,720
您希望它有更短的代码工作还是更长的代码工作？

271
00:23:13,720 --> 00:23:15,720
 You want it to have shorter code work.

271
00:23:13,720 --> 00:23:15,720
您希望它的代码工作更短。

272
00:23:15,720 --> 00:23:19,720
 And which are the symbols that have the longest code work?

272
00:23:15,720 --> 00:23:19,720
哪些符号的代码工作时间最长？

273
00:23:19,720 --> 00:23:22,720
 It should be C or D.

273
00:23:19,720 --> 00:23:22,720
应该是C或者D。

274
00:23:22,720 --> 00:23:27,720
 So even before we do that, we know that that is the high level intuition.

274
00:23:22,720 --> 00:23:27,720
因此，甚至在我们这样做之前，我们就知道那是高级直觉。

275
00:23:27,720 --> 00:23:33,720
 So next, I'm going to go through with you a systematic way of generating the Huffman code work set.

275
00:23:27,720 --> 00:23:33,720
接下来，我将与您一起了解生成霍夫曼代码工作集的系统方法。

276
00:23:33,720 --> 00:23:36,720
 So actually, there are many different ways you can do it.

276
00:23:33,720 --> 00:23:36,720
所以实际上，有很多不同的方法可以做到这一点。

277
00:23:36,720 --> 00:23:43,720
 But here in this course, we are just going to introduce one way of doing it, which is usually quite a common way of doing it.

277
00:23:36,720 --> 00:23:43,720
但在本课程中，我们仅介绍一种方法，这通常是一种非常常见的方法。

278
00:23:43,720 --> 00:23:52,720
 So what we'll do first of all is that we can see that A occurs four times, B two times, C and D occur once each.

278
00:23:43,720 --> 00:23:52,720
所以我们首先要做的是，我们可以看到 A 出现了四次，B 出现了两次，C 和 D 各出现了一次。

279
00:23:52,720 --> 00:24:02,720
 So the first thing that we'll do is that we'll write down this particular symbol in the decreasing order of occurrence or the decreasing probability.

279
00:23:52,720 --> 00:24:02,720
因此，我们要做的第一件事就是按照出现次数或概率递减的顺序写下这个特定的符号。

280
00:24:02,720 --> 00:24:10,720
 So we write down A, B, C and D. It's because A occurs four times, B is two times, C and D is one time each.

280
00:24:02,720 --> 00:24:10,720
所以我们记下A、B、C、D。因为A出现了四次，B出现了两次，C和D各出现了一次。

281
00:24:10,720 --> 00:24:15,720
 So we write it down in the decreasing occurrence, number of occurrence here.

281
00:24:10,720 --> 00:24:15,720
所以我们在这里以出现次数递减的方式写下来。

282
00:24:15,720 --> 00:24:20,720
 This C and D, you can actually sort it. It doesn't matter you sort the order.

282
00:24:15,720 --> 00:24:20,720
这个C和D，其实可以排序。排序顺序并不重要。

283
00:24:20,720 --> 00:24:25,720
 But no, because in English, C occur before D. So we just happen to write this way.

283
00:24:20,720 --> 00:24:25,720
但不是，因为在英语中，C 出现在 D 之前。所以我们碰巧这样写。

284
00:24:25,720 --> 00:24:33,720
 OK, so we write down A, B, C, D. And then next week, we write down the number of occurrence, four, two, one, one here.

284
00:24:25,720 --> 00:24:33,720
好的，所以我们写下 A、B、C、D。然后下周，我们在这里写下出现的次数，四、二、一、一。

285
00:24:33,720 --> 00:24:41,720
 So the next thing is that we take those two symbols with the lowest number of occurrence, the C and D, we add them up, write the number.

285
00:24:33,720 --> 00:24:41,720
接下来，我们取出出现次数最少的两个符号 C 和 D，将它们相加，写出数字。

286
00:24:41,720 --> 00:24:43,720
 So you can see one plus one, it becomes two.

286
00:24:41,720 --> 00:24:43,720
所以你可以看到一加一，它变成了二。

287
00:24:43,720 --> 00:24:47,720
 So once you have this two here, we move it to the next column.

287
00:24:43,720 --> 00:24:47,720
因此，一旦您在这里找到了这两个，我们就把它移到下一列。

288
00:24:47,720 --> 00:24:54,720
 But you try to rearrange the next column again in the decreasing orders of occurrence here.

288
00:24:47,720 --> 00:24:54,720
但是您尝试按照此处出现的降序再次重新排列下一列。

289
00:24:54,720 --> 00:25:01,720
 So if you add up one and one is two, so two happen to be the same as this number two above.

289
00:24:54,720 --> 00:25:01,720
因此，如果将一加起来等于二，那么二恰好与上面的数字二相同。

290
00:25:01,720 --> 00:25:06,720
 So if the number is the same, usually we try not to disturb it so much. We just move it at the bottom.

290
00:25:01,720 --> 00:25:06,720
所以如果数字相同，通常我们尽量不要去打扰它。我们只需将其移动到底部即可。

291
00:25:06,720 --> 00:25:15,720
 So now we have this one plus one is two here. So the rest, we just move it over. This A4 and B2, we just move it over.

291
00:25:06,720 --> 00:25:15,720
现在我们有了这个一加一等于二。那么剩下的，我们就把它移过去。这个A4和B2，我们就移过来。

292
00:25:15,720 --> 00:25:24,720
 And then afterwards, we repeat the same thing. We take the two smallest occurrence, two and two, add up is four.

292
00:25:15,720 --> 00:25:24,720
然后，我们重复同样的事情。我们取两个最小的出现次数，二加二，加起来是四。

293
00:25:24,720 --> 00:25:31,720
 And then four should be the same as this A4, so we just put it at the bottom here. And then the rest, we just move it up here.

293
00:25:24,720 --> 00:25:31,720
然后四个应该和这个A4一样，所以我们就把它放在这里的底部。然后剩下的，我们就把它移到这里。

294
00:25:31,720 --> 00:25:38,720
 Okay, so we have done the first step. So the second step is that we assign, we need to assign the bits patterns already.

294
00:25:31,720 --> 00:25:38,720
好的，我们已经完成了第一步。所以第二步是我们分配，我们需要分配位模式。

295
00:25:38,720 --> 00:25:47,720
 So for this particular course, because we are following these textbooks, so they assign the bits as in the top branch is one, bottom branch is zero.

295
00:25:38,720 --> 00:25:47,720
因此，对于这个特定的课程，因为我们遵循这些教科书，所以他们分配的位在顶部分支中为 1，底部分支中为 0。

296
00:25:47,720 --> 00:25:51,720
 So they assign one zero, one zero, one zero here.

296
00:25:47,720 --> 00:25:51,720
所以他们在这里分配一零，一零，一零。

297
00:25:51,720 --> 00:25:56,720
 Okay, so if you want to assign zero one, zero one, zero one, actually it's also okay.

297
00:25:51,720 --> 00:25:56,720
好吧，所以如果你想分配零一，零一，零一，其实也可以。

298
00:25:56,720 --> 00:26:02,720
 But for this particular course, let's try to stick to the convention that this book introduced.

298
00:25:56,720 --> 00:26:02,720
但对于这个特定的课程，让我们尝试遵循本书介绍的约定。

299
00:26:02,720 --> 00:26:10,720
 So that in the event if I ask a question during the quiz or exam, I don't have to check all the possible version.

299
00:26:02,720 --> 00:26:10,720
这样，如果我在测验或考试期间提出问题，我不必检查所有可能的版本。

300
00:26:10,720 --> 00:26:15,720
 So we stick to this particular convention here, one zero, one zero, one zero.

300
00:26:10,720 --> 00:26:15,720
所以我们在这里坚持这个特殊的约定，一零，一零，一零。

301
00:26:15,720 --> 00:26:19,720
 Okay, so now we have more or less finished this part already.

301
00:26:15,720 --> 00:26:19,720
好的，现在我们已经或多或少地完成了这一部分。

302
00:26:19,720 --> 00:26:27,720
 Okay, and then next is we just try to transfer this symbol, the symbol, right, just before it's being merged.

302
00:26:19,720 --> 00:26:27,720
好的，接下来我们只是尝试在合并之前转移这个符号，对吧。

303
00:26:27,720 --> 00:26:33,720
 Just for it, make it easier for us to do the tracking. So A, before it's being merged here, it's here.

303
00:26:27,720 --> 00:26:33,720
就是为了让我们更方便的进行追踪。所以A，在它被合并到这里之前，它就在这里。

304
00:26:33,720 --> 00:26:39,720
 And B, you can continue to write here before it's being merged, it's here. And C, and V are here.

304
00:26:33,720 --> 00:26:39,720
还有B，你可以在合并之前继续写在这里，就在这里。 C、V 也在这里。

305
00:26:39,720 --> 00:26:45,720
 Okay, so we have done this already. The next thing is that we need to build a Huffman code tree here.

305
00:26:39,720 --> 00:26:45,720
好的，我们已经做到了。接下来我们需要在这里构建一个霍夫曼代码树。

306
00:26:45,720 --> 00:26:51,720
 So for this Huffman code tree, we start on top. On top is actually four plus four is eight.

306
00:26:45,720 --> 00:26:51,720
因此，对于这个霍夫曼代码树，我们从顶部开始。上面实际上是四加四等于八。

307
00:26:51,720 --> 00:26:54,720
 Just now there's no need. If you want, we can add them up further to become eight.

307
00:26:51,720 --> 00:26:54,720
只是现在还没有必要。如果您愿意，我们可以将它们进一步加起来成为八个。

308
00:26:54,720 --> 00:26:58,720
 But it's actually not really necessary.

308
00:26:54,720 --> 00:26:58,720
但实际上并不是真的有必要。

309
00:26:58,720 --> 00:27:03,720
 So anyway, we start with the root node of eight, which is four plus four, eight.

309
00:26:58,720 --> 00:27:03,720
所以无论如何，我们从根节点 8 开始，即四加四，八。

310
00:27:03,720 --> 00:27:11,720
 Right, okay, for this Huffman code tree branching, okay, the left branch we assign a bit of zero,

310
00:27:03,720 --> 00:27:11,720
好的，好的，对于这个霍夫曼代码树分支，好的，左分支我们分配一个零位，

311
00:27:11,720 --> 00:27:15,720
 and the right branch we assign a bit of one. So it's zero and one here.

311
00:27:11,720 --> 00:27:15,720
右边的分支我们分配一点1。所以这里是零和一。

312
00:27:15,720 --> 00:27:22,720
 So you can see this zero here corresponds to this value four, and then this one here corresponds to this branching on one, which is A4.

312
00:27:15,720 --> 00:27:22,720
所以你可以看到这里的这个零对应于这个值四，然后这里的这个对应于一上的分支，即A4。

313
00:27:22,720 --> 00:27:28,720
 So we just write it down. Okay. And afterwards, we look at this particular four value again.

313
00:27:22,720 --> 00:27:28,720
所以我们只是写下来。好的。然后，我们再次查看这个特定的四个值。

314
00:27:28,720 --> 00:27:34,720
 Left branch is zero, right branch is one. Okay, so now this zero corresponds to this two.

314
00:27:28,720 --> 00:27:34,720
左分支为零，右分支为一。好的，现在这个零对应于这两个。

315
00:27:34,720 --> 00:27:40,720
 We write it down. This one here corresponds to this point, which is B2. So we write it down.

315
00:27:34,720 --> 00:27:40,720
我们把它写下来。这里对应的就是这一点，也就是B2。所以我们把它写下来。

316
00:27:40,720 --> 00:27:45,720
 Okay, and then finally, from this two, left branch is zero, right branch is one.

316
00:27:40,720 --> 00:27:45,720
好的，最后，从这两个中，左分支为零，右分支为一。

317
00:27:45,720 --> 00:27:54,720
 So left branch is D1, okay, one is C1. So we'll be able to write down this particular Huffman code tree already.

317
00:27:45,720 --> 00:27:54,720
所以左边的分支是D1，好吧，一个是C1。所以我们已经能够写下这个特定的霍夫曼代码树了。

318
00:27:54,720 --> 00:27:59,720
 So the last step that we need to do is that we need to write down all the code works already.

318
00:27:54,720 --> 00:27:59,720
因此，我们需要做的最后一步是我们需要写下所有已经运行的代码。

319
00:27:59,720 --> 00:28:03,720
 So if you want to write down the code work, for example, A, right, for the code work A,

319
00:27:59,720 --> 00:28:03,720
所以如果你想写下代码工作，例如，A，对，对于代码工作A，

320
00:28:03,720 --> 00:28:08,720
 we just start off from the root node and trace it until this leaf node here.

320
00:28:03,720 --> 00:28:08,720
我们从根节点开始，一直追踪到这里的叶节点。

321
00:28:08,720 --> 00:28:15,720
 The number of bits that it travels through and you collect along the way is your Huffman code work.

321
00:28:08,720 --> 00:28:15,720
它所经过的位数以及您沿途收集的位数就是您的霍夫曼代码工作。

322
00:28:15,720 --> 00:28:19,720
 So in other words, if you want to write down the Huffman code work for this number A,

322
00:28:15,720 --> 00:28:19,720
换句话说，如果你想写出这个数字A的霍夫曼编码，

323
00:28:20,720 --> 00:28:25,720
 we start from the root node, which is eight, okay, and then we traverse to this leaf node A, right,

323
00:28:20,720 --> 00:28:25,720
我们从根节点开始，就是八，好吧，然后我们遍历到这个叶子节点A，对吧，

324
00:28:25,720 --> 00:28:31,720
 the number of bits that you collect along the way is one. So therefore, the Huffman code work for A is one.

324
00:28:25,720 --> 00:28:31,720
您沿途收集的位数为 1。因此，A 的霍夫曼编码工作是一。

325
00:28:31,720 --> 00:28:40,720
 Okay, let's just take one more example. Suppose if you want to find what's the Huffman code work for this symbol D, right?

325
00:28:31,720 --> 00:28:40,720
好吧，我们再举一个例子。假设你想找到这个符号 D 的霍夫曼编码是什么，对吗？

326
00:28:40,720 --> 00:28:47,720
 So we start from this root node, okay, we want to traverse to this leaf node, so you traverse through this path here.

326
00:28:40,720 --> 00:28:47,720
那么我们就从这个根节点开始，好吧，我们要遍历到这个叶子节点，所以你这里遍历这条路径。

327
00:28:47,720 --> 00:28:52,720
 So along the way, the number of bits that you collect is zero, zero, zero.

327
00:28:47,720 --> 00:28:52,720
因此，一路上，您收集的位数为零，零，零。

328
00:28:52,720 --> 00:29:00,720
 So therefore, for this symbol D, right, okay, the Huffman code work is zero, zero, zero.

328
00:28:52,720 --> 00:29:00,720
因此，对于这个符号D，对，好吧，霍夫曼编码的工作是零，零，零。

329
00:29:00,720 --> 00:29:06,720
 So this is one way for us to generate the Huffman code work set, a very systematic way of doing it.

329
00:29:00,720 --> 00:29:06,720
所以这是我们生成霍夫曼代码工作集的一种方法，一种非常系统的方法。

330
00:29:06,720 --> 00:29:12,720
 Okay, and also just now when we look at this particular Huffman code tree here, you can see the root on top,

330
00:29:06,720 --> 00:29:12,720
好的，现在当我们查看这个特定的霍夫曼代码树时，您可以看到顶部的根，

331
00:29:13,720 --> 00:29:20,720
 we call it the root node, okay, the branch that, no, the node that has the branching, we call it the branch node, okay.

331
00:29:13,720 --> 00:29:20,720
我们称之为根节点，好吧，分支，不，有分支的节点，我们称之为分支节点，好吧。

332
00:29:20,720 --> 00:29:24,720
 The node at the bottom, there's no further branching, we call it the leaf node, okay,

332
00:29:20,720 --> 00:29:24,720
最底部的节点，没有进一步的分支，我们称之为叶节点，好吧，

333
00:29:24,720 --> 00:29:28,720
 so that's the definitions of root node, branch node and leaf node.

333
00:29:24,720 --> 00:29:28,720
这就是根节点、分支节点和叶节点的定义。

334
00:29:28,720 --> 00:29:38,720
 Okay, so we are going through one simple example of showing how we can create a Huffman code set for this particular example.

334
00:29:28,720 --> 00:29:38,720
好的，我们将通过一个简单的示例来展示如何为这个特定示例创建霍夫曼代码集。

335
00:29:38,720 --> 00:29:46,720
 So let's go through a bit more explanation. So this explanation here, just now I already covered earlier.

335
00:29:38,720 --> 00:29:46,720
让我们进一步解释一下。所以这里的解释，刚才我已经讲过了。

336
00:29:46,720 --> 00:29:52,720
 So a Huffman code tree is a binary tree with branches assigned a value of zero and one, okay.

336
00:29:46,720 --> 00:29:52,720
因此，霍夫曼码树是一棵二叉树，其分支分配了值 0 和 1，好吧。

337
00:29:52,720 --> 00:29:59,720
 It has a tree structure, so the root node is on top, okay, the root of the tree.

337
00:29:52,720 --> 00:29:59,720
它有一个树结构，所以根节点在顶部，好吧，树的根。

338
00:29:59,720 --> 00:30:07,720
 The branch node are the nodes that you have the branching, okay, and the leaf node is the termination nodes of the tree, right.

338
00:29:59,720 --> 00:30:07,720
分支节点是有分支的节点，好吧，叶节点是树的终止节点，对吧。

339
00:30:07,720 --> 00:30:13,720
 So as seen, this is the root node, these are the branch node and at the bottom, these are the leaf node.

339
00:30:07,720 --> 00:30:13,720
正如所见，这是根节点，这些是分支节点，在底部，这些是叶节点。

340
00:30:13,720 --> 00:30:21,720
 Right, so at each branch node, zero and one are assigned to the left and the right branch accordingly, like what we have seen, okay.

340
00:30:13,720 --> 00:30:21,720
是的，所以在每个分支节点，零和一被相应地分配给左分支和右分支，就像我们看到的那样，好吧。

341
00:30:21,720 --> 00:30:24,720
 Zero and one, zero and one, zero and one.

341
00:30:21,720 --> 00:30:24,720
零和一，零和一，零和一。

342
00:30:24,720 --> 00:30:33,720
 Okay, the code word used for each character or symbol is determined by tracing the path from the root node to the leaf node.

342
00:30:24,720 --> 00:30:33,720
好的，每个字符或符号使用的码字是通过跟踪从根节点到叶节点的路径来确定的。

343
00:30:33,720 --> 00:30:42,720
 So the path from the leaf node as you trace traversed from the root node to the leaf node and the number of bits you collect along the way is actually your Huffman code.

343
00:30:33,720 --> 00:30:42,720
因此，当您从根节点跟踪到叶节点时，从叶节点开始的路径以及沿途收集的位数实际上是您的霍夫曼代码。

344
00:30:42,720 --> 00:30:48,720
 Right, okay, so that's all is actually a very simple kind of example that we have gone through.

344
00:30:42,720 --> 00:30:48,720
好的，好的，这实际上是我们已经经历过的一个非常简单的例子。

345
00:30:48,720 --> 00:30:56,720
 So next, in order to make sure that you fully understand what's the best way, yeah, the best way is for you to do an exercise, right.

345
00:30:48,720 --> 00:30:56,720
那么接下来，为了确保你完全明白什么是最好的方法，是的，最好的方法就是让你做一个练习，对吧。

346
00:30:56,720 --> 00:31:05,720
 So actually there are two exercises, okay, and it turned out that later on I find that exercise two is probably a bit easier than exercise one.

346
00:30:56,720 --> 00:31:05,720
所以实际上有两个练习，好吧，后来我发现练习二可能比练习一容易一点。

347
00:31:05,720 --> 00:31:08,720
 So therefore we'll probably swap the order a little bit.

347
00:31:05,720 --> 00:31:08,720
因此，我们可能会稍微交换一下顺序。

348
00:31:08,720 --> 00:31:15,720
 Let's try to solve this exercise two first, right, and then afterwards we'll come back to exercise one.

348
00:31:08,720 --> 00:31:15,720
让我们先尝试解决练习二，对吧，然后我们再回到练习一。

349
00:31:15,720 --> 00:31:18,720
 So let's look at this exercise two.

349
00:31:15,720 --> 00:31:18,720
那么让我们看看这个练习二。

350
00:31:18,720 --> 00:31:29,720
 But it states that in the compression scheme, a data source consists of eight symbols with the following probability distribution is given in table one here.

350
00:31:18,720 --> 00:31:29,720
但它指出，在压缩方案中，数据源由八个符号组成，表一给出了以下概率分布。

351
00:31:29,720 --> 00:31:35,720
 So in this data source, you have eight symbols, S0 to S1, and these are the probability of occurrences here.

351
00:31:29,720 --> 00:31:35,720
因此，在此数据源中，有八个符号，S0 到 S1，这些是此处出现的概率。

352
00:31:35,720 --> 00:31:44,720
 So in part one, it asks you to design a set of Huffman code work set for these eight symbols and clearly show all the steps and calculations involved.

352
00:31:35,720 --> 00:31:44,720
因此，在第一部分中，它要求您为这八个符号设计一套霍夫曼代码工作集，并清楚地显示所涉及的所有步骤和计算。

353
00:31:44,720 --> 00:31:52,720
 Right, okay, so yeah, I'll give you a bit of time, right, to try out and then we'll try to go through the answer together.

353
00:31:44,720 --> 00:31:52,720
好吧，好吧，所以是的，我会给你一点时间，好吧，尝试一下，然后我们会一起尝试找到答案。

354
00:31:52,720 --> 00:31:59,720
 So I know that the earlier example is a bit simpler because it only involved four symbols and this one is eight symbols.

354
00:31:52,720 --> 00:31:59,720
所以我知道前面的例子更简单一些，因为它只涉及四个符号，而这个是八个符号。

355
00:31:59,720 --> 00:32:02,720
 But you should be using the same principle to solve it.

355
00:31:59,720 --> 00:32:02,720
但你应该使用相同的原理来解决它。

356
00:32:02,720 --> 00:32:07,720
 So I'll give you a bit of time to think about it, yeah, and then we'll go through the answers together.

356
00:32:02,720 --> 00:32:07,720
所以我会给你一点时间考虑一下，是的，然后我们将一起讨论答案。

357
00:32:32,720 --> 00:32:56,720
 What you're looking

357
00:32:32,720 --> 00:32:56,720
你在看什么

358
00:33:02,720 --> 00:33:13,720
 Okay, yeah, before you continue, perhaps allow me to play a very short video clip and then perhaps you can tell me what this thing is.

358
00:33:02,720 --> 00:33:13,720
好吧，是的，在你继续之前，也许请允许我播放一个非常短的视频剪辑，然后也许你可以告诉我这东西是什么。

359
00:33:13,720 --> 00:33:32,720
 Okay, there's a voice coming out.

359
00:33:13,720 --> 00:33:32,720
好吧，有声音传出来。

360
00:33:32,720 --> 00:33:39,720
 Right, do you know, any one of you know what you're watching here?

360
00:33:32,720 --> 00:33:39,720
对了，你们知道吗，你们中有人知道你们在看什么吗？

361
00:33:39,720 --> 00:33:44,720
 Yeah, it's actually the neuron growing the connections between two neurons.

361
00:33:39,720 --> 00:33:44,720
是的，它实际上是神经元在两个神经元之间建立连接。

362
00:33:44,720 --> 00:33:54,720
 So yeah, I just happened to attend one of the parent-teacher kind of meeting for one of my kids in secondary school.

362
00:33:44,720 --> 00:33:54,720
是的，我只是碰巧参加了我的一个中学孩子的家长会。

363
00:33:54,720 --> 00:34:03,720
 So they actually explained to us that if you want your kids to learn effectively, you need to provide opportunity for them to think.

363
00:33:54,720 --> 00:34:03,720
所以他们实际上向我们解释说，如果你想让你的孩子有效地学习，你需要为他们提供思考的机会。

364
00:34:03,720 --> 00:34:10,720
 So if you attend any lecture and then if you just listen, usually you'll probably only retain about 30% of the material.

364
00:34:03,720 --> 00:34:10,720
因此，如果您参加任何讲座然后只是听，通常您可能只能记住大约 30% 的材料。

365
00:34:10,720 --> 00:34:15,720
 So 100% come in, you keep 30%, 70% of the material will go out.

365
00:34:10,720 --> 00:34:15,720
所以100%进来，你保留30%，70%的材料会出去。

366
00:34:15,720 --> 00:34:19,720
 So therefore we need different way to retain this knowledge.

366
00:34:15,720 --> 00:34:19,720
因此，我们需要不同的方式来保留这些知识。

367
00:34:19,719 --> 00:34:30,719
 So how you retain this knowledge, right, it can be, for example, by solving some problem like what we are trying to do now, or even writing some books or drawing some pictures when you do the revision.

367
00:34:19,719 --> 00:34:30,719
那么你如何保留这些知识呢，对吧，可以比如说解决一些像我们现在要做的问题，甚至在复习的时候写一些书或者画一些图。

368
00:34:30,719 --> 00:34:38,719
 All those activities will help you to strengthen these connections of the sameness, right, to improve your learning effectiveness.

368
00:34:30,719 --> 00:34:38,719
所有这些活动将帮助你加强这些相同的联系，对吧，提高你的学习效率。

369
00:34:38,719 --> 00:34:43,719
 Okay, I can see many of you are very eager to solve the problem, so I'll let you continue.

369
00:34:38,719 --> 00:34:43,719
好的，我看到你们很多人都非常渴望解决这个问题，所以我让你们继续。

370
00:35:08,720 --> 00:35:13,720
 Okay.

370
00:35:08,720 --> 00:35:13,720
好的。

371
00:35:38,720 --> 00:35:43,720
 Okay.

371
00:35:38,720 --> 00:35:43,720
好的。

372
00:36:08,720 --> 00:36:13,720
 Okay.

372
00:36:08,720 --> 00:36:13,720
好的。

373
00:36:38,720 --> 00:36:43,720
 Okay.

373
00:36:38,720 --> 00:36:43,720
好的。

374
00:37:08,720 --> 00:37:13,720
 Okay.

374
00:37:08,720 --> 00:37:13,720
好的。

375
00:37:38,720 --> 00:37:43,720
 Okay.

375
00:37:38,720 --> 00:37:43,720
好的。

376
00:38:08,720 --> 00:38:13,720
 Okay.

376
00:38:08,720 --> 00:38:13,720
好的。

377
00:38:38,720 --> 00:38:43,720
 Okay.

377
00:38:38,720 --> 00:38:43,720
好的。

378
00:39:08,720 --> 00:39:13,720
 Okay.

378
00:39:08,720 --> 00:39:13,720
好的。

379
00:39:38,720 --> 00:39:43,720
 Okay.

379
00:39:38,720 --> 00:39:43,720
好的。

380
00:39:43,720 --> 00:39:48,720
 Okay.

380
00:39:43,720 --> 00:39:48,720
好的。

381
00:39:48,720 --> 00:39:53,720
 Okay.

381
00:39:48,720 --> 00:39:53,720
好的。

382
00:39:53,720 --> 00:39:58,720
 Okay.

382
00:39:53,720 --> 00:39:58,720
好的。

383
00:39:58,720 --> 00:40:03,720
 Okay.

383
00:39:58,720 --> 00:40:03,720
好的。

384
00:40:03,720 --> 00:40:08,720
 Okay.

384
00:40:03,720 --> 00:40:08,720
好的。

385
00:40:08,720 --> 00:40:13,720
 So at least you have some time to get your brain start working and thinking about it.

385
00:40:08,720 --> 00:40:13,720
所以至少你有一些时间让你的大脑开始工作和思考。

386
00:40:13,720 --> 00:40:18,720
 So let's try to go through the key steps that we should do in order to solve the problem.

386
00:40:13,720 --> 00:40:18,720
因此，让我们尝试完成解决问题所应该执行的关键步骤。

387
00:40:18,720 --> 00:40:27,720
 So based on the steps that I've described earlier on in the previous example, what's the first thing that you have to do?

387
00:40:18,720 --> 00:40:27,720
因此，根据我之前在上一个示例中描述的步骤，您要做的第一件事是什么？

388
00:40:28,720 --> 00:40:32,720
 What's the first thing that you have to do?

388
00:40:28,720 --> 00:40:32,720
你要做的第一件事是什么？

389
00:40:32,720 --> 00:40:35,720
 Anyone?

389
00:40:32,720 --> 00:40:35,720
有人吗？

390
00:40:35,720 --> 00:40:40,720
 Yeah.

390
00:40:35,720 --> 00:40:40,720
是的。

391
00:40:40,720 --> 00:40:56,720
 Okay, we should try to rank all these symbols in the decreasing probability of occurrence and then go through the steps of taking the two lowest probability, try to add them up, and then for the next column, try to rearrange the probability.

391
00:40:40,720 --> 00:40:56,720
好吧，我们应该尝试按照出现概率递减的顺序对所有这些符号进行排序，然后执行取两个最低概率的步骤，尝试将它们相加，然后对于下一列，尝试重新排列概率。

392
00:40:56,720 --> 00:41:02,720
 Okay, and after we take the last two probability, add them up, and then try to reorder in the next column.

392
00:40:56,720 --> 00:41:02,720
好的，在我们获取最后两个概率之后，将它们相加，然后尝试在下一列中重新排序。

393
00:41:02,720 --> 00:41:04,720
 So you do that repeatedly doing that.

393
00:41:02,720 --> 00:41:04,720
所以你反复这样做。

394
00:41:04,720 --> 00:41:06,720
 Okay, so that's a step one.

394
00:41:04,720 --> 00:41:06,720
好的，这是第一步。

395
00:41:06,720 --> 00:41:11,720
 And afterwards, what's step two?

395
00:41:06,720 --> 00:41:11,720
然后，第二步是什么？

396
00:41:11,720 --> 00:41:16,720
 Step two is you assign the bits on that structure, right?

396
00:41:11,720 --> 00:41:16,720
第二步是分配该结构上的位，对吧？

397
00:41:16,720 --> 00:41:18,720
 So the top branch is one, bottom branch is zero.

397
00:41:16,720 --> 00:41:18,720
所以顶部分支是 1，底部分支是 0。

398
00:41:18,720 --> 00:41:21,720
 So one, zero, one, zero, one, zero, one, zero.

398
00:41:18,720 --> 00:41:21,720
所以一，零，一，零，一，零，一，零。

399
00:41:21,720 --> 00:41:23,720
 So you do the branching.

399
00:41:21,720 --> 00:41:23,720
所以你做分支。

400
00:41:23,720 --> 00:41:28,720
 Okay, and then afterwards, what's the step three?

400
00:41:23,720 --> 00:41:28,720
好的，那么第三步是什么？

401
00:41:28,720 --> 00:41:32,720
 You construct the Huffman code tree.

401
00:41:28,720 --> 00:41:32,720
您构建霍夫曼代码树。

402
00:41:32,720 --> 00:41:35,720
 So you build the Huffman code tree, right, just following the structure.

402
00:41:32,720 --> 00:41:35,720
所以你就按照结构构建了霍夫曼代码树，对吧。

403
00:41:35,720 --> 00:41:37,720
 You build the Huffman code tree.

403
00:41:35,720 --> 00:41:37,720
您构建霍夫曼代码树。

404
00:41:37,720 --> 00:41:46,720
 And then finally, if you want to determine all the code words, you just trace from the root node all the way to the corresponding leaf node for the symbol.

404
00:41:37,720 --> 00:41:46,720
最后，如果你想确定所有的码字，你只需从根节点一直追踪到符号对应的叶节点即可。

405
00:41:46,720 --> 00:41:52,720
 And the number of bits you collect along the way will be your Huffman code tree, I mean the Huffman code word.

405
00:41:46,720 --> 00:41:52,720
你沿途收集的位数将是你的霍夫曼码树，我的意思是霍夫曼码字。

406
00:41:52,720 --> 00:42:05,720
 So that's the basic high-level ideas of how we can solve this particular problem using the approach that we have just introduced.

406
00:41:52,720 --> 00:42:05,720
这就是我们如何使用我们刚刚介绍的方法解决这个特定问题的基本高级想法。

407
00:42:05,720 --> 00:42:08,720
 So let me try to go through the...

407
00:42:05,720 --> 00:42:08,720
那么让我尝试通过...

408
00:42:35,720 --> 00:42:40,720
 Okay.

408
00:42:35,720 --> 00:42:40,720
好的。

409
00:43:05,720 --> 00:43:20,720
 All right.

409
00:43:05,720 --> 00:43:20,720
好的。

410
00:43:20,720 --> 00:43:27,720
 Okay, so this particular solution file, I'm going to upload to the course site afterwards.

410
00:43:20,720 --> 00:43:27,720
好的，这个特定的解决方案文件，我将随后上传到课程网站。

411
00:43:27,720 --> 00:43:34,720
 After today's lecture, I'll upload to the course site, so there's no need for you to take pictures or copy.

411
00:43:27,720 --> 00:43:34,720
今天的讲座结束后我会上传到课程网站，所以你不需要拍照或复制。

412
00:43:34,720 --> 00:43:39,720
 So afterwards, yeah, latest by tomorrow, you can go and download the solution already.

412
00:43:34,720 --> 00:43:39,720
所以之后，是的，最晚在明天，您就可以去下载解决方案了。

413
00:43:39,720 --> 00:43:44,720
 Right, okay, so what we should be paying attention is how do we solve this problem?

413
00:43:39,720 --> 00:43:44,720
好吧，那么我们应该关注的是我们如何解决这个问题呢？

414
00:43:44,720 --> 00:43:57,720
 So you can see, if you look at this particular set of symbols with their corresponding probability, as we have mentioned, step one, what we need to do is try to write down these symbols in the decreasing order of probability.

414
00:43:44,720 --> 00:43:57,720
所以你可以看到，如果你看看这组特定的符号及其相应的概率，正如我们在第一步中提到的，我们需要做的就是尝试按概率降序写下这些符号。

415
00:43:57,720 --> 00:44:00,720
 In our previous example, it's occurrence.

415
00:43:57,720 --> 00:44:00,720
在我们前面的例子中，它是发生的。

416
00:44:00,720 --> 00:44:02,720
 In this particular example, it's a probability.

416
00:44:00,720 --> 00:44:02,720
在这个特定的例子中，它是一个概率。

417
00:44:02,720 --> 00:44:05,720
 So probability is a more common cases.

417
00:44:02,720 --> 00:44:05,720
所以概率是比较常见的情况。

418
00:44:05,720 --> 00:44:14,720
 So if you look at this set of symbols, you can see S7 has the largest probability and S0 is the smallest.

418
00:44:05,720 --> 00:44:14,720
所以如果你看一下这组符号，你会发现 S7 的概率最大，S0 的概率最小。

419
00:44:14,720 --> 00:44:20,720
 So therefore, we need to write down this symbol in the decreasing order of probability.

419
00:44:14,720 --> 00:44:20,720
因此，我们需要按照概率递减的顺序写下这个符号。

420
00:44:20,720 --> 00:44:26,720
 Okay, so from 0.26, which is the largest, to 0.02, which is the smallest.

420
00:44:20,720 --> 00:44:26,720
好的，从最大的 0.26 到最小的 0.02。

421
00:44:26,720 --> 00:44:30,720
 And afterwards, we take those two symbols with the smallest probability.

421
00:44:26,720 --> 00:44:30,720
然后，我们以最小的概率取这两个符号。

422
00:44:30,720 --> 00:44:36,720
 Okay, for example, 0.05 and 0.02, we add them up.

422
00:44:30,720 --> 00:44:36,720
好的，比如说0.05和0.02，我们把它们相加。

423
00:44:36,720 --> 00:44:39,720
 So we add them up, we'll notice that it's 0.07.

423
00:44:36,720 --> 00:44:39,720
所以我们将它们相加，我们会发现它是 0.07。

424
00:44:39,720 --> 00:44:48,720
 So now, if you compare this 0.07 with respect to all the other probability, you can see it's the smallest.

424
00:44:39,720 --> 00:44:48,720
现在，如果您将这个 0.07 与所有其他概率进行比较，您会发现它是最小的。

425
00:44:48,720 --> 00:44:54,720
 So therefore, it needs to be ranked at the bottom and the rest of the probability will just simply transfer over.

425
00:44:48,720 --> 00:44:54,720
因此，它需要排在最后，其余的概率就简单地转移过去。

426
00:44:54,720 --> 00:44:58,720
 Okay, so this in your next column.

426
00:44:54,720 --> 00:44:58,720
好的，这在你的下一篇专栏中。

427
00:44:58,720 --> 00:45:01,720
 And afterwards, we repeat the exercise. Let me just do it one more time.

427
00:44:58,720 --> 00:45:01,720
然后，我们重复这个练习。让我再做一次。

428
00:45:01,720 --> 00:45:07,720
 For example, this 0.08 plus 0.07, that is 0.15.

428
00:45:01,720 --> 00:45:07,720
比如这个0.08加上0.07，那就是0.15。

429
00:45:07,720 --> 00:45:16,720
 So once this probability is 0.15, okay, when you move it over to the next column, you can see that 0.15 should be between this 0.16 and 0.14.

429
00:45:07,720 --> 00:45:16,720
因此，一旦这个概率为 0.15，好吧，当您将其移动到下一列时，您可以看到 0.15 应该在 0.16 和 0.14 之间。

430
00:45:16,720 --> 00:45:23,720
 So therefore, we need to move it up here, right, the rest of the probability we transfer over.

430
00:45:16,720 --> 00:45:23,720
因此，我们需要把它移到这里，对吧，我们把剩下的概率转移过去。

431
00:45:23,720 --> 00:45:26,720
 So for the one that's been replaced, you have to move down here.

431
00:45:23,720 --> 00:45:26,720
所以对于被替换的那个，你必须搬到这里来。

432
00:45:26,720 --> 00:45:30,720
 Okay, right, so this is for the next column.

432
00:45:26,720 --> 00:45:30,720
好的，好的，这是下一篇专栏的内容。

433
00:45:30,720 --> 00:45:34,720
 So we repeat this exercise. Yeah, so let's just do it one more time.

433
00:45:30,720 --> 00:45:34,720
所以我们重复这个练习。是的，所以我们再做一次吧。

434
00:45:34,720 --> 00:45:39,720
 For example, 0.14 plus 0.1 will give you 0.24.

434
00:45:34,720 --> 00:45:39,720
例如，0.14 加 0.1 将得到 0.24。

435
00:45:39,720 --> 00:45:44,720
 So 0.24 compared with the other probability, this 0.24 now should be here.

435
00:45:39,720 --> 00:45:44,720
那么0.24与其他概率相比，这个0.24现在应该在这里。

436
00:45:44,720 --> 00:45:48,720
 Okay, so 0.26 you move over here and then this 0.19 you move it down.

436
00:45:44,720 --> 00:45:48,720
好的，所以 0.26 你移到这里，然后这个 0.19 你把它移下来。

437
00:45:48,720 --> 00:45:53,720
 So that again, this is still in the decreasing order of probability.

437
00:45:48,720 --> 00:45:53,720
因此，这仍然是按概率递减的顺序排列。

438
00:45:53,720 --> 00:45:59,720
 So you repeat this particular process, all the, okay, since there are still a few more, let me just continue.

438
00:45:53,720 --> 00:45:59,720
所以你重复这个特定的过程，所有的，好吧，因为还有一些，让我继续。

439
00:45:59,720 --> 00:46:04,720
 So 0.16 plus 0.15 now is 0.31, which is the largest as compared to the others.

439
00:45:59,720 --> 00:46:04,720
所以 0.16 加 0.15 现在是 0.31，与其他相比是最大的。

440
00:46:04,720 --> 00:46:09,720
 So you need to move the top, the rest you just transfer over, shift it down.

440
00:46:04,720 --> 00:46:09,720
所以你需要移动顶部，其余的你只需转移过来，向下移动。

441
00:46:09,720 --> 00:46:14,720
 Okay, and then 0.24 plus 0.19 is 0.43, right, which is the largest now.

441
00:46:09,720 --> 00:46:14,720
好吧，然后0.24加上0.19就是0.43，对吧，现在是最大的了。

442
00:46:14,720 --> 00:46:20,720
 So it's 0.43 here, 0.31 and 0.26 you just transfer over, but need to move down.

442
00:46:14,720 --> 00:46:20,720
所以这里是0.43，0.31和0.26你只是转移过去，但需要向下移动。

443
00:46:20,720 --> 00:46:26,720
 Okay, and then finally 0.31 plus 0.26 is 0.57, right, which is larger than 0.43.

443
00:46:20,720 --> 00:46:26,720
好的，最后 0.31 加 0.26 就是 0.57，对吧，比 0.43 大。

444
00:46:26,720 --> 00:46:29,720
 So you move it up and this you move it down.

444
00:46:26,720 --> 00:46:29,720
所以你把它向上移动，然后你把它向下移动。

445
00:46:29,720 --> 00:46:34,720
 So yeah, so the first step is we just simply do the process that we have just described.

445
00:46:29,720 --> 00:46:34,720
是的，第一步我们只是简单地执行我们刚才描述的过程。

446
00:46:34,720 --> 00:46:38,720
 And then step two is that you need to assign bits to this branching now.

446
00:46:34,720 --> 00:46:38,720
第二步是您现在需要为该分支分配位。

447
00:46:38,720 --> 00:46:49,720
 So for this article course, the kind of convention will be used is that the top branch is V1, bottom branch will be 0.

447
00:46:38,720 --> 00:46:49,720
因此，对于本文课程，将使用的约定是顶部分支为 V1，底部分支为 0。

448
00:46:49,720 --> 00:46:54,720
 So it's 1 0, 1 0, 1 0, 1 0, 1 0, 1 0 and 1 0.

448
00:46:49,720 --> 00:46:54,720
所以是 1 0, 1 0, 1 0, 1 0, 1 0, 1 0 和 1 0。

449
00:46:54,720 --> 00:46:56,720
 Okay, so that's step two.

449
00:46:54,720 --> 00:46:56,720
好的，这是第二步。

450
00:46:56,720 --> 00:47:03,720
 And step three, in order to make it easier for you to trace, right, where the original symbol is,

450
00:46:56,720 --> 00:47:03,720
第三步，为了让你更容易追踪，对，原始符号在哪里，

451
00:47:03,720 --> 00:47:10,720
 it's always a good practice that you try to trace this symbol, for example this S7, before it's being merged,

451
00:47:03,720 --> 00:47:10,720
在合并之前尝试跟踪此符号始终是一个好习惯，例如这个 S7，

452
00:47:10,720 --> 00:47:12,720
 okay, before it's being combined here.

452
00:47:10,720 --> 00:47:12,720
好吧，在它被合并到这里之前。

453
00:47:12,720 --> 00:47:14,720
 So we just write down S7 here.

453
00:47:12,720 --> 00:47:14,720
所以这里就写S7吧。

454
00:47:14,720 --> 00:47:18,720
 So this is combined, before it's combined, this is S7.

454
00:47:14,720 --> 00:47:18,720
所以这个组合起来了，组合之前，这是S7。

455
00:47:18,720 --> 00:47:24,720
 Okay, so we do the same as well, S6, we follow the path, just before it's being combined is here.

455
00:47:18,720 --> 00:47:24,720
好的，所以我们也做同样的事情，S6，我们沿着这条路走，就在它被组合之前就在这里。

456
00:47:24,720 --> 00:47:26,720
 So we write down this S6 here.

456
00:47:24,720 --> 00:47:26,720
所以我们把这款S6写在这里。

457
00:47:26,720 --> 00:47:29,720
 So we repeat that for all the other symbols here.

457
00:47:26,720 --> 00:47:29,720
因此，我们对这里的所有其他符号重复这一点。

458
00:47:29,720 --> 00:47:34,720
 Then you'll be able to write down the instance of all this symbol before it's being combined.

458
00:47:29,720 --> 00:47:34,720
然后，您将能够在组合之前写下所有这些符号的实例。

459
00:47:34,720 --> 00:47:39,720
 So this is to make it easier for you to track, okay, all this symbol.

459
00:47:34,720 --> 00:47:39,720
所以这是为了让你更容易追踪所有这些符号。

460
00:47:39,720 --> 00:47:44,720
 So now we have finished this particular, you know, this step already.

460
00:47:39,720 --> 00:47:44,720
所以现在我们已经完成了这个特别的步骤。

461
00:47:44,720 --> 00:47:49,720
 And the next thing that we need to do now is that we need to build a Huffman-Coco tree.

461
00:47:44,720 --> 00:47:49,720
我们现在需要做的下一件事是我们需要构建一棵 Huffman-Coco 树。

462
00:47:49,720 --> 00:47:54,720
 So the Huffman-Coco tree, you start off with a probability of 1, okay.

462
00:47:49,720 --> 00:47:54,720
所以 Huffman-Coco 树，你从概率 1 开始，好吧。

463
00:47:54,720 --> 00:48:01,720
 And the left branch, as we have mentioned in the previous description, left branch is 0, right branch is 1.

463
00:47:54,720 --> 00:48:01,720
而左分支，我们在前面的描述中已经提到，左分支为0，右分支为1。

464
00:48:01,720 --> 00:48:06,720
 So these zeros here correspond to this here, 0.43.

464
00:48:01,720 --> 00:48:06,720
所以这里的这些零对应于这里的 0.43。

465
00:48:06,720 --> 00:48:08,720
 So we just write down 0.43.

465
00:48:06,720 --> 00:48:08,720
所以我们只写0.43。

466
00:48:08,720 --> 00:48:14,720
 And this 1 here corresponding to this branching of 1, okay, is 0.57.

466
00:48:08,720 --> 00:48:14,720
这里的这个1对应于这个1的分支，好吧，是0.57。

467
00:48:14,720 --> 00:48:19,720
 Sorry, the resolution is a little bit low, but you can probably still make it up.

467
00:48:14,720 --> 00:48:19,720
抱歉，分辨率有点低，但您仍然可以弥补。

468
00:48:19,720 --> 00:48:22,720
 It's 0.57. So we write down 0.57 here.

468
00:48:19,720 --> 00:48:22,720
是0.57。所以我们在这里写下0.57。

469
00:48:22,720 --> 00:48:24,720
 So you have done the first branching.

469
00:48:22,720 --> 00:48:24,720
这样你就完成了第一个分支。

470
00:48:24,720 --> 00:48:28,720
 So the second branching is actually coming from 0.57.

470
00:48:24,720 --> 00:48:28,720
所以第二个分支实际上来自 0.57。

471
00:48:28,720 --> 00:48:31,720
 So therefore the second branching is from 0.57.

471
00:48:28,720 --> 00:48:31,720
因此第二个分支是从 0.57 开始的。

472
00:48:31,720 --> 00:48:34,720
 Left branch is 0, right branch is 1.

472
00:48:31,720 --> 00:48:34,720
左分支为0，右分支为1。

473
00:48:34,720 --> 00:48:37,720
 So the left branch of 0 corresponds to this branch here.

473
00:48:34,720 --> 00:48:37,720
所以0的左边分支就对应了这里的这个分支。

474
00:48:37,720 --> 00:48:42,720
 So it's 0.26S7. So you just write down 0.26S7.

474
00:48:37,720 --> 00:48:42,720
所以是0.26S7。所以你只需写下0.26S7。

475
00:48:42,720 --> 00:48:48,720
 And the right branch here is actually 0.31, okay, a bit of 1.

475
00:48:42,720 --> 00:48:48,720
这里的右分支实际上是 0.31，好吧，有点 1。

476
00:48:48,720 --> 00:48:50,720
 Okay, so 0.31 here.

476
00:48:48,720 --> 00:48:50,720
好的，这里是 0.31。

477
00:48:50,720 --> 00:48:54,720
 Okay, so let's just do it one more time and then the rest you should be quite clear already.

477
00:48:50,720 --> 00:48:54,720
好吧，我们再做一次，剩下的你应该已经很清楚了。

478
00:48:54,720 --> 00:48:59,720
 So the next branching is actually 0.43, so which is coming from here.

478
00:48:54,720 --> 00:48:59,720
所以下一个分支实际上是 0.43，所以它来自这里。

479
00:48:59,720 --> 00:49:01,720
 Left branch is 0, right branch is 1.

479
00:48:59,720 --> 00:49:01,720
左分支为0，右分支为1。

480
00:49:02,720 --> 00:49:10,720
 So this branch of 0 here, okay, corresponds to this 0.19S6 here.

480
00:49:02,720 --> 00:49:10,720
所以这里的这个0分支，好吧，对应这里的这个0.19S6。

481
00:49:10,720 --> 00:49:13,720
 So it's 0.19S6.

481
00:49:10,720 --> 00:49:13,720
所以是0.19S6。

482
00:49:13,720 --> 00:49:16,720
 Okay, the branch of 1 here corresponds to 0.24.

482
00:49:13,720 --> 00:49:16,720
好的，这里1的分支对应0.24。

483
00:49:16,720 --> 00:49:18,720
 So you just write down 0.24.

483
00:49:16,720 --> 00:49:18,720
所以你只需写下 0.24 即可。

484
00:49:18,720 --> 00:49:24,720
 So if you repeat the whole process, you will be able to build up your, sorry,

484
00:49:18,720 --> 00:49:24,720
所以，如果你重复整个过程，你将能够建立你的，抱歉，

485
00:49:24,720 --> 00:49:32,720
 you will be able to build up your Huffman, you will be able to build up your Huffman code work set here.

485
00:49:24,720 --> 00:49:32,720
您将能够构建您的霍夫曼，您将能够在此处构建您的霍夫曼代码工作集。

486
00:49:32,720 --> 00:49:37,720
 Okay, and then next, right, finally, you will be able to build up this Huffman code tree here.

486
00:49:32,720 --> 00:49:37,720
好的，然后接下来，对了，最后，你将能够在这里构建这个霍夫曼代码树。

487
00:49:37,720 --> 00:49:41,720
 And then finally, if you want to write down the Huffman code work for each of the symbols,

487
00:49:37,720 --> 00:49:41,720
最后，如果你想写下每个符号的霍夫曼编码，

488
00:49:41,720 --> 00:49:45,720
 for example, if we talk about S0, S0 is here.

488
00:49:41,720 --> 00:49:45,720
例如，如果我们谈论S0，S0就在这里。

489
00:49:45,720 --> 00:49:52,720
 So as we traverse from the root node through the leaf node, so you can see, right, it's through this branch here.

489
00:49:45,720 --> 00:49:52,720
当我们从根节点遍历叶节点时，你可以看到，对，就是通过这里的这个分支。

490
00:49:52,720 --> 00:49:57,720
 The bits that you collect along the way is 1, 1, 0, 0, 0.

490
00:49:52,720 --> 00:49:57,720
您沿途收集的比特是 1, 1, 0, 0, 0。

491
00:49:57,720 --> 00:50:01,720
 So therefore this symbol S0 is 1, 1, 0, 0, 0.

491
00:49:57,720 --> 00:50:01,720
因此这个符号 S0 是 1, 1, 0, 0, 0。

492
00:50:01,720 --> 00:50:04,720
 Okay, and then let's take one more example.

492
00:50:01,720 --> 00:50:04,720
好吧，那我们再举一个例子。

493
00:50:04,720 --> 00:50:11,720
 Suppose S6, if you write down the Huffman code work for S6, you start from the root node, you traverse to the leaf node.

493
00:50:04,720 --> 00:50:11,720
假设S6，如果你写下S6的哈夫曼代码，你从根节点开始，遍历到叶子节点。

494
00:50:11,720 --> 00:50:14,720
 The bits you collect along the way is 0, 0.

494
00:50:11,720 --> 00:50:14,720
你一路上收集的比特是 0, 0。

495
00:50:14,720 --> 00:50:18,720
 So S6 here, the Huffman code work is 0, 0.

495
00:50:14,720 --> 00:50:18,720
所以这里的S6，哈夫曼码的工作是0, 0。

496
00:50:18,720 --> 00:50:30,720
 So therefore by repeating this process, you will be able to write down the Huffman code work set for this particular data distribution.

496
00:50:18,720 --> 00:50:30,720
因此，通过重复此过程，您将能够写下此特定数据分布的霍夫曼代码工作集。

497
00:50:30,720 --> 00:50:36,720
 So that is actually the answer to part one.

497
00:50:30,720 --> 00:50:36,720
这实际上是第一部分的答案。

498
00:50:36,720 --> 00:50:40,720
 So next let's continue to part two now.

498
00:50:36,720 --> 00:50:40,720
接下来让我们继续第二部分。

499
00:50:40,720 --> 00:50:44,720
 So by the way, this is actually one of the past year exam questions.

499
00:50:40,720 --> 00:50:44,720
顺便说一句，这实际上是去年的考试题之一。

500
00:50:44,720 --> 00:50:55,720
 So I also mentioned in last week's lecture that I'll try to put in some past year exam questions so that in the class we can go through some of the questions and answers together.

500
00:50:44,720 --> 00:50:55,720
所以我在上周的讲座中也提到，我会尝试放入一些往年的考试题，以便在课堂上我们可以一起复习一些问题和答案。

501
00:50:55,720 --> 00:51:00,720
 So you also have some idea about what kind of question will come out in the exam.

501
00:50:55,720 --> 00:51:00,720
因此，您也对考试中会出什么样的问题有所了解。

502
00:51:00,720 --> 00:51:07,720
 Also for those discussion questions, you have some idea how to respond to those questions.

502
00:51:00,720 --> 00:51:07,720
另外，对于那些讨论问题，您知道如何回答这些问题。

503
00:51:07,720 --> 00:51:09,720
 Okay, so let's continue.

503
00:51:07,720 --> 00:51:09,720
好吧，我们继续吧。

504
00:51:09,720 --> 00:51:17,720
 So for part two now, it says that a student originally used eight bits to represent each symbol in an uncompressed scheme.

504
00:51:09,720 --> 00:51:17,720
因此，对于第二部分，它说一名学生最初使用八位来表示未压缩方案中的每个符号。

505
00:51:17,720 --> 00:51:27,720
 So you're asked to find the compression ratio of the Huffman coding scheme developed in your part one, when compared with the original uncompressed scheme.

505
00:51:17,720 --> 00:51:27,720
因此，您需要找到第一部分中开发的霍夫曼编码方案与原始未压缩方案相比的压缩率。

506
00:51:27,720 --> 00:51:37,720
 So in other words, you're asked to find what is the compression ratio for the Huffman code work set that you have just designed in part one.

506
00:51:27,720 --> 00:51:37,720
换句话说，您需要找出您刚刚在第一部分中设计的霍夫曼代码工作集的压缩比是多少。

507
00:51:38,720 --> 00:51:47,720
 Okay, I'll give you a bit of time to think about it and then we'll go through the answers together.

507
00:51:38,720 --> 00:51:47,720
好的，我给你一点时间考虑一下，然后我们一起讨论答案。

508
00:51:47,720 --> 00:51:58,720
 Right, so yeah, for those of you who have not obtained the answer for part one, I'll leave it here because you will need it to solve your part two.

508
00:51:47,720 --> 00:51:58,720
是的，是的，对于那些尚未获得第一部分答案的人，我将其留在这里，因为您将需要它来解决第二部分。

509
00:52:17,720 --> 00:52:18,720
 Okay.

509
00:52:17,720 --> 00:52:18,720
好的。

510
00:52:47,720 --> 00:52:48,720
 Okay.

510
00:52:47,720 --> 00:52:48,720
好的。

511
00:53:17,720 --> 00:53:18,720
 Okay.

511
00:53:17,720 --> 00:53:18,720
好的。

512
00:53:47,720 --> 00:53:48,720
 Okay.

512
00:53:47,720 --> 00:53:48,720
好的。

513
00:54:17,720 --> 00:54:18,720
 Okay.

513
00:54:17,720 --> 00:54:18,720
好的。

514
00:54:47,720 --> 00:54:48,720
 Okay.

514
00:54:47,720 --> 00:54:48,720
好的。

515
00:55:17,720 --> 00:55:18,720
 Okay.

515
00:55:17,720 --> 00:55:18,720
好的。

516
00:55:47,720 --> 00:56:15,720
 Okay.

516
00:55:47,720 --> 00:56:15,720
好的。

517
00:56:15,720 --> 00:56:19,720
 Okay, so again, you probably have some time to think about it already.

517
00:56:15,720 --> 00:56:19,720
好吧，再说一遍，你可能已经有时间考虑一下了。

518
00:56:19,720 --> 00:56:21,720
 So, okay, any suggestion?

518
00:56:19,720 --> 00:56:21,720
那么，好吧，有什么建议吗？

519
00:56:21,720 --> 00:56:32,720
 How do you find the compression ratio for this particular part two?

519
00:56:21,720 --> 00:56:32,720
您如何找到第二部分的压缩比？

520
00:56:32,720 --> 00:56:38,720
 Any suggestion?

520
00:56:32,720 --> 00:56:38,720
有什么建议吗？

521
00:56:38,720 --> 00:56:54,720
 So if you remember, just now in the earlier part of the lecture, we said that compression ratio is defined as the data storage requirement for an uncompressed data over the data storage requirement for compressed data.

521
00:56:38,720 --> 00:56:54,720
因此，如果您还记得，就在讲座的前面部分，我们说过压缩率被定义为未压缩数据的数据存储要求与压缩数据的数据存储要求之比。

522
00:56:54,720 --> 00:57:07,720
 So in this case here, we want to look at a typical, on average, if you are talking about a symbol or a letter, on average, how many bits is required to represent a symbol?

522
00:56:54,720 --> 00:57:07,720
因此，在这种情况下，我们想看看一个典型的，平均而言，如果您正在谈论一个符号或一个字母，平均而言，表示一个符号需要多少位？

523
00:57:07,720 --> 00:57:16,720
 Right, if it's uncompressed scheme, uncompressed or the original scheme, how many bits do you need to represent a symbol?

523
00:57:07,720 --> 00:57:16,720
对了，如果是未压缩的方案，未压缩的或者原始的方案，需要多少位来表示一个符号？

524
00:57:16,720 --> 00:57:18,720
 According to the question is?

524
00:57:16,720 --> 00:57:18,720
根据问题是？

525
00:57:18,720 --> 00:57:20,720
 8 bits, right?

525
00:57:18,720 --> 00:57:20,720
8 位，对吗？

526
00:57:20,720 --> 00:57:27,720
 So therefore, the storage requirement to represent for the uncompressed scheme is actually 8 bits per symbol.

526
00:57:20,720 --> 00:57:27,720
因此，表示未压缩方案的存储要求实际上是每个符号 8 位。

527
00:57:27,720 --> 00:57:36,720
 Okay, now the next question is that what is the average number of bits that is required to represent a symbol for this compressed scheme?

527
00:57:27,720 --> 00:57:36,720
好的，现在下一个问题是表示此压缩方案的符号所需的平均位数是多少？

528
00:57:36,720 --> 00:57:47,720
 In other words, for this Huffman code work set that you have designed just now, what is the average number of bits that is required to represent a symbol?

528
00:57:36,720 --> 00:57:47,720
换句话说，对于您刚刚设计的这个霍夫曼代码工作集，表示一个符号所需的平均位数是多少？

529
00:57:48,720 --> 00:57:56,720
 So we have just now designed our Huffman code work set already.

529
00:57:48,720 --> 00:57:56,720
所以我们刚刚已经设计了我们的霍夫曼代码工作集。

530
00:57:56,720 --> 00:58:07,720
 What is the average number of bits that is required to represent this symbol using this Huffman code work set?

530
00:57:56,720 --> 00:58:07,720
使用此霍夫曼代码工作集表示此符号所需的平均位数是多少？

531
00:58:07,720 --> 00:58:10,720
 How do we do that?

531
00:58:07,720 --> 00:58:10,720
我们该怎么做呢？

532
00:58:10,720 --> 00:58:16,720
 Okay, so but the approach is that you need to find the expected number of bits per symbol, right?

532
00:58:10,720 --> 00:58:16,720
好的，但是方法是您需要找到每个符号的预期位数，对吧？

533
00:58:16,720 --> 00:58:23,720
 So which would then be, how do you find the expected number of bits required to represent the symbol?

533
00:58:16,720 --> 00:58:23,720
那么，如何找到表示该符号所需的预期位数呢？

534
00:58:23,720 --> 00:58:39,720
 Is the probability multiplied with the number of bits, right, for the particular symbol, the probability of the symbol multiplied with the number of bits required to represent the symbol, and you sum up over all the symbols.

534
00:58:23,720 --> 00:58:39,720
是概率乘以位数，对吧，对于特定符号，符号的概率乘以表示该符号所需的位数，然后对所有符号求和。

535
00:58:39,720 --> 00:58:46,720
 So in other words, if you look at it, okay, for this S2, the probability that you occur is 0.02.

535
00:58:39,720 --> 00:58:46,720
那么也就是说，你看一下，好吧，对于这个S2，你出现的概率是0.02。

536
00:58:46,720 --> 00:58:57,720
 And how many bits is required to represent this S0? For S0, the probability is actually 0.02.

536
00:58:46,720 --> 00:58:57,720
而表示这个S0需要多少位呢？对于 S0，概率实际上是 0.02。

537
00:58:57,720 --> 00:59:02,720
 So how many bits is required to represent this S0 based on what we have designed?

537
00:58:57,720 --> 00:59:02,720
那么根据我们的设计，需要多少位来表示这个S0呢？

538
00:59:02,720 --> 00:59:05,720
 It's actually 5 bits.

538
00:59:02,720 --> 00:59:05,720
实际上是5位。

539
00:59:05,720 --> 00:59:20,720
 So therefore, the probability now is actually 0.02 multiplied with these 5 bits, yeah, plus, okay, what is the probability, if you choose any symbol, what is the probability that it will be S1?

539
00:59:05,720 --> 00:59:20,720
所以，现在的概率实际上是 0.02 乘以这 5 位，是的，加上，好吧，概率是多少，如果你选择任何符号，它是 S1 的概率是多少？

540
00:59:20,720 --> 00:59:27,720
 It will be 0.05. And if it's S1, what is the number of bits that is required to represent it?

540
00:59:20,720 --> 00:59:27,720
它将是 0.05。如果是 S1，表示它需要多少位？

541
00:59:27,720 --> 00:59:30,720
 It's actually 5 bits, huh?

541
00:59:27,720 --> 00:59:30,720
它实际上是 5 位，是吗？

542
00:59:30,720 --> 00:59:36,720
 Okay, so, and then if you choose a symbol randomly, what is the probability that it will be S2 ASB?

542
00:59:30,720 --> 00:59:36,720
好的，那么，如果你随机选择一个符号，它是 S2 ASB 的概率是多少？

543
00:59:36,720 --> 00:59:42,720
 It's actually 0.08. And with 0.08, how many bits is required to represent it?

543
00:59:36,720 --> 00:59:42,720
实际上是0.08。那么0.08需要多少位来表示呢？

544
00:59:42,720 --> 00:59:44,720
 It's actually 4 bits, huh?

544
00:59:42,720 --> 00:59:44,720
它实际上是 4 位，是吗？

545
00:59:44,720 --> 00:59:54,720
 So therefore, you can see pretty much it's like this. You ask the question, if you choose a symbol randomly, what is the probability that it will belong to each of these particular symbols?

545
00:59:44,720 --> 00:59:54,720
因此，你可以看到几乎是这样的。你问一个问题，如果你随机选择一个符号，它属于每个特定符号的概率是多少？

546
00:59:54,720 --> 01:00:00,720
 Okay, and then you need to multiply with the corresponding number of bits to represent the symbol and then add them up.

546
00:59:54,720 --> 01:00:00,720
好吧，然后你需要乘以相应的位数来表示符号，然后将它们相加。

547
01:00:00,720 --> 01:00:03,720
 That's pretty much the answer.

547
01:00:00,720 --> 01:00:03,720
这几乎就是答案。

548
01:00:03,720 --> 01:00:08,720
 Okay, so therefore, let's try to go through this part two.

548
01:00:03,720 --> 01:00:08,720
好的，那么，让我们尝试完成第二部分。

549
01:00:08,720 --> 01:00:14,720
 So part two, you can see, first we need to calculate the average number of bits that is used to represent the symbol.

549
01:00:08,720 --> 01:00:14,720
所以第二部分，你可以看到，首先我们需要计算用于表示符号的平均位数。

550
01:00:14,720 --> 01:00:23,720
 So as I mentioned, to do this calculation, we ask ourselves, if we choose a symbol randomly, what is the chances it will be a symbol S0?

550
01:00:14,720 --> 01:00:23,720
正如我提到的，为了进行此计算，我们问自己，如果我们随机选择一个符号，它是符号 S0 的机会有多大？

551
01:00:23,720 --> 01:00:31,720
 Okay, so the probability is 0.02. And if it's S0, the number of bits that is required to represent it is 5 bits.

551
01:00:23,720 --> 01:00:31,720
好的，所以概率是 0.02。如果是S0，则表示它所需的位数是5位。

552
01:00:31,720 --> 01:00:36,720
 Okay, and afterwards, if you choose a symbol randomly, what is the chances it will be S1?

552
01:00:31,720 --> 01:00:36,720
好的，然后，如果你随机选择一个符号，它是 S1 的几率是多少？

553
01:00:36,720 --> 01:00:43,720
 So it's actually 0.05. And if it's S1, then the number of bits that is required to represent it is 5 bits.

553
01:00:36,720 --> 01:00:43,720
所以实际上是0.05。如果是S1，则表示它所需的位数是5位。

554
01:00:43,720 --> 01:00:46,720
 Okay, and then, yeah, and then so on and so forth.

554
01:00:43,720 --> 01:00:46,720
好吧，然后，是的，然后等等。

555
01:00:47,720 --> 01:00:53,720
 Let me just do one more. If you choose a symbol randomly, what are the chances it will belong to S2?

555
01:00:47,720 --> 01:00:53,720
让我再做一件事。如果你随机选择一个符号，它属于 S2 的机会有多大？

556
01:00:53,720 --> 01:01:00,720
 So it's 0.08. So if it's 0.08, how many bits is required to represent it? It's 4 bits, so you multiply by 4.

556
01:00:53,720 --> 01:01:00,720
所以是0.08。那么如果是0.08，需要多少位来表示呢？它是 4 位，所以乘以 4。

557
01:01:00,720 --> 01:01:07,720
 So you continue for all the symbols, and afterwards, at the end, you'll see that it's 2.77 bits per symbol.

557
01:01:00,720 --> 01:01:07,720
因此，您继续处理所有符号，然后在最后，您将看到每个符号 2.77 位。

558
01:01:07,720 --> 01:01:14,720
 So on average, that means on average, you require 2.77 bits to represent a symbol.

558
01:01:07,720 --> 01:01:14,720
因此，平均而言，这意味着平均需要 2.77 位来表示一个符号。

559
01:01:14,720 --> 01:01:22,720
 Okay, so now, as explained earlier on, from this question, it still tells you that for uncompressed scheme,

559
01:01:14,720 --> 01:01:22,720
好的，现在，正如前面所解释的，从这个问题，它仍然告诉你对于未压缩的方案，

560
01:01:22,720 --> 01:01:29,720
 you will be using 8 bits to represent a symbol. Now, if you use our Huffman code work set that we've designed,

560
01:01:22,720 --> 01:01:29,720
您将使用 8 位来表示一个符号。现在，如果您使用我们设计的霍夫曼代码工作集，

561
01:01:29,720 --> 01:01:36,720
 the number of bits to represent, I don't know why, is 2.77 bits per symbol.

561
01:01:29,720 --> 01:01:36,720
我不知道为什么，要表示的位数是每个符号 2.77 位。

562
01:01:37,720 --> 01:01:44,720
 So therefore, the compression ratio is a storage requirement for uncompressed data over the compressed data.

562
01:01:37,720 --> 01:01:44,720
因此，压缩率是未压缩数据相对于压缩数据的存储要求。

563
01:01:44,720 --> 01:01:52,720
 So if you do some calculation, you'll see that it's 2.888. So this is the compression ratio for this scheme.

563
01:01:44,720 --> 01:01:52,720
因此，如果您进行一些计算，您会发现它是 2.888。这就是该方案的压缩比。

564
01:01:52,720 --> 01:02:02,720
 That means you're actually almost able to achieve a compression ratio of every 2.88 bits, you can compress it into 1 bit, yeah?

564
01:01:52,720 --> 01:02:02,720
这意味着你实际上几乎能够实现每 2.88 位的压缩比，你可以将其压缩为 1 位，是吗？

565
01:02:02,720 --> 01:02:08,720
 Okay, which is pretty good. So next, let's look at the last question.

565
01:02:02,720 --> 01:02:08,720
好的，这非常好。那么接下来我们看最后一个问题。

566
01:02:13,720 --> 01:02:17,720
 So last question, it asks you to find the entropy of this data source,

566
01:02:13,720 --> 01:02:17,720
所以最后一个问题，它要求你找到这个数据源的熵，

567
01:02:17,720 --> 01:02:28,720
 and briefly discuss whether it's possible to design a Huffman code work set which can achieve a target of less than 2.5 bits per symbol.

567
01:02:17,720 --> 01:02:28,720
并简要讨论是否有可能设计一个霍夫曼编码工作集来实现每个符号小于 2.5 位的目标。

568
01:02:28,720 --> 01:02:35,720
 Okay, right, so we have just learned about the entropy for a data set. Let's try to calculate using the formula.

568
01:02:28,720 --> 01:02:35,720
好吧，我们刚刚了解了数据集的熵。让我们尝试使用公式计算一下。

569
01:02:35,720 --> 01:02:40,720
 You can do a bit of calculation, and afterwards, based on your result, try to answer the question,

569
01:02:35,720 --> 01:02:40,720
你可以做一些计算，然后根据你的结果尝试回答这个问题，

570
01:02:40,720 --> 01:02:45,720
 can we ever achieve a target of less than 2.5 bits per symbol?

570
01:02:40,720 --> 01:02:45,720
我们能否实现每个符号少于 2.5 位的目标？

571
01:02:45,720 --> 01:02:50,720
 Again, I'll give you a bit of time to think about it, and we'll go through the answers together.

571
01:02:45,720 --> 01:02:50,720
再次，我会给你一些时间来思考这个问题，我们将一起讨论答案。

572
01:02:58,720 --> 01:03:00,720
 Okay.

572
01:02:58,720 --> 01:03:00,720
好的。

573
01:03:28,720 --> 01:03:30,720
 Okay.

573
01:03:28,720 --> 01:03:30,720
好的。

574
01:03:58,720 --> 01:04:00,720
 Okay.

574
01:03:58,720 --> 01:04:00,720
好的。

575
01:04:28,720 --> 01:04:30,720
 Okay.

575
01:04:28,720 --> 01:04:30,720
好的。

576
01:04:58,720 --> 01:05:00,720
 Okay.

576
01:04:58,720 --> 01:05:00,720
好的。

577
01:05:28,720 --> 01:05:30,720
 Okay.

577
01:05:28,720 --> 01:05:30,720
好的。

578
01:05:58,720 --> 01:06:00,720
 Okay.

578
01:05:58,720 --> 01:06:00,720
好的。

579
01:06:15,720 --> 01:06:18,720
 Okay, so yeah, at least you have some time to think about it.

579
01:06:15,720 --> 01:06:18,720
好吧，是的，至少你有时间考虑一下。

580
01:06:18,720 --> 01:06:24,720
 Any suggestion? How do we find the entropy of this data source?

580
01:06:18,720 --> 01:06:24,720
有什么建议吗？我们如何找到这个数据源的熵？

581
01:06:25,720 --> 01:06:30,720
 Just apply a formula that we have learned earlier on, right?

581
01:06:25,720 --> 01:06:30,720
只要应用我们之前学过的公式就可以了，对吧？

582
01:06:30,720 --> 01:06:36,720
 Okay, so I think that part should be quite straightforward. Okay, so let's go ahead and do it.

582
01:06:30,720 --> 01:06:36,720
好的，所以我认为这部分应该非常简单。好吧，让我们继续吧。

583
01:06:45,720 --> 01:06:52,720
 Right, okay, so therefore the answer to that part is that we just applied this formula that we have mentioned earlier on.

583
01:06:45,720 --> 01:06:52,720
好吧，所以这部分的答案是我们刚刚应用了前面提到的这个公式。

584
01:06:52,720 --> 01:07:01,720
 So the probability Pi, log Pi with a base of 2, you sum up over all the possible symbols in this data set,

584
01:06:52,720 --> 01:07:01,720
所以概率 Pi，以 2 为底的 log Pi，您可以总结该数据集中所有可能的符号，

585
01:07:01,720 --> 01:07:03,720
 and you put a negative sign in front.

585
01:07:01,720 --> 01:07:03,720
然后你在前面加上一个负号。

586
01:07:03,720 --> 01:07:09,720
 Okay, so therefore for this particular question, you can see the first term is actually 0.02.

586
01:07:03,720 --> 01:07:09,720
好的，因此对于这个特定问题，您可以看到第一项实际上是 0.02。

587
01:07:09,720 --> 01:07:19,720
 So 0.02, log 0.02 to the base of 2, right, add up, second term is 0.05, log 0.05, and then you repeat for all the symbols.

587
01:07:09,720 --> 01:07:19,720
所以 0.02，对数 0.02 以 2 为底，对，相加，第二项是 0.05，对数 0.05，然后对所有符号重复。

588
01:07:19,720 --> 01:07:24,720
 Okay, you add all of them up, and finally you put a negative sign in front of it.

588
01:07:19,720 --> 01:07:24,720
好吧，你把它们全部加起来，最后在前面加上一个负号。

589
01:07:24,720 --> 01:07:35,720
 So if you're not so familiar with using the calculator to do it, yeah, probably it's a good time for you to familiarize yourself how to do some logarithm with base 2.

589
01:07:24,720 --> 01:07:35,720
因此，如果您不太熟悉如何使用计算器来执行此操作，那么现在可能是您熟悉如何计算以 2 为底的对数的好时机。

590
01:07:35,720 --> 01:07:41,720
 Or you can actually also use some simple mathematics to convert it into base 10 as well.

590
01:07:35,720 --> 01:07:41,720
或者您实际上也可以使用一些简单的数学将其转换为基数 10。

591
01:07:42,720 --> 01:07:49,720
 So anyway, either way, just do the calculation, you see that it's 2.733 bits per symbol.

591
01:07:42,720 --> 01:07:49,720
所以无论如何，无论哪种方式，只要进行计算，您就会看到每个符号 2.733 位。

592
01:07:49,720 --> 01:07:55,720
 So then with that particular answer, now we need to answer the last question, which is,

592
01:07:49,720 --> 01:07:55,720
那么有了这个特定的答案，现在我们需要回答最后一个问题，即

593
01:07:55,720 --> 01:08:03,720
 discuss whether it's possible to design a half-moon cobalt set that can achieve the target of less than 2.5 bits per symbol.

593
01:07:55,720 --> 01:08:03,720
讨论是否有可能设计一个半月钴组来实现每个符号少于 2.5 位的目标。

594
01:08:03,720 --> 01:08:05,720
 So is it possible to do that?

594
01:08:03,720 --> 01:08:05,720
那么可以这样做吗？

595
01:08:08,720 --> 01:08:09,720
 Is it possible?

595
01:08:08,720 --> 01:08:09,720
是否可以？

596
01:08:09,720 --> 01:08:10,720
 No, huh?

596
01:08:09,720 --> 01:08:10,720
不，是吧？

597
01:08:10,720 --> 01:08:22,719
 So earlier on, if you remember what we discussed, right, so entropy actually is the smallest value that you need, right, in order to,

597
01:08:10,720 --> 01:08:22,719
所以之前，如果你还记得我们讨论过的内容，那么熵实际上是你需要的最小值，对吧，为了，

598
01:08:22,719 --> 01:08:33,719
 the smallest number of bits that you need to represent a symbol, right, so theoretically it's a theoretical lower bound, you cannot go anything below it.

598
01:08:22,719 --> 01:08:33,719
表示一个符号所需的最小位数，对，所以理论上它是一个理论上的下限，你不能低于它。

599
01:08:33,720 --> 01:08:40,720
 You can use more bits to represent each symbol, but you cannot use less bit than this entropy.

599
01:08:33,720 --> 01:08:40,720
您可以使用更多的位来表示每个符号，但不能使用比该熵更少的位。

600
01:08:40,720 --> 01:08:48,720
 So since entropy is already 2.73, you cannot get any value less than that, okay.

600
01:08:40,720 --> 01:08:48,720
因为熵已经是 2.73，所以你不能得到任何小于这个值的值，好吧。

601
01:08:48,720 --> 01:08:54,720
 So therefore, the answer to that part is that as the target of 2.5 bits per symbol is less than the entropy,

601
01:08:48,720 --> 01:08:54,720
因此，该部分的答案是，由于每个符号 2.5 位的目标小于熵，

602
01:08:54,720 --> 01:08:59,720
 it's not possible to design a half-moon cobalt set that can meet this target, right.

602
01:08:54,720 --> 01:08:59,720
不可能设计出能够达到这个目标的半月形钴组，对吧。

603
01:08:59,720 --> 01:09:03,720
 So that's the answer to this question.

603
01:08:59,720 --> 01:09:03,720
这就是这个问题的答案。

604
01:09:03,720 --> 01:09:11,720
 So as I mentioned, the answer to this question, I will upload to the course site and then I'll release it by tomorrow.

604
01:09:03,720 --> 01:09:11,720
正如我提到的，这个问题的答案，我将上传到课程网站，然后在明天之前发布。

605
01:09:11,720 --> 01:09:15,720
 So tomorrow on works, you can go and download it, okay.

605
01:09:11,720 --> 01:09:15,720
那么明天上班你就可以去下载了，好吧。

606
01:09:15,720 --> 01:09:21,720
 So that's the answer to question one.

606
01:09:15,720 --> 01:09:21,720
这就是问题一的答案。

607
01:09:21,720 --> 01:09:25,720
 So let's move on to question two.

607
01:09:21,720 --> 01:09:25,720
那么让我们继续讨论第二个问题。

608
01:09:30,720 --> 01:09:38,720
 Right, okay, so today we start out with two pretty lengthy exercises, right, so let's try to do it,

608
01:09:30,720 --> 01:09:38,720
好吧，好吧，所以今天我们从两个相当长的练习开始，好吧，所以让我们尝试一下，

609
01:09:38,720 --> 01:09:42,720
 because sometimes it's easier for you to learn through exercise rather than just reading.

609
01:09:38,720 --> 01:09:42,720
因为有时通过练习比仅仅阅读更容易学习。

610
01:09:42,720 --> 01:09:44,720
 So let's look at these questions here.

610
01:09:42,720 --> 01:09:44,720
那么让我们在这里看看这些问题。

611
01:09:44,720 --> 01:09:51,720
 It says that in a compression scheme, eight symbols are used to represent different patterns in the information source, right.

611
01:09:44,720 --> 01:09:51,720
它说在压缩方案中，使用八个符号来表示信息源中的不同模式，对吧。

612
01:09:51,720 --> 01:09:55,720
 The symbols are encoded using this particular code, codebook A.

612
01:09:51,720 --> 01:09:55,720
这些符号使用这个特定的代码（码本 A）进行编码。

613
01:09:55,720 --> 01:10:02,720
 So codebook A and the probability of occurrence is given in this table, whereas m and n are positive real value.

613
01:09:55,720 --> 01:10:02,720
因此，该表中给出了码本A和出现的概率，而m和n是正实值。

614
01:10:02,720 --> 01:10:09,720
 So you have this particular set that consists of eight symbols, s0 to s7, right.

614
01:10:02,720 --> 01:10:09,720
所以你有这个特殊的集合，它由八个符号组成，s0 到 s7，对吧。

615
01:10:09,720 --> 01:10:14,720
 So these are probability of occurrence, okay, m and n, we do not know their value yet, okay.

615
01:10:09,720 --> 01:10:14,720
所以这些是发生的概率，好吧，m 和 n，我们还不知道它们的值，好吧。

616
01:10:14,720 --> 01:10:17,720
 And we also have a particular codebook A.

616
01:10:14,720 --> 01:10:17,720
我们还有一个特定的密码本 A。

617
01:10:17,720 --> 01:10:23,720
 So someone has come up with this particular codebook A, and this is the codebook A here, right.

617
01:10:17,720 --> 01:10:23,720
所以有人想出了这个特殊的码本A，这就是这里的码本A，对吧。

618
01:10:23,720 --> 01:10:26,720
 So now let's look at the first question.

618
01:10:23,720 --> 01:10:26,720
那么现在我们来看看第一个问题。

619
01:10:26,720 --> 01:10:33,720
 So the first question is that in the first scenario, if the average number of bits per symbol for the compression scheme

619
01:10:26,720 --> 01:10:33,720
所以第一个问题是，在第一种情况下，如果压缩方案的每个符号的平均位数

620
01:10:33,720 --> 01:10:39,720
 need to be less than 2.86, right, find the required condition for this value m and n, right.

620
01:10:33,720 --> 01:10:39,720
需要小于2.86，对吧，找到这个值m和n所需要的条件，对吧。

621
01:10:39,720 --> 01:10:42,720
 So I think the question is quite straightforward, okay.

621
01:10:39,720 --> 01:10:42,720
所以我认为这个问题很简单，好吧。

622
01:10:42,720 --> 01:10:47,720
 You have this particular, this set has eight symbols.

622
01:10:42,720 --> 01:10:47,720
你有这个特殊的，这个集合有八个符号。

623
01:10:47,720 --> 01:10:51,720
 These are the probability of occurrence, and m and n are known, right.

623
01:10:47,720 --> 01:10:51,720
这些是发生的概率，m和n是已知的，对吧。

624
01:10:51,720 --> 01:10:56,720
 This is, someone has already designed this codebook set here, right, we call it codebook A, right.

624
01:10:51,720 --> 01:10:56,720
这是，这里已经有人设计好了这套码本，对吧，我们称之为码本A，对吧。

625
01:10:56,720 --> 01:11:04,720
 And you are told that for this codebook A, right, the number of, if the average number of bits per symbol

625
01:10:56,720 --> 01:11:04,720
你被告知，对于这个码本 A，对，如果每个符号的平均位数

626
01:11:04,720 --> 01:11:11,720
 need to be less than this value, what should be the condition that this m and n need to satisfy?

626
01:11:04,720 --> 01:11:11,720
需要小于这个值，这个m和n需要满足什么条件呢？

627
01:11:11,720 --> 01:11:17,720
 Right, okay, so again, I'll give you a bit of time to think about it, and then we'll go through the answers together.

627
01:11:11,720 --> 01:11:17,720
好吧，好吧，我再给你一点时间考虑一下，然后我们一起看一下答案。

628
01:11:41,720 --> 01:11:46,720
 Okay.

628
01:11:41,720 --> 01:11:46,720
好的。

629
01:12:11,720 --> 01:12:16,720
 Okay.

629
01:12:11,720 --> 01:12:16,720
好的。

630
01:12:41,720 --> 01:12:46,720
 Okay.

630
01:12:41,720 --> 01:12:46,720
好的。

631
01:13:11,720 --> 01:13:16,720
 Okay.

631
01:13:11,720 --> 01:13:16,720
好的。

632
01:13:41,720 --> 01:13:46,720
 Okay.

632
01:13:41,720 --> 01:13:46,720
好的。

633
01:14:11,720 --> 01:14:16,720
 Okay.

633
01:14:11,720 --> 01:14:16,720
好的。

634
01:14:41,720 --> 01:14:46,720
 Okay.

634
01:14:41,720 --> 01:14:46,720
好的。

635
01:15:11,720 --> 01:15:16,720
 Okay.

635
01:15:11,720 --> 01:15:16,720
好的。

636
01:15:41,720 --> 01:15:46,720
 Okay.

636
01:15:41,720 --> 01:15:46,720
好的。

637
01:15:46,720 --> 01:15:51,720
 Okay.

637
01:15:46,720 --> 01:15:51,720
好的。

638
01:15:51,720 --> 01:15:56,720
 Okay.

638
01:15:51,720 --> 01:15:56,720
好的。

639
01:15:56,720 --> 01:16:01,720
 Okay.

639
01:15:56,720 --> 01:16:01,720
好的。

640
01:16:01,720 --> 01:16:06,720
 Okay.

640
01:16:01,720 --> 01:16:06,720
好的。

641
01:16:06,720 --> 01:16:11,720
 Yeah, again, I hope that you have some time to think about this question.

641
01:16:06,720 --> 01:16:11,720
是的，我再次希望你有时间思考这个问题。

642
01:16:11,720 --> 01:16:20,720
 Right, okay, so yeah, in order to find out the condition, so what do we need to do?

642
01:16:11,720 --> 01:16:20,720
对啊，好吧，所以是啊，为了找出状况，那么我们需要做什么呢？

643
01:16:20,720 --> 01:16:23,720
 So we need to establish some inequality, right.

643
01:16:20,720 --> 01:16:23,720
所以我们需要建立一些不平等，对吧。

644
01:16:23,720 --> 01:16:36,720
 So first of all, how do we find out an expression, right, for the average number of bits that's required to represent a symbol for this scheme here?

644
01:16:23,720 --> 01:16:36,720
首先，我们如何找到一个表达式，对吧，代表这个方案的符号所需的平均位数？

645
01:16:36,720 --> 01:16:46,720
 How do you find out the average number of bits that's required to represent a symbol in terms of m and n here?

645
01:16:36,720 --> 01:16:46,720
你如何找出用 m 和 n 表示一个符号所需的平均位数？

646
01:16:46,720 --> 01:16:48,720
 What do we have to do?

646
01:16:46,720 --> 01:16:48,720
我们必须做什么？

647
01:16:48,720 --> 01:16:56,720
 We take m multiplied, okay, so again, we use the same argument like the previous question.

647
01:16:48,720 --> 01:16:56,720
我们将 m 相乘，好吧，我们再次使用与上一个问题相同的参数。

648
01:16:56,720 --> 01:17:02,720
 If you choose a symbol randomly, what is the chances it will be s0?

648
01:16:56,720 --> 01:17:02,720
如果你随机选择一个符号，它是 s0 的几率是多少？

649
01:17:02,720 --> 01:17:04,720
 It will be m, right?

649
01:17:02,720 --> 01:17:04,720
会是m，对吗？

650
01:17:04,720 --> 01:17:08,720
 m is m, how many bits do you require to represent?

650
01:17:04,720 --> 01:17:08,720
m是m，需要多少位来表示？

651
01:17:08,720 --> 01:17:11,720
 Two bits, so it's m times 2.

651
01:17:08,720 --> 01:17:11,720
两位，所以是 m 乘以 2。

652
01:17:11,720 --> 01:17:16,720
 Plus, if you choose a symbol randomly, what's the chances it's s1?

652
01:17:11,720 --> 01:17:16,720
另外，如果你随机选择一个符号，它是 s1 的几率是多少？

653
01:17:16,720 --> 01:17:18,720
 It's n, huh?

653
01:17:16,720 --> 01:17:18,720
是n吧？

654
01:17:18,720 --> 01:17:21,720
 If it's n, how many bits do you require to represent it?

654
01:17:18,720 --> 01:17:21,720
如果是n，需要多少位来表示？

655
01:17:21,720 --> 01:17:24,720
 Three bits, so it's three times n, right?

655
01:17:21,720 --> 01:17:24,720
三位，所以是 n 的三倍，对吗？

656
01:17:24,720 --> 01:17:29,720
 Okay, and what is the, choose a symbol randomly, what's the chances it will be s2?

656
01:17:24,720 --> 01:17:29,720
好吧，那是什么，随机选择一个符号，它是 s2 的几率是多少？

657
01:17:29,720 --> 01:17:35,720
 It will be 0.15, m is 0.15, for s2, how many bits do you require to represent it?

657
01:17:29,720 --> 01:17:35,720
它将是0.15，m是0.15，对于s2，你需要多少位来表示它？

658
01:17:35,720 --> 01:17:39,720
 It's three bits, so you just actually do that, right?

658
01:17:35,720 --> 01:17:39,720
它是三位，所以你实际上就这么做了，对吧？

659
01:17:39,720 --> 01:17:46,720
 You just take a probability, multiply with the number of bits, and you sum up over all the possible combination,

659
01:17:39,720 --> 01:17:46,720
你只需计算一个概率，乘以位数，然后对所有可能的组合求和，

660
01:17:46,720 --> 01:17:52,720
 but that is the average number of bits that is required to represent a symbol.

660
01:17:46,720 --> 01:17:52,720
但这是表示一个符号所需的平均位数。

661
01:17:52,720 --> 01:17:56,720
 Okay, so, and you know that the average number of bits that is required to represent a symbol

661
01:17:52,720 --> 01:17:56,720
好的，你知道表示一个符号所需的平均位数

662
01:17:56,720 --> 01:18:03,720
 need to be less than 2.86, so therefore, you will have your first inequality.

662
01:17:56,720 --> 01:18:03,720
需要小于 2.86，因此，您将得到第一个不等式。

663
01:18:09,720 --> 01:18:14,720
 Actually, I don't want to show so quickly.

663
01:18:09,720 --> 01:18:14,720
其实我不想这么快表现出来。

664
01:18:14,720 --> 01:18:26,720
 Yeah, so you can see, right, m times 2 bits plus n times 3 bits plus 0.5 times 3 bits and so on and so forth,

664
01:18:14,720 --> 01:18:26,720
是的，所以你可以看到，对，m 乘以 2 位加上 n 乘以 3 位加上 0.5 乘以 3 位，依此类推，

665
01:18:26,720 --> 01:18:28,720
 you add up over all of them.

665
01:18:26,720 --> 01:18:28,720
你把它们全部加起来。

666
01:18:28,720 --> 01:18:35,720
 If you have done that at the end, okay, it will be this particular expression.

666
01:18:28,720 --> 01:18:35,720
如果你最后这样做了，好吧，这将是这个特定的表达。

667
01:18:35,720 --> 01:18:38,720
 It will be this particular expression.

667
01:18:35,720 --> 01:18:38,720
这将是这个特定的表达。

668
01:18:38,720 --> 01:18:41,720
 And we know that this is an average number of bits for a symbol,

668
01:18:38,720 --> 01:18:41,720
我们知道这是一个符号的平均位数，

669
01:18:41,720 --> 01:18:45,720
 and from the question you are told that this number needs to be less than 2.86,

669
01:18:41,720 --> 01:18:45,720
从问题中得知这个数字必须小于 2.86，

670
01:18:45,720 --> 01:18:49,720
 so this number needs to be less than 2.86, right?

670
01:18:45,720 --> 01:18:49,720
所以这个数字必须小于 2.86，对吧？

671
01:18:49,720 --> 01:18:55,720
 If you do some simplification, you can see then 2m plus 3m needs to be less than 1.41.

671
01:18:49,720 --> 01:18:55,720
如果进行一些简化，您会发现 2m 加 3m 需要小于 1.41。

672
01:18:55,720 --> 01:18:58,720
 So that is the first inequality.

672
01:18:55,720 --> 01:18:58,720
这就是第一个不等式。

673
01:18:58,720 --> 01:19:04,720
 So are there any other conditions that you can impose for this question, for m and n?

673
01:18:58,720 --> 01:19:04,720
那么对于这个问题，对于 m 和 n 是否还有其他条件可以强加？

674
01:19:04,720 --> 01:19:06,720
 Any other condition?

674
01:19:04,720 --> 01:19:06,720
还有什么条件吗？

675
01:19:08,720 --> 01:19:12,720
 Yeah, so the sum of all the probability must be equal to 1, right?

675
01:19:08,720 --> 01:19:12,720
是的，所以所有概率的总和一定等于 1，对吗？

676
01:19:12,720 --> 01:19:19,720
 So therefore, what it means is that if you sum up all this probability, it should be equal to 1.

676
01:19:12,720 --> 01:19:19,720
因此，这意味着如果将所有这些概率相加，它应该等于 1。

677
01:19:19,720 --> 01:19:24,720
 Then afterwards, you can obtain your second condition.

677
01:19:19,720 --> 01:19:24,720
然后，你就可以得到你的第二个条件了。

678
01:19:24,720 --> 01:19:30,720
 So with that in mind, knowing that sum of probability should be equal to 1, okay?

678
01:19:24,720 --> 01:19:30,720
考虑到这一点，概率之和应该等于 1，好吗？

679
01:19:30,720 --> 01:19:36,720
 So we just add up all this probability here.

679
01:19:30,720 --> 01:19:36,720
所以我们在这里将所有这些概率相加。

680
01:19:36,720 --> 01:19:39,720
 You can see it's equal to 1. We simplify a little bit.

680
01:19:36,720 --> 01:19:39,720
你可以看到它等于1。我们稍微简化一下。

681
01:19:39,720 --> 01:19:46,720
 We see that m plus n is 0.54, or you can write n is equal to 0.54 minus n.

681
01:19:39,720 --> 01:19:46,720
我们看到m加n是0.54，或者你可以写n等于0.54减n。

682
01:19:46,720 --> 01:19:49,720
 So you have one inequality and one equality.

682
01:19:46,720 --> 01:19:49,720
因此，存在一种不平等和一种平等。

683
01:19:49,720 --> 01:19:53,720
 So afterwards, you substitute this 2 into 1.

683
01:19:49,720 --> 01:19:53,720
所以之后，你把这个2代入1。

684
01:19:53,720 --> 01:19:56,720
 I think most of you should be familiar with this.

684
01:19:53,720 --> 01:19:56,720
我想你们大多数人都应该熟悉这一点。

685
01:19:56,720 --> 01:20:03,720
 So if you simplify a little bit, you can see that you can derive the condition m needs to be greater than 0.21.

685
01:19:56,720 --> 01:20:03,720
因此，如果稍微简化一下，您可以看到可以推导出条件 m 需要大于 0.21。

686
01:20:03,720 --> 01:20:13,720
 And then likewise, if you simplify a little bit further, you put this condition into, put this thing into here,

686
01:20:03,720 --> 01:20:13,720
然后同样地，如果你进一步简化一点，你把这个条件放进去，把这个东西放进去，

687
01:20:13,720 --> 01:20:19,720
 simplify a little bit, you'll be able to see n will be between 0 and 0.33.

687
01:20:13,720 --> 01:20:19,720
稍微简化一下，您将能够看到 n 将在 0 到 0.33 之间。

688
01:20:19,720 --> 01:20:29,720
 So this is how you can find the condition that m and n need to satisfy for this question.

688
01:20:19,720 --> 01:20:29,720
这就是如何找到本题 m 和 n 需要满足的条件。

689
01:20:29,720 --> 01:20:31,720
 So let's continue.

689
01:20:29,720 --> 01:20:31,720
那么让我们继续吧。

690
01:20:31,720 --> 01:20:40,720
 So next it says that in the second scenario, in the second case now, if the value of m is 0.3, n is 0.24,

690
01:20:31,720 --> 01:20:40,720
那么接下来它说在第二种情况下，现在第二种情况下，如果m的值为0.3，n为0.24，

691
01:20:40,720 --> 01:20:46,720
 discuss the effectiveness of code work A in encoding the symbol to achieve compression.

691
01:20:40,720 --> 01:20:46,720
讨论代码工作 A 对符号进行编码以实现压缩的有效性。

692
01:20:46,720 --> 01:20:54,720
 And then afterwards, they ask you to compare code work A and Huffman coding and discuss whether code work A is optimal

692
01:20:46,720 --> 01:20:54,720
然后他们让你比较代码工作A和霍夫曼编码并讨论代码工作A是否是最优的

693
01:20:54,720 --> 01:20:57,720
 in terms of performing the compression.

693
01:20:54,720 --> 01:20:57,720
在执行压缩方面。

694
01:20:57,720 --> 01:21:00,720
 So let's look at the first part first.

694
01:20:57,720 --> 01:21:00,720
那么我们先看第一部分。

695
01:21:00,720 --> 01:21:12,720
 They say if the value m is 0.3, n is 0.24, discuss whether code work A is effective in performing the compression.

695
01:21:00,720 --> 01:21:12,720
他们说如果值 m 为 0.3，n 为 0.24，则讨论代码工作 A 在执行压缩时是否有效。

696
01:21:12,720 --> 01:21:21,720
 And if you have a quick look, if m is 0.3, this is 0.24, and this code work A is, this is the pattern here.

696
01:21:12,720 --> 01:21:21,720
如果你快速看一下，如果 m 是 0.3，则这是 0.24，并且此代码工作 A 是，这就是这里的模式。

697
01:21:21,720 --> 01:21:30,720
 So based on the principles of entropy encoding, does it seems reasonable?

697
01:21:21,720 --> 01:21:30,720
那么基于熵编码的原理，看起来合理吗？

698
01:21:30,720 --> 01:21:38,720
 So if this is 0.3, this is 0.2, you can see this is actually in decreasing probability.

698
01:21:30,720 --> 01:21:38,720
所以如果这是 0.3，这是 0.2，你可以看到这实际上是概率递减。

699
01:21:38,720 --> 01:21:46,720
 And also if you observe the number of bits, right, for those symbols with larger probability, the number of bit is actually less.

699
01:21:38,720 --> 01:21:46,720
而且如果你观察比特数，对吧，对于那些概率较大的符号，比特数实际上更少。

700
01:21:46,720 --> 01:21:51,720
 Those with the smallest probability, the number of bit is larger.

700
01:21:46,720 --> 01:21:51,720
概率最小的，位数较大。

701
01:21:51,720 --> 01:21:57,720
 So therefore, from the principles of entropy encoding or variable length coding, it seems reasonable.

701
01:21:51,720 --> 01:21:57,720
因此，从熵编码或变长编码的原理来看，似乎是合理的。

702
01:21:57,720 --> 01:22:00,720
 It seems reasonable.

702
01:21:57,720 --> 01:22:00,720
看来有道理。

703
01:22:00,720 --> 01:22:04,720
 It's consistent with our understanding of how variable length coding should work.

703
01:22:00,720 --> 01:22:04,720
这与我们对可变长度编码如何工作的理解是一致的。

704
01:22:04,720 --> 01:22:10,720
 But now, okay, the next one is they ask you to compare code book A with Huffman coding.

704
01:22:04,720 --> 01:22:10,720
但现在，好吧，下一个是他们要求你将代码书 A 与霍夫曼编码进行比较。

705
01:22:10,720 --> 01:22:15,720
 And then afterwards decide whether this code book A is optimal, whether it's the best.

705
01:22:10,720 --> 01:22:15,720
然后再判断这个码本A是否是最优的，是否是最好的。

706
01:22:15,720 --> 01:22:19,720
 So this will require you to do some calculation.

706
01:22:15,720 --> 01:22:19,720
所以这需要你做一些计算。

707
01:22:19,720 --> 01:22:23,720
 So I'll give you some time to think about it or to do your calculation.

707
01:22:19,720 --> 01:22:23,720
所以我会给你一些时间去思考或者做你的计算。

708
01:22:23,720 --> 01:22:26,720
 And then we'll go through this last part together.

708
01:22:23,720 --> 01:22:26,720
然后我们将一起完成最后一部分。

709
01:22:53,720 --> 01:22:56,720
 So this is Huffman.

709
01:22:53,720 --> 01:22:56,720
这就是霍夫曼。

710
01:22:56,720 --> 01:22:59,720
 So this is Huffman.

710
01:22:56,720 --> 01:22:59,720
这就是霍夫曼。

711
01:22:59,720 --> 01:23:02,720
 So this is Huffman.

711
01:22:59,720 --> 01:23:02,720
这就是霍夫曼。

712
01:23:02,720 --> 01:23:05,720
 So this is Huffman.

712
01:23:02,720 --> 01:23:05,720
这就是霍夫曼。

713
01:23:05,720 --> 01:23:08,720
 So this is Huffman.

713
01:23:05,720 --> 01:23:08,720
这就是霍夫曼。

714
01:23:08,720 --> 01:23:11,720
 So this is Huffman.

714
01:23:08,720 --> 01:23:11,720
这就是霍夫曼。

715
01:23:11,720 --> 01:23:14,720
 So this is Huffman.

715
01:23:11,720 --> 01:23:14,720
这就是霍夫曼。

716
01:23:14,720 --> 01:23:17,720
 So this is Huffman.

716
01:23:14,720 --> 01:23:17,720
这就是霍夫曼。

717
01:23:17,720 --> 01:23:20,720
 So this is Huffman.

717
01:23:17,720 --> 01:23:20,720
这就是霍夫曼。

718
01:23:20,720 --> 01:23:23,720
 So this is Huffman.

718
01:23:20,720 --> 01:23:23,720
这就是霍夫曼。

719
01:23:23,720 --> 01:23:26,720
 So this is Huffman.

719
01:23:23,720 --> 01:23:26,720
这就是霍夫曼。

720
01:23:26,720 --> 01:23:29,720
 So this is Huffman.

720
01:23:26,720 --> 01:23:29,720
这就是霍夫曼。

721
01:23:29,720 --> 01:23:32,720
 So this is Huffman.

721
01:23:29,720 --> 01:23:32,720
这就是霍夫曼。

722
01:23:32,720 --> 01:23:35,720
 So this is Huffman.

722
01:23:32,720 --> 01:23:35,720
这就是霍夫曼。

723
01:23:35,720 --> 01:23:38,720
 So this is Huffman.

723
01:23:35,720 --> 01:23:38,720
这就是霍夫曼。

724
01:23:38,720 --> 01:23:41,720
 So this is Huffman.

724
01:23:38,720 --> 01:23:41,720
这就是霍夫曼。

725
01:23:41,720 --> 01:23:44,720
 So this is Huffman.

725
01:23:41,720 --> 01:23:44,720
这就是霍夫曼。

726
01:23:44,720 --> 01:23:47,720
 So this is Huffman.

726
01:23:44,720 --> 01:23:47,720
这就是霍夫曼。

727
01:23:47,720 --> 01:23:50,720
 So this is Huffman.

727
01:23:47,720 --> 01:23:50,720
这就是霍夫曼。

728
01:23:50,720 --> 01:23:53,720
 So this is Huffman.

728
01:23:50,720 --> 01:23:53,720
这就是霍夫曼。

729
01:23:53,720 --> 01:23:56,720
 So this is Huffman.

729
01:23:53,720 --> 01:23:56,720
这就是霍夫曼。

730
01:23:56,720 --> 01:23:59,720
 So this is Huffman.

730
01:23:56,720 --> 01:23:59,720
这就是霍夫曼。

731
01:23:59,720 --> 01:24:02,720
 So this is Huffman.

731
01:23:59,720 --> 01:24:02,720
这就是霍夫曼。

732
01:24:02,720 --> 01:24:05,720
 So this is Huffman.

732
01:24:02,720 --> 01:24:05,720
这就是霍夫曼。

733
01:24:05,720 --> 01:24:08,720
 So this is Huffman.

733
01:24:05,720 --> 01:24:08,720
这就是霍夫曼。

734
01:24:08,720 --> 01:24:11,720
 So this is Huffman.

734
01:24:08,720 --> 01:24:11,720
这就是霍夫曼。

735
01:24:11,720 --> 01:24:14,720
 So this is Huffman.

735
01:24:11,720 --> 01:24:14,720
这就是霍夫曼。

736
01:24:14,720 --> 01:24:17,720
 So this is Huffman.

736
01:24:14,720 --> 01:24:17,720
这就是霍夫曼。

737
01:24:17,720 --> 01:24:20,720
 So this is Huffman.

737
01:24:17,720 --> 01:24:20,720
这就是霍夫曼。

738
01:24:20,720 --> 01:24:23,720
 So this is Huffman.

738
01:24:20,720 --> 01:24:23,720
这就是霍夫曼。

739
01:24:23,720 --> 01:24:26,720
 So this is Huffman.

739
01:24:23,720 --> 01:24:26,720
这就是霍夫曼。

740
01:24:26,720 --> 01:24:29,720
 So this is Huffman.

740
01:24:26,720 --> 01:24:29,720
这就是霍夫曼。

741
01:24:29,720 --> 01:24:32,720
 So this is Huffman.

741
01:24:29,720 --> 01:24:32,720
这就是霍夫曼。

742
01:24:32,720 --> 01:24:35,720
 So this is Huffman.

742
01:24:32,720 --> 01:24:35,720
这就是霍夫曼。

743
01:24:35,720 --> 01:24:38,720
 So this is Huffman.

743
01:24:35,720 --> 01:24:38,720
这就是霍夫曼。

744
01:24:38,720 --> 01:24:41,720
 So this is Huffman.

744
01:24:38,720 --> 01:24:41,720
这就是霍夫曼。

745
01:24:41,720 --> 01:24:44,720
 So this is Huffman.

745
01:24:41,720 --> 01:24:44,720
这就是霍夫曼。

746
01:24:44,720 --> 01:24:47,720
 So this is Huffman.

746
01:24:44,720 --> 01:24:47,720
这就是霍夫曼。

747
01:24:47,720 --> 01:24:50,720
 So this is Huffman.

747
01:24:47,720 --> 01:24:50,720
这就是霍夫曼。

748
01:24:50,720 --> 01:24:53,720
 So this is Huffman.

748
01:24:50,720 --> 01:24:53,720
这就是霍夫曼。

749
01:24:53,720 --> 01:24:56,720
 So this is Huffman.

749
01:24:53,720 --> 01:24:56,720
这就是霍夫曼。

750
01:24:56,720 --> 01:24:59,720
 So this is Huffman.

750
01:24:56,720 --> 01:24:59,720
这就是霍夫曼。

751
01:24:59,720 --> 01:25:02,720
 So this is Huffman.

751
01:24:59,720 --> 01:25:02,720
这就是霍夫曼。

752
01:25:02,720 --> 01:25:05,720
 So this is Huffman.

752
01:25:02,720 --> 01:25:05,720
这就是霍夫曼。

753
01:25:05,720 --> 01:25:08,720
 So this is Huffman.

753
01:25:05,720 --> 01:25:08,720
这就是霍夫曼。

754
01:25:08,720 --> 01:25:11,720
 Yes.

754
01:25:08,720 --> 01:25:11,720
是的。

755
01:25:11,720 --> 01:25:14,720
 Yes.

755
01:25:11,720 --> 01:25:14,720
是的。

756
01:25:14,720 --> 01:25:17,720
 Yes.

756
01:25:14,720 --> 01:25:17,720
是的。

757
01:25:17,720 --> 01:25:20,720
 Yes.

757
01:25:17,720 --> 01:25:20,720
是的。

758
01:25:20,720 --> 01:25:23,720
 Yes.

758
01:25:20,720 --> 01:25:23,720
是的。

759
01:25:23,720 --> 01:25:26,720
 Can we answer the question a bit later?

759
01:25:23,720 --> 01:25:26,720
我们可以稍后回答这个问题吗？

760
01:25:26,720 --> 01:25:29,720
 Sorry?

760
01:25:26,720 --> 01:25:29,720
对不起？

761
01:25:29,720 --> 01:25:32,720
 Yeah, yeah.

761
01:25:29,720 --> 01:25:32,720
是啊是啊。

762
01:25:32,720 --> 01:25:35,720
 Yeah, yeah.

762
01:25:32,720 --> 01:25:35,720
是啊是啊。

763
01:25:35,720 --> 01:25:38,720
 Okay.

763
01:25:35,720 --> 01:25:38,720
好的。

764
01:25:38,720 --> 01:25:41,720
 Yes, you see this.

764
01:25:38,720 --> 01:25:41,720
是的，你看到了这个。

765
01:25:59,720 --> 01:26:02,720
 Okay, so any suggestion

765
01:25:59,720 --> 01:26:02,720
好的，所以有什么建议吗

766
01:26:02,720 --> 01:26:05,720
 on how we can do this part B?

766
01:26:02,720 --> 01:26:05,720
我们如何才能完成这 B 部分？

767
01:26:05,720 --> 01:26:08,720
 You want to compare this

767
01:26:05,720 --> 01:26:08,720
你想比较这个

768
01:26:08,720 --> 01:26:11,720
 codebook A and the Huffman coding,

768
01:26:08,720 --> 01:26:11,720
码本 A 和霍夫曼编码，

769
01:26:11,720 --> 01:26:14,720
 whether this codebook A

769
01:26:11,720 --> 01:26:14,720
该码本是否为A

770
01:26:14,720 --> 01:26:17,720
 is optimal or not, what should we do?

770
01:26:14,720 --> 01:26:17,720
是最优还是不是最优，我们该怎么办？

771
01:26:17,720 --> 01:26:20,720
 So first of all, we need to...

771
01:26:17,720 --> 01:26:20,720
所以首先，我们需要...

772
01:26:20,720 --> 01:26:23,720
 Sorry?

772
01:26:20,720 --> 01:26:23,720
对不起？

773
01:26:23,720 --> 01:26:26,720
 Yeah, okay, so we need to go through the process

773
01:26:23,720 --> 01:26:26,720
是的，好的，所以我们需要完成这个过程

774
01:26:26,720 --> 01:26:29,720
 of building the Huffman codebook set

774
01:26:26,720 --> 01:26:29,720
构建霍夫曼密码本集

775
01:26:29,720 --> 01:26:32,720
 and afterwards, suppose once you have done that,

775
01:26:29,720 --> 01:26:32,720
之后，假设一旦你这样做了，

776
01:26:32,720 --> 01:26:35,720
 once you have done that, what should we do?

776
01:26:32,720 --> 01:26:35,720
一旦你这样做了，我们应该做什么？

777
01:26:35,720 --> 01:26:38,720
 What should we do?

777
01:26:35,720 --> 01:26:38,720
我们应该做什么？

778
01:26:38,720 --> 01:26:41,720
 Calculate the average number of bits per symbol

778
01:26:38,720 --> 01:26:41,720
计算每个符号的平均位数

779
01:26:41,720 --> 01:26:44,720
 that's required for Huffman codebook set, right?

779
01:26:41,720 --> 01:26:44,720
这是霍夫曼密码本集所必需的，对吧？

780
01:26:44,720 --> 01:26:47,720
 And afterwards you compare which one is larger, right?

780
01:26:44,720 --> 01:26:47,720
然后你比较一下哪个更大，对吗？

781
01:26:47,720 --> 01:26:50,720
 So if, for example, your Huffman

781
01:26:47,720 --> 01:26:50,720
例如，如果你的霍夫曼

782
01:26:50,720 --> 01:26:53,720
 codebook set can represent the symbol

782
01:26:50,720 --> 01:26:53,720
码本集可以表示符号

783
01:26:53,720 --> 01:26:56,720
 with a smaller number of bits per symbol,

783
01:26:53,720 --> 01:26:56,720
每个符号的位数较少，

784
01:26:56,720 --> 01:26:59,720
 then that means your codebook A is not optimal already.

784
01:26:56,720 --> 01:26:59,720
那么这意味着你的密码本 A 还不是最佳的。

785
01:26:59,720 --> 01:27:02,720
 So that's pretty much the plan.

785
01:26:59,720 --> 01:27:02,720
这就是计划。

786
01:27:02,720 --> 01:27:05,720
 So that's what we need to do.

786
01:27:02,720 --> 01:27:05,720
这就是我们需要做的。

787
01:27:05,720 --> 01:27:08,720
 So in order to do that, we need to go through the process.

787
01:27:05,720 --> 01:27:08,720
因此，为了做到这一点，我们需要完成这个过程。

788
01:27:08,720 --> 01:27:11,720
 So this process I will not

788
01:27:08,720 --> 01:27:11,720
所以这个过程我不会

789
01:27:11,720 --> 01:27:14,720
 go through too much in detail.

789
01:27:11,720 --> 01:27:14,720
经历太多细节。

790
01:27:14,720 --> 01:27:17,720
 But anyway, from the earlier part,

790
01:27:14,720 --> 01:27:17,720
但无论如何，从前面的部分来看，

791
01:27:17,720 --> 01:27:20,720
 we say that in order to see

791
01:27:17,720 --> 01:27:20,720
我们说是为了看到

792
01:27:20,720 --> 01:27:23,720
 whether, for example, codebook A, whether it's reasonable

792
01:27:20,720 --> 01:27:23,720
例如，密码本A是否合理

793
01:27:23,720 --> 01:27:26,720
 from the entropy coding perspective,

793
01:27:23,720 --> 01:27:26,720
从熵编码的角度来看，

794
01:27:26,720 --> 01:27:29,720
 so we can see that from the probability of occurrence,

794
01:27:26,720 --> 01:27:29,720
所以从发生的概率我们可以看出，

795
01:27:29,720 --> 01:27:32,720
 larger probability corresponds to shorter codebook.

795
01:27:29,720 --> 01:27:32,720
较大的概率对应于较短的码本。

796
01:27:32,720 --> 01:27:35,720
 This is the idea of entropy coding.

796
01:27:32,720 --> 01:27:35,720
这就是熵编码的思想。

797
01:27:35,720 --> 01:27:38,720
 So early on, you will see this is point three and this is point two,

797
01:27:35,720 --> 01:27:38,720
所以很早就，你会看到这是第三点，这是第二点，

798
01:27:38,720 --> 01:27:41,720
 just like we mentioned here.

798
01:27:38,720 --> 01:27:41,720
就像我们在这里提到的那样。

799
01:27:41,720 --> 01:27:44,720
 Larger probability is shorter codebook, smaller probability larger codebook.

799
01:27:41,720 --> 01:27:44,720
概率越大，码本越短，概率越小，码本越大。

800
01:27:44,720 --> 01:27:47,720
 So therefore, this is actually consistent

800
01:27:44,720 --> 01:27:47,720
因此，这实际上是一致的

801
01:27:47,720 --> 01:27:50,720
 with the idea of entropy coding.

801
01:27:47,720 --> 01:27:50,720
结合熵编码的思想。

802
01:27:50,720 --> 01:27:53,720
 So now, however, to check whether this codebook A is optimal,

802
01:27:50,720 --> 01:27:53,720
然而，现在要检查这个密码本 A 是否是最佳的，

803
01:27:53,720 --> 01:27:56,720
 we need to actually derive this Huffman codebook set.

803
01:27:53,720 --> 01:27:56,720
我们需要实际导出这个霍夫曼码本集。

804
01:27:56,720 --> 01:27:59,720
 So we go through this particular motion,

804
01:27:56,720 --> 01:27:59,720
所以我们通过这个特殊的动议，

805
01:27:59,720 --> 01:28:02,720
 this process that I mentioned to you before.

805
01:27:59,720 --> 01:28:02,720
我之前向你提到过这个过程。

806
01:28:02,720 --> 01:28:05,720
 So we try to rank this particular symbol

806
01:28:02,720 --> 01:28:05,720
所以我们尝试对这个特定的符号进行排名

807
01:28:05,720 --> 01:28:08,720
 in decreasing order of probability.

807
01:28:05,720 --> 01:28:08,720
按概率降序排列。

808
01:28:08,720 --> 01:28:11,720
 And then for the two smallest probability, we add them up.

808
01:28:08,720 --> 01:28:11,720
然后对于两个最小的概率，我们将它们相加。

809
01:28:11,720 --> 01:28:14,720
 And then we move it to the next column

809
01:28:11,720 --> 01:28:14,720
然后我们将其移动到下一列

810
01:28:14,720 --> 01:28:17,720
 by rearranging the probability.

810
01:28:14,720 --> 01:28:17,720
通过重新排列概率。

811
01:28:17,720 --> 01:28:20,720
 So this is point seven, it should be here.

811
01:28:17,720 --> 01:28:20,720
这是第七点，应该在这里。

812
01:28:20,720 --> 01:28:23,720
 The rest just transfer over.

812
01:28:20,720 --> 01:28:23,720
剩下的就转移过去吧。

813
01:28:23,720 --> 01:28:26,720
 So we repeat that particular process,

813
01:28:23,720 --> 01:28:26,720
所以我们重复这个特定的过程，

814
01:28:26,720 --> 01:28:29,720
 we'll be able to draw these particular structures here.

814
01:28:26,720 --> 01:28:29,720
我们将能够在这里绘制这些特定的结构。

815
01:28:29,720 --> 01:28:32,720
 So that's step one.

815
01:28:29,720 --> 01:28:32,720
这是第一步。

816
01:28:32,720 --> 01:28:35,720
 Step two is that we assign the bits, top branch is one, bottom branch is zero.

816
01:28:32,720 --> 01:28:35,720
第二步是我们分配位，顶部分支是 1，底部分支是 0。

817
01:28:35,720 --> 01:28:38,720
 One zero, one zero, one zero. So that's step two.

817
01:28:35,720 --> 01:28:38,720
一零，一零，一零。这是第二步。

818
01:28:38,720 --> 01:28:41,720
 Step three is that we transfer this particular symbol

818
01:28:38,720 --> 01:28:41,720
第三步是我们转移这个特定的符号

819
01:28:41,720 --> 01:28:44,720
 just before it's being merged for easy tracking.

819
01:28:41,720 --> 01:28:44,720
就在它被合并以便于跟踪之前。

820
01:28:44,720 --> 01:28:47,720
 So this is zero, this is S1.

820
01:28:44,720 --> 01:28:47,720
所以这是零，这是 S1。

821
01:28:47,720 --> 01:28:50,720
 So for easy tracking when you want to draw the Huffman code tree.

821
01:28:47,720 --> 01:28:50,720
这样便于在绘制哈夫曼码树时方便跟踪。

822
01:28:50,720 --> 01:28:53,720
 So suppose we go through this particular process.

822
01:28:50,720 --> 01:28:53,720
假设我们经历这个特定的过程。

823
01:28:53,720 --> 01:28:56,720
 Let's continue this one, we can skip for one moment.

823
01:28:53,720 --> 01:28:56,720
让我们继续这一节，我们可以暂时跳过。

824
01:28:56,720 --> 01:28:59,720
 So based on this particular structure,

824
01:28:56,720 --> 01:28:59,720
所以基于这个特殊的结构，

825
01:28:59,720 --> 01:29:02,720
 then we can build our Huffman code tree.

825
01:28:59,720 --> 01:29:02,720
然后我们就可以构建我们的霍夫曼代码树。

826
01:29:02,720 --> 01:29:05,720
 So let's assume that you can go home and try it out yourself.

826
01:29:02,720 --> 01:29:05,720
因此，我们假设您可以回家亲自尝试一下。

827
01:29:05,720 --> 01:29:08,720
 You will see that this is the Huffman code tree

827
01:29:05,720 --> 01:29:08,720
你会看到这是霍夫曼码树

828
01:29:08,720 --> 01:29:11,720
 that you'll be able to construct.

828
01:29:08,720 --> 01:29:11,720
你将能够构建。

829
01:29:11,720 --> 01:29:14,720
 And then finally, if you want to find out what is the Huffman code work for each of the symbols,

829
01:29:11,720 --> 01:29:14,720
最后，如果您想了解每个符号的霍夫曼编码是什么，

830
01:29:14,720 --> 01:29:17,720
 for example for S0 which is somewhere here,

830
01:29:14,720 --> 01:29:17,720
例如对于位于此处某处的 S0，

831
01:29:17,720 --> 01:29:20,720
 the code work should be 1, 1.

831
01:29:17,720 --> 01:29:20,720
代码工作应该是 1, 1。

832
01:29:20,720 --> 01:29:23,720
 If you take one example which is S7,

832
01:29:20,720 --> 01:29:23,720
如果以S7为例，

833
01:29:23,720 --> 01:29:26,720
 which is here, as you can see from this root node,

833
01:29:23,720 --> 01:29:26,720
正如您从根节点中看到的那样，

834
01:29:26,720 --> 01:29:29,720
 is 1, 0, 0, 1, 0.

834
01:29:26,720 --> 01:29:29,720
是 1, 0, 0, 1, 0。

835
01:29:29,720 --> 01:29:32,720
 So S7 is 1, 0, 0, 1, 0 here.

835
01:29:29,720 --> 01:29:32,720
所以这里S7就是1,0,0,1,0。

836
01:29:32,720 --> 01:29:35,720
 So you'll be able to write down all the code works

836
01:29:32,720 --> 01:29:35,720
这样你就可以写下所有代码的工作原理

837
01:29:35,720 --> 01:29:38,720
 that you want to construct.

837
01:29:35,720 --> 01:29:38,720
你想要构建的。

838
01:29:39,720 --> 01:29:42,720
 So you'll be able to write down all the code work

838
01:29:39,720 --> 01:29:42,720
这样你就可以写下所有的代码工作

839
01:29:42,720 --> 01:29:45,720
 for this particular Huffman coding here.

839
01:29:42,720 --> 01:29:45,720
对于这个特定的霍夫曼编码在这里。

840
01:29:45,720 --> 01:29:50,720
 So once you have built up this particular Huffman code work set here,

840
01:29:45,720 --> 01:29:50,720
因此，一旦您在这里建立了这个特定的霍夫曼代码工作集，

841
01:29:50,720 --> 01:29:54,720
 you can go through the process that we have mentioned a couple of times already.

841
01:29:50,720 --> 01:29:54,720
您可以完成我们已经提到过几次的过程。

842
01:29:54,720 --> 01:29:59,720
 We can calculate the average number of bits per symbol for this Huffman code work set.

842
01:29:54,720 --> 01:29:59,720
我们可以计算该霍夫曼代码工作集每个符号的平均位数。

843
01:29:59,720 --> 01:30:02,720
 So if you do that, you can see,

843
01:29:59,720 --> 01:30:02,720
所以如果你这样做，你会看到，

844
01:30:02,720 --> 01:30:07,720
 so the probability that it will be this symbol S0 is 0.3,

844
01:30:02,720 --> 01:30:07,720
所以这个符号 S0 的概率是 0.3，

845
01:30:08,720 --> 01:30:10,720
 and it's 2 bits.

845
01:30:08,720 --> 01:30:10,720
它是 2 位。

846
01:30:10,720 --> 01:30:13,720
 If it's the probability it will be S1 is 0.24 from the question,

846
01:30:10,720 --> 01:30:13,720
如果问题中 S1 的概率为 0.24，

847
01:30:13,720 --> 01:30:15,720
 and it's 2 bits.

847
01:30:13,720 --> 01:30:15,720
它是 2 位。

848
01:30:15,720 --> 01:30:17,720
 So if you do that, you do the calculation,

848
01:30:15,720 --> 01:30:17,720
所以如果你这样做，你就会进行计算，

849
01:30:17,720 --> 01:30:20,720
 you'll see that it's 2.66 bits per symbol.

849
01:30:17,720 --> 01:30:20,720
您会看到每个符号为 2.66 位。

850
01:30:20,720 --> 01:30:25,720
 This is if you use the Huffman code work set that you just derived.

850
01:30:20,720 --> 01:30:25,720
这是如果您使用刚刚导出的霍夫曼代码工作集的话。

851
01:30:25,720 --> 01:30:29,720
 So on the other hand, if you use just now the code book A,

851
01:30:25,720 --> 01:30:29,720
那么另一方面，如果你使用刚才的码本A，

852
01:30:29,720 --> 01:30:32,720
 so this is the code book A,

852
01:30:29,720 --> 01:30:32,720
所以这是密码书A，

853
01:30:32,720 --> 01:30:35,720
 so the code book A, the number of bits per symbol that we have,

853
01:30:32,720 --> 01:30:35,720
所以码书 A，我们拥有的每个符号的位数，

854
01:30:35,720 --> 01:30:39,720
 if you choose this particular symbol S0,

854
01:30:35,720 --> 01:30:39,720
如果你选择这个特定的符号S0，

855
01:30:39,720 --> 01:30:43,720
 it's actually 0.3, and it's 2 bits.

855
01:30:39,720 --> 01:30:43,720
它实际上是 0.3，并且是 2 位。

856
01:30:43,720 --> 01:30:46,720
 If you choose that the symbol randomly is S1,

856
01:30:43,720 --> 01:30:46,720
如果随机选择符号为S1，

857
01:30:46,720 --> 01:30:50,720
 the probability is actually 0.24 from the question,

857
01:30:46,720 --> 01:30:50,720
从问题来看，概率实际上是 0.24，

858
01:30:50,720 --> 01:30:54,720
 and it's 0.24, and the number of bits that is required is 3 bits.

858
01:30:50,720 --> 01:30:54,720
是0.24，需要的位数是3位。

859
01:30:54,720 --> 01:30:59,720
 So if you choose the symbol S2, the probability is 0.15,

859
01:30:54,720 --> 01:30:59,720
所以如果你选择符号S2，概率是0.15，

860
01:30:59,720 --> 01:31:03,720
 and for code book A, it's actually 3 bits.

860
01:30:59,720 --> 01:31:03,720
对于码书A来说，它实际上是3位。

861
01:31:03,720 --> 01:31:05,720
 So therefore, for code book A,

861
01:31:03,720 --> 01:31:05,720
因此，对于码本 A，

862
01:31:05,720 --> 01:31:07,720
 if you calculate the average number of bits per symbol,

862
01:31:05,720 --> 01:31:07,720
如果计算每个符号的平均位数，

863
01:31:07,720 --> 01:31:10,720
 if you go through the process and you do the calculation,

863
01:31:07,720 --> 01:31:10,720
如果你完成这个过程并进行计算，

864
01:31:10,720 --> 01:31:14,720
 you'll see it's 2.77 bits per symbol.

864
01:31:10,720 --> 01:31:14,720
您会看到每个符号 2.77 位。

865
01:31:14,720 --> 01:31:18,720
 So on the other hand, if you go through the process,

865
01:31:14,720 --> 01:31:18,720
所以另一方面 如果你经历了这个过程

866
01:31:18,720 --> 01:31:22,720
 you build your Huffman code work set,

866
01:31:18,720 --> 01:31:22,720
您构建霍夫曼代码工作集，

867
01:31:22,720 --> 01:31:28,720
 if you do the calculation, you'll see you only require 2.66 bits per symbol.

867
01:31:22,720 --> 01:31:28,720
如果您进行计算，您会发现每个符号只需要 2.66 位。

868
01:31:28,720 --> 01:31:32,720
 Therefore, using your Huffman code work set is actually more effective

868
01:31:28,720 --> 01:31:32,720
因此，使用霍夫曼代码工作集实际上更有效

869
01:31:32,720 --> 01:31:34,720
 and more efficient.

869
01:31:32,720 --> 01:31:34,720
并且更加高效。

870
01:31:34,720 --> 01:31:37,720
 So therefore, from that particular perspective,

870
01:31:34,720 --> 01:31:37,720
因此，从这个特定的角度来看，

871
01:31:37,720 --> 01:31:44,720
 we can say that this code book A is not optimal in terms of performing the compression,

871
01:31:37,720 --> 01:31:44,720
我们可以说这个码本 A 在执行压缩方面并不是最佳的，

872
01:31:44,720 --> 01:31:49,720
 because at least the Huffman code work set that you've designed

872
01:31:44,720 --> 01:31:49,720
因为至少您设计的霍夫曼代码工作集

873
01:31:49,720 --> 01:31:55,720
 is more effective in terms of compression as compared to code book A.

873
01:31:49,720 --> 01:31:55,720
与码书A相比，在压缩方面更有效。

874
01:31:55,720 --> 01:32:03,720
 So therefore, you can see that code book A requires 2.77 bits per symbol,

874
01:31:55,720 --> 01:32:03,720
因此，您可以看到码本 A 每个符号需要 2.77 位，

875
01:32:03,720 --> 01:32:07,720
 which is greater than 2.66 bits per symbol by Huffman coding.

875
01:32:03,720 --> 01:32:07,720
通过霍夫曼编码，每个符号大于 2.66 位。

876
01:32:07,720 --> 01:32:11,720
 So therefore, we can conclude that code book A is actually not optimal.

876
01:32:07,720 --> 01:32:11,720
因此，我们可以得出结论，码书A实际上不是最优的。

877
01:32:11,720 --> 01:32:15,720
 Even though at first glance it looks like it's actually good,

877
01:32:11,720 --> 01:32:15,720
虽然乍一看确实不错

878
01:32:15,720 --> 01:32:19,720
 because it's consistent with your entropy coding principle,

878
01:32:15,720 --> 01:32:19,720
因为它符合你的熵编码原理，

879
01:32:19,720 --> 01:32:22,720
 but if you do some closer examination,

879
01:32:19,720 --> 01:32:22,720
但如果你仔细检查一下

880
01:32:22,720 --> 01:32:26,720
 if you compare to Huffman coding, which is usually the benchmark,

880
01:32:22,720 --> 01:32:26,720
如果与通常作为基准的霍夫曼编码进行比较，

881
01:32:26,720 --> 01:32:30,720
 you can see that your Huffman coding is actually more efficient.

881
01:32:26,720 --> 01:32:30,720
你可以看到你的霍夫曼编码实际上更有效。

882
01:32:30,720 --> 01:32:34,720
 So therefore, your code book A is not the optimal choice.

882
01:32:30,720 --> 01:32:34,720
因此，您的密码本 A 不是最佳选择。

883
01:32:34,720 --> 01:32:38,720
 So this is the answer to this exercise.

883
01:32:34,720 --> 01:32:38,720
这就是本练习的答案。

884
01:32:38,720 --> 01:32:43,720
 So as I mentioned, both exercises I'll upload to the course site after tomorrow,

884
01:32:38,720 --> 01:32:43,720
正如我提到的，这两个练习我都会在明天之后上传到课程网站，

885
01:32:43,720 --> 01:32:45,720
 so you can go and download it.

885
01:32:43,720 --> 01:32:45,720
所以你可以去下载它。

886
01:32:45,720 --> 01:32:49,720
 So we spent quite a fair bit of time going through these two exercises,

886
01:32:45,720 --> 01:32:49,720
所以我们花了相当多的时间来完成这两个练习，

887
01:32:49,720 --> 01:32:53,720
 and hopefully you have a better understanding about this entropy and coding

887
01:32:49,720 --> 01:32:53,720
希望您对这种熵和编码有更好的理解

888
01:32:53,720 --> 01:32:55,720
 and Huffman coding process already.

888
01:32:53,720 --> 01:32:55,720
和霍夫曼编码过程已经。

889
01:32:55,720 --> 01:32:57,720
 We'll take a short break.

889
01:32:55,720 --> 01:32:57,720
我们会短暂休息一下。

890
01:32:57,720 --> 01:32:59,720
 Now it's 8.02.

890
01:32:57,720 --> 01:32:59,720
现在是8.02。

891
01:32:59,720 --> 01:33:05,720
 So probably let's come back at 8.20.

891
01:32:59,720 --> 01:33:05,720
所以我们可能会在 8.20 回来。

892
01:33:19,720 --> 01:33:21,720
 Ah.

892
01:33:19,720 --> 01:33:21,720
啊。

893
01:33:49,720 --> 01:33:51,720
 So you're not saying that the probability is not M?

893
01:33:49,720 --> 01:33:51,720
所以你不是说概率不是M？

894
01:33:51,720 --> 01:33:53,720
 No, no.

894
01:33:51,720 --> 01:33:53,720
不，不。

895
01:33:53,720 --> 01:33:57,720
 There's no need to say that the probability is not M.

895
01:33:53,720 --> 01:33:57,720
不用说概率不是M。

896
01:33:57,720 --> 01:34:00,720
 Just that I wanted to make it easier for students.

896
01:33:57,720 --> 01:34:00,720
只是我想让学生更容易。

897
01:34:00,720 --> 01:34:05,720
 In the exam, I intentionally increased the probability of the answer.

897
01:34:00,720 --> 01:34:05,720
考试时，我故意增加了答对的概率。

898
01:34:05,720 --> 01:34:08,720
 But I don't necessarily say that the probability is not M.

898
01:34:05,720 --> 01:34:08,720
但我不一定说概率不是M。

899
01:34:08,720 --> 01:34:10,720
 Okay, okay.

899
01:34:08,720 --> 01:34:10,720
好吧，好吧。

900
01:34:10,720 --> 01:34:12,720
 That's it.

900
01:34:10,720 --> 01:34:12,720
就是这样。

901
01:34:12,720 --> 01:34:16,720
 Could you show me the X is one in first scenario?

901
01:34:12,720 --> 01:34:16,720
你能告诉我 X 是第一个场景中的一个吗？

902
01:34:16,720 --> 01:34:32,720
 One limitation is 2M plus 3M is less than 1.41.

902
01:34:16,720 --> 01:34:32,720
一个限制是 2M 加 3M 小于 1.41。

903
01:34:32,720 --> 01:34:36,720
 How is the second limitation?

903
01:34:32,720 --> 01:34:36,720
第二个限制如何？

904
01:34:36,720 --> 01:34:40,720
 Okay, because this is a probability,

904
01:34:36,720 --> 01:34:40,720
好吧，因为这是一个概率，

905
01:34:40,720 --> 01:34:44,720
 so all the probability add up must be equal to 1.

905
01:34:40,720 --> 01:34:44,720
所以所有的概率加起来一定等于 1。

906
01:34:44,720 --> 01:34:46,720
 Okay, I got it.

906
01:34:44,720 --> 01:34:46,720
好的，我明白了。

907
01:34:46,720 --> 01:34:48,720
 Thank you.

907
01:34:46,720 --> 01:34:48,720
谢谢。

908
01:34:50,720 --> 01:34:52,720
 So this is the first one.

908
01:34:50,720 --> 01:34:52,720
这是第一个。

909
01:34:52,720 --> 01:34:56,720
 If this is a big or small table,

909
01:34:52,720 --> 01:34:56,720
如果这是一张大桌子或小桌子，

910
01:34:56,720 --> 01:34:58,720
 should we keep a N?

910
01:34:56,720 --> 01:34:58,720
我们应该保留一个N吗？

911
01:34:58,720 --> 01:35:02,720
 Actually, this question is the same as what the student said earlier.

911
01:34:58,720 --> 01:35:02,720
其实这个问题和刚才那位同学说的是一样的。

912
01:35:02,720 --> 01:35:06,720
 In fact, it doesn't say that the probability is not M.

912
01:35:02,720 --> 01:35:06,720
其实并没有说概率不是M。

913
01:35:06,720 --> 01:35:10,720
 Just that the other symbols,

913
01:35:06,720 --> 01:35:10,720
只是其他的符号，

914
01:35:10,720 --> 01:35:12,720
 the probability is all 8 to 5.

914
01:35:10,720 --> 01:35:12,720
概率都是8到5。

915
01:35:12,720 --> 01:35:14,720
 These two are actually M.

915
01:35:12,720 --> 01:35:14,720
这两个其实都是M。

916
01:35:14,720 --> 01:35:18,720
 So actually, N can be a big or small table.

916
01:35:14,720 --> 01:35:18,720
所以实际上，N 可以是一个大表或一个小表。

917
01:35:26,720 --> 01:35:30,720
 This is basically the Hafen rule.

917
01:35:26,720 --> 01:35:30,720
这基本上就是哈芬规则。

918
01:35:30,720 --> 01:35:34,720
 Hafen rule itself is a rule.

918
01:35:30,720 --> 01:35:34,720
哈芬规则本身就是一个规则。

919
01:35:34,720 --> 01:35:36,720
 These are the processes we analyzed earlier.

919
01:35:34,720 --> 01:35:36,720
这些是我们之前分析的过程。

920
01:35:36,720 --> 01:35:40,720
 In fact, people have already analyzed it.

920
01:35:36,720 --> 01:35:40,720
其实人们已经分析过了。

921
01:35:40,720 --> 01:35:42,720
 This is a rule.

921
01:35:40,720 --> 01:35:42,720
这是一条规则。

922
01:35:42,720 --> 01:35:46,720
 So it can't be more than, or more than 1M?

922
01:35:42,720 --> 01:35:46,720
那么不能超过，或者超过1M？

923
01:35:46,720 --> 01:35:50,720
 Actually, in the Hafen rule,

923
01:35:46,720 --> 01:35:50,720
事实上，在哈芬规则中，

924
01:35:50,720 --> 01:35:54,720
 it is possible that there is a condition of 0 and 1.

924
01:35:50,720 --> 01:35:54,720
可能存在0和1的条件。

925
01:35:54,720 --> 01:35:58,720
 But this question, because of its probability distribution,

925
01:35:54,720 --> 01:35:58,720
但是这个问题，由于它的概率分布，

926
01:35:58,720 --> 01:36:02,720
 the probability distribution causes this Hafen rule,

926
01:35:58,720 --> 01:36:02,720
概率分布导致了这个 Hafen 规则，

927
01:36:02,720 --> 01:36:08,720
 which is the smallest, the biggest opportunity for the symbol to be a 0.

927
01:36:02,720 --> 01:36:08,720
这是符号成为 0 的最小、最大的机会。

928
01:36:08,720 --> 01:36:10,720
 What I want to say is,

928
01:36:08,720 --> 01:36:10,720
我想说的是，

929
01:36:10,720 --> 01:36:12,720
 if your question is,

929
01:36:10,720 --> 01:36:12,720
如果你的问题是

930
01:36:12,720 --> 01:36:16,720
 is it possible that there are some symbols in the Hafen rule,

930
01:36:12,720 --> 01:36:16,720
哈芬规则中是否有可能存在一些符号，

931
01:36:16,720 --> 01:36:18,720
 just one 0 or something?

931
01:36:16,720 --> 01:36:18,720
只是一个 0 或者什么？

932
01:36:18,720 --> 01:36:20,720
 It is possible.

932
01:36:18,720 --> 01:36:20,720
这是可能的。

933
01:36:20,720 --> 01:36:22,720
 But this question, because of its probability distribution,

933
01:36:20,720 --> 01:36:22,720
但是这个问题，由于它的概率分布，

934
01:36:22,720 --> 01:36:28,720
 the shortest Hafen rule is not a 0 or something.

934
01:36:22,720 --> 01:36:28,720
最短的 Hafen 规则不是 0 或其他值。

935
01:36:28,720 --> 01:36:34,720
 But this 0 cannot be a 0?

935
01:36:28,720 --> 01:36:34,720
但是这个0不可能是0吧？

936
01:36:34,720 --> 01:36:36,720
 This is a probability distribution.

936
01:36:34,720 --> 01:36:36,720
这是一个概率分布。

937
01:36:36,720 --> 01:36:38,720
 Because according to its probability distribution,

937
01:36:36,720 --> 01:36:38,720
因为根据其概率分布，

938
01:36:38,720 --> 01:36:40,720
 and the description process,

938
01:36:38,720 --> 01:36:40,720
以及描述过程，

939
01:36:40,720 --> 01:36:43,720
 it is a systemized,

939
01:36:40,720 --> 01:36:43,720
它是一个系统化的、

940
01:36:43,720 --> 01:36:46,720
 a small, half-or-half rule.

940
01:36:43,720 --> 01:36:46,720
一个小的、一半或一半的规则。

941
01:36:46,720 --> 01:36:49,720
 This is a standard rule.

941
01:36:46,720 --> 01:36:49,720
这是一个标准规则。

942
01:36:49,720 --> 01:36:53,720
 So this is a 1?

942
01:36:49,720 --> 01:36:53,720
所以这是一个1？

943
01:36:53,720 --> 01:36:57,720
 The above 1 is a type of 1.

943
01:36:53,720 --> 01:36:57,720
上面的1是1的类型。

944
01:36:57,720 --> 01:37:01,720
 This is the question.

944
01:36:57,720 --> 01:37:01,720
这就是问题所在。

945
01:37:01,720 --> 01:37:04,720
 This question is calculated by the length of the smallest average

945
01:37:01,720 --> 01:37:04,720
这题是通过最小平均长度来计算的

946
01:37:04,720 --> 01:37:08,720
 and the length of the code.

946
01:37:04,720 --> 01:37:08,720
以及代码的长度。

947
01:37:08,720 --> 01:37:10,720
 Can it reach 2.5G?

947
01:37:08,720 --> 01:37:10,720
能达到2.5G吗？

948
01:37:10,720 --> 01:37:12,720
 No, it cannot.

948
01:37:10,720 --> 01:37:12,720
不，不能。

949
01:37:12,720 --> 01:37:14,720
 This is the second question.

949
01:37:12,720 --> 01:37:14,720
这是第二个问题。

950
01:37:14,720 --> 01:37:16,720
 It is the last question.

950
01:37:14,720 --> 01:37:16,720
这是最后一个问题。

951
01:37:16,720 --> 01:37:19,720
 It is called entropy.

951
01:37:16,720 --> 01:37:19,720
它被称为熵。

952
01:37:19,720 --> 01:37:25,720
 Entropy is the smallest theory.

952
01:37:19,720 --> 01:37:25,720
熵是最小的理论。

953
01:37:25,720 --> 01:37:27,720
 But in many cases,

953
01:37:25,720 --> 01:37:27,720
但在很多情况下，

954
01:37:27,720 --> 01:37:31,720
 you cannot find the lower bound.

954
01:37:27,720 --> 01:37:31,720
你找不到下限。

955
01:37:31,720 --> 01:37:34,720
 So generally, we will not...

955
01:37:31,720 --> 01:37:34,720
所以一般情况下我们不会...

956
01:37:34,720 --> 01:37:36,720
 If you say you want to force it,

956
01:37:34,720 --> 01:37:36,720
如果你说你想强迫的话

957
01:37:36,720 --> 01:37:39,720
 you will know immediately by using entropy.

957
01:37:36,720 --> 01:37:39,720
使用熵你会立即知道。

958
01:37:39,720 --> 01:37:41,720
 No, it is not possible.

958
01:37:39,720 --> 01:37:41,720
不，这是不可能的。

959
01:37:41,720 --> 01:37:47,720
 Because entropy is the smallest of the theories.

959
01:37:41,720 --> 01:37:47,720
因为熵是最小的理论。

960
01:37:47,720 --> 01:37:51,720
 So if you want to be smaller than this value,

960
01:37:47,720 --> 01:37:51,720
所以如果你想小于这个值，

961
01:37:51,720 --> 01:37:54,720
 entropy can tell you.

961
01:37:51,720 --> 01:37:54,720
熵可以告诉你。

962
01:37:54,720 --> 01:37:57,720
 I know if it can be smaller than this.

962
01:37:54,720 --> 01:37:57,720
我知道它是否可以比这个更小。

963
01:37:57,720 --> 01:38:00,720
 But if you want to be higher than entropy,

963
01:37:57,720 --> 01:38:00,720
但如果你想高于熵，

964
01:38:00,720 --> 01:38:06,720
 there are different codes and methods.

964
01:38:00,720 --> 01:38:06,720
有不同的代码和方法。

965
01:38:06,720 --> 01:38:11,720
 The half-code is the smallest.

965
01:38:06,720 --> 01:38:11,720
半码是最小的。

966
01:38:11,720 --> 01:38:15,720
 It is not necessarily the same as entropy.

966
01:38:11,720 --> 01:38:15,720
它不一定与熵相同。

967
01:38:15,720 --> 01:38:17,720
 Sometimes it will be higher than entropy.

967
01:38:15,720 --> 01:38:17,720
有时它会高于熵。

968
01:38:17,720 --> 01:38:20,720
 But I read in the CSDN,

968
01:38:17,720 --> 01:38:20,720
但我在CSDN上看到，

969
01:38:20,720 --> 01:38:24,720
 it can say that this question is 00 and 10.

969
01:38:20,720 --> 01:38:24,720
可以说这道题是00和10。

970
01:38:24,720 --> 01:38:26,720
 But I can say that...

970
01:38:24,720 --> 01:38:26,720
但我可以说...

971
01:38:26,720 --> 01:38:28,720
 Because it is different from the latter,

971
01:38:26,720 --> 01:38:28,720
因为它与后者不同，

972
01:38:28,720 --> 01:38:30,720
 I can use 0 and 1 to express it.

972
01:38:28,720 --> 01:38:30,720
我可以用0和1来表达。

973
01:38:30,720 --> 01:38:33,720
 Because the design of the half-code

973
01:38:30,720 --> 01:38:33,720
因为半码的设计

974
01:38:33,720 --> 01:38:39,720
 is not just about the average number of bits,

974
01:38:33,720 --> 01:38:39,720
不仅仅是平均位数，

975
01:38:39,720 --> 01:38:41,720
 or symbol.

975
01:38:39,720 --> 01:38:41,720
或符号。

976
01:38:41,720 --> 01:38:43,720
 That is not the only thing.

976
01:38:41,720 --> 01:38:43,720
这还不是唯一的事情。

977
01:38:43,720 --> 01:38:47,720
 So we can consider uniquely decodable.

977
01:38:43,720 --> 01:38:47,720
所以我们可以考虑唯一可解码。

978
01:38:47,720 --> 01:38:49,720
 When you have a bitstream,

978
01:38:47,720 --> 01:38:49,720
当你有比特流时，

979
01:38:49,720 --> 01:38:52,720
 it must have no half-code.

979
01:38:49,720 --> 01:38:52,720
它必须没有半码。

980
01:38:52,720 --> 01:38:59,720
 It must have only one way to decode it.

980
01:38:52,720 --> 01:38:59,720
它必须只有一种解码方式。

981
01:38:59,720 --> 01:39:02,720
 If you do not know the process,

981
01:38:59,720 --> 01:39:02,720
如果您不知道流程，

982
01:39:02,720 --> 01:39:04,720
 when you decode it,

982
01:39:02,720 --> 01:39:04,720
当你解码它时，

983
01:39:04,720 --> 01:39:06,720
 sometimes it will have a half-code.

983
01:39:04,720 --> 01:39:06,720
有时它会有半码。

984
01:39:06,720 --> 01:39:10,720
 You have to cut it into different symbols.

984
01:39:06,720 --> 01:39:10,720
你必须把它切成不同的符号。

985
01:39:10,720 --> 01:39:13,720
 It will have a mess.

985
01:39:10,720 --> 01:39:13,720
将会一团糟。

986
01:39:13,720 --> 01:39:15,720
 When I press and hold the button,

986
01:39:13,720 --> 01:39:15,720
当我按住按钮时，

987
01:39:15,720 --> 01:39:16,720
 it may change.

987
01:39:15,720 --> 01:39:16,720
它可能会改变。

988
01:39:16,720 --> 01:39:19,720
 It will not know where to cut.

988
01:39:16,720 --> 01:39:19,720
它不知道该切到哪里。

989
01:39:19,720 --> 01:39:21,720
 If you use half-code,

989
01:39:19,720 --> 01:39:21,720
如果您使用半代码，

990
01:39:21,720 --> 01:39:25,720
 it has a concept called uniquely decodable.

990
01:39:21,720 --> 01:39:25,720
它有一个称为唯一可解码的概念。

991
01:39:25,720 --> 01:39:30,720
 You have to use this method to cut it into symbols.

991
01:39:25,720 --> 01:39:30,720
你必须用这个方法把它切成符号。

992
01:39:30,720 --> 01:39:34,720
 So it must be using 00 and 10 to express the difference between 0 and 10.

992
01:39:30,720 --> 01:39:34,720
所以它一定是用00和10来表示0和10之间的差异。

993
01:39:34,720 --> 01:39:37,720
 This is the probability.

993
01:39:34,720 --> 01:39:37,720
这就是概率。

994
01:39:37,720 --> 01:39:40,720
 If it is not half-code,

994
01:39:37,720 --> 01:39:40,720
如果不是半码，

995
01:39:40,720 --> 01:39:43,720
 or if I use other codes to express it,

995
01:39:40,720 --> 01:39:43,720
或者如果我用其他代码来表达它，

996
01:39:43,720 --> 01:39:46,720
 it can cut it into shorter symbols.

996
01:39:43,720 --> 01:39:46,720
它可以将其切成更短的符号。

997
01:39:46,720 --> 01:39:51,720
 Half-mode pudding can actually be calculated as the shortest.

997
01:39:46,720 --> 01:39:51,720
半模布丁其实可以计算为最短的。

998
01:39:51,720 --> 01:39:55,720
 You mean it is the shortest.

998
01:39:51,720 --> 01:39:55,720
你的意思是它是最短的。

999
01:39:55,720 --> 01:39:57,720
 It is not shorter than it.

999
01:39:55,720 --> 01:39:57,720
它并不比它短。

1000
01:39:57,720 --> 01:39:58,720
 I understand. Thank you.

1000
01:39:57,720 --> 01:39:58,720
我明白。谢谢。

1001
01:39:58,720 --> 01:40:00,720
 This is the method.

1001
01:39:58,720 --> 01:40:00,720
这就是方法。

1002
01:40:00,720 --> 01:40:01,720
 OK.

1002
01:40:00,720 --> 01:40:01,720
好的。

1003
01:40:02,720 --> 01:40:05,720
 I want to ask about the official website.

1003
01:40:02,720 --> 01:40:05,720
我想问一下官方网站。

1004
01:40:05,720 --> 01:40:08,720
 I saw that you have a new project.

1004
01:40:05,720 --> 01:40:08,720
我看到你有一个新项目。

1005
01:40:08,720 --> 01:40:12,720
 But a student said that she is not doing it.

1005
01:40:08,720 --> 01:40:12,720
但一名学生表示，她并没有这样做。

1006
01:40:12,720 --> 01:40:15,720
 She wants to change to another project.

1006
01:40:12,720 --> 01:40:15,720
她想换一个项目。

1007
01:40:15,720 --> 01:40:17,720
 So you have one?

1007
01:40:15,720 --> 01:40:17,720
那么你有一个吗？

1008
01:40:17,720 --> 01:40:19,720
 I see that there is a problem with the system.

1008
01:40:17,720 --> 01:40:19,720
我发现系统有问题。

1009
01:40:19,720 --> 01:40:20,720
 There is one now.

1009
01:40:19,720 --> 01:40:20,720
现在有一个了。

1010
01:40:20,720 --> 01:40:22,720
 It is because a student has launched it.

1010
01:40:20,720 --> 01:40:22,720
这是因为有一个学生发起了它。

1011
01:40:22,720 --> 01:40:24,720
 I will show you the link later.

1011
01:40:22,720 --> 01:40:24,720
稍后我会向您展示链接。

1012
01:40:24,720 --> 01:40:26,720
 You can show me.

1012
01:40:24,720 --> 01:40:26,720
你可以给我看看。

1013
01:40:26,720 --> 01:40:27,720
 I have an account.

1013
01:40:26,720 --> 01:40:27,720
我有一个帐户。

1014
01:40:27,720 --> 01:40:28,720
 OK.

1014
01:40:27,720 --> 01:40:28,720
好的。

1015
01:40:28,720 --> 01:40:33,720
 I want to ask about this.

1015
01:40:28,720 --> 01:40:33,720
我想问一下这个问题。

1016
01:40:33,720 --> 01:40:37,720
 It should not be three people to express this.

1016
01:40:33,720 --> 01:40:37,720
这不应该是三个人来表达的。

1017
01:40:37,720 --> 01:40:38,720
 It is two people.

1017
01:40:37,720 --> 01:40:38,720
这是两个人。

1018
01:40:38,720 --> 01:40:42,720
 It means that N is smaller than M.

1018
01:40:38,720 --> 01:40:42,720
这意味着N小于M。

1019
01:40:42,720 --> 01:40:46,720
 But I saw that you wrote N is smaller than 0.33.

1019
01:40:42,720 --> 01:40:46,720
但我看到你写的N小于0.33。

1020
01:40:46,720 --> 01:40:48,720
 It is bigger than 0.

1020
01:40:46,720 --> 01:40:48,720
它大于 0。

1021
01:40:48,720 --> 01:40:50,720
 It should not be smaller than 0.27.

1021
01:40:48,720 --> 01:40:50,720
不应小于0.27。

1022
01:40:50,720 --> 01:40:52,720
 It should be smaller than half of this.

1022
01:40:50,720 --> 01:40:52,720
它应该小于这个的一半。

1023
01:40:52,720 --> 01:40:53,720
 OK.

1023
01:40:52,720 --> 01:40:53,720
好的。

1024
01:40:56,720 --> 01:41:05,720
 Because this A is not the ideal code.

1024
01:40:56,720 --> 01:41:05,720
因为这个A并不是理想的代码。

1025
01:41:05,720 --> 01:41:08,720
 It is designed by someone.

1025
01:41:05,720 --> 01:41:08,720
它是由某人设计的。

1026
01:41:08,720 --> 01:41:11,720
 It is the ideal code.

1026
01:41:08,720 --> 01:41:11,720
这是理想的代码。

1027
01:41:12,720 --> 01:41:18,720
 So this is only for the Pokemon code.

1027
01:41:12,720 --> 01:41:18,720
所以这仅适用于 Pokemon 代码。

1028
01:41:18,720 --> 01:41:23,720
 Only higher code will be smaller.

1028
01:41:18,720 --> 01:41:23,720
只有更高的代码才会更小。

1029
01:41:23,720 --> 01:41:24,720
 Yes.

1029
01:41:23,720 --> 01:41:24,720
是的。

1030
01:41:24,720 --> 01:41:33,720
 The other idea is that the code A is designed by someone.

1030
01:41:24,720 --> 01:41:33,720
另一种想法是代码A是由某人设计的。

1031
01:41:33,720 --> 01:41:38,720
 So it does not follow the code.

1031
01:41:33,720 --> 01:41:38,720
所以它不遵循代码。

1032
01:41:38,720 --> 01:41:47,720
 This is the code that is designed by someone.

1032
01:41:38,720 --> 01:41:47,720
这是某人设计的代码。

1033
01:41:47,720 --> 01:41:48,720
 Thank you.

1033
01:41:47,720 --> 01:41:48,720
谢谢。

1034
01:41:50,720 --> 01:41:54,720
 I want to ask if you can wear a calculator when you take the exam?

1034
01:41:50,720 --> 01:41:54,720
我想问一下考试的时候可以带计算器吗？

1035
01:41:54,720 --> 01:41:55,720
 What calculator?

1035
01:41:54,720 --> 01:41:55,720
什么计算器？

1036
01:41:55,720 --> 01:41:56,720
 When you take the exam.

1036
01:41:55,720 --> 01:41:56,720
当你参加考试的时候。

1037
01:41:56,720 --> 01:41:58,720
 What should I wear?

1037
01:41:56,720 --> 01:41:58,720
我应该穿什么？

1038
01:41:58,720 --> 01:41:59,720
 Calculator.

1038
01:41:58,720 --> 01:41:59,720
计算器。

1039
01:41:59,720 --> 01:42:02,720
 Calculator.

1039
01:41:59,720 --> 01:42:02,720
计算器。

1040
01:42:02,720 --> 01:42:03,720
 Calculator.

1040
01:42:02,720 --> 01:42:03,720
计算器。

1041
01:42:03,720 --> 01:42:10,720
 I just draw this when I take the exam.

1041
01:42:03,720 --> 01:42:10,720
我考试的时候就画了这个。

1042
01:42:10,720 --> 01:42:12,720
 Or I have to draw this?

1042
01:42:10,720 --> 01:42:12,720
还是我必须画这个？

1043
01:42:12,720 --> 01:42:18,720
 Generally, it is better to draw all the steps.

1043
01:42:12,720 --> 01:42:18,720
一般来说，最好把所有的步骤都画出来。

1044
01:42:18,720 --> 01:42:19,720
 Because it is like this.

1044
01:42:18,720 --> 01:42:19,720
因为事情就是这样的。

1045
01:42:19,720 --> 01:42:23,720
 Because it is like this when we change.

1045
01:42:19,720 --> 01:42:23,720
因为当我们改变的时候就是这样。

1046
01:42:23,720 --> 01:42:25,720
 We change it like this.

1046
01:42:23,720 --> 01:42:25,720
我们这样改。

1047
01:42:25,720 --> 01:42:28,720
 Because we have to change the words in a short time.

1047
01:42:25,720 --> 01:42:28,720
因为我们必须在短时间内改变文字。

1048
01:42:28,720 --> 01:42:30,720
 So we usually look at the answer.

1048
01:42:28,720 --> 01:42:30,720
所以我们通常都会看答案。

1049
01:42:30,720 --> 01:42:32,720
 If the answer is the same as the words,

1049
01:42:30,720 --> 01:42:32,720
如果答案与文字相同，

1050
01:42:32,720 --> 01:42:34,720
 we will not understand it.

1050
01:42:32,720 --> 01:42:34,720
我们不会理解它。

1051
01:42:34,720 --> 01:42:38,720
 Because it is not possible to say that the process is wrong and the answer is wrong.

1051
01:42:34,720 --> 01:42:38,720
因为不可能说过程错了，答案也错了。

1052
01:42:38,720 --> 01:42:44,720
 So if the answer is wrong, we look at the artist and give the artist a point.

1052
01:42:38,720 --> 01:42:44,720
因此，如果答案是错误的，我们会关注艺术家并给艺术家一分。

1053
01:42:44,720 --> 01:42:47,720
 The problem is that if the answer is wrong,

1053
01:42:44,720 --> 01:42:47,720
问题是如果答案错误的话

1054
01:42:47,720 --> 01:42:50,720
 I will look back when the answer is wrong.

1054
01:42:47,720 --> 01:42:50,720
当答案错误时我会回头看。

1055
01:42:50,720 --> 01:42:53,720
 If I find that there is no step,

1055
01:42:50,720 --> 01:42:53,720
如果我发现没有步骤，

1056
01:42:53,720 --> 01:42:54,720
 you just write this to me.

1056
01:42:53,720 --> 01:42:54,720
你就写这个给我吧。

1057
01:42:54,720 --> 01:42:56,720
 Then I will get a point.

1057
01:42:54,720 --> 01:42:56,720
然后我会得到一个点。

1058
01:42:57,720 --> 01:42:58,720
 Understand?

1058
01:42:57,720 --> 01:42:58,720
理解？

1059
01:42:59,720 --> 01:43:07,720
 Our code is calculated from the smallest probability.

1059
01:42:59,720 --> 01:43:07,720
我们的代码是根据最小概率计算的。

1060
01:43:07,720 --> 01:43:11,720
 I saw that there was a probability on the Internet.

1060
01:43:07,720 --> 01:43:11,720
我看到网上有一个概率。

1061
01:43:11,720 --> 01:43:14,720
 I think it is a big and small number.

1061
01:43:11,720 --> 01:43:14,720
我认为这是一个大数字和小数字。

1062
01:43:14,720 --> 01:43:17,720
 In fact, the code is fixed.

1062
01:43:14,720 --> 01:43:17,720
其实代码是固定的。

1063
01:43:17,720 --> 01:43:21,720
 Some people have different methods.

1063
01:43:17,720 --> 01:43:21,720
有些人有不同的方法。

1064
01:43:21,720 --> 01:43:23,720
 We use different methods.

1064
01:43:21,720 --> 01:43:23,720
我们使用不同的方法。

1065
01:43:23,720 --> 01:43:28,720
 Although I started to talk about how to generate this code.

1065
01:43:23,720 --> 01:43:28,720
虽然我开始讲的是如何生成这段代码。

1066
01:43:28,720 --> 01:43:31,720
 Some people use a slightly different method.

1066
01:43:28,720 --> 01:43:31,720
有些人使用稍微不同的方法。

1067
01:43:31,720 --> 01:43:35,720
 We use a standard method.

1067
01:43:31,720 --> 01:43:35,720
我们使用标准方法。

1068
01:43:35,720 --> 01:43:38,720
 The most common one.

1068
01:43:35,720 --> 01:43:38,720
最常见的一种。

1069
01:43:38,720 --> 01:43:40,720
 Because it is a most common method.

1069
01:43:38,720 --> 01:43:40,720
因为这是最常用的方法。

1070
01:43:40,720 --> 01:43:43,720
 So if you want to simplify it,

1070
01:43:40,720 --> 01:43:43,720
所以如果你想简化它，

1071
01:43:43,720 --> 01:43:46,720
 there are several methods that you can find.

1071
01:43:43,720 --> 01:43:46,720
您可以找到多种方法。

1072
01:43:46,720 --> 01:43:49,720
 Although it may not be the fastest,

1072
01:43:46,720 --> 01:43:49,720
虽然它可能不是最快的，

1073
01:43:49,720 --> 01:43:51,720
 it is the most standard.

1073
01:43:49,720 --> 01:43:51,720
这是最标准的。

1074
01:43:52,720 --> 01:43:54,720
 I think we should follow this method.

1074
01:43:52,720 --> 01:43:54,720
我认为我们应该遵循这个方法。

1075
01:43:54,720 --> 01:43:56,720
 I suggest you use this method.

1075
01:43:54,720 --> 01:43:56,720
我建议你使用这个方法。

1076
01:43:56,720 --> 01:43:59,720
 Because the time difference is not too big.

1076
01:43:56,720 --> 01:43:59,720
因为时差不是太大。

1077
01:44:22,720 --> 01:44:24,720
 So it is 4 plus 4.

1077
01:44:22,720 --> 01:44:24,720
所以是4加4。

1078
01:44:24,720 --> 01:44:26,720
 That is why it is big here.

1078
01:44:24,720 --> 01:44:26,720
这就是为什么这里很大。

1079
01:44:26,720 --> 01:44:29,720
 But most of the questions are given in the following.

1079
01:44:26,720 --> 01:44:29,720
但大多数问题都在下面给出。

1080
01:44:29,720 --> 01:44:35,720
 Therefore, the examples given in the exercises are the more common ones.

1080
01:44:29,720 --> 01:44:35,720
因此，练习中给出的例子是比较常见的。

1081
01:44:35,720 --> 01:44:37,720
 This is just an example.

1081
01:44:35,720 --> 01:44:37,720
这只是一个例子。

1082
01:44:37,720 --> 01:44:40,720
 This example is by occurrence.

1082
01:44:37,720 --> 01:44:40,720
这个例子是偶然发生的。

1083
01:44:40,720 --> 01:44:44,720
 But most of the time it is given in the following.

1083
01:44:40,720 --> 01:44:44,720
但大多数情况下是在下面给出的。

1084
01:44:44,720 --> 01:44:46,720
 Then we will talk about the step.

1084
01:44:44,720 --> 01:44:46,720
然后我们再讲一下步骤。

1085
01:46:22,720 --> 01:46:24,720
 This is the step.

1085
01:46:22,720 --> 01:46:24,720
这就是步骤。

1086
01:46:24,720 --> 01:46:26,720
 This is the step.

1086
01:46:24,720 --> 01:46:26,720
这就是步骤。

1087
01:46:26,720 --> 01:46:28,720
 This is the step.

1087
01:46:26,720 --> 01:46:28,720
这就是步骤。

1088
01:46:28,720 --> 01:46:30,720
 This is the step.

1088
01:46:28,720 --> 01:46:30,720
这就是步骤。

1089
01:46:30,720 --> 01:46:32,720
 This is the step.

1089
01:46:30,720 --> 01:46:32,720
这就是步骤。

1090
01:46:32,720 --> 01:46:34,720
 This is the step.

1090
01:46:32,720 --> 01:46:34,720
这就是步骤。

1091
01:46:34,720 --> 01:46:36,720
 This is the step.

1091
01:46:34,720 --> 01:46:36,720
这就是步骤。

1092
01:46:36,720 --> 01:46:38,720
 This is the step.

1092
01:46:36,720 --> 01:46:38,720
这就是步骤。

1093
01:46:38,720 --> 01:46:40,720
 This is the step.

1093
01:46:38,720 --> 01:46:40,720
这就是步骤。

1094
01:46:40,720 --> 01:46:42,720
 This is the step.

1094
01:46:40,720 --> 01:46:42,720
这就是步骤。

1095
01:46:42,720 --> 01:46:44,720
 This is the step.

1095
01:46:42,720 --> 01:46:44,720
这就是步骤。

1096
01:46:44,720 --> 01:46:46,720
 This is the step.

1096
01:46:44,720 --> 01:46:46,720
这就是步骤。

1097
01:46:46,720 --> 01:46:48,720
 This is the step.

1097
01:46:46,720 --> 01:46:48,720
这就是步骤。

1098
01:46:49,720 --> 01:46:51,720
 This is the step.

1098
01:46:49,720 --> 01:46:51,720
这就是步骤。

1099
01:46:51,720 --> 01:46:53,720
 This is the step.

1099
01:46:51,720 --> 01:46:53,720
这就是步骤。

1100
01:46:53,720 --> 01:46:55,720
 This is the step.

1100
01:46:53,720 --> 01:46:55,720
这就是步骤。

1101
01:46:55,720 --> 01:46:57,720
 This is the step.

1101
01:46:55,720 --> 01:46:57,720
这就是步骤。

1102
01:46:57,720 --> 01:46:59,720
 This is the step.

1102
01:46:57,720 --> 01:46:59,720
这就是步骤。

1103
01:46:59,720 --> 01:47:01,720
 This is the step.

1103
01:46:59,720 --> 01:47:01,720
这就是步骤。

1104
01:47:01,720 --> 01:47:03,720
 This is the step.

1104
01:47:01,720 --> 01:47:03,720
这就是步骤。

1105
01:47:03,720 --> 01:47:05,720
 This is the step.

1105
01:47:03,720 --> 01:47:05,720
这就是步骤。

1106
01:47:05,720 --> 01:47:07,720
 This is the step.

1106
01:47:05,720 --> 01:47:07,720
这就是步骤。

1107
01:47:07,720 --> 01:47:09,720
 This is the step.

1107
01:47:07,720 --> 01:47:09,720
这就是步骤。

1108
01:47:09,720 --> 01:47:11,720
 This is the step.

1108
01:47:09,720 --> 01:47:11,720
这就是步骤。

1109
01:47:11,720 --> 01:47:13,720
 This is the step.

1109
01:47:11,720 --> 01:47:13,720
这就是步骤。

1110
01:47:13,720 --> 01:47:15,720
 This is the step.

1110
01:47:13,720 --> 01:47:15,720
这就是步骤。

1111
01:47:15,720 --> 01:47:17,720
 This is the step.

1111
01:47:15,720 --> 01:47:17,720
这就是步骤。

1112
01:47:17,720 --> 01:47:19,720
 This is the step.

1112
01:47:17,720 --> 01:47:19,720
这就是步骤。

1113
01:47:19,720 --> 01:47:21,720
 This is the step.

1113
01:47:19,720 --> 01:47:21,720
这就是步骤。

1114
01:47:21,720 --> 01:47:23,720
 This is the step.

1114
01:47:21,720 --> 01:47:23,720
这就是步骤。

1115
01:47:23,720 --> 01:47:25,720
 This is the step.

1115
01:47:23,720 --> 01:47:25,720
这就是步骤。

1116
01:47:25,720 --> 01:47:27,720
 This is the step.

1116
01:47:25,720 --> 01:47:27,720
这就是步骤。

1117
01:47:27,720 --> 01:47:29,720
 This is the step.

1117
01:47:27,720 --> 01:47:29,720
这就是步骤。

1118
01:47:29,720 --> 01:47:31,720
 This is the step.

1118
01:47:29,720 --> 01:47:31,720
这就是步骤。

1119
01:47:31,720 --> 01:47:33,720
 This is the step.

1119
01:47:31,720 --> 01:47:33,720
这就是步骤。

1120
01:47:33,720 --> 01:47:35,720
 This is the step.

1120
01:47:33,720 --> 01:47:35,720
这就是步骤。

1121
01:47:35,720 --> 01:47:37,720
 This is the step.

1121
01:47:35,720 --> 01:47:37,720
这就是步骤。

1122
01:47:37,720 --> 01:47:39,720
 This is the step.

1122
01:47:37,720 --> 01:47:39,720
这就是步骤。

1123
01:47:39,720 --> 01:47:41,720
 This is the step.

1123
01:47:39,720 --> 01:47:41,720
这就是步骤。

1124
01:47:41,720 --> 01:47:43,720
 This is the step.

1124
01:47:41,720 --> 01:47:43,720
这就是步骤。

1125
01:47:43,720 --> 01:47:45,720
 This is the step.

1125
01:47:43,720 --> 01:47:45,720
这就是步骤。

1126
01:47:45,720 --> 01:47:47,720
 This is the step.

1126
01:47:45,720 --> 01:47:47,720
这就是步骤。

1127
01:47:47,720 --> 01:47:49,720
 This is the step.

1127
01:47:47,720 --> 01:47:49,720
这就是步骤。

1128
01:47:49,720 --> 01:47:51,720
 This is the step.

1128
01:47:49,720 --> 01:47:51,720
这就是步骤。

1129
01:47:51,720 --> 01:47:53,720
 This is the step.

1129
01:47:51,720 --> 01:47:53,720
这就是步骤。

1130
01:47:53,720 --> 01:47:55,720
 This is the step.

1130
01:47:53,720 --> 01:47:55,720
这就是步骤。

1131
01:47:55,720 --> 01:47:57,720
 This is the step.

1131
01:47:55,720 --> 01:47:57,720
这就是步骤。

1132
01:47:57,720 --> 01:47:59,720
 This is the step.

1132
01:47:57,720 --> 01:47:59,720
这就是步骤。

1133
01:47:59,720 --> 01:48:01,720
 This is the step.

1133
01:47:59,720 --> 01:48:01,720
这就是步骤。

1134
01:48:01,720 --> 01:48:03,720
 This is the step.

1134
01:48:01,720 --> 01:48:03,720
这就是步骤。

1135
01:48:03,720 --> 01:48:05,720
 This is the step.

1135
01:48:03,720 --> 01:48:05,720
这就是步骤。

1136
01:48:05,720 --> 01:48:07,720
 This is the step.

1136
01:48:05,720 --> 01:48:07,720
这就是步骤。

1137
01:48:07,720 --> 01:48:09,720
 This is the step.

1137
01:48:07,720 --> 01:48:09,720
这就是步骤。

1138
01:48:09,720 --> 01:48:11,720
 This is the step.

1138
01:48:09,720 --> 01:48:11,720
这就是步骤。

1139
01:48:11,720 --> 01:48:13,720
 This is the step.

1139
01:48:11,720 --> 01:48:13,720
这就是步骤。

1140
01:48:13,720 --> 01:48:15,720
 This is the step.

1140
01:48:13,720 --> 01:48:15,720
这就是步骤。

1141
01:48:15,720 --> 01:48:17,720
 This is the step.

1141
01:48:15,720 --> 01:48:17,720
这就是步骤。

1142
01:48:17,720 --> 01:48:19,720
 This is the step.

1142
01:48:17,720 --> 01:48:19,720
这就是步骤。

1143
01:48:19,720 --> 01:48:21,720
 This is the step.

1143
01:48:19,720 --> 01:48:21,720
这就是步骤。

1144
01:48:21,720 --> 01:48:23,720
 This is the step.

1144
01:48:21,720 --> 01:48:23,720
这就是步骤。

1145
01:48:23,720 --> 01:48:25,720
 This is the step.

1145
01:48:23,720 --> 01:48:25,720
这就是步骤。

1146
01:48:25,720 --> 01:48:27,720
 This is the step.

1146
01:48:25,720 --> 01:48:27,720
这就是步骤。

1147
01:48:27,720 --> 01:48:29,720
 This is the step.

1147
01:48:27,720 --> 01:48:29,720
这就是步骤。

1148
01:48:29,720 --> 01:48:31,720
 This is the step.

1148
01:48:29,720 --> 01:48:31,720
这就是步骤。

1149
01:48:31,720 --> 01:48:33,720
 This is the step.

1149
01:48:31,720 --> 01:48:33,720
这就是步骤。

1150
01:48:33,720 --> 01:48:35,720
 This is the step.

1150
01:48:33,720 --> 01:48:35,720
这就是步骤。

1151
01:48:35,720 --> 01:48:37,720
 This is the step.

1151
01:48:35,720 --> 01:48:37,720
这就是步骤。

1152
01:48:37,720 --> 01:48:39,720
 This is the step.

1152
01:48:37,720 --> 01:48:39,720
这就是步骤。

1153
01:48:39,720 --> 01:48:41,720
 This is the step.

1153
01:48:39,720 --> 01:48:41,720
这就是步骤。

1154
01:48:41,720 --> 01:48:43,720
 This is the step.

1154
01:48:41,720 --> 01:48:43,720
这就是步骤。

1155
01:48:43,720 --> 01:48:45,720
 This is the step.

1155
01:48:43,720 --> 01:48:45,720
这就是步骤。

1156
01:48:45,720 --> 01:48:47,720
 This is the step.

1156
01:48:45,720 --> 01:48:47,720
这就是步骤。

1157
01:48:47,720 --> 01:48:49,720
 This is the step.

1157
01:48:47,720 --> 01:48:49,720
这就是步骤。

1158
01:48:49,720 --> 01:48:51,720
 This is the step.

1158
01:48:49,720 --> 01:48:51,720
这就是步骤。

1159
01:48:51,720 --> 01:48:53,720
 This is the step.

1159
01:48:51,720 --> 01:48:53,720
这就是步骤。

1160
01:48:53,720 --> 01:48:55,720
 This is the step.

1160
01:48:53,720 --> 01:48:55,720
这就是步骤。

1161
01:48:55,720 --> 01:48:57,720
 This is the step.

1161
01:48:55,720 --> 01:48:57,720
这就是步骤。

1162
01:48:57,720 --> 01:48:59,720
 This is the step.

1162
01:48:57,720 --> 01:48:59,720
这就是步骤。

1163
01:48:59,720 --> 01:49:01,720
 This is the step.

1163
01:48:59,720 --> 01:49:01,720
这就是步骤。

1164
01:49:01,720 --> 01:49:03,720
 This is the step.

1164
01:49:01,720 --> 01:49:03,720
这就是步骤。

1165
01:49:03,720 --> 01:49:05,720
 This is the step.

1165
01:49:03,720 --> 01:49:05,720
这就是步骤。

1166
01:49:05,720 --> 01:49:07,720
 This is the step.

1166
01:49:05,720 --> 01:49:07,720
这就是步骤。

1167
01:49:07,720 --> 01:49:09,720
 This is the step.

1167
01:49:07,720 --> 01:49:09,720
这就是步骤。

1168
01:49:09,720 --> 01:49:11,720
 This is the step.

1168
01:49:09,720 --> 01:49:11,720
这就是步骤。

1169
01:49:11,720 --> 01:49:13,720
 This is the step.

1169
01:49:11,720 --> 01:49:13,720
这就是步骤。

1170
01:49:13,720 --> 01:49:15,720
 This is the step.

1170
01:49:13,720 --> 01:49:15,720
这就是步骤。

1171
01:49:15,720 --> 01:49:17,720
 This is the step.

1171
01:49:15,720 --> 01:49:17,720
这就是步骤。

1172
01:49:17,720 --> 01:49:19,720
 This is the step.

1172
01:49:17,720 --> 01:49:19,720
这就是步骤。

1173
01:49:19,720 --> 01:49:21,720
 This is the step.

1173
01:49:19,720 --> 01:49:21,720
这就是步骤。

1174
01:49:21,720 --> 01:49:23,720
 This is the step.

1174
01:49:21,720 --> 01:49:23,720
这就是步骤。

1175
01:49:23,720 --> 01:49:25,720
 This is the step.

1175
01:49:23,720 --> 01:49:25,720
这就是步骤。

1176
01:49:25,720 --> 01:49:27,720
 This is the step.

1176
01:49:25,720 --> 01:49:27,720
这就是步骤。

1177
01:49:27,720 --> 01:49:29,720
 This is the step.

1177
01:49:27,720 --> 01:49:29,720
这就是步骤。

1178
01:49:29,720 --> 01:49:31,720
 This is the step.

1178
01:49:29,720 --> 01:49:31,720
这就是步骤。

1179
01:49:31,720 --> 01:49:33,720
 This is the step.

1179
01:49:31,720 --> 01:49:33,720
这就是步骤。

1180
01:49:33,720 --> 01:49:35,720
 This is the step.

1180
01:49:33,720 --> 01:49:35,720
这就是步骤。

1181
01:49:35,720 --> 01:49:37,720
 This is the step.

1181
01:49:35,720 --> 01:49:37,720
这就是步骤。

1182
01:49:37,720 --> 01:49:41,720
 If I draw the numbers and know that they are related,

1182
01:49:37,720 --> 01:49:41,720
如果我画出数字并知道它们是相关的，

1183
01:49:41,720 --> 01:49:45,720
 then in this case, I need to consider the size of M0.15.

1183
01:49:41,720 --> 01:49:45,720
那么在这种情况下，我需要考虑M0.15的尺寸。

1184
01:49:45,720 --> 01:49:47,720
 Or this situation will not appear?

1184
01:49:45,720 --> 01:49:47,720
或者说这种情况不会出现？

1185
01:49:49,720 --> 01:49:51,720
 If I understand your question,

1185
01:49:49,720 --> 01:49:51,720
如果我理解你的问题

1186
01:49:51,720 --> 01:50:05,060
 you mean if the

1186
01:49:51,720 --> 01:50:05,060
你的意思是如果

1187
01:50:05,060 --> 01:50:07,060
 If the

1187
01:50:05,060 --> 01:50:07,060
如果

1188
01:50:07,060 --> 01:50:09,060
 The question just now

1188
01:50:07,060 --> 01:50:09,060
刚才的问题

1189
01:50:09,060 --> 01:50:11,060
 is not the one that provides the number 1111.

1189
01:50:09,060 --> 01:50:11,060
不是提供号码 1111 的人。

1190
01:50:11,060 --> 01:50:13,060
 The reason is that

1190
01:50:11,060 --> 01:50:13,060
原因是

1191
01:50:13,060 --> 01:50:15,060
 if I cross a number of steps,

1191
01:50:13,060 --> 01:50:15,060
如果我跨过许多台阶，

1192
01:50:15,060 --> 01:50:17,060
 I will get the number of steps.

1192
01:50:15,060 --> 01:50:17,060
我会得到步数。

1193
01:50:17,060 --> 01:50:19,060
 Do you know that question?

1193
01:50:17,060 --> 01:50:19,060
你知道这个问题吗？

1194
01:50:19,060 --> 01:50:21,060
 Generally speaking,

1194
01:50:19,060 --> 01:50:21,060
一般来说，

1195
01:50:21,060 --> 01:50:23,060
 we can do it in one direction.

1195
01:50:21,060 --> 01:50:23,060
我们可以朝一个方向去做。

1196
01:50:23,060 --> 01:50:25,060
 I know.

1196
01:50:23,060 --> 01:50:25,060
我知道。

1197
01:50:25,060 --> 01:50:27,060
 I don't think it will appear in the question.

1197
01:50:25,060 --> 01:50:27,060
我认为它不会出现在问题中。

1198
01:50:27,060 --> 01:50:29,060
 Generally speaking,

1198
01:50:27,060 --> 01:50:29,060
一般来说，

1199
01:50:29,060 --> 01:50:31,060
 it will not appear.

1199
01:50:29,060 --> 01:50:31,060
它不会出现。

1200
01:50:31,060 --> 01:50:33,060
 I heard that student said

1200
01:50:31,060 --> 01:50:33,060
我听那位同学说

1201
01:50:33,060 --> 01:50:35,060
 that it is reasonable.

1201
01:50:33,060 --> 01:50:35,060
这是合理的。

1202
01:50:35,060 --> 01:50:37,060
 I am sorry.

1202
01:50:35,060 --> 01:50:37,060
对不起。

1203
01:51:03,060 --> 01:51:31,060
 Okay.

1203
01:51:03,060 --> 01:51:31,060
好的。

1204
01:51:31,060 --> 01:51:33,060
 Welcome back.

1204
01:51:31,060 --> 01:51:33,060
欢迎回来。

1205
01:51:33,060 --> 01:51:35,060
 Let's continue on with the

1205
01:51:33,060 --> 01:51:35,060
让我们继续

1206
01:51:35,060 --> 01:51:37,060
 image or video compression basics.

1206
01:51:35,060 --> 01:51:37,060
图像或视频压缩基础知识。

1207
01:51:37,060 --> 01:51:39,060
 Why do we want to perform

1207
01:51:37,060 --> 01:51:39,060
我们为什么要表演

1208
01:51:39,060 --> 01:51:41,060
 image or video compression?

1208
01:51:39,060 --> 01:51:41,060
图像或视频压缩？

1209
01:51:41,060 --> 01:51:43,060
 Earlier on, I already mentioned

1209
01:51:41,060 --> 01:51:43,060
前面我已经提到过

1210
01:51:43,060 --> 01:51:45,060
 for media types such as

1210
01:51:43,060 --> 01:51:45,060
对于媒体类型，例如

1211
01:51:45,060 --> 01:51:47,060
 image and video,

1211
01:51:45,060 --> 01:51:47,060
图像和视频，

1212
01:51:47,060 --> 01:51:49,060
 the data storage requirement is very large.

1212
01:51:47,060 --> 01:51:49,060
数据存储需求非常大。

1213
01:51:49,060 --> 01:51:51,060
 If you do not compress it,

1213
01:51:49,060 --> 01:51:51,060
如果不压缩的话

1214
01:51:51,060 --> 01:51:53,060
 then it is very hard for us

1214
01:51:51,060 --> 01:51:53,060
那么我们就很难了

1215
01:51:53,060 --> 01:51:55,060
 to either store or transmit it.

1215
01:51:53,060 --> 01:51:55,060
存储或传输它。

1216
01:51:55,060 --> 01:51:57,060
 That is the key motivation.

1216
01:51:55,060 --> 01:51:57,060
这是关键动机。

1217
01:51:57,060 --> 01:51:59,060
 Why do we want to do that?

1217
01:51:57,060 --> 01:51:59,060
我们为什么要这么做？

1218
01:51:59,060 --> 01:52:01,060
 That is the key motivation.

1218
01:51:59,060 --> 01:52:01,060
这是关键动机。

1219
01:52:01,060 --> 01:52:03,060
 Why do we want to perform the compression?

1219
01:52:01,060 --> 01:52:03,060
为什么我们要进行压缩？

1220
01:52:03,060 --> 01:52:05,060
 You can see that

1220
01:52:03,060 --> 01:52:05,060
你可以看到

1221
01:52:05,060 --> 01:52:07,060
 image and video compression is necessary

1221
01:52:05,060 --> 01:52:07,060
图像和视频压缩是必要的

1222
01:52:07,060 --> 01:52:09,060
 for two reasons.

1222
01:52:07,060 --> 01:52:09,060
有两个原因。

1223
01:52:09,060 --> 01:52:11,060
 One is to reduce the storage requirement.

1223
01:52:09,060 --> 01:52:11,060
一是减少存储需求。

1224
01:52:11,060 --> 01:52:13,060
 The other is that if you want to

1224
01:52:11,060 --> 01:52:13,060
另一个是如果你想

1225
01:52:13,060 --> 01:52:15,060
 transmit over the network,

1225
01:52:13,060 --> 01:52:15,060
通过网络传输，

1226
01:52:15,060 --> 01:52:17,060
 then you can reduce the bitrate

1226
01:52:15,060 --> 01:52:17,060
那么你可以降低比特率

1227
01:52:17,060 --> 01:52:19,060
 or the bandwidth requirement.

1227
01:52:17,060 --> 01:52:19,060
或带宽要求。

1228
01:52:19,060 --> 01:52:21,060
 The next question is that

1228
01:52:19,060 --> 01:52:21,060
下一个问题是

1229
01:52:21,060 --> 01:52:23,060
 we know that there is a motivation

1229
01:52:21,060 --> 01:52:23,060
我们知道有一个动机

1230
01:52:23,060 --> 01:52:25,060
 why we need to perform the compression.

1230
01:52:23,060 --> 01:52:25,060
为什么我们需要执行压缩。

1231
01:52:25,060 --> 01:52:27,060
 But what is so special

1231
01:52:25,060 --> 01:52:27,060
但有什么特别的

1232
01:52:27,060 --> 01:52:29,060
 about this media type

1232
01:52:27,060 --> 01:52:29,060
关于此媒体类型

1233
01:52:29,060 --> 01:52:31,060
 that allows us to perform the compression?

1233
01:52:29,060 --> 01:52:31,060
这允许我们执行压缩？

1234
01:52:31,060 --> 01:52:33,060
 The next question is

1234
01:52:31,060 --> 01:52:33,060
下一个问题是

1235
01:52:33,060 --> 01:52:35,060
 why is it possible to perform the compression?

1235
01:52:33,060 --> 01:52:35,060
为什么可以执行压缩？

1236
01:52:35,060 --> 01:52:37,060
 The reason why

1236
01:52:35,060 --> 01:52:37,060
原因是

1237
01:52:37,060 --> 01:52:39,060
 for image and video

1237
01:52:37,060 --> 01:52:39,060
用于图像和视频

1238
01:52:39,060 --> 01:52:41,060
 it is possible for us to compress it

1238
01:52:39,060 --> 01:52:41,060
我们可以压缩它

1239
01:52:41,060 --> 01:52:43,060
 is because it contains some redundancy.

1239
01:52:41,060 --> 01:52:43,060
是因为它包含一些冗余。

1240
01:52:43,060 --> 01:52:45,060
 What is the meaning of

1240
01:52:43,060 --> 01:52:45,060
是什么意思

1241
01:52:45,060 --> 01:52:47,060
 this word redundancy?

1241
01:52:45,060 --> 01:52:47,060
这个词冗余？

1242
01:52:47,060 --> 01:52:49,060
 This word redundancy

1242
01:52:47,060 --> 01:52:49,060
这个词冗余

1243
01:52:49,060 --> 01:52:51,060
 means that it is the extra

1243
01:52:49,060 --> 01:52:51,060
意味着这是额外的

1244
01:52:51,060 --> 01:52:53,060
 unnecessary information

1244
01:52:51,060 --> 01:52:53,060
不必要的信息

1245
01:52:53,060 --> 01:52:55,060
 that is captured in the

1245
01:52:53,060 --> 01:52:55,060
被捕获在

1246
01:52:55,060 --> 01:52:57,060
 image and video domain.

1246
01:52:55,060 --> 01:52:57,060
图像和视频域。

1247
01:52:57,060 --> 01:52:59,060
 There are two types of redundancy

1247
01:52:57,060 --> 01:52:59,060
冗余有两种类型

1248
01:52:59,060 --> 01:53:01,060
 in terms of image and video.

1248
01:52:59,060 --> 01:53:01,060
在图像和视频方面。

1249
01:53:01,060 --> 01:53:03,060
 The first one is known as

1249
01:53:01,060 --> 01:53:03,060
第一个被称为

1250
01:53:03,060 --> 01:53:05,060
 the statistical redundancy.

1250
01:53:03,060 --> 01:53:05,060
统计冗余。

1251
01:53:05,060 --> 01:53:07,060
 It is the extra unnecessary

1251
01:53:05,060 --> 01:53:07,060
这是多余的不必要的

1252
01:53:07,060 --> 01:53:09,060
 information from the

1252
01:53:07,060 --> 01:53:09,060
信息来自

1253
01:53:09,060 --> 01:53:11,060
 statistical viewpoint.

1253
01:53:09,060 --> 01:53:11,060
统计观点。

1254
01:53:11,060 --> 01:53:13,060
 The first type is the spatial redundancy.

1254
01:53:11,060 --> 01:53:13,060
第一类是空间冗余。

1255
01:53:13,060 --> 01:53:15,060
 This word spatial,

1255
01:53:13,060 --> 01:53:15,060
空间这个词，

1256
01:53:15,060 --> 01:53:17,060
 what is the word spatial?

1256
01:53:15,060 --> 01:53:17,060
空间这个词是什么？

1257
01:53:17,060 --> 01:53:19,060
 Spatial means it is a space-based redundancy.

1257
01:53:17,060 --> 01:53:19,060
空间意味着它是基于空间的冗余。

1258
01:53:19,060 --> 01:53:21,060
 Space-based redundancy

1258
01:53:19,060 --> 01:53:21,060
天基冗余

1259
01:53:21,060 --> 01:53:23,060
 means that it is a redundancy

1259
01:53:21,060 --> 01:53:23,060
意味着这是一个冗余

1260
01:53:23,060 --> 01:53:25,060
 that exists in an image.

1260
01:53:23,060 --> 01:53:25,060
存在于图像中。

1261
01:53:25,060 --> 01:53:27,060
 Anyway, this slide will just give

1261
01:53:25,060 --> 01:53:27,060
无论如何，这张幻灯片只会给出

1262
01:53:27,060 --> 01:53:29,060
 a quick overview.

1262
01:53:27,060 --> 01:53:29,060
快速概述。

1263
01:53:29,060 --> 01:53:31,060
 Afterwards, for the next few slides, we are going to

1263
01:53:29,060 --> 01:53:31,060
之后，在接下来的几张幻灯片中，我们将

1264
01:53:31,060 --> 01:53:33,060
 explain a little bit more

1264
01:53:31,060 --> 01:53:33,060
多解释一下

1265
01:53:33,060 --> 01:53:35,060
 in detail. Therefore,

1265
01:53:33,060 --> 01:53:35,060
详细。所以，

1266
01:53:35,060 --> 01:53:37,060
 spatial redundancy refers to

1266
01:53:35,060 --> 01:53:37,060
空间冗余是指

1267
01:53:37,060 --> 01:53:39,060
 the redundancy that exists in a

1267
01:53:37,060 --> 01:53:39,060
存在的冗余

1268
01:53:39,060 --> 01:53:41,060
 single image or single

1268
01:53:39,060 --> 01:53:41,060
单幅图像或单幅图像

1269
01:53:41,060 --> 01:53:43,060
 frame.

1269
01:53:41,060 --> 01:53:43,060
框架。

1270
01:53:43,060 --> 01:53:45,060
 The next word is the temporal redundancy.

1270
01:53:43,060 --> 01:53:45,060
下一个词是时间冗余。

1271
01:53:45,060 --> 01:53:47,060
 Temporal come from

1271
01:53:45,060 --> 01:53:47,060
时间来自

1272
01:53:47,060 --> 01:53:49,060
 the base term time.

1272
01:53:47,060 --> 01:53:49,060
基本术语时间。

1273
01:53:49,060 --> 01:53:51,060
 It is a time-based redundancy.

1273
01:53:49,060 --> 01:53:51,060
这是基于时间的冗余。

1274
01:53:51,060 --> 01:53:53,060
 When you think about time-based redundancy,

1274
01:53:51,060 --> 01:53:53,060
当您考虑基于时间的冗余时，

1275
01:53:53,060 --> 01:53:55,060
 what comes to your mind right away are

1275
01:53:53,060 --> 01:53:55,060
你立刻想到的是

1276
01:53:55,060 --> 01:53:57,060
 things like audio or

1276
01:53:55,060 --> 01:53:57,060
诸如音频或

1277
01:53:57,060 --> 01:53:59,060
 video. For video,

1277
01:53:57,060 --> 01:53:59,060
视频。对于视频，

1278
01:53:59,060 --> 01:54:01,060
 it is nothing but a sequence of frames.

1278
01:53:59,060 --> 01:54:01,060
它只不过是一系列帧。

1279
01:54:01,060 --> 01:54:03,060
 Across

1279
01:54:01,060 --> 01:54:03,060
穿过

1280
01:54:03,060 --> 01:54:05,060
 two different frames, usually because

1280
01:54:03,060 --> 01:54:05,060
两个不同的框架，通常是因为

1281
01:54:05,060 --> 01:54:07,060
 for the motion to appear to be

1281
01:54:05,060 --> 01:54:07,060
该动议看起来是

1282
01:54:07,060 --> 01:54:09,060
 smooth, each frame must be

1282
01:54:07,060 --> 01:54:09,060
平滑，每一帧都必须

1283
01:54:09,060 --> 01:54:11,060
 very similar to the next frame.

1283
01:54:09,060 --> 01:54:11,060
与下一帧非常相似。

1284
01:54:11,060 --> 01:54:13,060
 What it means is that the movement

1284
01:54:11,060 --> 01:54:13,060
这意味着运动

1285
01:54:13,060 --> 01:54:15,060
 of, for example, an object in one

1285
01:54:13,060 --> 01:54:15,060
例如，一个物体中的一个

1286
01:54:15,060 --> 01:54:17,060
 frame and the next frame, they are very

1286
01:54:15,060 --> 01:54:17,060
帧和下一帧，它们非常

1287
01:54:17,060 --> 01:54:19,060
 similar. If these two

1287
01:54:17,060 --> 01:54:19,060
相似的。如果这两个

1288
01:54:19,060 --> 01:54:21,060
 frames are very similar, that means there are lots of

1288
01:54:19,060 --> 01:54:21,060
框架非常相似，这意味着有很多

1289
01:54:21,060 --> 01:54:23,060
 extra,

1289
01:54:21,060 --> 01:54:23,060
额外的，

1290
01:54:23,060 --> 01:54:25,060
 they are very similar, that means there are lots of

1290
01:54:23,060 --> 01:54:25,060
它们非常相似，这意味着有很多

1291
01:54:25,060 --> 01:54:27,060
 extra unnecessary information

1291
01:54:25,060 --> 01:54:27,060
额外的不必要的信息

1292
01:54:27,060 --> 01:54:29,060
 that exists across a frame.

1292
01:54:27,060 --> 01:54:29,060
跨框架存在的。

1293
01:54:29,060 --> 01:54:31,060
 And across a frame, because

1293
01:54:29,060 --> 01:54:31,060
跨过一个框架，因为

1294
01:54:31,060 --> 01:54:33,060
 this frame is in the

1294
01:54:31,060 --> 01:54:33,060
该帧位于

1295
01:54:33,060 --> 01:54:35,060
 time axis, so that's why

1295
01:54:33,060 --> 01:54:35,060
时间轴，所以这就是为什么

1296
01:54:35,060 --> 01:54:37,060
 it's also known as a temporal

1296
01:54:35,060 --> 01:54:37,060
它也被称为时间

1297
01:54:37,060 --> 01:54:39,060
 redundancy. So,

1297
01:54:37,060 --> 01:54:39,060
冗余。所以，

1298
01:54:39,060 --> 01:54:41,060
 this is the redundancy that exists in

1298
01:54:39,060 --> 01:54:41,060
这就是存在的冗余

1299
01:54:41,060 --> 01:54:43,060
 the video. Okay, the next

1299
01:54:41,060 --> 01:54:43,060
视频。好的，下一个

1300
01:54:43,060 --> 01:54:45,060
 one is the coding redundancy.

1300
01:54:43,060 --> 01:54:45,060
一是编码冗余。

1301
01:54:45,060 --> 01:54:47,060
 Coding redundancy is the extra

1301
01:54:45,060 --> 01:54:47,060
编码冗余是额外的

1302
01:54:47,060 --> 01:54:49,060
 unnecessary information that exists

1302
01:54:47,060 --> 01:54:49,060
存在不必要的信息

1303
01:54:49,060 --> 01:54:51,060
 in terms of how you

1303
01:54:49,060 --> 01:54:51,060
就你如何

1304
01:54:51,060 --> 01:54:53,060
 represent the information. Like, for

1304
01:54:51,060 --> 01:54:53,060
代表信息。喜欢，为了

1305
01:54:53,060 --> 01:54:55,060
 example, early on we compare

1305
01:54:53,060 --> 01:54:55,060
例如，一开始我们比较

1306
01:54:55,060 --> 01:54:57,060
 uncompressed versus

1306
01:54:55,060 --> 01:54:57,060
未压缩与

1307
01:54:57,060 --> 01:54:59,060
 Huffman coding. So, it's the types of

1307
01:54:57,060 --> 01:54:59,060
霍夫曼编码。所以，它的类型是

1308
01:54:59,060 --> 01:55:01,060
 coding redundancy.

1308
01:54:59,060 --> 01:55:01,060
编码冗余。

1309
01:55:01,060 --> 01:55:03,060
 If you don't perform things like Huffman

1309
01:55:01,060 --> 01:55:03,060
如果你不执行像霍夫曼那样的事情

1310
01:55:03,060 --> 01:55:05,060
 coding. So, the next types

1310
01:55:03,060 --> 01:55:05,060
编码。所以，接下来的类型

1311
01:55:05,060 --> 01:55:07,060
 of redundancy that we have is called

1311
01:55:05,060 --> 01:55:07,060
我们拥有的冗余称为

1312
01:55:07,060 --> 01:55:09,060
 psychovisual redundancy.

1312
01:55:07,060 --> 01:55:09,060
心理视觉冗余。

1313
01:55:09,060 --> 01:55:11,060
 So, psychovisual is how

1313
01:55:09,060 --> 01:55:11,060
那么，心理视觉是如何

1314
01:55:11,060 --> 01:55:13,060
 human visual system perceives

1314
01:55:11,060 --> 01:55:13,060
人类视觉系统感知

1315
01:55:13,060 --> 01:55:15,060
 an object. Okay? So, specifically,

1315
01:55:13,060 --> 01:55:15,060
一个物体。好的？所以，具体来说，

1316
01:55:15,060 --> 01:55:17,060
 there are two types. One is the frequency masking.

1316
01:55:15,060 --> 01:55:17,060
有两种类型。一是频率掩蔽。

1317
01:55:17,060 --> 01:55:19,060
 So, frequency masking

1317
01:55:17,060 --> 01:55:19,060
所以，频率掩蔽

1318
01:55:19,060 --> 01:55:21,060
 actually means that, you know, how our

1318
01:55:19,060 --> 01:55:21,060
实际上意味着，你知道，我们如何

1319
01:55:21,060 --> 01:55:23,060
 eye perceives to different frequency

1319
01:55:21,060 --> 01:55:23,060
眼睛感知到不同的频率

1320
01:55:23,060 --> 01:55:25,060
 components. So, our eyes

1320
01:55:23,060 --> 01:55:25,060
成分。那么，我们的眼睛

1321
01:55:25,060 --> 01:55:27,060
 are more sensitive to

1321
01:55:25,060 --> 01:55:27,060
更敏感

1322
01:55:27,060 --> 01:55:29,060
 any changes or noise

1322
01:55:27,060 --> 01:55:29,060
任何变化或噪音

1323
01:55:29,060 --> 01:55:31,060
 in smooth regions. Okay?

1323
01:55:29,060 --> 01:55:31,060
在光滑区域。好的？

1324
01:55:31,060 --> 01:55:33,060
 And it's, you know, less sensitive

1324
01:55:31,060 --> 01:55:33,060
你知道，它不太敏感

1325
01:55:33,060 --> 01:55:35,060
 to any distortion in the

1325
01:55:33,060 --> 01:55:35,060
任何扭曲

1326
01:55:35,060 --> 01:55:37,060
 texture region. So, one very

1326
01:55:35,060 --> 01:55:37,060
纹理区域。所以，一个非常

1327
01:55:37,060 --> 01:55:39,060
 simple example is, you know,

1327
01:55:37,060 --> 01:55:39,060
简单的例子是，你知道，

1328
01:55:39,060 --> 01:55:41,060
 if you look at, for example, the shirt I'm

1328
01:55:39,060 --> 01:55:41,060
例如，如果你看一下我的衬衫

1329
01:55:41,060 --> 01:55:43,060
 wearing here is quite

1329
01:55:41,060 --> 01:55:43,060
穿在这里还蛮

1330
01:55:43,060 --> 01:55:45,060
 smooth. So, you can see there's this

1330
01:55:43,060 --> 01:55:45,060
光滑的。所以，你可以看到有这个

1331
01:55:45,060 --> 01:55:47,060
 patch here. So, this is

1331
01:55:45,060 --> 01:55:47,060
补丁在这里。所以，这是

1332
01:55:47,060 --> 01:55:49,060
 when, this patch here, that means

1332
01:55:47,060 --> 01:55:49,060
当，这个补丁在这里，这意味着

1333
01:55:49,060 --> 01:55:51,060
 actually it's low frequency region.

1333
01:55:49,060 --> 01:55:51,060
实际上是低频区域。

1334
01:55:51,060 --> 01:55:53,060
 So, if there's particular spots

1334
01:55:51,060 --> 01:55:53,060
所以，如果有特别的地方

1335
01:55:53,060 --> 01:55:55,060
 here, most of you will be able

1335
01:55:53,060 --> 01:55:55,060
在这里，你们中的大多数人都能够

1336
01:55:55,060 --> 01:55:57,060
 to spot it quite readily.

1336
01:55:55,060 --> 01:55:57,060
很容易发现它。

1337
01:55:57,060 --> 01:55:59,060
 So, this is because our eyes are more

1337
01:55:57,060 --> 01:55:59,060
所以，这是因为我们的眼睛更多

1338
01:55:59,060 --> 01:56:01,060
 sensitive to any noise or

1338
01:55:59,060 --> 01:56:01,060
对任何噪音或敏感

1339
01:56:01,060 --> 01:56:03,060
 distortion in low frequency

1339
01:56:01,060 --> 01:56:03,060
低频失真

1340
01:56:03,060 --> 01:56:05,060
 region. Okay? Anyway, later

1340
01:56:03,060 --> 01:56:05,060
地区。好的？无论如何，以后

1341
01:56:05,060 --> 01:56:07,060
 on we'll explain a little bit more.

1341
01:56:05,060 --> 01:56:07,060
我们将进一步解释一下。

1342
01:56:07,060 --> 01:56:09,060
 This color masking is actually

1342
01:56:07,060 --> 01:56:09,060
这个颜色掩蔽实际上是

1343
01:56:09,060 --> 01:56:11,060
 based on what we discussed last time.

1343
01:56:09,060 --> 01:56:11,060
基于我们上次讨论的内容。

1344
01:56:11,060 --> 01:56:13,060
 Our eyes are more sensitive to the

1344
01:56:11,060 --> 01:56:13,060
我们的眼睛对光线更加敏感

1345
01:56:13,060 --> 01:56:15,060
 brightness or the luminance component

1345
01:56:13,060 --> 01:56:15,060
亮度或亮度分量

1346
01:56:15,060 --> 01:56:17,060
 and less sensitive to

1346
01:56:15,060 --> 01:56:17,060
并且不太敏感

1347
01:56:17,060 --> 01:56:19,060
 the color or the

1347
01:56:17,060 --> 01:56:19,060
颜色或

1348
01:56:19,060 --> 01:56:21,060
 chrominance component. So, we can also

1348
01:56:19,060 --> 01:56:21,060
色度分量。那么，我们也可以

1349
01:56:21,060 --> 01:56:23,060
 use that to help us to perform

1349
01:56:21,060 --> 01:56:23,060
用它来帮助我们执行

1350
01:56:23,060 --> 01:56:25,060
 image and video compression.

1350
01:56:23,060 --> 01:56:25,060
图像和视频压缩。

1351
01:56:25,060 --> 01:56:27,060
 So, because there are lots of

1351
01:56:25,060 --> 01:56:27,060
所以，因为有很多

1352
01:56:27,060 --> 01:56:29,060
 redundancy across this

1352
01:56:27,060 --> 01:56:29,060
这方面的冗余

1353
01:56:29,060 --> 01:56:31,060
 statistical and psycho-visual

1353
01:56:29,060 --> 01:56:31,060
统计和心理视觉

1354
01:56:31,060 --> 01:56:33,060
 redundancy, that's why it allows us to

1354
01:56:31,060 --> 01:56:33,060
冗余，这就是为什么它允许我们

1355
01:56:33,060 --> 01:56:35,060
 perform decompression.

1355
01:56:33,060 --> 01:56:35,060
执行减压。

1356
01:56:35,060 --> 01:56:37,060
 Right, okay. So, next

1356
01:56:35,060 --> 01:56:37,060
对了，好吧。那么，接下来

1357
01:56:37,060 --> 01:56:39,060
 we are going to explain a little bit more

1357
01:56:37,060 --> 01:56:39,060
我们将进一步解释一下

1358
01:56:39,060 --> 01:56:41,060
 about each of these

1358
01:56:39,060 --> 01:56:41,060
关于其中每一个

1359
01:56:41,060 --> 01:56:43,060
 redundancy a bit more in detail.

1359
01:56:41,060 --> 01:56:43,060
冗余更详细一些。

1360
01:56:43,060 --> 01:56:45,060
 So, the first one is a spatial redundancy.

1360
01:56:43,060 --> 01:56:45,060
所以，第一个是空间冗余。

1361
01:56:45,060 --> 01:56:47,060
 So, spatial redundancy

1361
01:56:45,060 --> 01:56:47,060
所以，空间冗余

1362
01:56:47,060 --> 01:56:49,060
 refers to the statistical correlation.

1362
01:56:47,060 --> 01:56:49,060
指统计相关性。

1363
01:56:49,060 --> 01:56:51,060
 So, correlation means

1363
01:56:49,060 --> 01:56:51,060
所以，相关性意味着

1364
01:56:51,060 --> 01:56:53,060
 similarity or relatedness

1364
01:56:51,060 --> 01:56:53,060
相似性或相关性

1365
01:56:53,060 --> 01:56:55,060
 between

1365
01:56:53,060 --> 01:56:55,060
之间

1366
01:56:55,060 --> 01:56:57,060
 pixels within an image

1366
01:56:55,060 --> 01:56:57,060
图像内的像素

1367
01:56:57,060 --> 01:56:59,060
 or more specifically, within a small

1367
01:56:57,060 --> 01:56:59,060
或者更具体地说，在一个小范围内

1368
01:56:59,060 --> 01:57:01,060
 image neighborhood

1368
01:56:59,060 --> 01:57:01,060
图像邻域

1369
01:57:01,060 --> 01:57:03,060
 here. So,

1369
01:57:01,060 --> 01:57:03,060
这里。所以，

1370
01:57:03,060 --> 01:57:05,060
 spatial redundancy, pretty much the high-level

1370
01:57:03,060 --> 01:57:05,060
空间冗余，几乎是高层的

1371
01:57:05,060 --> 01:57:07,060
 concept is like this. So, if you

1371
01:57:05,060 --> 01:57:07,060
概念是这样的。所以，如果你

1372
01:57:07,060 --> 01:57:09,060
 look at the image, okay, and specifically

1372
01:57:07,060 --> 01:57:09,060
看图片，好吧，具体一点

1373
01:57:09,060 --> 01:57:11,060
 if you look at a small

1373
01:57:09,060 --> 01:57:11,060
如果你看一个小

1374
01:57:11,060 --> 01:57:13,060
 kind of image

1374
01:57:11,060 --> 01:57:13,060
图像的种类

1375
01:57:13,060 --> 01:57:15,060
 region, the pixel values

1375
01:57:13,060 --> 01:57:15,060
区域，像素值

1376
01:57:15,060 --> 01:57:17,060
 tends to be quite similar

1376
01:57:15,060 --> 01:57:17,060
往往非常相似

1377
01:57:17,060 --> 01:57:19,060
 to each other. For most

1377
01:57:17,060 --> 01:57:19,060
彼此。对于大多数人来说

1378
01:57:19,060 --> 01:57:21,060
 natural image, right, we are

1378
01:57:19,060 --> 01:57:21,060
自然形象，对，我们是

1379
01:57:21,060 --> 01:57:23,060
 talking about most natural image,

1379
01:57:21,060 --> 01:57:23,060
谈论最自然的形象，

1380
01:57:23,060 --> 01:57:25,060
 if you look at a small pixel

1380
01:57:23,060 --> 01:57:25,060
如果你看一个小像素

1381
01:57:25,060 --> 01:57:27,060
 neighborhood or image neighborhood,

1381
01:57:25,060 --> 01:57:27,060
邻域或图像邻域，

1382
01:57:27,060 --> 01:57:29,060
 the pixel values tends to be

1382
01:57:27,060 --> 01:57:29,060
像素值往往是

1383
01:57:29,060 --> 01:57:31,060
 very similar to each other.

1383
01:57:29,060 --> 01:57:31,060
彼此非常相似。

1384
01:57:31,060 --> 01:57:33,060
 So, if the pixel values tends to be

1384
01:57:31,060 --> 01:57:33,060
因此，如果像素值趋向于

1385
01:57:33,060 --> 01:57:35,060
 very similar to each other,

1385
01:57:33,060 --> 01:57:35,060
彼此非常相似，

1386
01:57:35,060 --> 01:57:37,060
 that means there is lots of extra

1386
01:57:35,060 --> 01:57:37,060
这意味着还有很多额外的

1387
01:57:37,060 --> 01:57:39,060
 unnecessary information

1387
01:57:37,060 --> 01:57:39,060
不必要的信息

1388
01:57:39,060 --> 01:57:41,060
 that exists in a small

1388
01:57:39,060 --> 01:57:41,060
存在于一个小

1389
01:57:41,060 --> 01:57:43,060
 image region. Because

1389
01:57:41,060 --> 01:57:43,060
图像区域。因为

1390
01:57:43,060 --> 01:57:45,060
 instead of representing each pixel

1390
01:57:43,060 --> 01:57:45,060
而不是代表每个像素

1391
01:57:45,060 --> 01:57:47,060
 in this small image region,

1391
01:57:45,060 --> 01:57:47,060
在这个小图像区域中，

1392
01:57:47,060 --> 01:57:49,060
 you actually just need

1392
01:57:47,060 --> 01:57:49,060
你实际上只需要

1393
01:57:49,060 --> 01:57:51,060
 to have one single pixel, it can

1393
01:57:49,060 --> 01:57:51,060
拥有一个像素，它可以

1394
01:57:51,060 --> 01:57:53,060
 more or less represent this region already.

1394
01:57:51,060 --> 01:57:53,060
或多或少已经代表了这个地区。

1395
01:57:53,060 --> 01:57:55,060
 So, if

1395
01:57:53,060 --> 01:57:55,060
所以，如果

1396
01:57:55,060 --> 01:57:57,060
 you are using every single pixel

1396
01:57:55,060 --> 01:57:57,060
你正在使用每一个像素

1397
01:57:57,060 --> 01:57:59,060
 to represent this image region,

1397
01:57:57,060 --> 01:57:59,060
来表示该图像区域，

1398
01:57:59,060 --> 01:58:01,060
 that means you exist lots

1398
01:57:59,060 --> 01:58:01,060
这意味着你存在很多

1399
01:58:01,060 --> 01:58:03,060
 of redundant information

1399
01:58:01,060 --> 01:58:03,060
冗余信息

1400
01:58:03,060 --> 01:58:05,060
 already. So, this kind of redundancy

1400
01:58:03,060 --> 01:58:05,060
已经。所以，这种冗余

1401
01:58:05,060 --> 01:58:07,060
 is known as the

1401
01:58:05,060 --> 01:58:07,060
被称为

1402
01:58:07,060 --> 01:58:09,060
 spatial redundancy.

1402
01:58:07,060 --> 01:58:09,060
空间冗余。

1403
01:58:09,060 --> 01:58:11,060
 So, for example, if you

1403
01:58:09,060 --> 01:58:11,060
因此，举例来说，如果您

1404
01:58:11,060 --> 01:58:13,060
 look at this image here, if you

1404
01:58:11,060 --> 01:58:13,060
看看这张图片，如果你

1405
01:58:13,060 --> 01:58:15,060
 look at a small image region, for example

1405
01:58:13,060 --> 01:58:15,060
例如，查看一个小图像区域

1406
01:58:15,060 --> 01:58:17,060
 here, you can see within this small

1406
01:58:15,060 --> 01:58:17,060
在这里，你可以看到这个小

1407
01:58:17,060 --> 01:58:19,060
 image region or patch,

1407
01:58:17,060 --> 01:58:19,060
图像区域或补丁，

1408
01:58:19,060 --> 01:58:21,060
 the pixel values are very similar to

1408
01:58:19,060 --> 01:58:21,060
像素值非常相似

1409
01:58:21,060 --> 01:58:23,060
 each other. So, if the pixel values

1409
01:58:21,060 --> 01:58:23,060
彼此。所以，如果像素值

1410
01:58:23,060 --> 01:58:25,060
 are very similar to each other,

1410
01:58:23,060 --> 01:58:25,060
彼此非常相似，

1411
01:58:25,060 --> 01:58:27,060
 that means there is lots of redundant information

1411
01:58:25,060 --> 01:58:27,060
这意味着有很多冗余信息

1412
01:58:27,060 --> 01:58:29,060
 there. But there is no need actually

1412
01:58:27,060 --> 01:58:29,060
那里。但实际上没有必要

1413
01:58:29,060 --> 01:58:31,060
 for you to represent each

1413
01:58:29,060 --> 01:58:31,060
让你代表每一个

1414
01:58:31,060 --> 01:58:33,060
 pixel.

1414
01:58:31,060 --> 01:58:33,060
像素。

1415
01:58:33,060 --> 01:58:35,060
 So, this type of redundancy

1415
01:58:33,060 --> 01:58:35,060
所以，这种类型的冗余

1416
01:58:35,060 --> 01:58:37,060
 is also known as the intra-frame redundancy.

1416
01:58:35,060 --> 01:58:37,060
也称为帧内冗余。

1417
01:58:37,060 --> 01:58:39,060
 Intra means

1417
01:58:37,060 --> 01:58:39,060
内部手段

1418
01:58:39,060 --> 01:58:41,060
 routine. So, it's the redundancy

1418
01:58:39,060 --> 01:58:41,060
常规。所以，这就是冗余

1419
01:58:41,060 --> 01:58:43,060
 that exists

1419
01:58:41,060 --> 01:58:43,060
存在的

1420
01:58:43,060 --> 01:58:45,060
 within one single frame.

1420
01:58:43,060 --> 01:58:45,060
在一帧内。

1421
01:58:45,060 --> 01:58:47,060
 So, therefore, spatial

1421
01:58:45,060 --> 01:58:47,060
因此，空间

1422
01:58:47,060 --> 01:58:49,060
 redundancy is actually

1422
01:58:47,060 --> 01:58:49,060
冗余实际上是

1423
01:58:49,060 --> 01:58:51,060
 also known as the intra-frame redundancy.

1423
01:58:49,060 --> 01:58:51,060
也称为帧内冗余。

1424
01:58:51,060 --> 01:58:53,060
 Redundancy that exists across

1424
01:58:51,060 --> 01:58:53,060
存在冗余

1425
01:58:53,060 --> 01:58:55,060
 a single image or frame.

1425
01:58:53,060 --> 01:58:55,060
单个图像或帧。

1426
01:58:55,060 --> 01:58:57,060
 So, the

1426
01:58:55,060 --> 01:58:57,060
所以，

1427
01:58:57,060 --> 01:58:59,060
 next one is the temporal redundancy.

1427
01:58:57,060 --> 01:58:59,060
下一个是时间冗余。

1428
01:58:59,060 --> 01:59:01,060
 So, temporal redundancy, as I mentioned,

1428
01:58:59,060 --> 01:59:01,060
所以，正如我提到的，时间冗余，

1429
01:59:01,060 --> 01:59:03,060
 I actually explained to you earlier.

1429
01:59:01,060 --> 01:59:03,060
其实我之前就跟你解释过了。

1430
01:59:03,060 --> 01:59:05,060
 So, let's look at the definition.

1430
01:59:03,060 --> 01:59:05,060
那么，让我们看看定义。

1431
01:59:05,060 --> 01:59:07,060
 So, temporal redundancy refers to the

1431
01:59:05,060 --> 01:59:07,060
因此，时间冗余是指

1432
01:59:07,060 --> 01:59:09,060
 statistical correlation.

1432
01:59:07,060 --> 01:59:09,060
统计相关性。

1433
01:59:09,060 --> 01:59:11,060
 So, this word correlation means

1433
01:59:09,060 --> 01:59:11,060
所以，这个词相关性的意思是

1434
01:59:11,060 --> 01:59:13,060
 similarity or relatedness.

1434
01:59:11,060 --> 01:59:13,060
相似性或相关性。

1435
01:59:13,060 --> 01:59:15,060
 Between pixels from successive

1435
01:59:13,060 --> 01:59:15,060
连续像素之间

1436
01:59:15,060 --> 01:59:17,060
 frames in a video sequence.

1436
01:59:15,060 --> 01:59:17,060
视频序列中的帧。

1437
01:59:17,060 --> 01:59:19,060
 So, if you look at this particular example

1437
01:59:17,060 --> 01:59:19,060
所以，如果你看看这个特定的例子

1438
01:59:19,060 --> 01:59:21,060
 here, this is different frames in

1438
01:59:19,060 --> 01:59:21,060
在这里，这是不同的框架

1439
01:59:21,060 --> 01:59:23,060
 a video, just as we mentioned.

1439
01:59:21,060 --> 01:59:23,060
正如我们提到的，视频。

1440
01:59:23,060 --> 01:59:25,060
 In a video,

1440
01:59:23,060 --> 01:59:25,060
在一个视频中，

1441
01:59:25,060 --> 01:59:27,060
 if you have many different frames, and for

1441
01:59:25,060 --> 01:59:27,060
如果你有很多不同的框架，并且对于

1442
01:59:27,060 --> 01:59:29,060
 this particular video to appear to be

1442
01:59:27,060 --> 01:59:29,060
这个特定的视频似乎是

1443
01:59:29,060 --> 01:59:31,060
 smooth, each of the frames are

1443
01:59:29,060 --> 01:59:31,060
流畅，每一帧都是

1444
01:59:31,060 --> 01:59:33,060
 very similar to each other.

1444
01:59:31,060 --> 01:59:33,060
彼此非常相似。

1445
01:59:33,060 --> 01:59:35,060
 So, if you, for example, look at a small

1445
01:59:33,060 --> 01:59:35,060
所以，举例来说，如果你看一个小

1446
01:59:35,060 --> 01:59:37,060
 image

1446
01:59:35,060 --> 01:59:37,060
图像

1447
01:59:37,060 --> 01:59:39,060
 regions here,

1447
01:59:37,060 --> 01:59:39,060
这里的地区，

1448
01:59:39,060 --> 01:59:41,060
 you can see this current

1448
01:59:39,060 --> 01:59:41,060
你可以看到这个电流

1449
01:59:41,060 --> 01:59:43,060
 frame and the

1449
01:59:41,060 --> 01:59:43,060
框架和

1450
01:59:43,060 --> 01:59:45,060
 next frame, they'll be very similar.

1450
01:59:43,060 --> 01:59:45,060
下一帧，它们将非常相似。

1451
01:59:45,060 --> 01:59:47,060
 So, if these regions are very similar,

1451
01:59:45,060 --> 01:59:47,060
所以，如果这些区域非常相似，

1452
01:59:47,060 --> 01:59:49,060
 that means there are lots of

1452
01:59:47,060 --> 01:59:49,060
这意味着有很多

1453
01:59:49,060 --> 01:59:51,060
 extra unnecessary

1453
01:59:49,060 --> 01:59:51,060
额外不必要的

1454
01:59:51,060 --> 01:59:53,060
 information, or what we call redundancy.

1454
01:59:51,060 --> 01:59:53,060
信息，或者我们所说的冗余。

1455
01:59:53,060 --> 01:59:55,060
 So, this kind of redundancy

1455
01:59:53,060 --> 01:59:55,060
所以，这种冗余

1456
01:59:55,060 --> 01:59:57,060
 exists across

1456
01:59:55,060 --> 01:59:57,060
存在于

1457
01:59:57,060 --> 01:59:59,060
 the frame axis or the time axis.

1457
01:59:57,060 --> 01:59:59,060
帧轴或时间轴。

1458
01:59:59,060 --> 02:00:01,060
 So, that's why it's called

1458
01:59:59,060 --> 02:00:01,060
所以，这就是为什么它被称为

1459
02:00:01,060 --> 02:00:03,060
 temporal redundancy.

1459
02:00:01,060 --> 02:00:03,060
时间冗余。

1460
02:00:03,060 --> 02:00:05,060
 So, temporal redundancy is also

1460
02:00:03,060 --> 02:00:05,060
所以，时间冗余也是

1461
02:00:05,060 --> 02:00:07,060
 known as inter-frame redundancy.

1461
02:00:05,060 --> 02:00:07,060
称为帧间冗余。

1462
02:00:07,060 --> 02:00:09,060
 So, you can guess more or less why that's

1462
02:00:07,060 --> 02:00:09,060
所以，你或多或少可以猜到为什么会这样

1463
02:00:09,060 --> 02:00:11,060
 the case, because it's the redundant

1463
02:00:09,060 --> 02:00:11,060
这种情况，因为它是多余的

1464
02:00:11,060 --> 02:00:13,060
 information that exists across

1464
02:00:11,060 --> 02:00:13,060
存在于各处的信息

1465
02:00:13,060 --> 02:00:15,060
 different frames, specifically

1465
02:00:13,060 --> 02:00:15,060
不同的框架，特别是

1466
02:00:15,060 --> 02:00:17,060
 for video.

1466
02:00:15,060 --> 02:00:17,060
对于视频。

1467
02:00:17,060 --> 02:00:19,060
 Right, so, next one is

1467
02:00:17,060 --> 02:00:19,060
对了，那么，下一篇是

1468
02:00:19,060 --> 02:00:21,060
 the coding redundancy.

1468
02:00:19,060 --> 02:00:21,060
编码冗余。

1469
02:00:21,060 --> 02:00:23,060
 So, coding redundancy actually is

1469
02:00:21,060 --> 02:00:23,060
所以，编码冗余实际上是

1470
02:00:23,060 --> 02:00:25,060
 how you represent the

1470
02:00:23,060 --> 02:00:25,060
你如何代表

1471
02:00:25,060 --> 02:00:27,060
 information, just like in our

1471
02:00:25,060 --> 02:00:27,060
信息，就像我们的

1472
02:00:27,060 --> 02:00:29,060
 previous part when we talked about entropy

1472
02:00:27,060 --> 02:00:29,060
上一部分我们讨论熵时

1473
02:00:29,060 --> 02:00:31,060
 coding. You can already

1473
02:00:29,060 --> 02:00:31,060
编码。你已经可以

1474
02:00:31,060 --> 02:00:33,060
 see just by analyzing

1474
02:00:31,060 --> 02:00:33,060
仅通过分析即可看到

1475
02:00:33,060 --> 02:00:35,060
 the data a little bit more

1475
02:00:33,060 --> 02:00:35,060
数据多一点

1476
02:00:35,060 --> 02:00:37,060
 carefully, and then try to

1476
02:00:35,060 --> 02:00:37,060
仔细地，然后尝试

1477
02:00:37,060 --> 02:00:39,060
 assign shorter

1477
02:00:37,060 --> 02:00:39,060
分配较短的

1478
02:00:39,060 --> 02:00:41,060
 code work to more probable

1478
02:00:39,060 --> 02:00:41,060
代码工作更有可能

1479
02:00:41,060 --> 02:00:43,060
 symbol and longer code work to less

1479
02:00:41,060 --> 02:00:43,060
符号和较长的代码可以减少工作量

1480
02:00:43,060 --> 02:00:45,060
 probable symbol, you can already

1480
02:00:43,060 --> 02:00:45,060
可能的符号，你已经可以

1481
02:00:45,060 --> 02:00:47,060
 reduce the number of bits

1481
02:00:45,060 --> 02:00:47,060
减少位数

1482
02:00:47,060 --> 02:00:49,060
 to represent the symbol. So,

1482
02:00:47,060 --> 02:00:49,060
来表示符号。所以，

1483
02:00:49,060 --> 02:00:51,060
 this is a type of coding

1483
02:00:49,060 --> 02:00:51,060
这是一种编码类型

1484
02:00:51,060 --> 02:00:53,060
 redundancy. So, that means if you don't

1484
02:00:51,060 --> 02:00:53,060
冗余。所以，这意味着如果你不这样做

1485
02:00:53,060 --> 02:00:55,060
 exploit those properties, then there's

1485
02:00:53,060 --> 02:00:55,060
利用这些属性，然后就有

1486
02:00:55,060 --> 02:00:57,060
 lots of redundant information

1486
02:00:55,060 --> 02:00:57,060
大量冗余信息

1487
02:00:57,060 --> 02:00:59,060
 in your, like, fixed length

1487
02:00:57,060 --> 02:00:59,060
在你的固定长度中

1488
02:00:59,060 --> 02:01:01,060
 representation already.

1488
02:00:59,060 --> 02:01:01,060
代表已经。

1489
02:01:01,060 --> 02:01:03,060
 Okay, so coding redundancy

1489
02:01:01,060 --> 02:01:03,060
好的，所以编码冗余

1490
02:01:03,060 --> 02:01:05,060
 focus on representation of the information

1490
02:01:03,060 --> 02:01:05,060
注重信息的表达

1491
02:01:05,060 --> 02:01:07,060
 or the code itself. Right, so

1491
02:01:05,060 --> 02:01:07,060
或代码本身。对了，所以

1492
02:01:07,060 --> 02:01:09,060
 the easiest way to understand this

1492
02:01:07,060 --> 02:01:09,060
理解这一点的最简单方法

1493
02:01:09,060 --> 02:01:11,060
 is through an example.

1493
02:01:09,060 --> 02:01:11,060
是通过一个例子。

1494
02:01:11,060 --> 02:01:13,060
 So, you look at this example here. Suppose we have

1494
02:01:11,060 --> 02:01:13,060
所以，你在这里看看这个例子。假设我们有

1495
02:01:13,060 --> 02:01:15,060
 five symbols, A1 to A5,

1495
02:01:13,060 --> 02:01:15,060
五个符号，A1 至 A5，

1496
02:01:15,060 --> 02:01:17,060
 and this is the probability of occurrence.

1496
02:01:15,060 --> 02:01:17,060
这就是发生的概率。

1497
02:01:17,060 --> 02:01:19,060
 So, now, based on what you

1497
02:01:17,060 --> 02:01:19,060
所以，现在，根据你的情况

1498
02:01:19,060 --> 02:01:21,060
 have studied in the previous part, you can see

1498
02:01:19,060 --> 02:01:21,060
上一部分学过，可以看到

1499
02:01:21,060 --> 02:01:23,060
 there's a few different ways you can represent

1499
02:01:21,060 --> 02:01:23,060
有几种不同的方式可以表示

1500
02:01:23,060 --> 02:01:25,060
 these

1500
02:01:23,060 --> 02:01:25,060
这些

1501
02:01:25,060 --> 02:01:27,060
 symbols using the bit patterns.

1501
02:01:25,060 --> 02:01:27,060
使用位模式的符号。

1502
02:01:27,060 --> 02:01:29,060
 So, one simple way, if you use a very

1502
02:01:27,060 --> 02:01:29,060
所以，一个简单的方法，如果你使用一个非常

1503
02:01:29,060 --> 02:01:31,060
 naive way, which is

1503
02:01:29,060 --> 02:01:31,060
天真的方式，即

1504
02:01:31,060 --> 02:01:33,060
 uniform length coding

1504
02:01:31,060 --> 02:01:33,060
统一长度编码

1505
02:01:33,060 --> 02:01:35,060
 or fixed length coding,

1505
02:01:33,060 --> 02:01:35,060
或固定长度编码，

1506
02:01:35,060 --> 02:01:37,060
 because you have five symbols,

1506
02:01:35,060 --> 02:01:37,060
因为你有五个符号，

1507
02:01:37,060 --> 02:01:39,060
 so you can actually use three bits

1507
02:01:37,060 --> 02:01:39,060
所以你实际上可以使用三位

1508
02:01:39,060 --> 02:01:41,060
 to represent. So, if you decided

1508
02:01:39,060 --> 02:01:41,060
代表。所以，如果你决定

1509
02:01:41,060 --> 02:01:43,060
 to use three bits to represent each

1509
02:01:41,060 --> 02:01:43,060
使用三位来表示每个

1510
02:01:43,060 --> 02:01:45,060
 symbol, okay, for example, you use

1510
02:01:43,060 --> 02:01:45,060
符号，好的，例如，你使用

1511
02:01:45,060 --> 02:01:47,060
 this bit pattern

1511
02:01:45,060 --> 02:01:47,060
这个位模式

1512
02:01:47,060 --> 02:01:49,060
 to represent this symbol. So, you can see

1512
02:01:47,060 --> 02:01:49,060
来表示这个符号。所以，你可以看到

1513
02:01:49,060 --> 02:01:51,060
 in this case, the average

1513
02:01:49,060 --> 02:01:51,060
在这种情况下，平均

1514
02:01:51,060 --> 02:01:53,060
 number of bits that's required to represent

1514
02:01:51,060 --> 02:01:53,060
需要表示的位数

1515
02:01:53,060 --> 02:01:55,060
 a symbol is actually three bits.

1515
02:01:53,060 --> 02:01:55,060
一个符号实际上是三位。

1516
02:01:55,060 --> 02:01:57,060
 But, on the other hand, if

1516
02:01:55,060 --> 02:01:57,060
但是，另一方面，如果

1517
02:01:57,060 --> 02:01:59,060
 you're a little bit more clever, especially after

1517
02:01:57,060 --> 02:01:59,060
你聪明了一点，尤其是在

1518
02:01:59,060 --> 02:02:01,060
 you have studied the

1518
02:01:59,060 --> 02:02:01,060
你已经研究过

1519
02:02:01,060 --> 02:02:03,060
 first part of the lecture, you know that

1519
02:02:01,060 --> 02:02:03,060
讲座的第一部分，你知道

1520
02:02:03,060 --> 02:02:05,060
 for those

1520
02:02:03,060 --> 02:02:05,060
对于那些

1521
02:02:05,060 --> 02:02:07,060
 symbols that has a higher probability,

1521
02:02:05,060 --> 02:02:07,060
概率较高的符号，

1522
02:02:07,060 --> 02:02:09,060
 we should assign a shorter

1522
02:02:07,060 --> 02:02:09,060
我们应该分配一个更短的

1523
02:02:09,060 --> 02:02:11,060
 code. Those with a lower probability,

1523
02:02:09,060 --> 02:02:11,060
代码。那些概率较低的人，

1524
02:02:11,060 --> 02:02:13,060
 we should assign a longer

1524
02:02:11,060 --> 02:02:13,060
我们应该分配一个更长的

1525
02:02:13,060 --> 02:02:15,060
 code. Just by being a little bit more

1525
02:02:13,060 --> 02:02:15,060
代码。只要多一点点

1526
02:02:15,060 --> 02:02:17,060
 clever about it, using

1526
02:02:15,060 --> 02:02:17,060
巧妙地利用它

1527
02:02:17,060 --> 02:02:19,060
 this variable length coding,

1527
02:02:17,060 --> 02:02:19,060
这种可变长度编码，

1528
02:02:19,060 --> 02:02:21,060
 if you try to calculate

1528
02:02:19,060 --> 02:02:21,060
如果你尝试计算

1529
02:02:21,060 --> 02:02:23,060
 the average number of bits per

1529
02:02:21,060 --> 02:02:23,060
每的平均位数

1530
02:02:23,060 --> 02:02:25,060
 symbol, so like what

1530
02:02:23,060 --> 02:02:25,060
符号，就像什么

1531
02:02:25,060 --> 02:02:27,060
 we mentioned just now, probability multiplied

1531
02:02:25,060 --> 02:02:27,060
刚才我们提到，概率成倍增加

1532
02:02:27,060 --> 02:02:29,060
 with the number of bits, in this case it's four

1532
02:02:27,060 --> 02:02:29,060
与位数，在本例中为四

1533
02:02:29,060 --> 02:02:31,060
 bits,

1533
02:02:29,060 --> 02:02:31,060
位，

1534
02:02:31,060 --> 02:02:33,060
 probability of 0.2 multiplied with

1534
02:02:31,060 --> 02:02:33,060
0.2 的概率乘以

1535
02:02:33,060 --> 02:02:35,060
 two bits, by repeating the process

1535
02:02:33,060 --> 02:02:35,060
两位，通过重复该过程

1536
02:02:35,060 --> 02:02:37,060
 that we have explained earlier,

1536
02:02:35,060 --> 02:02:37,060
我们之前已经解释过，

1537
02:02:37,060 --> 02:02:39,060
 we can see we can obtain 1.95.

1537
02:02:37,060 --> 02:02:39,060
我们可以看到我们可以得到1.95。

1538
02:02:39,060 --> 02:02:41,060
 So, in other words, what it means

1538
02:02:39,060 --> 02:02:41,060
所以，换句话说，这意味着什么

1539
02:02:41,060 --> 02:02:43,060
 is that just if you are a bit more

1539
02:02:41,060 --> 02:02:43,060
就是只要你多一点

1540
02:02:43,060 --> 02:02:45,060
 clever, if you can come up with some

1540
02:02:43,060 --> 02:02:45,060
聪明，如果你能想出一些

1541
02:02:45,060 --> 02:02:47,060
 more intelligent

1541
02:02:45,060 --> 02:02:47,060
更聪明

1542
02:02:47,060 --> 02:02:49,060
 way of designing your code,

1542
02:02:47,060 --> 02:02:49,060
设计代码的方式，

1543
02:02:49,060 --> 02:02:51,060
 actually you can

1543
02:02:49,060 --> 02:02:51,060
实际上你可以

1544
02:02:51,060 --> 02:02:53,060
 achieve better

1544
02:02:51,060 --> 02:02:53,060
取得更好的成绩

1545
02:02:53,060 --> 02:02:55,060
 efficiency or representation.

1545
02:02:53,060 --> 02:02:55,060
效率或代表性。

1546
02:02:55,060 --> 02:02:57,060
 So, that means in terms of code itself,

1546
02:02:55,060 --> 02:02:57,060
所以，这意味着就代码本身而言，

1547
02:02:57,060 --> 02:02:59,060
 there's some kind of redundancy.

1547
02:02:57,060 --> 02:02:59,060
存在某种冗余。

1548
02:02:59,060 --> 02:03:01,060
 If you don't do anything, there's some redundancy

1548
02:02:59,060 --> 02:03:01,060
如果你什么都不做，就会有一些冗余

1549
02:03:01,060 --> 02:03:03,060
 inside that you can exploit

1549
02:03:01,060 --> 02:03:03,060
里面你可以利用

1550
02:03:03,060 --> 02:03:05,060
 to remove it.

1550
02:03:03,060 --> 02:03:05,060
将其删除。

1551
02:03:05,060 --> 02:03:07,060
 So, the next one that

1551
02:03:05,060 --> 02:03:07,060
那么，下一篇

1552
02:03:07,060 --> 02:03:09,060
 we mentioned is a psychovisual redundancy.

1552
02:03:07,060 --> 02:03:09,060
我们提到的是心理视觉冗余。

1553
02:03:09,060 --> 02:03:11,060
 So, the first one is

1553
02:03:09,060 --> 02:03:11,060
所以，第一个是

1554
02:03:11,060 --> 02:03:13,060
 frequency masking. So, earlier on,

1554
02:03:11,060 --> 02:03:13,060
频率掩蔽。所以，早些时候，

1555
02:03:13,060 --> 02:03:15,060
 I mentioned that human

1555
02:03:13,060 --> 02:03:15,060
我提到过人类

1556
02:03:15,060 --> 02:03:17,060
 is less sensitive to noise or distortion

1556
02:03:15,060 --> 02:03:17,060
对噪声或失真不太敏感

1557
02:03:17,060 --> 02:03:19,060
 in the high frequency component.

1557
02:03:17,060 --> 02:03:19,060
在高频成分中。

1558
02:03:19,060 --> 02:03:21,060
 So, this frequency masking

1558
02:03:19,060 --> 02:03:21,060
所以，这个频率掩蔽

1559
02:03:21,060 --> 02:03:23,060
 is like this.

1559
02:03:21,060 --> 02:03:23,060
是这样的。

1560
02:03:23,060 --> 02:03:25,060
 So, I believe most of you have

1560
02:03:23,060 --> 02:03:25,060
所以，我相信你们大多数人都有

1561
02:03:25,060 --> 02:03:27,060
 studied time-based signals.

1561
02:03:25,060 --> 02:03:27,060
研究基于时间的信号。

1562
02:03:27,060 --> 02:03:29,060
 So, for time-based signals,

1562
02:03:27,060 --> 02:03:29,060
因此，对于基于时间的信号，

1563
02:03:29,060 --> 02:03:31,060
 for example, if you are measuring the

1563
02:03:29,060 --> 02:03:31,060
例如，如果您正在测量

1564
02:03:31,060 --> 02:03:33,060
 temperature in this room, the

1564
02:03:31,060 --> 02:03:33,060
这个房间的温度，

1565
02:03:33,060 --> 02:03:35,060
 horizontal axis is the time,

1565
02:03:33,060 --> 02:03:35,060
横轴是时间，

1566
02:03:35,060 --> 02:03:37,060
 vertical axis is the temperature.

1566
02:03:35,060 --> 02:03:37,060
纵轴是温度。

1567
02:03:37,060 --> 02:03:39,060
 So, then you have the signal,

1567
02:03:37,060 --> 02:03:39,060
那么，你就有信号了，

1568
02:03:39,060 --> 02:03:41,060
 time-based signal, which looks like that.

1568
02:03:39,060 --> 02:03:41,060
基于时间的信号，看起来像那样。

1569
02:03:41,060 --> 02:03:43,060
 So, we know that for time-based

1569
02:03:41,060 --> 02:03:43,060
所以，我们知道对于基于时间的

1570
02:03:43,060 --> 02:03:45,060
 signal, when you say

1570
02:03:43,060 --> 02:03:45,060
信号，当你说

1571
02:03:45,060 --> 02:03:47,060
 for a time-based signal, it has high

1571
02:03:45,060 --> 02:03:47,060
对于基于时间的信号，它具有高

1572
02:03:47,060 --> 02:03:49,060
 frequency component.

1572
02:03:47,060 --> 02:03:49,060
频率分量。

1573
02:03:49,060 --> 02:03:51,060
 What does that mean? If you have

1573
02:03:49,060 --> 02:03:51,060
这意味着什么？如果你有

1574
02:03:51,060 --> 02:03:53,060
 a time-based signal, for example,

1574
02:03:51,060 --> 02:03:53,060
基于时间的信号，例如

1575
02:03:53,060 --> 02:03:55,060
 temperature in this room,

1575
02:03:53,060 --> 02:03:55,060
这个房间的温度，

1576
02:03:55,060 --> 02:03:57,060
 and you say that

1576
02:03:55,060 --> 02:03:57,060
你这么说

1577
02:03:57,060 --> 02:03:59,060
 this time-based signal or temperature

1577
02:03:57,060 --> 02:03:59,060
这个基于时间的信号或温度

1578
02:03:59,060 --> 02:04:01,060
 in this room has high frequency

1578
02:03:59,060 --> 02:04:01,060
在这个房间里出现的频率很高

1579
02:04:01,060 --> 02:04:03,060
 component, what does that mean?

1579
02:04:01,060 --> 02:04:03,060
组件，什么意思？

1580
02:04:03,060 --> 02:04:05,060
 It means that your signal is

1580
02:04:03,060 --> 02:04:05,060
这意味着你的信号是

1581
02:04:05,060 --> 02:04:07,060
 fluctuating very quickly.

1581
02:04:05,060 --> 02:04:07,060
波动非常快。

1582
02:04:07,060 --> 02:04:09,060
 High frequency means that it's changing

1582
02:04:07,060 --> 02:04:09,060
高频意味着它在变化

1583
02:04:09,060 --> 02:04:11,060
 very quickly. So, that's the interpretation

1583
02:04:09,060 --> 02:04:11,060
非常快。那么，这就是解释

1584
02:04:11,060 --> 02:04:13,060
 in the time domain,

1584
02:04:11,060 --> 02:04:13,060
在时域中，

1585
02:04:13,060 --> 02:04:15,060
 which is a 1D signal.

1585
02:04:13,060 --> 02:04:15,060
这是一个一维信号。

1586
02:04:15,060 --> 02:04:17,060
 But, if you are talking about image domain,

1586
02:04:15,060 --> 02:04:17,060
但是，如果你谈论的是图像域，

1587
02:04:17,060 --> 02:04:19,060
 so for image domain, what we

1587
02:04:17,060 --> 02:04:19,060
所以对于图像域，我们

1588
02:04:19,060 --> 02:04:21,060
 have is that, for example,

1588
02:04:19,060 --> 02:04:21,060
有的是，例如，

1589
02:04:21,060 --> 02:04:23,060
 this image here,

1589
02:04:21,060 --> 02:04:23,060
这张图片在这里，

1590
02:04:23,060 --> 02:04:25,060
 we have the x-y coordinate

1590
02:04:23,060 --> 02:04:25,060
我们有 x-y 坐标

1591
02:04:25,060 --> 02:04:27,060
 system,

1591
02:04:25,060 --> 02:04:27,060
系统，

1592
02:04:27,060 --> 02:04:29,060
 x and y coordinate system.

1592
02:04:27,060 --> 02:04:29,060
x 和 y 坐标系。

1593
02:04:29,060 --> 02:04:31,060
 x and y coordinate system.

1593
02:04:29,060 --> 02:04:31,060
x 和 y 坐标系。

1594
02:04:31,060 --> 02:04:33,060
 And then afterwards, from last lecture,

1594
02:04:31,060 --> 02:04:33,060
然后，从上次讲座开始，

1595
02:04:33,060 --> 02:04:35,060
 we know we have different pixels.

1595
02:04:33,060 --> 02:04:35,060
我们知道我们有不同的像素。

1596
02:04:35,060 --> 02:04:37,060
 If you look at each of the RGB

1596
02:04:35,060 --> 02:04:37,060
如果你看一下每个 RGB

1597
02:04:37,060 --> 02:04:39,060
 channel value,

1597
02:04:37,060 --> 02:04:39,060
通道值，

1598
02:04:39,060 --> 02:04:41,060
 it can be interpreted as a

1598
02:04:39,060 --> 02:04:41,060
它可以被解释为

1599
02:04:41,060 --> 02:04:43,060
 z-value, the

1599
02:04:41,060 --> 02:04:43,060
z 值，

1600
02:04:43,060 --> 02:04:45,060
 z-axis value. So, therefore,

1600
02:04:43,060 --> 02:04:45,060
z 轴值。所以，因此，

1601
02:04:45,060 --> 02:04:47,060
 for an image like this,

1601
02:04:45,060 --> 02:04:47,060
对于这样的图像，

1602
02:04:47,060 --> 02:04:49,060
 this is the x and y

1602
02:04:47,060 --> 02:04:49,060
这是 x 和 y

1603
02:04:49,060 --> 02:04:51,060
 coordinate system, and each

1603
02:04:49,060 --> 02:04:51,060
坐标系，并且每个

1604
02:04:51,060 --> 02:04:53,060
 of the RGB channel can be

1604
02:04:51,060 --> 02:04:53,060
RGB 通道的值可以是

1605
02:04:53,060 --> 02:04:55,060
 interpreted as the z-value,

1605
02:04:53,060 --> 02:04:55,060
解释为 z 值，

1606
02:04:55,060 --> 02:04:57,060
 or like the mountain and valley,

1606
02:04:55,060 --> 02:04:57,060
或者像高山和山谷，

1607
02:04:57,060 --> 02:04:59,060
 the landscape. So, therefore,

1607
02:04:57,060 --> 02:04:59,060
风景。所以，因此，

1608
02:04:59,060 --> 02:05:01,060
 for an image like this,

1608
02:04:59,060 --> 02:05:01,060
对于这样的图像，

1609
02:05:01,060 --> 02:05:03,060
 you can interpret it like,

1609
02:05:01,060 --> 02:05:03,060
你可以把它解释为

1610
02:05:03,060 --> 02:05:05,060
 you have a landscape,

1610
02:05:03,060 --> 02:05:05,060
你有一片风景，

1611
02:05:05,060 --> 02:05:07,060
 you have mountains and valleys.

1611
02:05:05,060 --> 02:05:07,060
你有山脉和山谷。

1612
02:05:07,060 --> 02:05:09,060
 So, if these particular mountains

1612
02:05:07,060 --> 02:05:09,060
所以，如果这些特定的山脉

1613
02:05:09,060 --> 02:05:11,060
 and valleys change very quickly,

1613
02:05:09,060 --> 02:05:11,060
山谷变化得很快，

1614
02:05:11,060 --> 02:05:13,060
 then we say that this image

1614
02:05:11,060 --> 02:05:13,060
然后我们说这个图像

1615
02:05:13,060 --> 02:05:15,060
 has high frequency component.

1615
02:05:13,060 --> 02:05:15,060
具有高频成分。

1616
02:05:15,060 --> 02:05:17,060
 And if,

1616
02:05:15,060 --> 02:05:17,060
如果，

1617
02:05:17,060 --> 02:05:19,060
 for example, in this particular image,

1617
02:05:17,060 --> 02:05:19,060
例如，在这张特定的图像中，

1618
02:05:19,060 --> 02:05:21,060
 these regions here,

1618
02:05:19,060 --> 02:05:21,060
这里的这些地区，

1619
02:05:21,060 --> 02:05:23,060
 you can see the pixel value change

1619
02:05:21,060 --> 02:05:23,060
可以看到像素值的变化

1620
02:05:23,060 --> 02:05:25,060
 very slowly. So, this is the

1620
02:05:23,060 --> 02:05:25,060
非常慢。所以，这就是

1621
02:05:25,060 --> 02:05:27,060
 x and y coordinate. If the

1621
02:05:25,060 --> 02:05:27,060
x 和 y 坐标。如果

1622
02:05:27,060 --> 02:05:29,060
 pixel value change very slowly,

1622
02:05:27,060 --> 02:05:29,060
像素值变化非常缓慢，

1623
02:05:29,060 --> 02:05:31,060
 then we say it has low frequency component.

1623
02:05:29,060 --> 02:05:31,060
那么我们就说它有低频成分。

1624
02:05:31,060 --> 02:05:33,060
 But if the pixel value

1624
02:05:31,060 --> 02:05:33,060
但如果像素值

1625
02:05:33,060 --> 02:05:35,060
 change very quickly, we can say

1625
02:05:33,060 --> 02:05:35,060
变化非常快，我们可以说

1626
02:05:35,060 --> 02:05:37,060
 that it has high frequency component.

1626
02:05:35,060 --> 02:05:37,060
它具有高频成分。

1627
02:05:37,060 --> 02:05:39,060
 So, this is the interpretation for

1627
02:05:37,060 --> 02:05:39,060
所以，这就是对

1628
02:05:39,060 --> 02:05:41,060
 image and video, when we are

1628
02:05:39,060 --> 02:05:41,060
图像和视频，当我们

1629
02:05:41,060 --> 02:05:43,060
 talking about a high or

1629
02:05:41,060 --> 02:05:43,060
谈论高或

1630
02:05:43,060 --> 02:05:45,060
 low frequency content. So,

1630
02:05:43,060 --> 02:05:45,060
低频内容。所以，

1631
02:05:45,060 --> 02:05:47,060
 therefore, if we take this particular

1631
02:05:45,060 --> 02:05:47,060
因此，如果我们采取这个特殊的

1632
02:05:47,060 --> 02:05:49,060
 image here, you can see that this image mainly

1632
02:05:47,060 --> 02:05:49,060
图片在这里，你可以看到这张图片主要是

1633
02:05:49,060 --> 02:05:51,060
 has low frequency content,

1633
02:05:49,060 --> 02:05:51,060
具有低频内容，

1634
02:05:51,060 --> 02:05:53,060
 because the pixel values change very

1634
02:05:51,060 --> 02:05:53,060
因为像素值变化很大

1635
02:05:53,060 --> 02:05:55,060
 slowly. Okay? In a small region,

1635
02:05:53,060 --> 02:05:55,060
慢慢地。好的？在一个小区域内，

1636
02:05:55,060 --> 02:05:57,060
 the pixel value changes slowly.

1636
02:05:55,060 --> 02:05:57,060
像素值变化缓慢。

1637
02:05:57,060 --> 02:05:59,060
 But this particular image, we

1637
02:05:57,060 --> 02:05:59,060
但是这个特殊的图像，我们

1638
02:05:59,060 --> 02:06:01,060
 can say that it has high frequency component,

1638
02:05:59,060 --> 02:06:01,060
可以说它具有高频成分，

1639
02:06:01,060 --> 02:06:03,060
 because in a lot of these

1639
02:06:01,060 --> 02:06:03,060
因为在很多这些

1640
02:06:03,060 --> 02:06:05,060
 small regions, the pixel value

1640
02:06:03,060 --> 02:06:05,060
小区域，像素值

1641
02:06:05,060 --> 02:06:07,060
 change very quickly. So, this is

1641
02:06:05,060 --> 02:06:07,060
变化很快。所以，这是

1642
02:06:07,060 --> 02:06:09,060
 the high-frequency- this image has lots of

1642
02:06:07,060 --> 02:06:09,060
高频 - 该图像有很多

1643
02:06:09,060 --> 02:06:11,060
 high frequency component. This

1643
02:06:09,060 --> 02:06:11,060
高频成分。这

1644
02:06:11,060 --> 02:06:13,060
 image has lots of low-frequency

1644
02:06:11,060 --> 02:06:13,060
图像有很多低频

1645
02:06:13,060 --> 02:06:15,060
 component. Okay?

1645
02:06:13,060 --> 02:06:15,060
成分。好的？

1646
02:06:15,060 --> 02:06:17,060
 So, now we know how to interpret

1646
02:06:15,060 --> 02:06:17,060
所以，现在我们知道如何解释

1647
02:06:17,060 --> 02:06:19,060
 the meaning of low frequency

1647
02:06:17,060 --> 02:06:19,060
低频的含义

1648
02:06:19,060 --> 02:06:21,060
 and high frequency component. Next,

1648
02:06:19,060 --> 02:06:21,060
和高频成分。下一个，

1649
02:06:21,060 --> 02:06:23,060
 we look at just now the example

1649
02:06:21,060 --> 02:06:23,060
我们看一下刚才的例子

1650
02:06:23,060 --> 02:06:25,060
 that we mentioned. Right, okay.

1650
02:06:23,060 --> 02:06:25,060
我们提到过。对了，好吧。

1651
02:06:25,060 --> 02:06:27,060
 So, again, we take the example of

1651
02:06:25,060 --> 02:06:27,060
所以，我们再次举个例子

1652
02:06:27,060 --> 02:06:29,060
 the clothes I'm wearing today. Right?

1652
02:06:27,060 --> 02:06:29,060
我今天穿的衣服。正确的？

1653
02:06:29,060 --> 02:06:31,060
 So, this particular- the clothes

1653
02:06:29,060 --> 02:06:31,060
所以，这个特别的——衣服

1654
02:06:31,060 --> 02:06:33,060
 I'm wearing today mainly has

1654
02:06:31,060 --> 02:06:33,060
我今天穿的主要有

1655
02:06:33,060 --> 02:06:35,060
 lots of low-frequency component,

1655
02:06:33,060 --> 02:06:35,060
大量的低频成分，

1656
02:06:35,060 --> 02:06:37,060
 because you can see lots of regions

1656
02:06:35,060 --> 02:06:37,060
因为你可以看到很多地区

1657
02:06:37,060 --> 02:06:39,060
 changing very slowly. So,

1657
02:06:37,060 --> 02:06:39,060
变化非常缓慢。所以，

1658
02:06:39,060 --> 02:06:41,060
 our eyes are very sensitive to any

1658
02:06:39,060 --> 02:06:41,060
我们的眼睛对任何事物都非常敏感

1659
02:06:41,060 --> 02:06:43,060
 noise or distortion,

1659
02:06:41,060 --> 02:06:43,060
噪声或失真，

1660
02:06:43,060 --> 02:06:45,060
 or changes in low-frequency region.

1660
02:06:43,060 --> 02:06:45,060
或低频区域的变化。

1661
02:06:45,060 --> 02:06:47,060
 So, what I'm trying to say is, imagine

1661
02:06:45,060 --> 02:06:47,060
所以，我想说的是，想象一下

1662
02:06:47,060 --> 02:06:49,060
 if just now dinner time, I eat some

1662
02:06:47,060 --> 02:06:49,060
如果现在是晚餐时间，我吃一些

1663
02:06:49,060 --> 02:06:51,060
 noodle, and then there's a spot here,

1663
02:06:49,060 --> 02:06:51,060
面条，然后这里有一个地方，

1664
02:06:51,060 --> 02:06:53,060
 right, most of you will be able to

1664
02:06:51,060 --> 02:06:53,060
是的，你们中的大多数人都能够

1665
02:06:53,060 --> 02:06:55,060
 identify quite quickly. Right? Because

1665
02:06:53,060 --> 02:06:55,060
识别得相当快。正确的？因为

1666
02:06:55,060 --> 02:06:57,060
 if this is a low-frequency region,

1666
02:06:55,060 --> 02:06:57,060
如果这是一个低频区域，

1667
02:06:57,060 --> 02:06:59,060
 if there's any noise or distortion

1667
02:06:57,060 --> 02:06:59,060
是否有任何噪音或失真

1668
02:06:59,060 --> 02:07:01,060
 in low-frequency region, our eyes

1668
02:06:59,060 --> 02:07:01,060
在低频区域，我们的眼睛

1669
02:07:01,060 --> 02:07:03,060
 can notice it very quickly.

1669
02:07:01,060 --> 02:07:03,060
可以很快注意到它。

1670
02:07:03,060 --> 02:07:05,060
 Yeah. So, as opposed to that,

1670
02:07:03,060 --> 02:07:05,060
是的。所以，与此相反，

1671
02:07:05,060 --> 02:07:07,060
 right, for example, if I'm wearing

1671
02:07:05,060 --> 02:07:07,060
是的，例如，如果我穿着

1672
02:07:07,060 --> 02:07:09,060
 a shirt, which has

1672
02:07:07,060 --> 02:07:09,060
一件衬衫，上面有

1673
02:07:09,060 --> 02:07:11,060
 lots of vertical stripe, you know,

1673
02:07:09,060 --> 02:07:11,060
很多垂直条纹，你知道，

1674
02:07:11,060 --> 02:07:13,060
 if there's a shirt with lots of- or

1674
02:07:11,060 --> 02:07:13,060
如果有一件衬衫有很多-或

1675
02:07:13,060 --> 02:07:15,060
 checkered shirt, you know, checkered shirt,

1675
02:07:13,060 --> 02:07:15,060
格子衬衫，你知道，格子衬衫，

1676
02:07:15,060 --> 02:07:17,060
 yeah, and if I have the same spots,

1676
02:07:15,060 --> 02:07:17,060
是的，如果我也有同样的地方，

1677
02:07:17,060 --> 02:07:19,060
 most of you will not be able to notice it,

1677
02:07:17,060 --> 02:07:19,060
大多数人都无法注意到它，

1678
02:07:19,060 --> 02:07:21,060
 because our eyes are not so sensitive

1678
02:07:19,060 --> 02:07:21,060
因为我们的眼睛没那么敏感

1679
02:07:21,060 --> 02:07:23,060
 to any changes in high-

1679
02:07:21,060 --> 02:07:23,060
对高的任何变化

1680
02:07:23,060 --> 02:07:25,060
 frequency component. So, that's one example.

1680
02:07:23,060 --> 02:07:25,060
频率分量。这就是一个例子。

1681
02:07:25,060 --> 02:07:27,060
 So, if you take this example,

1681
02:07:25,060 --> 02:07:27,060
所以，如果你拿这个例子来说，

1682
02:07:27,060 --> 02:07:29,060
 we can see this image has

1682
02:07:27,060 --> 02:07:29,060
我们可以看到这张图片有

1683
02:07:29,060 --> 02:07:31,060
 low-frequency component,

1683
02:07:29,060 --> 02:07:31,060
低频分量，

1684
02:07:31,060 --> 02:07:33,060
 so if there's any distortion,

1684
02:07:31,060 --> 02:07:33,060
所以如果有任何扭曲

1685
02:07:33,060 --> 02:07:35,060
 for example, if there's a small bird here,

1685
02:07:33,060 --> 02:07:35,060
举例来说，如果这里有一只小鸟，

1686
02:07:35,060 --> 02:07:37,060
 most of you will be able to spot

1686
02:07:35,060 --> 02:07:37,060
你们中的大多数人都能发现

1687
02:07:37,060 --> 02:07:39,060
 it very quickly. As opposed to

1687
02:07:37,060 --> 02:07:39,060
很快。相对于

1688
02:07:39,060 --> 02:07:41,060
 this, suppose this is an image

1688
02:07:39,060 --> 02:07:41,060
这个，假设这是一个图像

1689
02:07:41,060 --> 02:07:43,060
 with high-frequency component,

1689
02:07:41,060 --> 02:07:43,060
具有高频成分，

1690
02:07:43,060 --> 02:07:45,060
 if there's a small bird here, most of you

1690
02:07:43,060 --> 02:07:45,060
如果这里有一只小鸟，你们大多数人

1691
02:07:45,060 --> 02:07:47,060
 cannot see it so quickly.

1691
02:07:45,060 --> 02:07:47,060
不能这么快看到它。

1692
02:07:47,060 --> 02:07:49,060
 So, this particular thing is known as

1692
02:07:47,060 --> 02:07:49,060
所以，这个特殊的东西被称为

1693
02:07:49,060 --> 02:07:51,060
 the frequency masking. A human

1693
02:07:49,060 --> 02:07:51,060
频率掩蔽。一个人

1694
02:07:51,060 --> 02:07:53,060
 is more sensitive to noise or distortion

1694
02:07:51,060 --> 02:07:53,060
对噪声或失真更敏感

1695
02:07:53,060 --> 02:07:55,060
 in- is less sensitive,

1695
02:07:53,060 --> 02:07:55,060
in- 不太敏感，

1696
02:07:55,060 --> 02:07:57,060
 less sensitive to noise and distortion

1696
02:07:55,060 --> 02:07:57,060
对噪声和失真不太敏感

1697
02:07:57,060 --> 02:07:59,060
 in high-frequency

1697
02:07:57,060 --> 02:07:59,060
在高频

1698
02:07:59,060 --> 02:08:01,060
 component. So, the reverse

1698
02:07:59,060 --> 02:08:01,060
成分。那么，反过来

1699
02:08:01,060 --> 02:08:03,060
 means that it's more sensitive

1699
02:08:01,060 --> 02:08:03,060
意味着它更敏感

1700
02:08:03,060 --> 02:08:05,060
 to noise and distortion in low-frequency

1700
02:08:03,060 --> 02:08:05,060
低频噪声和失真

1701
02:08:05,060 --> 02:08:07,060
 component. So, this

1701
02:08:05,060 --> 02:08:07,060
成分。所以，这个

1702
02:08:07,060 --> 02:08:09,060
 property will be exploited

1702
02:08:07,060 --> 02:08:09,060
财产将被剥削

1703
02:08:09,060 --> 02:08:11,060
 later on when we study about

1703
02:08:09,060 --> 02:08:11,060
稍后当我们学习时

1704
02:08:11,060 --> 02:08:13,060
 image and video compression.

1704
02:08:11,060 --> 02:08:13,060
图像和视频压缩。

1705
02:08:13,060 --> 02:08:15,060
 So, later on, we'll- when we come to

1705
02:08:13,060 --> 02:08:15,060
所以，稍后，当我们来到

1706
02:08:15,060 --> 02:08:17,060
 the necessary place, I'll explain

1706
02:08:15,060 --> 02:08:17,060
必要的地方我会解释一下

1707
02:08:17,060 --> 02:08:19,060
 a little bit more. So, the next

1707
02:08:17,060 --> 02:08:19,060
再多一点。那么，接下来

1708
02:08:19,060 --> 02:08:21,060
 one is that colour masking.

1708
02:08:19,060 --> 02:08:21,060
一是颜色掩蔽。

1709
02:08:21,060 --> 02:08:23,060
 So, human is more sensitive to the

1709
02:08:21,060 --> 02:08:23,060
所以，人类对

1710
02:08:23,060 --> 02:08:25,060
 luminance or the brightness

1710
02:08:23,060 --> 02:08:25,060
亮度或亮度

1711
02:08:25,060 --> 02:08:27,060
 component. Sometimes we also call

1711
02:08:25,060 --> 02:08:27,060
成分。有时我们也打电话

1712
02:08:27,060 --> 02:08:29,060
 it the luma, okay?

1712
02:08:27,060 --> 02:08:29,060
它是亮度，好吗？

1713
02:08:29,060 --> 02:08:31,060
 Then, the colour or the

1713
02:08:29,060 --> 02:08:31,060
然后，颜色或

1714
02:08:31,060 --> 02:08:33,060
 chrominance or the chroma component.

1714
02:08:31,060 --> 02:08:33,060
色度或色度分量。

1715
02:08:33,060 --> 02:08:35,060
 So, this point we have actually explained

1715
02:08:33,060 --> 02:08:35,060
所以，这一点我们实际上已经解释过了

1716
02:08:35,060 --> 02:08:37,060
 in last lecture

1716
02:08:35,060 --> 02:08:37,060
在上一讲中

1717
02:08:37,060 --> 02:08:39,060
 as well. So, this is also

1717
02:08:37,060 --> 02:08:39,060
以及。所以，这也是

1718
02:08:39,060 --> 02:08:41,060
 another property that

1718
02:08:39,060 --> 02:08:41,060
另一个属性

1719
02:08:41,060 --> 02:08:43,060
 we exploit to

1719
02:08:41,060 --> 02:08:43,060
我们利用

1720
02:08:43,060 --> 02:08:45,060
 perform image and video

1720
02:08:43,060 --> 02:08:45,060
执行图像和视频

1721
02:08:45,060 --> 02:08:47,060
 compression. So, how do we do that?

1721
02:08:45,060 --> 02:08:47,060
压缩。那么，我们该怎么做呢？

1722
02:08:47,060 --> 02:08:49,060
 So, the first thing is that

1722
02:08:47,060 --> 02:08:49,060
所以，第一件事是

1723
02:08:49,060 --> 02:08:51,060
 for those colour channel,

1723
02:08:49,060 --> 02:08:51,060
对于那些颜色通道，

1724
02:08:51,060 --> 02:08:53,060
 so if you remember

1724
02:08:51,060 --> 02:08:53,060
所以如果你还记得

1725
02:08:53,060 --> 02:08:55,060
 in previous lecture, we say that

1725
02:08:53,060 --> 02:08:55,060
在上一讲中，我们说

1726
02:08:55,060 --> 02:08:57,060
 in image and video compression,

1726
02:08:55,060 --> 02:08:57,060
在图像和视频压缩方面，

1727
02:08:57,060 --> 02:08:59,060
 very often we represent the image in

1727
02:08:57,060 --> 02:08:59,060
很多时候我们将图像表示为

1728
02:08:59,060 --> 02:09:01,060
 Y, C, B, C, R kind of colour model.

1728
02:08:59,060 --> 02:09:01,060
Y、C、B、C、R 种颜色模型。

1729
02:09:01,060 --> 02:09:03,060
 And Y is the component,

1729
02:09:01,060 --> 02:09:03,060
Y 是分量，

1730
02:09:03,060 --> 02:09:05,060
 C, B and C, R is the colour

1730
02:09:03,060 --> 02:09:05,060
C、B和C、R是颜色

1731
02:09:05,060 --> 02:09:07,060
 component. So, because our eyes are

1731
02:09:05,060 --> 02:09:07,060
成分。所以，因为我们的眼睛

1732
02:09:07,060 --> 02:09:09,060
 not so sensitive to the C, B and C,

1732
02:09:07,060 --> 02:09:09,060
对C、B和C不太敏感，

1733
02:09:09,060 --> 02:09:11,060
 R, the colour component,

1733
02:09:09,060 --> 02:09:11,060
R，颜色分量，

1734
02:09:11,060 --> 02:09:13,060
 we can afford to drop some of the

1734
02:09:11,060 --> 02:09:13,060
我们有能力放弃一些

1735
02:09:13,060 --> 02:09:15,060
 sample. So, that is the

1735
02:09:13,060 --> 02:09:15,060
样本。所以，这就是

1736
02:09:15,060 --> 02:09:17,060
 idea that will be used later on,

1736
02:09:15,060 --> 02:09:17,060
稍后将使用的想法，

1737
02:09:17,060 --> 02:09:19,060
 as we will see later,

1737
02:09:17,060 --> 02:09:19,060
我们稍后会看到，

1738
02:09:19,060 --> 02:09:21,060
 to perform image and video

1738
02:09:19,060 --> 02:09:21,060
执行图像和视频

1739
02:09:21,060 --> 02:09:23,060
 compression.

1739
02:09:21,060 --> 02:09:23,060
压缩。

1740
02:09:23,060 --> 02:09:25,060
 Right, okay, so,

1740
02:09:23,060 --> 02:09:25,060
对啊，好吧，所以，

1741
02:09:25,060 --> 02:09:27,060
 I think about

1741
02:09:25,060 --> 02:09:27,060
我想

1742
02:09:27,060 --> 02:09:29,060
 10 years ago, around 10 years

1742
02:09:27,060 --> 02:09:29,060
10年前，大约10年

1743
02:09:29,060 --> 02:09:31,060
 ago, this is a very famous kind of

1743
02:09:29,060 --> 02:09:31,060
以前，这是一种非常著名的

1744
02:09:31,060 --> 02:09:33,060
 image.

1744
02:09:31,060 --> 02:09:33,060
图像。

1745
02:09:33,060 --> 02:09:35,060
 I'm just wondering whether

1745
02:09:33,060 --> 02:09:35,060
我只是想知道是否

1746
02:09:35,060 --> 02:09:37,060
 any one of you has seen this image before?

1746
02:09:35,060 --> 02:09:37,060
你们中有人以前见过这张图片吗？

1747
02:09:37,060 --> 02:09:39,060
 Any one of you

1747
02:09:37,060 --> 02:09:39,060
你们中的任何一个人

1748
02:09:39,060 --> 02:09:41,060
 has seen this image? That means you are

1748
02:09:39,060 --> 02:09:41,060
看过这个图片吗？这意味着你是

1749
02:09:41,060 --> 02:09:43,060
 all very young.

1749
02:09:41,060 --> 02:09:43,060
都非常年轻。

1750
02:09:43,060 --> 02:09:45,060
 I think it's more than 10

1750
02:09:43,060 --> 02:09:45,060
我认为超过10个

1751
02:09:45,060 --> 02:09:47,060
 or 15 years ago already.

1751
02:09:45,060 --> 02:09:47,060
或者已经是15年前了。

1752
02:09:47,060 --> 02:09:49,060
 Right, okay, so this particular

1752
02:09:47,060 --> 02:09:49,060
好的，好的，所以这个特别

1753
02:09:49,060 --> 02:09:51,060
 image, what is so interesting about this image

1753
02:09:49,060 --> 02:09:51,060
图片，这张图片有什么有趣的地方

1754
02:09:51,060 --> 02:09:53,060
 is that different person

1754
02:09:51,060 --> 02:09:53,060
是不同的人吗

1755
02:09:53,060 --> 02:09:55,060
 will perceive this

1755
02:09:53,060 --> 02:09:55,060
会察觉到这一点

1756
02:09:55,060 --> 02:09:57,060
 image differently. Okay,

1756
02:09:55,060 --> 02:09:57,060
图像不同。好的，

1757
02:09:57,060 --> 02:09:59,060
 so, I just want to

1757
02:09:57,060 --> 02:09:59,060
所以，我只想

1758
02:09:59,060 --> 02:10:01,060
 check, okay, how many

1758
02:09:59,060 --> 02:10:01,060
检查一下，好的，有多少

1759
02:10:01,060 --> 02:10:03,060
 of you can see this particular image

1759
02:10:01,060 --> 02:10:03,060
你可以看到这个特定的图像

1760
02:10:03,060 --> 02:10:05,060
 as a gold and white

1760
02:10:03,060 --> 02:10:05,060
作为金色和白色

1761
02:10:05,060 --> 02:10:07,060
 colour? Gold and white.

1761
02:10:05,060 --> 02:10:07,060
颜色？金色和白色。

1762
02:10:07,060 --> 02:10:09,060
 Can you just raise your hand?

1762
02:10:07,060 --> 02:10:09,060
你能举手吗？

1763
02:10:09,060 --> 02:10:11,060
 If you see this particular

1763
02:10:09,060 --> 02:10:11,060
如果你看到这个特别的

1764
02:10:11,060 --> 02:10:13,060
 dress, the colour is

1764
02:10:11,060 --> 02:10:13,060
衣服，颜色是

1765
02:10:13,060 --> 02:10:15,060
 white and gold. Please raise your hand.

1765
02:10:13,060 --> 02:10:15,060
白色和金色。请举手。

1766
02:10:19,060 --> 02:10:21,060
 Wow, okay, your class, not so many, but

1766
02:10:19,060 --> 02:10:21,060
哇，好吧，你们的班级，没有那么多，但是

1767
02:10:21,060 --> 02:10:23,060
 some to see it. Okay,

1767
02:10:21,060 --> 02:10:23,060
有些人会看到它。好的，

1768
02:10:23,060 --> 02:10:25,060
 so, some other people, what

1768
02:10:23,060 --> 02:10:25,060
那么，其他一些人，什么

1769
02:10:25,060 --> 02:10:27,060
 other colour do you see?

1769
02:10:25,060 --> 02:10:27,060
你看到其他颜色了吗？

1770
02:10:29,060 --> 02:10:31,060
 Black and?

1770
02:10:29,060 --> 02:10:31,060
黑和？

1771
02:10:31,060 --> 02:10:33,060
 Black and blue, right? So some of you see

1771
02:10:31,060 --> 02:10:33,060
黑色和蓝色，对吗？所以你们有些人看到

1772
02:10:33,060 --> 02:10:35,060
 as black and blue.

1772
02:10:33,060 --> 02:10:35,060
如黑色和蓝色。

1773
02:10:35,060 --> 02:10:37,060
 Can I just have a show of hands?

1773
02:10:35,060 --> 02:10:37,060
我可以举手吗？

1774
02:10:37,060 --> 02:10:39,060
 I just want to see the

1774
02:10:37,060 --> 02:10:39,060
我只想看看

1775
02:10:39,060 --> 02:10:41,060
 statistics roughly. Black,

1775
02:10:39,060 --> 02:10:41,060
粗略统计一下。黑色的，

1776
02:10:41,060 --> 02:10:43,060
 who of you see black

1776
02:10:41,060 --> 02:10:43,060
你们谁看到黑色

1777
02:10:43,060 --> 02:10:45,060
 and blue?

1777
02:10:43,060 --> 02:10:45,060
和蓝色？

1778
02:10:45,060 --> 02:10:47,060
 Okay, I think more

1778
02:10:45,060 --> 02:10:47,060
好吧，我想多了

1779
02:10:47,060 --> 02:10:49,060
 than just now the gold and

1779
02:10:47,060 --> 02:10:49,060
比刚才的黄金和

1780
02:10:49,060 --> 02:10:51,060
 white. Actually,

1780
02:10:49,060 --> 02:10:51,060
白色的。实际上，

1781
02:10:51,060 --> 02:10:53,060
 for myself, I see it as white

1781
02:10:51,060 --> 02:10:53,060
对于我自己来说，我认为它是白色的

1782
02:10:53,060 --> 02:10:55,060
 and gold colour. This is gold colour

1782
02:10:53,060 --> 02:10:55,060
和金色。这是金色的颜色

1783
02:10:55,060 --> 02:10:57,060
 and this is white colour.

1783
02:10:55,060 --> 02:10:57,060
这是白色的。

1784
02:10:57,060 --> 02:10:59,060
 So, okay, so actually this is one of the

1784
02:10:57,060 --> 02:10:59,060
所以，好吧，实际上这是其中之一

1785
02:10:59,060 --> 02:11:01,060
 images that account

1785
02:10:59,060 --> 02:11:01,060
说明的图像

1786
02:11:01,060 --> 02:11:03,060
 it depends on

1786
02:11:01,060 --> 02:11:03,060
这取决于

1787
02:11:03,060 --> 02:11:05,060
 human vision system. Therefore, human vision system

1787
02:11:03,060 --> 02:11:05,060
人类视觉系统。因此，人类视觉系统

1788
02:11:05,060 --> 02:11:07,060
 is very imprecise. Different people

1788
02:11:05,060 --> 02:11:07,060
是非常不精确的。不同的人

1789
02:11:07,060 --> 02:11:09,060
 would perceive it differently.

1789
02:11:07,060 --> 02:11:09,060
会有不同的看法。

1790
02:11:09,060 --> 02:11:11,060
 So, according to some studies,

1790
02:11:09,060 --> 02:11:11,060
所以，根据一些研究，

1791
02:11:11,060 --> 02:11:13,060
 they say that it depends on

1791
02:11:11,060 --> 02:11:13,060
他们说这取决于

1792
02:11:13,060 --> 02:11:15,060
 each individual's

1792
02:11:13,060 --> 02:11:15,060
每个人的

1793
02:11:15,060 --> 02:11:17,060
 types of, you know, how many

1793
02:11:15,060 --> 02:11:17,060
类型，你知道，有多少

1794
02:11:17,060 --> 02:11:19,060
 rod and cone

1794
02:11:17,060 --> 02:11:19,060
杆和锥

1795
02:11:19,060 --> 02:11:21,060
 perceive different colour.

1795
02:11:19,060 --> 02:11:21,060
感知不同的颜色。

1796
02:11:21,060 --> 02:11:23,060
 So, that's why some of you will see

1796
02:11:21,060 --> 02:11:23,060
所以，这就是为什么你们中的一些人会看到

1797
02:11:23,060 --> 02:11:25,060
 the colour slightly differently.

1797
02:11:23,060 --> 02:11:25,060
颜色略有不同。

1798
02:11:25,060 --> 02:11:27,060
 So, there's no right and wrong, it's just

1798
02:11:25,060 --> 02:11:27,060
所以，没有什么对错之分，只是

1799
02:11:27,060 --> 02:11:29,060
 how human vision system

1799
02:11:27,060 --> 02:11:29,060
人类视觉系统如何

1800
02:11:29,060 --> 02:11:31,060
 perceives it.

1800
02:11:29,060 --> 02:11:31,060
感知到它。

1801
02:11:31,060 --> 02:11:33,060
 And then later on, there was someone who actually

1801
02:11:31,060 --> 02:11:33,060
然后后来真的有人

1802
02:11:33,060 --> 02:11:35,060
 take an image. So, because

1802
02:11:33,060 --> 02:11:35,060
拍摄一张照片。所以，因为

1803
02:11:35,060 --> 02:11:37,060
 what happened is that, you know, person who

1803
02:11:35,060 --> 02:11:37,060
发生的事情是，你知道，那个人

1804
02:11:37,060 --> 02:11:39,060
 see as white and yellow,

1804
02:11:37,060 --> 02:11:39,060
看到白色和黄色，

1805
02:11:39,060 --> 02:11:41,060
 they do not know what other people are

1805
02:11:39,060 --> 02:11:41,060
他们不知道其他人是什么

1806
02:11:41,060 --> 02:11:43,060
 seeing. And other people see

1806
02:11:41,060 --> 02:11:43,060
看到。而其他人看到的

1807
02:11:43,060 --> 02:11:45,060
 black and blue,

1807
02:11:43,060 --> 02:11:45,060
黑色和蓝色，

1808
02:11:45,060 --> 02:11:47,060
 they also do not know what other people are

1808
02:11:45,060 --> 02:11:47,060
他们也不知道其他人是什么

1809
02:11:47,060 --> 02:11:49,060
 seeing. So, this is one image

1809
02:11:47,060 --> 02:11:49,060
看到。所以，这是一张图片

1810
02:11:49,060 --> 02:11:51,060
 that try to show

1810
02:11:49,060 --> 02:11:51,060
试图展示

1811
02:11:51,060 --> 02:11:53,060
 what the other party

1811
02:11:51,060 --> 02:11:53,060
对方什么

1812
02:11:53,060 --> 02:11:55,060
 see. So, according to what they say,

1812
02:11:53,060 --> 02:11:55,060
看。所以，按照他们的说法，

1813
02:11:55,060 --> 02:11:57,060
 some people see this colour

1813
02:11:55,060 --> 02:11:57,060
有些人看到这个颜色

1814
02:11:57,060 --> 02:11:59,060
 white and gold, some people

1814
02:11:57,060 --> 02:11:59,060
白色和金色，有些人

1815
02:11:59,060 --> 02:12:01,060
 see this colour more like closer

1815
02:11:59,060 --> 02:12:01,060
更接近地看到这种颜色

1816
02:12:01,060 --> 02:12:03,060
 to blue and

1816
02:12:01,060 --> 02:12:03,060
到蓝色和

1817
02:12:03,060 --> 02:12:05,060
 black, but actually I still see

1817
02:12:03,060 --> 02:12:05,060
黑色，但实际上我还是看到了

1818
02:12:05,060 --> 02:12:07,060
 gold and white, but

1818
02:12:05,060 --> 02:12:07,060
金色和白色，但是

1819
02:12:07,060 --> 02:12:09,060
 okay, can some of you who

1819
02:12:07,060 --> 02:12:09,060
好的，你们中的一些人可以吗

1820
02:12:09,060 --> 02:12:11,060
 see

1820
02:12:09,060 --> 02:12:11,060
看

1821
02:12:11,060 --> 02:12:13,060
 black and blue see this gold and

1821
02:12:11,060 --> 02:12:13,060
黑色和蓝色看到这个金色和

1822
02:12:13,060 --> 02:12:15,060
 white here?

1822
02:12:13,060 --> 02:12:15,060
这里是白色的吗？

1823
02:12:15,060 --> 02:12:17,060
 Can some of you see?

1823
02:12:15,060 --> 02:12:17,060
你们中的一些人能看到吗？

1824
02:12:17,060 --> 02:12:19,060
 Okay, or do you see two different

1824
02:12:17,060 --> 02:12:19,060
好吧，或者你看到两个不同的

1825
02:12:19,060 --> 02:12:21,060
 set of colour?

1825
02:12:19,060 --> 02:12:21,060
颜色组？

1826
02:12:21,060 --> 02:12:23,060
 Okay,

1826
02:12:21,060 --> 02:12:23,060
好的，

1827
02:12:23,060 --> 02:12:25,060
 so anyway, this is

1827
02:12:23,060 --> 02:12:25,060
所以无论如何，这是

1828
02:12:25,060 --> 02:12:27,060
 a very interesting thing. Last year

1828
02:12:25,060 --> 02:12:27,060
一件非常有趣的事情。去年

1829
02:12:27,060 --> 02:12:29,060
 actually, I asked a student as well,

1829
02:12:27,060 --> 02:12:29,060
其实我也问过一个学生，

1830
02:12:29,060 --> 02:12:31,060
 it turned out that about two-third of them

1830
02:12:29,060 --> 02:12:31,060
事实证明，其中大约三分之二

1831
02:12:31,060 --> 02:12:33,060
 see them as black and blue,

1831
02:12:31,060 --> 02:12:33,060
将它们视为黑色和蓝色，

1832
02:12:33,060 --> 02:12:35,060
 about one-third see

1832
02:12:33,060 --> 02:12:35,060
大约三分之一看到

1833
02:12:35,060 --> 02:12:37,060
 as yellow and white.

1833
02:12:35,060 --> 02:12:37,060
如黄色和白色。

1834
02:12:37,060 --> 02:12:39,060
 So, obviously I'm the minority

1834
02:12:37,060 --> 02:12:39,060
所以，显然我是少数

1835
02:12:39,060 --> 02:12:41,060
 here as well.

1835
02:12:39,060 --> 02:12:41,060
这里也一样。

1836
02:12:43,060 --> 02:12:45,060
 Right, okay, so

1836
02:12:43,060 --> 02:12:45,060
对啊，好吧，所以

1837
02:12:45,060 --> 02:12:47,060
 let's continue.

1837
02:12:45,060 --> 02:12:47,060
让我们继续吧。

1838
02:12:47,060 --> 02:12:49,060
 Right, okay, so the next

1838
02:12:47,060 --> 02:12:49,060
好吧，那么接下来

1839
02:12:49,060 --> 02:12:51,060
 things we want to explain is this concept

1839
02:12:49,060 --> 02:12:51,060
我们要解释的就是这个概念

1840
02:12:51,060 --> 02:12:53,060
 about lossy and lossless compression.

1840
02:12:51,060 --> 02:12:53,060
关于有损和无损压缩。

1841
02:12:53,060 --> 02:12:55,060
 So, what is the lossy and lossless compression?

1841
02:12:53,060 --> 02:12:55,060
那么，什么是有损压缩和无损压缩呢？

1842
02:12:55,060 --> 02:12:57,060
 So, lossless

1842
02:12:55,060 --> 02:12:57,060
所以，无损

1843
02:12:57,060 --> 02:12:59,060
 compression is like this. So, initially

1843
02:12:57,060 --> 02:12:59,060
压缩是这样的。所以，最初

1844
02:12:59,060 --> 02:13:01,060
 you have the media, right?

1844
02:12:59,060 --> 02:13:01,060
你有媒体，对吗？

1845
02:13:01,060 --> 02:13:03,060
 You perform the compression to make it into

1845
02:13:01,060 --> 02:13:03,060
您执行压缩以使其成为

1846
02:13:03,060 --> 02:13:05,060
 a smaller file size, and afterwards

1846
02:13:03,060 --> 02:13:05,060
较小的文件大小，然后

1847
02:13:05,060 --> 02:13:07,060
 you decompress it

1847
02:13:05,060 --> 02:13:07,060
你解压它

1848
02:13:07,060 --> 02:13:09,060
 to make it into a bigger file size,

1848
02:13:07,060 --> 02:13:09,060
使其成为更大的文件大小，

1849
02:13:09,060 --> 02:13:11,060
 to reconstruct the media.

1849
02:13:09,060 --> 02:13:11,060
重建媒体。

1850
02:13:11,060 --> 02:13:13,060
 So, if you're reconstructed,

1850
02:13:11,060 --> 02:13:13,060
所以，如果你重建了，

1851
02:13:13,060 --> 02:13:15,060
 for example, image, you're

1851
02:13:13,060 --> 02:13:15,060
例如，图像，你是

1852
02:13:15,060 --> 02:13:17,060
 reconstructed data, and your

1852
02:13:15,060 --> 02:13:17,060
重建的数据，以及你的

1853
02:13:17,060 --> 02:13:19,060
 original data are exactly the

1853
02:13:17,060 --> 02:13:19,060
原始数据正是

1854
02:13:19,060 --> 02:13:21,060
 same, then we call it lossless

1854
02:13:19,060 --> 02:13:21,060
一样，那么我们称之为无损

1855
02:13:21,060 --> 02:13:23,060
 compression, because no

1855
02:13:21,060 --> 02:13:23,060
压缩，因为没有

1856
02:13:23,060 --> 02:13:25,060
 information has been lost. Okay?

1856
02:13:23,060 --> 02:13:25,060
信息已丢失。好的？

1857
02:13:25,060 --> 02:13:27,060
 So, therefore that's quite clear. So, that's

1857
02:13:25,060 --> 02:13:27,060
所以，这很清楚。那么，那就是

1858
02:13:27,060 --> 02:13:29,060
 lossless compression. So, as opposed to

1858
02:13:27,060 --> 02:13:29,060
无损压缩。所以，相对于

1859
02:13:29,060 --> 02:13:31,060
 that, lossy compression means that

1859
02:13:29,060 --> 02:13:31,060
有损压缩意味着

1860
02:13:31,060 --> 02:13:33,060
 you have the media, right, or data,

1860
02:13:31,060 --> 02:13:33,060
你有媒体、权利或数据，

1861
02:13:33,060 --> 02:13:35,060
 you compress it to become smaller

1861
02:13:33,060 --> 02:13:35,060
你压缩它变得更小

1862
02:13:35,060 --> 02:13:37,060
 file size, afterwards you

1862
02:13:35,060 --> 02:13:37,060
文件大小，之后你

1863
02:13:37,060 --> 02:13:39,060
 try to decompress it to

1863
02:13:37,060 --> 02:13:39,060
尝试将其解压到

1864
02:13:39,060 --> 02:13:41,060
 reconstruct your data. If your

1864
02:13:39,060 --> 02:13:41,060
重建您的数据。如果你的

1865
02:13:41,060 --> 02:13:43,060
 reconstructed data is different

1865
02:13:41,060 --> 02:13:43,060
重建的数据不同

1866
02:13:43,060 --> 02:13:45,060
 from your original data, then

1866
02:13:43,060 --> 02:13:45,060
从你的原始数据，然后

1867
02:13:45,060 --> 02:13:47,060
 this is known as a lossy compression,

1867
02:13:45,060 --> 02:13:47,060
这称为有损压缩，

1868
02:13:47,060 --> 02:13:49,060
 because some

1868
02:13:47,060 --> 02:13:49,060
因为一些

1869
02:13:49,060 --> 02:13:51,060
 information has been lost already.

1869
02:13:49,060 --> 02:13:51,060
信息已经丢失。

1870
02:13:51,060 --> 02:13:53,060
 Okay? So, therefore the definition

1870
02:13:51,060 --> 02:13:53,060
好的？因此，定义

1871
02:13:53,060 --> 02:13:55,060
 between lossless and lossy compression

1871
02:13:53,060 --> 02:13:55,060
无损压缩和有损压缩之间

1872
02:13:55,060 --> 02:13:57,060
 is quite clear. So, in

1872
02:13:55,060 --> 02:13:57,060
是很清楚的。所以，在

1873
02:13:57,060 --> 02:13:59,060
 most of the typical

1873
02:13:57,060 --> 02:13:59,060
大多数典型的

1874
02:13:59,060 --> 02:14:01,060
 image and video compression,

1874
02:13:59,060 --> 02:14:01,060
图像和视频压缩，

1875
02:14:01,060 --> 02:14:03,060
 do you think most of them

1875
02:14:01,060 --> 02:14:03,060
你认为他们中的大多数人

1876
02:14:03,060 --> 02:14:05,060
 fall under lossy

1876
02:14:03,060 --> 02:14:05,060
有损

1877
02:14:05,060 --> 02:14:07,060
 or lossless compression?

1877
02:14:05,060 --> 02:14:07,060
还是无损压缩？

1878
02:14:09,060 --> 02:14:11,060
 So, now that we understand

1878
02:14:09,060 --> 02:14:11,060
所以，现在我们明白了

1879
02:14:11,060 --> 02:14:13,060
 what's lossy compression and what's

1879
02:14:11,060 --> 02:14:13,060
什么是有损压缩以及什么是

1880
02:14:13,060 --> 02:14:15,060
 lossless compression, in most

1880
02:14:13,060 --> 02:14:15,060
无损压缩，在大多数情况下

1881
02:14:15,060 --> 02:14:17,060
 kind of typical

1881
02:14:15,060 --> 02:14:17,060
有点典型

1882
02:14:17,060 --> 02:14:19,060
 application, right, do you

1882
02:14:17,060 --> 02:14:19,060
申请，对吧，你呢

1883
02:14:19,060 --> 02:14:21,060
 think we use lossless compression

1883
02:14:19,060 --> 02:14:21,060
认为我们使用无损压缩

1884
02:14:21,060 --> 02:14:23,060
 more or lossy compression more?

1884
02:14:21,060 --> 02:14:23,060
更多还是有损压缩更多？

1885
02:14:25,060 --> 02:14:27,060
 Lot?

1885
02:14:25,060 --> 02:14:27,060
很多？

1886
02:14:27,060 --> 02:14:29,060
 Actually, I can't hear

1886
02:14:27,060 --> 02:14:29,060
其实我听不到

1887
02:14:29,060 --> 02:14:31,060
 so clearly. It seems that there are

1887
02:14:29,060 --> 02:14:31,060
这么清楚。好像有

1888
02:14:31,060 --> 02:14:33,060
 a mix of, some

1888
02:14:31,060 --> 02:14:33,060
一些的混合

1889
02:14:33,060 --> 02:14:35,060
 people say it's lossy, some people say

1889
02:14:33,060 --> 02:14:35,060
有人说有损，有人说

1890
02:14:35,060 --> 02:14:37,060
 it's lossless. Right, okay.

1890
02:14:35,060 --> 02:14:37,060
它是无损的。对了，好吧。

1891
02:14:37,060 --> 02:14:39,060
 So, if

1891
02:14:37,060 --> 02:14:39,060
所以，如果

1892
02:14:39,060 --> 02:14:41,060
 you are a beginner, if you have not studied this

1892
02:14:39,060 --> 02:14:41,060
如果你还没有学过这个，你是一个初学者

1893
02:14:41,060 --> 02:14:43,060
 topic before, you will tend to think it's

1893
02:14:41,060 --> 02:14:43,060
之前的话题，你会倾向于认为它是

1894
02:14:43,060 --> 02:14:45,060
 lossless, right, because lossless is good, no information

1894
02:14:43,060 --> 02:14:45,060
无损，对吧，因为无损就好，没有信息

1895
02:14:45,060 --> 02:14:47,060
 is lost. But it turned out that

1895
02:14:45,060 --> 02:14:47,060
丢失了。但事实证明

1896
02:14:47,060 --> 02:14:49,060
 actually we use lossy

1896
02:14:47,060 --> 02:14:49,060
实际上我们使用有损

1897
02:14:49,060 --> 02:14:51,060
 compression more.

1897
02:14:49,060 --> 02:14:51,060
压缩更多。

1898
02:14:51,060 --> 02:14:53,060
 So, what's the reason actually we use lossy

1898
02:14:51,060 --> 02:14:53,060
那么，我们实际上使用有损的原因是什么

1899
02:14:53,060 --> 02:14:55,060
 compression more?

1899
02:14:53,060 --> 02:14:55,060
压缩更多？

1900
02:15:13,060 --> 02:15:15,060
 So, anyone?

1900
02:15:13,060 --> 02:15:15,060
那么，有人吗？

1901
02:15:15,060 --> 02:15:17,060
 What's the reason actually we use a lossy

1901
02:15:15,060 --> 02:15:17,060
实际上我们使用有损的原因是什么

1902
02:15:17,060 --> 02:15:19,060
 compression more, in

1902
02:15:17,060 --> 02:15:19,060
压缩更多，在

1903
02:15:19,060 --> 02:15:21,060
 real life?

1903
02:15:19,060 --> 02:15:21,060
现实生活？

1904
02:15:23,060 --> 02:15:25,060
 So, what's the objective of performing

1904
02:15:23,060 --> 02:15:25,060
那么，表演的目的是什么

1905
02:15:25,060 --> 02:15:27,060
 compression?

1905
02:15:25,060 --> 02:15:27,060
压缩？

1906
02:15:29,060 --> 02:15:31,060
 What's the objective of performing compression?

1906
02:15:29,060 --> 02:15:31,060
执行压缩的目的是什么？

1907
02:15:33,060 --> 02:15:35,060
 You want to

1907
02:15:33,060 --> 02:15:35,060
你想要

1908
02:15:35,060 --> 02:15:37,060
 reduce the number of

1908
02:15:35,060 --> 02:15:37,060
减少数量

1909
02:15:37,060 --> 02:15:39,060
 bits or file size, right?

1909
02:15:37,060 --> 02:15:39,060
位或文件大小，对吗？

1910
02:15:39,060 --> 02:15:41,060
 So, it turned out that lossy compression

1910
02:15:39,060 --> 02:15:41,060
所以，事实证明有损压缩

1911
02:15:41,060 --> 02:15:43,060
 is more effective in compressing

1911
02:15:41,060 --> 02:15:43,060
压缩效果更佳

1912
02:15:43,060 --> 02:15:45,060
 the file into a smaller

1912
02:15:43,060 --> 02:15:45,060
将文件压缩成更小的文件

1913
02:15:45,060 --> 02:15:47,060
 file size as compared to

1913
02:15:45,060 --> 02:15:47,060
文件大小相比

1914
02:15:47,060 --> 02:15:49,060
 lossless compression.

1914
02:15:47,060 --> 02:15:49,060
无损压缩。

1915
02:15:49,060 --> 02:15:51,060
 So, the reason why we use lossy compression

1915
02:15:49,060 --> 02:15:51,060
所以，我们使用有损压缩的原因

1916
02:15:51,060 --> 02:15:53,060
 more is because, right, your

1916
02:15:51,060 --> 02:15:53,060
更多的是因为，对吧，你的

1917
02:15:53,060 --> 02:15:55,060
 compressed file size is actually much

1917
02:15:53,060 --> 02:15:55,060
压缩后的文件大小其实很大

1918
02:15:55,060 --> 02:15:57,060
 smaller as compared to lossless

1918
02:15:55,060 --> 02:15:57,060
与无损相比更小

1919
02:15:57,060 --> 02:15:59,060
 compression. Even though you

1919
02:15:57,060 --> 02:15:59,060
压缩。即使你

1920
02:15:59,060 --> 02:16:01,060
 may have a little bit of distortion,

1920
02:15:59,060 --> 02:16:01,060
可能有一点点失真，

1921
02:16:01,060 --> 02:16:03,060
 but lots of these changes of distortion

1921
02:16:01,060 --> 02:16:03,060
但很多失真的变化

1922
02:16:03,060 --> 02:16:05,060
 is not so perceptible

1922
02:16:03,060 --> 02:16:05,060
不太明显

1923
02:16:05,060 --> 02:16:07,060
 by human. That means when human, you

1923
02:16:05,060 --> 02:16:07,060
由人类。这意味着当你是人类时，你

1924
02:16:07,060 --> 02:16:09,060
 see it, you hardly tell there's

1924
02:16:07,060 --> 02:16:09,060
看到它，你很难说有

1925
02:16:09,060 --> 02:16:11,060
 any difference in it.

1925
02:16:09,060 --> 02:16:11,060
任何差异。

1926
02:16:11,060 --> 02:16:13,060
 So, therefore, that's why lossy compression

1926
02:16:11,060 --> 02:16:13,060
因此，这就是有损压缩的原因

1927
02:16:13,060 --> 02:16:15,060
 is actually more commonly used.

1927
02:16:13,060 --> 02:16:15,060
其实更常用。

1928
02:16:15,060 --> 02:16:17,060
 So, now let's look at this

1928
02:16:15,060 --> 02:16:17,060
那么，现在让我们看看这个

1929
02:16:17,060 --> 02:16:19,060
 lossless compression. So, lossless compression,

1929
02:16:17,060 --> 02:16:19,060
无损压缩。所以，无损压缩，

1930
02:16:19,060 --> 02:16:21,060
 as we have already explained,

1930
02:16:19,060 --> 02:16:21,060
正如我们已经解释过的，

1931
02:16:21,060 --> 02:16:23,060
 your reconstructed image

1931
02:16:21,060 --> 02:16:23,060
你的重建图像

1932
02:16:23,060 --> 02:16:25,060
 is the same as

1932
02:16:23,060 --> 02:16:25,060
是一样的

1933
02:16:25,060 --> 02:16:27,060
 your original image after reconstruction

1933
02:16:25,060 --> 02:16:27,060
重建后的原始图像

1934
02:16:27,060 --> 02:16:29,060
 or decompression. So,

1934
02:16:27,060 --> 02:16:29,060
或减压。所以，

1935
02:16:29,060 --> 02:16:31,060
 we use lossless compression in important

1935
02:16:29,060 --> 02:16:31,060
我们在重要的地方使用无损压缩

1936
02:16:31,060 --> 02:16:33,060
 media such as medical images.

1936
02:16:31,060 --> 02:16:33,060
医学图像等媒体。

1937
02:16:33,060 --> 02:16:35,060
 Because for

1937
02:16:33,060 --> 02:16:35,060
因为对于

1938
02:16:35,060 --> 02:16:37,060
 medical images,

1938
02:16:35,060 --> 02:16:37,060
医学图像，

1939
02:16:37,060 --> 02:16:39,060
 sometimes you don't want to

1939
02:16:37,060 --> 02:16:39,060
有时你不想

1940
02:16:39,060 --> 02:16:41,060
 have any changes. Because any

1940
02:16:39,060 --> 02:16:41,060
有任何改变。因为任何

1941
02:16:41,060 --> 02:16:43,060
 artifacts or any changes,

1941
02:16:41,060 --> 02:16:43,060
工件或任何更改，

1942
02:16:43,060 --> 02:16:45,060
 sometimes the doctor may interpret

1942
02:16:43,060 --> 02:16:45,060
有时医生可能会解释

1943
02:16:45,060 --> 02:16:47,060
 it's actually a cancer. So, therefore,

1943
02:16:45,060 --> 02:16:47,060
它实际上是一种癌症。所以，因此，

1944
02:16:47,059 --> 02:16:49,059
 for those cases, your

1944
02:16:47,059 --> 02:16:49,059
对于这些情况，您的

1945
02:16:49,059 --> 02:16:51,059
 reconstructed data

1945
02:16:49,059 --> 02:16:51,059
重建数据

1946
02:16:51,059 --> 02:16:53,059
 and your original data must be

1946
02:16:51,059 --> 02:16:53,059
并且您的原始数据必须是

1947
02:16:53,059 --> 02:16:55,059
 the same. So, that's

1947
02:16:53,059 --> 02:16:55,059
相同。那么，那就是

1948
02:16:55,059 --> 02:16:57,059
 for lossless compression.

1948
02:16:55,059 --> 02:16:57,059
用于无损压缩。

1949
02:16:57,059 --> 02:16:59,059
 For lossless compression,

1949
02:16:57,059 --> 02:16:59,059
对于无损压缩，

1950
02:16:59,059 --> 02:17:01,059
 we typically use it in media such as

1950
02:16:59,059 --> 02:17:01,059
我们通常在媒体中使用它，例如

1951
02:17:01,059 --> 02:17:03,059
 image and video.

1951
02:17:01,059 --> 02:17:03,059
图像和视频。

1952
02:17:03,059 --> 02:17:05,059
 So, the reason why we use it

1952
02:17:03,059 --> 02:17:05,059
所以，我们使用它的原因

1953
02:17:05,059 --> 02:17:07,059
 in image and video is because if you have image and video,

1953
02:17:05,059 --> 02:17:07,059
在图像和视频中是因为如果你有图像和视频，

1954
02:17:07,059 --> 02:17:09,059
 you compress it and afterwards

1954
02:17:07,059 --> 02:17:09,059
你压缩它然后

1955
02:17:09,059 --> 02:17:11,059
 you reconstruct.

1955
02:17:09,059 --> 02:17:11,059
你重建。

1956
02:17:11,059 --> 02:17:13,059
 You have this reconstructed or

1956
02:17:11,059 --> 02:17:13,059
你有这个重建或

1957
02:17:13,059 --> 02:17:15,059
 decompressed media. Even though

1957
02:17:13,059 --> 02:17:15,059
解压缩的媒体。虽然

1958
02:17:15,059 --> 02:17:17,059
 your original data

1958
02:17:15,059 --> 02:17:17,059
你的原始数据

1959
02:17:17,059 --> 02:17:19,059
 and your reconstructed data are a little

1959
02:17:17,059 --> 02:17:19,059
你重建的数据有点

1960
02:17:19,059 --> 02:17:21,059
 bit different, but from the human

1960
02:17:19,059 --> 02:17:21,059
有点不同，但与人类不同

1961
02:17:21,059 --> 02:17:23,059
 perception,

1961
02:17:21,059 --> 02:17:23,059
洞察力，

1962
02:17:23,059 --> 02:17:25,059
 from the human perception perspective, you can hardly

1962
02:17:23,059 --> 02:17:25,059
从人类的感知角度来看，你很难

1963
02:17:25,059 --> 02:17:27,059
 tell the difference. Just now,

1963
02:17:25,059 --> 02:17:27,059
说出区别。现在，

1964
02:17:27,059 --> 02:17:29,059
 for example, the image that we show,

1964
02:17:27,059 --> 02:17:29,059
例如，我们展示的图像，

1965
02:17:29,059 --> 02:17:31,059
 even the image, different person

1965
02:17:29,059 --> 02:17:31,059
即使是图像，不同的人

1966
02:17:31,059 --> 02:17:33,059
 will perceive it a little bit differently

1966
02:17:31,059 --> 02:17:33,059
会有一点不同的看法

1967
02:17:33,059 --> 02:17:35,059
 already. So, therefore,

1967
02:17:33,059 --> 02:17:35,059
已经。所以，因此，

1968
02:17:35,059 --> 02:17:37,059
 for these types of approach,

1968
02:17:35,059 --> 02:17:37,059
对于这些类型的方法，

1969
02:17:37,059 --> 02:17:39,059
 lossy compression,

1969
02:17:37,059 --> 02:17:39,059
有损压缩，

1970
02:17:39,059 --> 02:17:41,059
 even though your reconstructed data

1970
02:17:39,059 --> 02:17:41,059
即使你重建的数据

1971
02:17:41,059 --> 02:17:43,059
 is different from the original data,

1971
02:17:41,059 --> 02:17:43,059
与原始数据不同，

1972
02:17:43,059 --> 02:17:45,059
 but these two data, actually, there are

1972
02:17:43,059 --> 02:17:45,059
但这两个数据，其实是有

1973
02:17:45,059 --> 02:17:47,059
 so little difference that human

1973
02:17:45,059 --> 02:17:47,059
人类的差异如此之小

1974
02:17:47,059 --> 02:17:49,059
 cannot tell the difference. So, therefore, it's

1974
02:17:47,059 --> 02:17:49,059
无法区分。所以，因此，这是

1975
02:17:49,059 --> 02:17:51,059
 okay, even though they are not exactly the

1975
02:17:49,059 --> 02:17:51,059
好吧，尽管它们并不完全是

1976
02:17:51,059 --> 02:17:53,059
 same, but it's okay because we can hardly

1976
02:17:51,059 --> 02:17:53,059
一样，但是没关系，因为我们几乎不能

1977
02:17:53,059 --> 02:17:55,059
 tell much difference in it.

1977
02:17:53,059 --> 02:17:55,059
告诉我们其中有很大的不同。

1978
02:17:55,059 --> 02:17:57,059
 But the advantage of this now

1978
02:17:55,059 --> 02:17:57,059
但现在这样做的好处

1979
02:17:57,059 --> 02:17:59,059
 is that we can deploy

1979
02:17:57,059 --> 02:17:59,059
我们可以部署

1980
02:17:59,059 --> 02:18:01,059
 method to compress it much better

1980
02:17:59,059 --> 02:18:01,059
更好地压缩它的方法

1981
02:18:01,059 --> 02:18:03,059
 into a smaller file size.

1981
02:18:01,059 --> 02:18:03,059
成较小的文件大小。

1982
02:18:05,059 --> 02:18:07,059
 So, for media like image and video,

1982
02:18:05,059 --> 02:18:07,059
因此，对于图像和视频等媒体，

1983
02:18:07,059 --> 02:18:09,059
 it's not necessary to display

1983
02:18:07,059 --> 02:18:09,059
没有必要显示

1984
02:18:09,059 --> 02:18:11,059
 more information

1984
02:18:09,059 --> 02:18:11,059
更多信息

1985
02:18:11,059 --> 02:18:13,059
 than what human can see or hear.

1985
02:18:11,059 --> 02:18:13,059
比人类能看到或听到的。

1986
02:18:15,059 --> 02:18:17,059
 So, in these types of cases, actually,

1986
02:18:15,059 --> 02:18:17,059
所以，在这些类型的情况下，实际上，

1987
02:18:17,059 --> 02:18:19,059
 the compression technique will

1987
02:18:17,059 --> 02:18:19,059
压缩技术将

1988
02:18:19,059 --> 02:18:21,059
 may discard data

1988
02:18:19,059 --> 02:18:21,059
可能会丢弃数据

1989
02:18:21,059 --> 02:18:23,059
 with little perceived difference by human.

1989
02:18:21,059 --> 02:18:23,059
人类几乎察觉不到差异。

1990
02:18:23,059 --> 02:18:25,059
 That means it will throw away those

1990
02:18:23,059 --> 02:18:25,059
这意味着它将扔掉那些

1991
02:18:25,059 --> 02:18:27,059
 information that human can actually

1991
02:18:25,059 --> 02:18:27,059
人类实际上可以得到的信息

1992
02:18:27,059 --> 02:18:29,059
 not tell much

1992
02:18:27,059 --> 02:18:29,059
不多说

1993
02:18:29,059 --> 02:18:31,059
 difference as compared to the original data.

1993
02:18:29,059 --> 02:18:31,059
与原始数据相比的差异。

1994
02:18:31,059 --> 02:18:33,059
 So, your reconstructed data

1994
02:18:31,059 --> 02:18:33,059
所以，你重建的数据

1995
02:18:33,059 --> 02:18:35,059
 is different, not

1995
02:18:33,059 --> 02:18:35,059
是不同的，不是

1996
02:18:35,059 --> 02:18:37,059
 identical or different from the original

1996
02:18:35,059 --> 02:18:37,059
与原件相同或不同

1997
02:18:37,059 --> 02:18:39,059
 data after decompression.

1997
02:18:37,059 --> 02:18:39,059
解压后的数据。

1998
02:18:39,059 --> 02:18:41,059
 So, that's the basic idea of lossy compression.

1998
02:18:39,059 --> 02:18:41,059
这就是有损压缩的基本思想。

1999
02:18:43,059 --> 02:18:45,059
 So, there's a few different common

1999
02:18:43,059 --> 02:18:45,059
所以，有一些不同的共同点

2000
02:18:45,059 --> 02:18:47,059
 matrix to measure

2000
02:18:45,059 --> 02:18:47,059
测量矩阵

2001
02:18:47,059 --> 02:18:49,059
 for this lossy

2001
02:18:47,059 --> 02:18:49,059
对于这个有损

2002
02:18:51,059 --> 02:18:53,059
 decompression.

2002
02:18:51,059 --> 02:18:53,059
减压。

2003
02:18:53,059 --> 02:18:55,059
 So, first, you have this

2003
02:18:53,059 --> 02:18:55,059
所以，首先，你有这个

2004
02:18:57,059 --> 02:18:59,059
 X, we call it the original data.

2004
02:18:57,059 --> 02:18:59,059
X，我们称之为原始数据。

2005
02:18:59,059 --> 02:19:01,059
 Suppose the original data we call

2005
02:18:59,059 --> 02:19:01,059
假设我们调用的原始数据

2006
02:19:01,059 --> 02:19:03,059
 X, the reconstructed or

2006
02:19:01,059 --> 02:19:03,059
X，重建或

2007
02:19:03,059 --> 02:19:05,059
 decompressed data we call

2007
02:19:03,059 --> 02:19:05,059
我们称之为解压缩数据

2008
02:19:05,059 --> 02:19:07,059
 Y. So, therefore, there's a few

2008
02:19:05,059 --> 02:19:07,059
Y. 因此，有一些

2009
02:19:07,059 --> 02:19:09,059
 different ways we can measure the

2009
02:19:07,059 --> 02:19:09,059
我们可以通过不同的方式来衡量

2010
02:19:09,059 --> 02:19:11,059
 difference between them for lossy

2010
02:19:09,059 --> 02:19:11,059
它们之间的有损差异

2011
02:19:11,059 --> 02:19:13,059
 compression. So, the first one is

2011
02:19:11,059 --> 02:19:13,059
压缩。所以，第一个是

2012
02:19:13,059 --> 02:19:15,059
 known as a mean square error.

2012
02:19:13,059 --> 02:19:15,059
称为均方误差。

2013
02:19:15,059 --> 02:19:17,059
 So, for the mean square error, if you look at the

2013
02:19:15,059 --> 02:19:17,059
因此，对于均方误差，如果您查看

2014
02:19:17,059 --> 02:19:19,059
 equation, you try to take the

2014
02:19:17,059 --> 02:19:19,059
等式，你尝试取

2015
02:19:19,059 --> 02:19:21,059
 difference between your original pixel

2015
02:19:19,059 --> 02:19:21,059
与原始像素之间的差异

2016
02:19:21,059 --> 02:19:23,059
 and

2016
02:19:21,059 --> 02:19:23,059
和

2017
02:19:23,059 --> 02:19:25,059
 the reconstructed pixel.

2017
02:19:23,059 --> 02:19:25,059
重建的像素。

2018
02:19:25,059 --> 02:19:27,059
 And then you square, you sum up over

2018
02:19:25,059 --> 02:19:27,059
然后你平方，你总结

2019
02:19:27,059 --> 02:19:29,059
 all the pixel, for example, in an image.

2019
02:19:27,059 --> 02:19:29,059
例如，图像中的所有像素。

2020
02:19:29,059 --> 02:19:31,059
 And then you divide by

2020
02:19:29,059 --> 02:19:31,059
然后你除以

2021
02:19:31,059 --> 02:19:33,059
 the total number of pixel in the image.

2021
02:19:31,059 --> 02:19:33,059
图像中的像素总数。

2022
02:19:33,059 --> 02:19:35,059
 This is known as a mean square error.

2022
02:19:33,059 --> 02:19:35,059
这称为均方误差。

2023
02:19:35,059 --> 02:19:37,059
 So, obviously,

2023
02:19:35,059 --> 02:19:37,059
所以，显然，

2024
02:19:37,059 --> 02:19:39,059
 the smaller this value is,

2024
02:19:37,059 --> 02:19:39,059
这个值越小，

2025
02:19:39,059 --> 02:19:41,059
 that means the better your reconstructed

2025
02:19:39,059 --> 02:19:41,059
这意味着你重建得越好

2026
02:19:41,059 --> 02:19:43,059
 image is.

2026
02:19:41,059 --> 02:19:43,059
图像是。

2027
02:19:43,059 --> 02:19:45,059
 So, that's the definition of the mean square error.

2027
02:19:43,059 --> 02:19:45,059
这就是均方误差的定义。

2028
02:19:45,059 --> 02:19:47,059
 So, the next one is the signal to

2028
02:19:45,059 --> 02:19:47,059
所以，下一个是信号

2029
02:19:47,059 --> 02:19:49,060
 noise ratio. So, the signal

2029
02:19:47,059 --> 02:19:49,060
噪声比。所以，信号

2030
02:19:49,060 --> 02:19:51,060
 to noise ratio is defined by this equation.

2030
02:19:49,060 --> 02:19:51,060
噪声比由该方程定义。

2031
02:19:51,060 --> 02:19:53,060
 So, this is a signal power.

2031
02:19:51,060 --> 02:19:53,060
所以，这是信号功率。

2032
02:19:53,060 --> 02:19:55,060
 This is the noise power here.

2032
02:19:53,060 --> 02:19:55,060
这是这里的噪声功率。

2033
02:19:55,060 --> 02:19:57,060
 So, the signal power is defined

2033
02:19:55,060 --> 02:19:57,060
因此，信号功率定义为

2034
02:19:57,060 --> 02:19:59,060
 by, right, so the

2034
02:19:57,060 --> 02:19:59,060
由，对，所以

2035
02:19:59,060 --> 02:20:01,060
 this particular symbol here,

2035
02:19:59,060 --> 02:20:01,060
这里的这个特殊符号，

2036
02:20:01,060 --> 02:20:03,060
 the average square value of your

2036
02:20:01,060 --> 02:20:03,060
你的平均平方值

2037
02:20:03,060 --> 02:20:05,060
 original data.

2037
02:20:03,060 --> 02:20:05,060
原始数据。

2038
02:20:05,060 --> 02:20:07,060
 So, each of the pixel value,

2038
02:20:05,060 --> 02:20:07,060
所以，每个像素值，

2039
02:20:07,060 --> 02:20:09,060
 right, you square and then

2039
02:20:07,060 --> 02:20:09,060
对了，你平方然后

2040
02:20:09,060 --> 02:20:11,060
 you take its average, right, so therefore

2040
02:20:09,060 --> 02:20:11,060
你取平均值，对吧，所以因此

2041
02:20:11,060 --> 02:20:13,060
 it's a signal power.

2041
02:20:11,060 --> 02:20:13,060
这是信号功率。

2042
02:20:13,060 --> 02:20:15,060
 And then this noise power,

2042
02:20:13,060 --> 02:20:15,060
然后这个噪声功率，

2043
02:20:15,060 --> 02:20:17,060
 noise power here is actually just now

2043
02:20:15,060 --> 02:20:17,060
这里的噪音功率实际上只是现在

2044
02:20:17,060 --> 02:20:19,060
 the error that we have found

2044
02:20:17,060 --> 02:20:19,060
我们发现的错误

2045
02:20:19,060 --> 02:20:21,060
 earlier on. So, if you take the signal

2045
02:20:19,060 --> 02:20:21,060
早些时候。所以，如果你接收到信号

2046
02:20:21,060 --> 02:20:23,060
 power, the average

2046
02:20:21,060 --> 02:20:23,060
功率，平均

2047
02:20:23,060 --> 02:20:25,060
 signal power divided by the noise

2047
02:20:23,060 --> 02:20:25,060
信号功率除以噪声

2048
02:20:25,060 --> 02:20:27,060
 that we have computed earlier,

2048
02:20:25,060 --> 02:20:27,060
我们之前已经计算过，

2049
02:20:27,060 --> 02:20:29,060
 then this is actually known as a

2049
02:20:27,060 --> 02:20:29,060
那么这实际上被称为

2050
02:20:29,060 --> 02:20:31,060
 signal to noise ratio, or S and R.

2050
02:20:29,060 --> 02:20:31,060
信噪比，或 S 和 R。

2051
02:20:31,060 --> 02:20:33,060
 So, for a good

2051
02:20:31,060 --> 02:20:33,060
所以，为了一个好的

2052
02:20:33,060 --> 02:20:35,060
 reconstructed

2052
02:20:33,060 --> 02:20:35,060
重建的

2053
02:20:35,060 --> 02:20:37,060
 compression method,

2053
02:20:35,060 --> 02:20:37,060
压缩方法，

2054
02:20:37,060 --> 02:20:39,060
 you want your S and R to be as high

2054
02:20:37,060 --> 02:20:39,060
你希望你的 S 和 R 一样高

2055
02:20:39,060 --> 02:20:41,060
 as possible, because you want

2055
02:20:39,060 --> 02:20:41,060
尽可能，因为你想要

2056
02:20:41,060 --> 02:20:43,060
 your noise to be as small as possible.

2056
02:20:41,060 --> 02:20:43,060
你的噪音尽可能小。

2057
02:20:43,060 --> 02:20:45,060
 If your noise is small, that means

2057
02:20:43,060 --> 02:20:45,060
如果你的噪音很小，那就意味着

2058
02:20:45,060 --> 02:20:47,060
 this value will be large.

2058
02:20:45,060 --> 02:20:47,060
这个值会很大。

2059
02:20:49,060 --> 02:20:51,060
 Right, okay, so the third commonly

2059
02:20:49,060 --> 02:20:51,060
好的，好的，所以通常是第三个

2060
02:20:51,060 --> 02:20:53,060
 used matrix is known as peak signal

2060
02:20:51,060 --> 02:20:53,060
使用的矩阵称为峰值信号

2061
02:20:53,060 --> 02:20:55,060
 to noise ratio. So, the peak signal

2061
02:20:53,060 --> 02:20:55,060
与噪声之比。所以，峰值信号

2062
02:20:55,060 --> 02:20:57,060
 to noise ratio, if you look at this

2062
02:20:55,060 --> 02:20:57,060
噪声比，如果你看看这个

2063
02:20:57,060 --> 02:20:59,060
 equation and this equation, they are very similar.

2063
02:20:57,060 --> 02:20:59,060
方程和这个方程，它们非常相似。

2064
02:20:59,060 --> 02:21:01,060
 The only difference now is that

2064
02:20:59,060 --> 02:21:01,060
现在唯一的区别是

2065
02:21:01,060 --> 02:21:03,060
 here, in this signal to noise

2065
02:21:01,060 --> 02:21:03,060
在这里，在这个信噪比中

2066
02:21:03,060 --> 02:21:05,060
 ratio, this is the average signal

2066
02:21:03,060 --> 02:21:05,060
比率，这是平均信号

2067
02:21:05,060 --> 02:21:07,060
 power. But, for this

2067
02:21:05,060 --> 02:21:07,060
力量。但是，对于这个

2068
02:21:07,060 --> 02:21:09,060
 peak signal to noise ratio,

2068
02:21:07,060 --> 02:21:09,060
峰值信噪比，

2069
02:21:09,060 --> 02:21:11,060
 this one here, we just take the maximum

2069
02:21:09,060 --> 02:21:11,060
这里，我们只取最大值

2070
02:21:11,060 --> 02:21:13,060
 value. For example, if you use

2070
02:21:11,060 --> 02:21:13,060
价值。例如，如果您使用

2071
02:21:13,060 --> 02:21:15,060
 8 bits to represent it, then

2071
02:21:13,060 --> 02:21:15,060
8位来表示，那么

2072
02:21:15,060 --> 02:21:17,060
 this value will be 255.

2072
02:21:15,060 --> 02:21:17,060
该值将为 255。

2073
02:21:17,060 --> 02:21:19,060
 Okay, this X peak here

2073
02:21:17,060 --> 02:21:19,060
好的，这个 X 峰在这里

2074
02:21:19,060 --> 02:21:21,060
 will be 255, 255 square.

2074
02:21:19,060 --> 02:21:21,060
将是 255, 255 平方。

2075
02:21:21,060 --> 02:21:23,060
 Okay, so, therefore

2075
02:21:21,060 --> 02:21:23,060
好吧，所以，所以

2076
02:21:23,060 --> 02:21:25,060
 this particular matrix

2076
02:21:23,060 --> 02:21:25,060
这个特定的矩阵

2077
02:21:25,060 --> 02:21:27,060
 is known as peak signal,

2077
02:21:25,060 --> 02:21:27,060
称为峰值信号，

2078
02:21:27,060 --> 02:21:29,060
 the largest value.

2078
02:21:27,060 --> 02:21:29,060
最大的值。

2079
02:21:29,060 --> 02:21:31,060
 Peak signal to noise, noise

2079
02:21:29,060 --> 02:21:31,060
峰值信噪比、噪声

2080
02:21:31,060 --> 02:21:33,060
 is the error. So, peak signal to

2080
02:21:31,060 --> 02:21:33,060
是错误。因此，峰值信号

2081
02:21:33,060 --> 02:21:35,060
 noise ratio. So, this is another

2081
02:21:33,060 --> 02:21:35,060
噪声比。所以，这是另一个

2082
02:21:35,060 --> 02:21:37,060
 common matrix to measure the

2082
02:21:35,060 --> 02:21:37,060
通用矩阵来衡量

2083
02:21:37,060 --> 02:21:39,060
 distortion between your original

2083
02:21:37,060 --> 02:21:39,060
与原始内容之间的失真

2084
02:21:39,060 --> 02:21:41,060
 data and your reconstructed

2084
02:21:39,060 --> 02:21:41,060
数据和你重建的

2085
02:21:41,060 --> 02:21:43,060
 data.

2085
02:21:41,060 --> 02:21:43,060
数据。

2086
02:21:45,060 --> 02:21:47,060
 Right, okay, so the next

2086
02:21:45,060 --> 02:21:47,060
好吧，那么接下来

2087
02:21:47,060 --> 02:21:49,060
 topic we are going to look at now is a

2087
02:21:47,060 --> 02:21:49,060
我们现在要讨论的主题是

2088
02:21:49,060 --> 02:21:51,060
 transform-based coding and compression.

2088
02:21:49,060 --> 02:21:51,060
基于变换的编码和压缩。

2089
02:21:53,060 --> 02:21:55,060
 So, transform coding.

2089
02:21:53,060 --> 02:21:55,060
因此，变换编码。

2090
02:21:55,060 --> 02:21:57,060
 So, why do we want to do transform coding?

2090
02:21:55,060 --> 02:21:57,060
那么，我们为什么要进行变换编码呢？

2091
02:21:57,060 --> 02:21:59,060
 So, what is this idea of transform

2091
02:21:57,060 --> 02:21:59,060
那么，这个变换的想法是什么呢？

2092
02:21:59,060 --> 02:22:01,060
 coding? So, the idea of transform

2092
02:21:59,060 --> 02:22:01,060
编码？于是就有了改造的想法

2093
02:22:01,060 --> 02:22:03,060
 coding is that, right, so you have

2093
02:22:01,060 --> 02:22:03,060
编码就是这样，对，所以你有

2094
02:22:03,060 --> 02:22:05,060
 for example, original

2094
02:22:03,060 --> 02:22:05,060
例如，原始的

2095
02:22:05,060 --> 02:22:07,060
 data, right, so

2095
02:22:05,060 --> 02:22:07,060
数据，对，所以

2096
02:22:07,060 --> 02:22:09,060
 for example, let's start with the image.

2096
02:22:07,060 --> 02:22:09,060
例如，让我们从图像开始。

2097
02:22:09,060 --> 02:22:11,060
 You have some images, right,

2097
02:22:09,060 --> 02:22:11,060
你有一些图像，对吧，

2098
02:22:11,060 --> 02:22:13,060
 you may want to do some transformation

2098
02:22:11,060 --> 02:22:13,060
你可能想做一些转变

2099
02:22:13,060 --> 02:22:15,060
 into a

2099
02:22:13,060 --> 02:22:15,060
变成一个

2100
02:22:15,060 --> 02:22:17,060
 transform domain. So, the

2100
02:22:15,060 --> 02:22:17,060
变换域。所以，

2101
02:22:17,060 --> 02:22:19,060
 image in its original

2101
02:22:17,060 --> 02:22:19,060
原始图像

2102
02:22:19,060 --> 02:22:21,060
 form is called in the pixel domain.

2102
02:22:19,060 --> 02:22:21,060
形式在像素域中被称为。

2103
02:22:21,060 --> 02:22:23,060
 Right, so after you

2103
02:22:21,060 --> 02:22:23,060
对了，所以在你之后

2104
02:22:23,060 --> 02:22:25,060
 have performed some transform, so

2104
02:22:23,060 --> 02:22:25,060
已经执行了一些变换，所以

2105
02:22:25,060 --> 02:22:27,060
 some transform is a mathematical

2105
02:22:25,060 --> 02:22:27,060
某些变换是数学上的

2106
02:22:27,060 --> 02:22:29,060
 operation, right, so you have the

2106
02:22:27,060 --> 02:22:29,060
操作，对，所以你有

2107
02:22:29,060 --> 02:22:31,060
 image in the pixel domain,

2107
02:22:29,060 --> 02:22:31,060
像素域中的图像，

2108
02:22:31,060 --> 02:22:33,060
 you let it go through some transform

2108
02:22:31,060 --> 02:22:33,060
你让它经历一些转变

2109
02:22:33,060 --> 02:22:35,060
 which is a mathematical operation

2109
02:22:33,060 --> 02:22:35,060
这是一个数学运算

2110
02:22:35,060 --> 02:22:37,060
 to get your transform domain

2110
02:22:35,060 --> 02:22:37,060
得到你的变换域

2111
02:22:37,060 --> 02:22:39,060
 or transform kvc.

2111
02:22:37,060 --> 02:22:39,060
或改造kvc。

2112
02:22:39,060 --> 02:22:41,060
 And then afterwards you try to perform compression

2112
02:22:39,060 --> 02:22:41,060
然后你尝试执行压缩

2113
02:22:41,060 --> 02:22:43,060
 in this transform domain

2113
02:22:41,060 --> 02:22:43,060
在这个变换域中

2114
02:22:43,060 --> 02:22:45,060
 using the transform kvc.

2114
02:22:43,060 --> 02:22:45,060
使用变换 kvc。

2115
02:22:45,060 --> 02:22:47,060
 So, at high level,

2115
02:22:45,060 --> 02:22:47,060
所以，在高水平上，

2116
02:22:47,060 --> 02:22:49,060
 why do you want to do that?

2116
02:22:47,060 --> 02:22:49,060
你为什么要这么做？

2117
02:22:49,060 --> 02:22:51,060
 Why do you want to take the data

2117
02:22:49,060 --> 02:22:51,060
为什么要拿数据

2118
02:22:51,060 --> 02:22:53,060
 from the original pixel, right,

2118
02:22:51,060 --> 02:22:53,060
从原始像素开始，右，

2119
02:22:53,060 --> 02:22:55,060
 domain, or the individual pixel

2119
02:22:53,060 --> 02:22:55,060
域，或单个像素

2120
02:22:55,060 --> 02:22:57,060
 to transform it into

2120
02:22:55,060 --> 02:22:57,060
将其转变为

2121
02:22:57,060 --> 02:22:59,060
 some transform domain and

2121
02:22:57,060 --> 02:22:59,060
一些变换域和

2122
02:22:59,060 --> 02:23:01,060
 then perform compression on this transform

2122
02:22:59,060 --> 02:23:01,060
然后对此变换执行压缩

2123
02:23:01,060 --> 02:23:03,060
 domain? Why do we want to do that?

2123
02:23:01,060 --> 02:23:03,060
领域？我们为什么要这么做？

2124
02:23:03,060 --> 02:23:05,060
 So, the reason why

2124
02:23:03,060 --> 02:23:05,060
那么，究其原因，

2125
02:23:05,060 --> 02:23:07,060
 we want to do this mathematical

2125
02:23:05,060 --> 02:23:07,060
我们想做这个数学运算

2126
02:23:07,060 --> 02:23:09,060
 mapping or transformation is

2126
02:23:07,060 --> 02:23:09,060
映射或变换是

2127
02:23:09,060 --> 02:23:11,060
 because, right, the data once

2127
02:23:09,060 --> 02:23:11,060
因为，对，数据一次

2128
02:23:11,060 --> 02:23:13,060
 is transformed into the transform

2128
02:23:11,060 --> 02:23:13,060
被转化为变换

2129
02:23:13,060 --> 02:23:15,060
 domain, it has some good properties

2129
02:23:13,060 --> 02:23:15,060
域，它有一些好的属性

2130
02:23:15,060 --> 02:23:17,060
 that we can exploit

2130
02:23:15,060 --> 02:23:17,060
我们可以利用

2131
02:23:17,060 --> 02:23:19,060
 to perform the compression. At high

2131
02:23:17,060 --> 02:23:19,060
来执行压缩。高时

2132
02:23:19,060 --> 02:23:21,060
 level, this is what it is. It has some

2132
02:23:19,060 --> 02:23:21,060
水平，就是这样。它有一些

2133
02:23:21,060 --> 02:23:23,060
 good property in the transform domain

2133
02:23:21,060 --> 02:23:23,060
变换域中良好的特性

2134
02:23:23,060 --> 02:23:25,060
 that we can use to

2134
02:23:23,060 --> 02:23:25,060
我们可以用它来

2135
02:23:25,060 --> 02:23:27,060
 perform the compression. So, this is a

2135
02:23:25,060 --> 02:23:27,060
执行压缩。所以，这是一个

2136
02:23:27,060 --> 02:23:29,060
 high level idea, and later

2136
02:23:27,060 --> 02:23:29,060
高层次的想法，以及后来的

2137
02:23:29,060 --> 02:23:31,060
 on we are going to take some example and

2137
02:23:29,060 --> 02:23:31,060
我们将举一些例子

2138
02:23:31,060 --> 02:23:33,060
 see this point a lot

2138
02:23:31,060 --> 02:23:33,060
经常看到这一点

2139
02:23:33,060 --> 02:23:35,060
 more clearer.

2139
02:23:33,060 --> 02:23:35,060
更清晰。

2140
02:23:35,060 --> 02:23:37,060
 So, therefore, why do you want to do this

2140
02:23:35,060 --> 02:23:37,060
因此，你为什么要这样做

2141
02:23:37,060 --> 02:23:39,060
 transform? The

2141
02:23:37,060 --> 02:23:39,060
转换？这

2142
02:23:39,060 --> 02:23:41,060
 idea is we want to convert the data

2142
02:23:39,060 --> 02:23:41,060
想法是我们要转换数据

2143
02:23:41,060 --> 02:23:43,060
 into a form, right, which

2143
02:23:41,060 --> 02:23:43,060
变成一种形式，对吧，

2144
02:23:43,060 --> 02:23:45,060
 is more suitable for compression, that means

2144
02:23:43,060 --> 02:23:45,060
更适合压缩，这意味着

2145
02:23:45,060 --> 02:23:47,060
 into the transform domain.

2145
02:23:45,060 --> 02:23:47,060
进入变换域。

2146
02:23:47,060 --> 02:23:49,060
 So, the transformation

2146
02:23:47,060 --> 02:23:49,060
所以，转型

2147
02:23:49,060 --> 02:23:51,060
 may have some good properties. So,

2147
02:23:49,060 --> 02:23:51,060
可能有一些好的特性。所以，

2148
02:23:51,060 --> 02:23:53,060
 one is called energy compaction,

2148
02:23:51,060 --> 02:23:53,060
一种称为能量压缩，

2149
02:23:53,060 --> 02:23:55,060
 the other is to offer

2149
02:23:53,060 --> 02:23:55,060
另一个是提供

2150
02:23:55,060 --> 02:23:57,060
 redundancy reduction.

2150
02:23:55,060 --> 02:23:57,060
减少冗余。

2151
02:23:57,060 --> 02:23:59,060
 So, this energy compaction

2151
02:23:57,060 --> 02:23:59,060
所以，这种能量压缩

2152
02:23:59,060 --> 02:24:01,060
 at high level, what it means is that

2152
02:23:59,060 --> 02:24:01,060
在高层次上，这意味着

2153
02:24:01,060 --> 02:24:03,060
 initially you have this particular

2153
02:24:01,060 --> 02:24:03,060
最初你有这个特殊的

2154
02:24:03,060 --> 02:24:05,060
 image, which is in the pixel domain

2154
02:24:03,060 --> 02:24:05,060
图像，位于像素域

2155
02:24:05,060 --> 02:24:07,060
 or image domain. After

2155
02:24:05,060 --> 02:24:07,060
或图像域。后

2156
02:24:07,060 --> 02:24:09,060
 you have done the transformation, you have

2156
02:24:07,060 --> 02:24:09,060
你已经完成了转变，你已经

2157
02:24:09,060 --> 02:24:11,060
 it in the transform domain. So, this

2157
02:24:09,060 --> 02:24:11,060
它在变换域中。所以，这个

2158
02:24:11,060 --> 02:24:13,060
 energy, right, okay,

2158
02:24:11,060 --> 02:24:13,060
能量，对吧，好吧，

2159
02:24:13,060 --> 02:24:15,060
 the energy will be packed into a small

2159
02:24:13,060 --> 02:24:15,060
能量将被打包成一个小

2160
02:24:15,060 --> 02:24:17,060
 number of kvc. Right, so, in

2160
02:24:15,060 --> 02:24:17,060
kvc 数量。对了，所以，在

2161
02:24:17,060 --> 02:24:19,060
 your original image or pixel domain,

2161
02:24:17,060 --> 02:24:19,060
您的原始图像或像素域，

2162
02:24:19,060 --> 02:24:21,060
 right, okay, how do we measure

2162
02:24:19,060 --> 02:24:21,060
好的，好的，我们如何衡量

2163
02:24:21,060 --> 02:24:23,060
 the energy in the

2163
02:24:21,060 --> 02:24:23,060
中的能量

2164
02:24:23,060 --> 02:24:25,060
 image is that we take

2164
02:24:23,060 --> 02:24:25,060
图像是我们采取的

2165
02:24:25,060 --> 02:24:27,060
 each of the pixel value and we

2165
02:24:25,060 --> 02:24:27,060
每个像素值和我们

2166
02:24:27,060 --> 02:24:29,060
 square. So, each of the

2166
02:24:27,060 --> 02:24:29,060
正方形。所以，每个

2167
02:24:29,060 --> 02:24:31,060
 pixel value, if we square,

2167
02:24:29,060 --> 02:24:31,060
像素值，如果我们平方，

2168
02:24:31,060 --> 02:24:33,060
 that will reflect the energy.

2168
02:24:31,060 --> 02:24:33,060
这将反映能量。

2169
02:24:33,060 --> 02:24:35,060
 So, in the original pixel

2169
02:24:33,060 --> 02:24:35,060
所以，在原始像素中

2170
02:24:35,060 --> 02:24:37,060
 domain, okay, right,

2170
02:24:35,060 --> 02:24:37,060
域，好吧，对，

2171
02:24:37,060 --> 02:24:39,060
 because we do not know

2171
02:24:37,060 --> 02:24:39,060
因为我们不知道

2172
02:24:39,060 --> 02:24:41,060
 each pixel, whether the value

2172
02:24:39,060 --> 02:24:41,060
每个像素，是否有值

2173
02:24:41,060 --> 02:24:43,060
 is large or not. So, therefore, in the

2173
02:24:41,060 --> 02:24:43,060
大与否。所以，因此，在

2174
02:24:43,060 --> 02:24:45,060
 original image or pixel domain,

2174
02:24:43,060 --> 02:24:45,060
原始图像或像素域，

2175
02:24:45,060 --> 02:24:47,060
 we do not know where the energy

2175
02:24:45,060 --> 02:24:47,060
我们不知道能量在哪里

2176
02:24:47,060 --> 02:24:49,060
 is concentrating.

2176
02:24:47,060 --> 02:24:49,060
正在集中注意力。

2177
02:24:49,060 --> 02:24:51,060
 Because if you think about even a

2177
02:24:49,060 --> 02:24:51,060
因为如果你想一想

2178
02:24:51,060 --> 02:24:53,060
 particular image, for

2178
02:24:51,060 --> 02:24:53,060
特定图像，对于

2179
02:24:53,060 --> 02:24:55,060
 each of the pixel value, do you know

2179
02:24:53,060 --> 02:24:55,060
每个像素值你知道吗

2180
02:24:55,060 --> 02:24:57,060
 which pixel value is large

2180
02:24:55,060 --> 02:24:57,060
哪个像素值大

2181
02:24:57,060 --> 02:24:59,060
 or small in advance? You

2181
02:24:57,060 --> 02:24:59,060
还是提前小？你

2182
02:24:59,060 --> 02:25:01,060
 do not know, right. So, therefore,

2182
02:24:59,060 --> 02:25:01,060
不知道，对吧。所以，因此，

2183
02:25:01,060 --> 02:25:03,060
 you do not have a good way to know where

2183
02:25:01,060 --> 02:25:03,060
你没有一个好的方法来知道在哪里

2184
02:25:03,060 --> 02:25:05,060
 the energy is located. But,

2184
02:25:03,060 --> 02:25:05,060
能量位于。但，

2185
02:25:05,060 --> 02:25:07,060
 if you apply the transform,

2185
02:25:05,060 --> 02:25:07,060
如果应用变换，

2186
02:25:07,060 --> 02:25:09,060
 once you have the data in the transform

2186
02:25:07,060 --> 02:25:09,060
一旦你有了转换中的数据

2187
02:25:09,060 --> 02:25:11,060
 domain, you can see most of the energy

2187
02:25:09,060 --> 02:25:11,060
域，你可以看到大部分能量

2188
02:25:11,060 --> 02:25:13,060
 will be concentrated to a small

2188
02:25:11,060 --> 02:25:13,060
将集中到一个小

2189
02:25:13,060 --> 02:25:15,060
 number of kVc.

2189
02:25:13,060 --> 02:25:15,060
kVc 数。

2190
02:25:15,060 --> 02:25:17,060
 So, this is the high level

2190
02:25:15,060 --> 02:25:17,060
所以，这就是高水平

2191
02:25:17,060 --> 02:25:19,060
 kind of explanation.

2191
02:25:17,060 --> 02:25:19,060
一种解释。

2192
02:25:19,060 --> 02:25:21,060
 Later on, when we study about DCT,

2192
02:25:19,060 --> 02:25:21,060
后来我们学习DCT的时候，

2193
02:25:21,060 --> 02:25:23,060
 a lot of this concept will

2193
02:25:21,060 --> 02:25:23,060
很多这个概念都会

2194
02:25:23,060 --> 02:25:25,060
 become a lot more concrete and clear.

2194
02:25:23,060 --> 02:25:25,060
变得更加具体和清晰。

2195
02:25:25,060 --> 02:25:27,060
 So, anyway,

2195
02:25:25,060 --> 02:25:27,060
所以，无论如何，

2196
02:25:27,060 --> 02:25:29,060
 this is the point I was trying to say.

2196
02:25:27,060 --> 02:25:29,060
这就是我想说的重点。

2197
02:25:29,060 --> 02:25:31,060
 But after the transform, the energy

2197
02:25:29,060 --> 02:25:31,060
但转化后的能量

2198
02:25:31,060 --> 02:25:33,060
 will be focusing to

2198
02:25:31,060 --> 02:25:33,060
将重点关注

2199
02:25:33,060 --> 02:25:35,060
 a small number of kVc.

2199
02:25:33,060 --> 02:25:35,060
少量kVc。

2200
02:25:35,060 --> 02:25:37,060
 So, the second

2200
02:25:35,060 --> 02:25:37,060
所以，第二个

2201
02:25:37,060 --> 02:25:39,060
 is that it offers a redundancy

2201
02:25:37,060 --> 02:25:39,060
是它提供了冗余

2202
02:25:39,060 --> 02:25:41,060
 reduction, so which means that

2202
02:25:39,060 --> 02:25:41,060
减少，所以这意味着

2203
02:25:41,060 --> 02:25:43,060
 you reduce the correlation between

2203
02:25:41,060 --> 02:25:43,060
你减少了之间的相关性

2204
02:25:43,060 --> 02:25:45,060
 the transform kVc. So, what it means

2204
02:25:43,060 --> 02:25:45,060
变换kVc。那么，这意味着什么

2205
02:25:45,060 --> 02:25:47,060
 at this point is that if you look at the

2205
02:25:45,060 --> 02:25:47,060
此时如果你看一下

2206
02:25:47,060 --> 02:25:49,060
 original image

2206
02:25:47,060 --> 02:25:49,060
原始图像

2207
02:25:49,060 --> 02:25:51,060
 domain or pixel domain,

2207
02:25:49,060 --> 02:25:51,060
域或像素域，

2208
02:25:51,060 --> 02:25:53,060
 if you know this current pixel,

2208
02:25:51,060 --> 02:25:53,060
如果你知道当前像素，

2209
02:25:53,060 --> 02:25:55,060
 do you think you more or less

2209
02:25:53,060 --> 02:25:55,060
你认为你或多或少

2210
02:25:55,060 --> 02:25:57,060
 know what is the pixel value next to it?

2210
02:25:55,060 --> 02:25:57,060
知道它旁边的像素值是多少吗？

2211
02:25:57,060 --> 02:25:59,060
 In the original

2211
02:25:57,060 --> 02:25:59,060
在原作中

2212
02:25:59,060 --> 02:26:01,060
 image domain,

2212
02:25:59,060 --> 02:26:01,060
图像域，

2213
02:26:01,060 --> 02:26:03,060
 if you know this pixel value,

2213
02:26:01,060 --> 02:26:03,060
如果你知道这个像素值，

2214
02:26:03,060 --> 02:26:05,060
 do you think you more or less know

2214
02:26:03,060 --> 02:26:05,060
你认为你或多或少知道

2215
02:26:05,060 --> 02:26:07,060
 what is the pixel value next to it?

2215
02:26:05,060 --> 02:26:07,060
它旁边的像素值是多少？

2216
02:26:09,060 --> 02:26:11,060
 Yes or no?

2216
02:26:09,060 --> 02:26:11,060
是还是不是？

2217
02:26:11,060 --> 02:26:13,060
 In the

2217
02:26:11,060 --> 02:26:13,060
在

2218
02:26:13,060 --> 02:26:15,060
 image domain, if you know this current

2218
02:26:13,060 --> 02:26:15,060
图像域，如果你知道当前的

2219
02:26:15,060 --> 02:26:17,060
 pixel value, do you think more or less

2219
02:26:15,060 --> 02:26:17,060
像素值，你觉得多还是少

2220
02:26:17,060 --> 02:26:19,060
 you know the pixel value surrounding it?

2220
02:26:17,060 --> 02:26:19,060
你知道它周围的像素值吗？

2221
02:26:21,060 --> 02:26:23,060
 Yes or no?

2221
02:26:21,060 --> 02:26:23,060
是还是不是？

2222
02:26:25,060 --> 02:26:27,060
 In order to answer this question,

2222
02:26:25,060 --> 02:26:27,060
为了回答这个问题，

2223
02:26:27,060 --> 02:26:29,060
 kind of go back to just

2223
02:26:27,060 --> 02:26:29,060
有点回到过去

2224
02:26:29,060 --> 02:26:31,060
 a few slides ago, one of

2224
02:26:29,060 --> 02:26:31,060
几张幻灯片前，其中一张

2225
02:26:31,060 --> 02:26:33,060
 the redundancies that I mentioned to you,

2225
02:26:31,060 --> 02:26:33,060
我向你提到的裁员，

2226
02:26:33,060 --> 02:26:35,060
 which is specifically spatial redundancy.

2226
02:26:33,060 --> 02:26:35,060
这具体是空间冗余。

2227
02:26:35,060 --> 02:26:37,060
 What does spatial

2227
02:26:35,060 --> 02:26:37,060
空间有什么作用

2228
02:26:37,060 --> 02:26:39,060
 redundancy tell you?

2228
02:26:37,060 --> 02:26:39,060
冗余告诉你？

2229
02:26:39,060 --> 02:26:41,060
 If you look at a small

2229
02:26:39,060 --> 02:26:41,060
如果你看一个小

2230
02:26:41,060 --> 02:26:43,060
 pixel neighbourhood,

2230
02:26:41,060 --> 02:26:43,060
像素邻域，

2231
02:26:43,060 --> 02:26:45,060
 the pixel value tends to

2231
02:26:43,060 --> 02:26:45,060
像素值趋于

2232
02:26:45,060 --> 02:26:47,060
 be very

2232
02:26:45,060 --> 02:26:47,060
非常

2233
02:26:47,060 --> 02:26:49,060
 similar to each other. For most natural

2233
02:26:47,060 --> 02:26:49,060
彼此相似。对于最自然的

2234
02:26:49,060 --> 02:26:51,060
 images, that is the case.

2234
02:26:49,060 --> 02:26:51,060
图片，就是这样。

2235
02:26:51,060 --> 02:26:53,060
 If you look at a very small

2235
02:26:51,060 --> 02:26:53,060
如果你看一个非常小的

2236
02:26:53,060 --> 02:26:55,060
 pixel neighbourhood, like for example,

2236
02:26:53,060 --> 02:26:55,060
像素邻域，例如，

2237
02:26:55,060 --> 02:26:57,060
 4x4 or 8x8, the pixel

2237
02:26:55,060 --> 02:26:57,060
4x4 或 8x8，像素

2238
02:26:57,060 --> 02:26:59,060
 values tends to be very similar

2238
02:26:57,060 --> 02:26:59,060
价值观往往非常相似

2239
02:26:59,060 --> 02:27:01,060
 to each other most of the time.

2239
02:26:59,060 --> 02:27:01,060
大部分时间都是为了彼此。

2240
02:27:01,060 --> 02:27:03,060
 So, if the pixel value

2240
02:27:01,060 --> 02:27:03,060
所以，如果像素值

2241
02:27:03,060 --> 02:27:05,060
 tends to be very similar to each other, that means

2241
02:27:03,060 --> 02:27:05,060
往往彼此非常相似，这意味着

2242
02:27:05,060 --> 02:27:07,060
 if you know this current pixel value,

2242
02:27:05,060 --> 02:27:07,060
如果你知道当前像素值，

2243
02:27:07,060 --> 02:27:09,060
 do you think you more or less

2243
02:27:07,060 --> 02:27:09,060
你认为你或多或少

2244
02:27:09,060 --> 02:27:11,060
 can tell what is the pixel value close

2244
02:27:09,060 --> 02:27:11,060
可以知道接近的像素值是多少

2245
02:27:11,060 --> 02:27:13,060
 to it? Yes, right?

2245
02:27:11,060 --> 02:27:13,060
到它？是的，对吗？

2246
02:27:13,060 --> 02:27:15,060
 That's what I've been telling you,

2246
02:27:13,060 --> 02:27:15,060
这就是我一直告诉你的，

2247
02:27:15,060 --> 02:27:17,060
 the spatial redundancy.

2247
02:27:15,060 --> 02:27:17,060
空间冗余。

2248
02:27:17,060 --> 02:27:19,060
 Most images have this kind of redundancy,

2248
02:27:17,060 --> 02:27:19,060
大多数图像都有这种冗余，

2249
02:27:19,060 --> 02:27:21,060
 which is spatial redundancy.

2249
02:27:19,060 --> 02:27:21,060
这就是空间冗余。

2250
02:27:21,060 --> 02:27:23,060
 So, if you, in the image

2250
02:27:21,060 --> 02:27:23,060
所以，如果你在图中

2251
02:27:23,060 --> 02:27:25,060
 domain, if you know this current pixel value, that means

2251
02:27:23,060 --> 02:27:25,060
域，如果你知道当前的像素值，那就意味着

2252
02:27:25,060 --> 02:27:27,060
 you also know the pixel values around

2252
02:27:25,060 --> 02:27:27,060
你还知道周围的像素值

2253
02:27:27,060 --> 02:27:29,060
 it, okay, from the

2253
02:27:27,060 --> 02:27:29,060
它，好吧，从

2254
02:27:29,060 --> 02:27:31,060
 compression perspective, this is not

2254
02:27:29,060 --> 02:27:31,060
压缩角度来看，这不是

2255
02:27:31,060 --> 02:27:33,060
 good. Why? Because you

2255
02:27:31,060 --> 02:27:33,060
好的。为什么？因为你

2256
02:27:33,060 --> 02:27:35,060
 store lots of redundant,

2256
02:27:33,060 --> 02:27:35,060
存储大量冗余，

2257
02:27:35,060 --> 02:27:37,060
 unnecessary information. For example,

2257
02:27:35,060 --> 02:27:37,060
不必要的信息。例如，

2258
02:27:37,060 --> 02:27:39,060
 if you look at a 4x4 pixel block, if

2258
02:27:37,060 --> 02:27:39,060
如果你看一个 4x4 像素块，如果

2259
02:27:39,060 --> 02:27:41,060
 all the pixel values are very similar to

2259
02:27:39,060 --> 02:27:41,060
所有像素值都非常相似

2260
02:27:41,060 --> 02:27:43,060
 each other, why do I need to store

2260
02:27:41,060 --> 02:27:43,060
彼此，为什么我需要存储

2261
02:27:43,060 --> 02:27:45,060
 all the pixel value?

2261
02:27:43,060 --> 02:27:45,060
所有像素值？

2262
02:27:45,060 --> 02:27:47,060
 I just need to roughly store one pixel

2262
02:27:45,060 --> 02:27:47,060
我只需要大致存储一个像素

2263
02:27:47,060 --> 02:27:49,060
 value, more or less can represent this block

2263
02:27:47,060 --> 02:27:49,060
value，或多或少可以代表这个块

2264
02:27:49,060 --> 02:27:51,060
 already. So, therefore,

2264
02:27:49,060 --> 02:27:51,060
已经。所以，因此，

2265
02:27:51,060 --> 02:27:53,060
 okay, if you are talking

2265
02:27:51,060 --> 02:27:53,060
好吧，如果你在说话

2266
02:27:53,060 --> 02:27:55,060
 about image in the original

2266
02:27:53,060 --> 02:27:55,060
关于原文中的图像

2267
02:27:55,060 --> 02:27:57,060
 image domain, it contains

2267
02:27:55,060 --> 02:27:57,060
图像域，它包含

2268
02:27:57,060 --> 02:27:59,060
 a, right, okay,

2268
02:27:57,060 --> 02:27:59,060
一个，对，好吧，

2269
02:27:59,060 --> 02:28:01,060
 knowing this particular

2269
02:27:59,060 --> 02:28:01,060
知道这个特殊的

2270
02:28:01,060 --> 02:28:03,060
 pixel value means you also

2270
02:28:01,060 --> 02:28:03,060
像素值意味着你也

2271
02:28:03,060 --> 02:28:05,060
 more or less can tell the pixel value

2271
02:28:03,060 --> 02:28:05,060
或多或少可以看出像素值

2272
02:28:05,060 --> 02:28:07,060
 surrounding it. So, that means

2272
02:28:05,060 --> 02:28:07,060
围绕它。所以，这意味着

2273
02:28:07,060 --> 02:28:09,060
 they actually have strong correlation.

2273
02:28:07,060 --> 02:28:09,060
它们实际上具有很强的相关性。

2274
02:28:09,060 --> 02:28:11,060
 The pixel value,

2274
02:28:09,060 --> 02:28:11,060
像素值，

2275
02:28:11,060 --> 02:28:13,060
 the current pixel value and its surrounding

2275
02:28:11,060 --> 02:28:13,060
当前像素值及其周围

2276
02:28:13,060 --> 02:28:15,060
 pixel value has strong

2276
02:28:13,060 --> 02:28:15,060
像素值强

2277
02:28:15,060 --> 02:28:17,060
 correlation. When they have strong

2277
02:28:15,060 --> 02:28:17,060
相关性。当他们拥有强大的

2278
02:28:17,060 --> 02:28:19,060
 correlation, that means there's lots of redundancy.

2278
02:28:17,060 --> 02:28:19,060
相关性，这意味着存在大量冗余。

2279
02:28:19,060 --> 02:28:21,060
 And when they have

2279
02:28:19,060 --> 02:28:21,060
当他们有

2280
02:28:21,060 --> 02:28:23,060
 lots of redundancy, this is not good

2280
02:28:21,060 --> 02:28:23,060
大量冗余，这不好

2281
02:28:23,060 --> 02:28:25,060
 from the compression

2281
02:28:23,060 --> 02:28:25,060
从压缩

2282
02:28:25,060 --> 02:28:27,060
 perspective, because you have so much

2282
02:28:25,060 --> 02:28:27,060
观点，因为你有这么多

2283
02:28:27,060 --> 02:28:29,060
 extra unnecessary information

2283
02:28:27,060 --> 02:28:29,060
额外的不必要的信息

2284
02:28:29,060 --> 02:28:31,060
 that you are storing. Okay? So, that's

2284
02:28:29,060 --> 02:28:31,060
您正在存储的。好的？那么，那就是

2285
02:28:31,060 --> 02:28:33,060
 what it states here.

2285
02:28:31,060 --> 02:28:33,060
它在这里说明了什么。

2286
02:28:33,060 --> 02:28:35,060
 On the other hand, right, this particular

2286
02:28:33,060 --> 02:28:35,060
另一方面，对，这个特殊的

2287
02:28:35,060 --> 02:28:37,060
 image in the original pixel

2287
02:28:35,060 --> 02:28:37,060
原始像素中的图像

2288
02:28:37,060 --> 02:28:39,060
 domain, if you transform it

2288
02:28:37,060 --> 02:28:39,060
域，如果你转换它

2289
02:28:39,060 --> 02:28:41,060
 into the transform domain, so in

2289
02:28:39,060 --> 02:28:41,060
进入变换域，所以在

2290
02:28:41,060 --> 02:28:43,060
 the transform domain, you have some

2290
02:28:41,060 --> 02:28:43,060
变换域，你有一些

2291
02:28:43,060 --> 02:28:45,060
 transform coefficient.

2291
02:28:43,060 --> 02:28:45,060
变换系数。

2292
02:28:45,060 --> 02:28:47,060
 Right, so just based on what I

2292
02:28:45,060 --> 02:28:47,060
是的，所以只是根据我的情况

2293
02:28:47,060 --> 02:28:49,060
 explained, do you think that in the transform

2293
02:28:47,060 --> 02:28:49,060
解释一下，你认为在变换中

2294
02:28:49,060 --> 02:28:51,060
 domain now, knowing this

2294
02:28:49,060 --> 02:28:51,060
现在域，知道这一点

2295
02:28:51,060 --> 02:28:53,060
 pixel value will tell you what is

2295
02:28:51,060 --> 02:28:53,060
像素值会告诉你什么是

2296
02:28:53,060 --> 02:28:55,060
 the, knowing this coefficient

2296
02:28:53,060 --> 02:28:55,060
，知道这个系数

2297
02:28:55,060 --> 02:28:57,060
 will tell you what is the

2297
02:28:55,060 --> 02:28:57,060
会告诉你什么是

2298
02:28:57,060 --> 02:28:59,060
 coefficient next to it?

2298
02:28:57,060 --> 02:28:59,060
旁边的系数？

2299
02:29:01,060 --> 02:29:03,060
 Chances are, no.

2299
02:29:01,060 --> 02:29:03,060
很可能，不。

2300
02:29:03,060 --> 02:29:05,060
 Okay, in the transform domain now,

2300
02:29:03,060 --> 02:29:05,060
好的，现在在变换域中，

2301
02:29:05,060 --> 02:29:07,060
 in the transform domain, you have lots

2301
02:29:05,060 --> 02:29:07,060
在变换域中，你有很多

2302
02:29:07,060 --> 02:29:09,060
 of transform coefficient.

2302
02:29:07,060 --> 02:29:09,060
的变换系数。

2303
02:29:09,060 --> 02:29:11,060
 So, if you know this transform coefficient,

2303
02:29:09,060 --> 02:29:11,060
所以，如果你知道这个变换系数，

2304
02:29:11,060 --> 02:29:13,060
 it doesn't tell you much

2304
02:29:11,060 --> 02:29:13,060
它并没有告诉你太多

2305
02:29:13,060 --> 02:29:15,060
 the transform coefficient next

2305
02:29:13,060 --> 02:29:15,060
接下来是变换系数

2306
02:29:15,060 --> 02:29:17,060
 to it. So, this is

2306
02:29:15,060 --> 02:29:17,060
到它。所以，这是

2307
02:29:17,060 --> 02:29:19,060
 actually good from the compression perspective.

2307
02:29:17,060 --> 02:29:19,060
从压缩的角度来看实际上很好。

2308
02:29:19,060 --> 02:29:21,060
 Why? Because knowing

2308
02:29:19,060 --> 02:29:21,060
为什么？因为知道

2309
02:29:21,060 --> 02:29:23,060
 this particular coefficient doesn't tell you

2309
02:29:21,060 --> 02:29:23,060
这个特定的系数不会告诉你

2310
02:29:23,060 --> 02:29:25,060
 the coefficient around it. That means you

2310
02:29:23,060 --> 02:29:25,060
其周围的系数。这意味着你

2311
02:29:25,060 --> 02:29:27,060
 remove lots of the redundant

2311
02:29:25,060 --> 02:29:27,060
去掉很多多余的

2312
02:29:27,060 --> 02:29:29,060
 information already.

2312
02:29:27,060 --> 02:29:29,060
信息已经。

2313
02:29:29,060 --> 02:29:31,060
 So, from the compression perspective,

2313
02:29:29,060 --> 02:29:31,060
所以，从压缩的角度来看，

2314
02:29:31,060 --> 02:29:33,060
 that is good. Right, so again,

2314
02:29:31,060 --> 02:29:33,060
那很好。对了，再说一遍，

2315
02:29:33,060 --> 02:29:35,060
 this is high level. Yeah, later on when

2315
02:29:33,060 --> 02:29:35,060
这是高水平的。是的，稍后当

2316
02:29:35,060 --> 02:29:37,060
 we study DCT, we will give you

2316
02:29:35,060 --> 02:29:37,060
我们研究DCT，我们会给你

2317
02:29:37,060 --> 02:29:39,060
 a lot more concrete example.

2317
02:29:37,060 --> 02:29:39,060
更多具体的例子。

2318
02:29:39,060 --> 02:29:41,060
 But in short, what it means is that it offers

2318
02:29:39,060 --> 02:29:41,060
但简而言之，它的意思是它提供了

2319
02:29:41,060 --> 02:29:43,060
 redundancy reduction.

2319
02:29:41,060 --> 02:29:43,060
减少冗余。

2320
02:29:43,060 --> 02:29:45,060
 It reduces the correlation, or the

2320
02:29:43,060 --> 02:29:45,060
它降低了相关性，或者

2321
02:29:45,060 --> 02:29:47,060
 similarity, okay, between

2321
02:29:45,060 --> 02:29:47,060
相似性，好吧，之间

2322
02:29:47,060 --> 02:29:49,060
 the transform coefficient, just like what I mentioned.

2322
02:29:47,060 --> 02:29:49,060
变换系数，就像我提到的那样。

2323
02:29:49,060 --> 02:29:51,060
 Now, in the transform domain, knowing this

2323
02:29:49,060 --> 02:29:51,060
现在，在变换域中，知道这一点

2324
02:29:51,060 --> 02:29:53,060
 pixel value doesn't, knowing

2324
02:29:51,060 --> 02:29:53,060
像素值不会，知道

2325
02:29:53,060 --> 02:29:55,060
 this coefficient doesn't tell you the

2325
02:29:53,060 --> 02:29:55,060
这个系数并没有告诉你

2326
02:29:55,060 --> 02:29:57,060
 coefficient surrounding it.

2326
02:29:55,060 --> 02:29:57,060
围绕它的系数。

2327
02:29:57,060 --> 02:29:59,060
 Okay, so which is good from

2327
02:29:57,060 --> 02:29:59,060
好的，那么哪个是好的

2328
02:29:59,060 --> 02:30:01,060
 the compression perspective.

2328
02:29:59,060 --> 02:30:01,060
压缩的角度。

2329
02:30:01,060 --> 02:30:03,060
 And then for this transform coding,

2329
02:30:01,060 --> 02:30:03,060
然后对于这个变换编码，

2330
02:30:03,060 --> 02:30:05,060
 it's a reversible process.

2330
02:30:03,060 --> 02:30:05,060
这是一个可逆的过程。

2331
02:30:05,060 --> 02:30:07,060
 That means the original

2331
02:30:05,060 --> 02:30:07,060
这意味着原来

2332
02:30:07,060 --> 02:30:09,060
 signal can be obtained by applying

2332
02:30:07,060 --> 02:30:09,060
信号可以通过应用获得

2333
02:30:09,060 --> 02:30:11,060
 the inverse transform. So, if you

2333
02:30:09,060 --> 02:30:11,060
逆变换。所以，如果你

2334
02:30:11,060 --> 02:30:13,060
 have the data in the

2334
02:30:11,060 --> 02:30:13,060
有数据在

2335
02:30:13,060 --> 02:30:15,060
 image domain, you can perform the

2335
02:30:13,060 --> 02:30:15,060
图像域，您可以执行

2336
02:30:15,060 --> 02:30:17,060
 forward transform to get the transform

2336
02:30:15,060 --> 02:30:17,060
前向变换得到变换

2337
02:30:17,060 --> 02:30:19,060
 coefficient. And for this particular

2337
02:30:17,060 --> 02:30:19,060
系数。而对于这个特殊的

2338
02:30:19,060 --> 02:30:21,060
 transform coefficient, you can

2338
02:30:19,060 --> 02:30:21,060
变换系数，可以

2339
02:30:21,060 --> 02:30:23,060
 take the inverse transform to recover

2339
02:30:21,060 --> 02:30:23,060
进行逆变换即可恢复

2340
02:30:23,060 --> 02:30:25,060
 your original pixel.

2340
02:30:23,060 --> 02:30:25,060
你的原始像素。

2341
02:30:25,060 --> 02:30:27,060
 So therefore, it's actually

2341
02:30:25,060 --> 02:30:27,060
因此，它实际上是

2342
02:30:27,060 --> 02:30:29,060
 a reversible process.

2342
02:30:27,060 --> 02:30:29,060
一个可逆的过程。

2343
02:30:29,060 --> 02:30:31,060
 That's what I mean by reversible

2343
02:30:29,060 --> 02:30:31,060
这就是我所说的可逆

2344
02:30:31,060 --> 02:30:33,060
 process here.

2344
02:30:31,060 --> 02:30:33,060
在这里进行处理。

2345
02:30:33,060 --> 02:30:35,060
 Right, okay, so let's look at some typical

2345
02:30:33,060 --> 02:30:35,060
好吧，让我们看一些典型的

2346
02:30:35,060 --> 02:30:37,060
 transform-based image compression scheme.

2346
02:30:35,060 --> 02:30:37,060
基于变换的图像压缩方案。

2347
02:30:37,060 --> 02:30:39,060
 Right, so there's many ways

2347
02:30:37,060 --> 02:30:39,060
是的，有很多方法

2348
02:30:39,060 --> 02:30:41,060
 for you to perform image compression.

2348
02:30:39,060 --> 02:30:41,060
供您执行图像压缩。

2349
02:30:41,060 --> 02:30:43,060
 So, transform-based image compression

2349
02:30:41,060 --> 02:30:43,060
因此，基于变换的图像压缩

2350
02:30:43,060 --> 02:30:45,060
 is one of the most popular

2350
02:30:43,060 --> 02:30:45,060
是最受欢迎的之一

2351
02:30:45,060 --> 02:30:47,060
 way to perform compression.

2351
02:30:45,060 --> 02:30:47,060
方式来执行压缩。

2352
02:30:47,060 --> 02:30:49,060
 Right, so techniques such as

2352
02:30:47,060 --> 02:30:49,060
是的，所以诸如此类的技术

2353
02:30:49,060 --> 02:30:51,060
 standards such as JPEG compression

2353
02:30:49,060 --> 02:30:51,060
标准，例如 JPEG 压缩

2354
02:30:51,060 --> 02:30:53,060
 and MPEG compression is based

2354
02:30:51,060 --> 02:30:53,060
并且MPEG压缩是基于

2355
02:30:53,060 --> 02:30:55,060
 on transform-based image compression.

2355
02:30:53,060 --> 02:30:55,060
基于变换的图像压缩。

2356
02:30:55,060 --> 02:30:57,060
 So, what's the typical

2356
02:30:55,060 --> 02:30:57,060
那么，什么是典型的

2357
02:30:57,060 --> 02:30:59,060
 pipelines of a transform-based

2357
02:30:57,060 --> 02:30:59,060
基于变换的管道

2358
02:30:59,060 --> 02:31:01,060
 image compression?

2358
02:30:59,060 --> 02:31:01,060
图像压缩？

2359
02:31:01,060 --> 02:31:03,060
 Right, so a typical transform-based image

2359
02:31:01,060 --> 02:31:03,060
是的，典型的基于变换的图像

2360
02:31:03,060 --> 02:31:05,060
 compression consists of the following steps.

2360
02:31:03,060 --> 02:31:05,060
压缩由以下步骤组成。

2361
02:31:05,060 --> 02:31:07,060
 Yes, image partitioning, transform,

2361
02:31:05,060 --> 02:31:07,060
是的，图像分割、变换、

2362
02:31:07,060 --> 02:31:09,060
 quantization and coding.

2362
02:31:07,060 --> 02:31:09,060
量化和编码。

2363
02:31:09,060 --> 02:31:11,060
 So, let's look at each of these steps a bit

2363
02:31:09,060 --> 02:31:11,060
那么，让我们稍微看一下每个步骤

2364
02:31:11,060 --> 02:31:13,060
 more in detail. So, first of all,

2364
02:31:11,060 --> 02:31:13,060
更详细。所以，首先，

2365
02:31:13,060 --> 02:31:15,060
 right, we have an input

2365
02:31:13,060 --> 02:31:15,060
对了，我们有一个输入

2366
02:31:15,060 --> 02:31:17,060
 image, supposed to be an input image.

2366
02:31:15,060 --> 02:31:17,060
图像，应该是输入图像。

2367
02:31:17,060 --> 02:31:19,060
 The first thing is that we do this

2367
02:31:17,060 --> 02:31:19,060
首先我们要做的是

2368
02:31:19,060 --> 02:31:21,060
 particular partitioning. This image,

2368
02:31:19,060 --> 02:31:21,060
特定的分区。这个图像，

2369
02:31:21,060 --> 02:31:23,060
 we partition it into

2369
02:31:21,060 --> 02:31:23,060
我们把它分成

2370
02:31:23,060 --> 02:31:25,060
 numerous sub-images

2370
02:31:23,060 --> 02:31:25,060
许多子图像

2371
02:31:25,060 --> 02:31:27,060
 or pixel blocks.

2371
02:31:25,060 --> 02:31:27,060
或像素块。

2372
02:31:27,060 --> 02:31:29,060
 So, we can partition

2372
02:31:27,060 --> 02:31:29,060
所以，我们可以分区

2373
02:31:29,060 --> 02:31:31,060
 to construct end-by-end

2373
02:31:29,060 --> 02:31:31,060
逐个构建

2374
02:31:31,060 --> 02:31:33,060
 sub-image or pixel block.

2374
02:31:31,060 --> 02:31:33,060
子图像或像素块。

2375
02:31:33,060 --> 02:31:35,060
 Right, okay, so and afterwards

2375
02:31:33,060 --> 02:31:35,060
好吧，那么，然后

2376
02:31:35,060 --> 02:31:37,060
 for each of this sub-image or pixel block

2376
02:31:35,060 --> 02:31:37,060
对于每个子图像或像素块

2377
02:31:37,060 --> 02:31:39,060
 we'll let it go through a forward

2377
02:31:37,060 --> 02:31:39,060
我们会让它通过前锋

2378
02:31:39,060 --> 02:31:41,060
 transform. Okay, let me just

2378
02:31:39,060 --> 02:31:41,060
转换。好吧，让我

2379
02:31:41,060 --> 02:31:43,060
 repeat. Given the image,

2379
02:31:41,060 --> 02:31:43,060
重复。鉴于图像，

2380
02:31:43,060 --> 02:31:45,060
 we partition it into numerous

2380
02:31:43,060 --> 02:31:45,060
我们把它分成无数个

2381
02:31:45,060 --> 02:31:47,060
 pixel block or sub-image.

2381
02:31:45,060 --> 02:31:47,060
像素块或子图像。

2382
02:31:47,060 --> 02:31:49,060
 For each of this particular pixel block,

2382
02:31:47,060 --> 02:31:49,060
对于每个特定的像素块，

2383
02:31:49,060 --> 02:31:51,060
 we can do the transformation

2383
02:31:49,060 --> 02:31:51,060
我们可以进行转型

2384
02:31:51,060 --> 02:31:53,060
 to transform it into

2384
02:31:51,060 --> 02:31:53,060
将其转变为

2385
02:31:53,060 --> 02:31:55,060
 the transform coefficient.

2385
02:31:53,060 --> 02:31:55,060
变换系数。

2386
02:31:55,060 --> 02:31:57,060
 So, this is what it means

2386
02:31:55,060 --> 02:31:57,060
所以，这就是它的意思

2387
02:31:57,060 --> 02:31:59,060
 by the forward transform.

2387
02:31:57,060 --> 02:31:59,060
通过前向变换。

2388
02:31:59,060 --> 02:32:01,060
 So, this

2388
02:31:59,060 --> 02:32:01,060
所以，这个

2389
02:32:01,060 --> 02:32:03,060
 pixel block,

2389
02:32:01,060 --> 02:32:03,060
像素块，

2390
02:32:03,060 --> 02:32:05,060
 you do the transform, you have the transform

2390
02:32:03,060 --> 02:32:05,060
你做了转变，你就有了转变

2391
02:32:05,060 --> 02:32:07,060
 coefficient now. So, this

2391
02:32:05,060 --> 02:32:07,060
现在的系数。所以，这个

2392
02:32:07,060 --> 02:32:09,060
 transform coefficient next, you need to go through

2392
02:32:07,060 --> 02:32:09,060
接下来变换系数，需要经过

2393
02:32:09,060 --> 02:32:11,060
 a quantizer here.

2393
02:32:09,060 --> 02:32:11,060
这里有一个量化器。

2394
02:32:11,060 --> 02:32:13,060
 So, the objective of this

2394
02:32:11,060 --> 02:32:13,060
那么，本次活动的目的

2395
02:32:13,060 --> 02:32:15,060
 particular quantizer is because

2395
02:32:13,060 --> 02:32:15,060
特定的量化器是因为

2396
02:32:15,060 --> 02:32:17,060
 for our work,

2396
02:32:15,060 --> 02:32:17,060
为了我们的工作，

2397
02:32:17,060 --> 02:32:19,060
 nowadays we are using

2397
02:32:17,060 --> 02:32:19,060
现在我们正在使用

2398
02:32:19,060 --> 02:32:21,060
 a digital representation.

2398
02:32:19,060 --> 02:32:21,060
数字表示。

2399
02:32:21,060 --> 02:32:23,060
 That means we are using computer

2399
02:32:21,060 --> 02:32:23,060
这意味着我们正在使用计算机

2400
02:32:23,060 --> 02:32:25,060
 and computers are using some

2400
02:32:23,060 --> 02:32:25,060
和计算机正在使用一些

2401
02:32:25,060 --> 02:32:27,060
 finite number of bits

2401
02:32:25,060 --> 02:32:27,060
有限位数

2402
02:32:27,060 --> 02:32:29,060
 to represent it. So, right,

2402
02:32:27,060 --> 02:32:29,060
来代表它。所以，对吧，

2403
02:32:29,060 --> 02:32:31,060
 when you do this

2403
02:32:29,060 --> 02:32:31,060
当你这样做时

2404
02:32:31,060 --> 02:32:33,060
 forward transform, the value

2404
02:32:31,060 --> 02:32:33,060
正向变换，值

2405
02:32:33,060 --> 02:32:35,060
 potentially are continuous value.

2405
02:32:33,060 --> 02:32:35,060
可能是连续值。

2406
02:32:35,060 --> 02:32:37,060
 It's a continuous

2406
02:32:35,060 --> 02:32:37,060
这是一个连续的

2407
02:32:37,060 --> 02:32:39,060
 value signal.

2407
02:32:37,060 --> 02:32:39,060
值信号。

2408
02:32:39,060 --> 02:32:41,060
 But we are using computer to represent

2408
02:32:39,060 --> 02:32:41,060
但我们用计算机来表示

2409
02:32:41,060 --> 02:32:43,060
 this data. So,

2409
02:32:41,060 --> 02:32:43,060
这个数据。所以，

2410
02:32:43,060 --> 02:32:45,060
 when using computer, that means you are using

2410
02:32:43,060 --> 02:32:45,060
当使用计算机时，这意味着您正在使用

2411
02:32:45,060 --> 02:32:47,060
 a finite number of bits.

2411
02:32:45,060 --> 02:32:47,060
有限数量的比特。

2412
02:32:47,060 --> 02:32:49,060
 So, finite number of bits means that you can

2412
02:32:47,060 --> 02:32:49,060
因此，有限的位数意味着您可以

2413
02:32:49,060 --> 02:32:51,060
 only have a finite number of levels

2413
02:32:49,060 --> 02:32:51,060
只有有限数量的级别

2414
02:32:51,060 --> 02:32:53,060
 to represent it. Right, so,

2414
02:32:51,060 --> 02:32:53,060
来代表它。对了，所以，

2415
02:32:53,060 --> 02:32:55,060
 therefore, in order to

2415
02:32:53,060 --> 02:32:55,060
因此，为了

2416
02:32:55,060 --> 02:32:57,060
 be able to use only finite number of

2416
02:32:55,060 --> 02:32:57,060
只能使用有限数量的

2417
02:32:57,060 --> 02:32:59,060
 levels to represent, we have to perform

2417
02:32:57,060 --> 02:32:59,060
水平来代表，我们必须执行

2418
02:32:59,060 --> 02:33:01,060
 quantization. So,

2418
02:32:59,060 --> 02:33:01,060
量化。所以，

2419
02:33:01,060 --> 02:33:03,060
 this quantizer is to perform

2419
02:33:01,060 --> 02:33:03,060
这个量化器要执行

2420
02:33:03,060 --> 02:33:05,060
 the quantization, similar to

2420
02:33:03,060 --> 02:33:05,060
量化，类似于

2421
02:33:05,060 --> 02:33:07,060
 any, you know, similar

2421
02:33:05,060 --> 02:33:07,060
任何，你知道，类似的

2422
02:33:07,060 --> 02:33:09,060
 quantizer you have studied before.

2422
02:33:07,060 --> 02:33:09,060
你之前学过的量化器。

2423
02:33:09,060 --> 02:33:11,060
 So, once you have quantized it,

2423
02:33:09,060 --> 02:33:11,060
所以，一旦你量化了它，

2424
02:33:11,060 --> 02:33:13,060
 the output at this

2424
02:33:11,060 --> 02:33:13,060
此时的输出

2425
02:33:13,060 --> 02:33:15,060
 particular junction is you have some symbol.

2425
02:33:13,060 --> 02:33:15,060
特定的连接点是你有一些符号。

2426
02:33:15,060 --> 02:33:17,060
 So, you have some pattern.

2426
02:33:15,060 --> 02:33:17,060
所以，你有一些模式。

2427
02:33:17,060 --> 02:33:19,060
 So, this pattern, now you have some patterns

2427
02:33:17,060 --> 02:33:19,060
所以，这个模式，现在你有一些模式

2428
02:33:19,060 --> 02:33:21,060
 here. Some of these patterns will occur

2428
02:33:19,060 --> 02:33:21,060
这里。其中一些模式将会出现

2429
02:33:21,060 --> 02:33:23,060
 more often than the others.

2429
02:33:21,060 --> 02:33:23,060
比其他人更频繁。

2430
02:33:23,060 --> 02:33:25,060
 So, then, in your mind,

2430
02:33:23,060 --> 02:33:25,060
那么，在你心里，

2431
02:33:25,060 --> 02:33:27,060
 right away you think, okay, if that's the case,

2431
02:33:25,060 --> 02:33:27,060
你立刻就会想，好吧，如果是这样的话，

2432
02:33:27,060 --> 02:33:29,060
 then what I'm going to do is I'm going to use

2432
02:33:27,060 --> 02:33:29,060
那么我要做的就是使用

2433
02:33:29,060 --> 02:33:31,060
 a symbol encoder,

2433
02:33:29,060 --> 02:33:31,060
符号编码器，

2434
02:33:31,060 --> 02:33:33,060
 such as a Huffman coding, to

2434
02:33:31,060 --> 02:33:33,060
例如霍夫曼编码，

2435
02:33:33,060 --> 02:33:35,060
 perform decompression. So, therefore,

2435
02:33:33,060 --> 02:33:35,060
执行减压。所以，因此，

2436
02:33:35,060 --> 02:33:37,060
 this is the typical pipeline.

2436
02:33:35,060 --> 02:33:37,060
这是典型的管道。

2437
02:33:37,060 --> 02:33:39,060
 Right, we have image, we partition into

2437
02:33:37,060 --> 02:33:39,060
对了，我们有图像，我们划分成

2438
02:33:39,060 --> 02:33:41,060
 numerous pixel blocks or sub-image.

2438
02:33:39,060 --> 02:33:41,060
许多像素块或子图像。

2439
02:33:41,060 --> 02:33:43,060
 Each of the blocks we let it go through

2439
02:33:41,060 --> 02:33:43,060
我们让它经过的每一个街区

2440
02:33:43,060 --> 02:33:45,060
 a forward transform. We

2440
02:33:43,060 --> 02:33:45,060
前向变换。我们

2441
02:33:45,060 --> 02:33:47,060
 let it go through a quantizer to quantize

2441
02:33:45,060 --> 02:33:47,060
让它通过量化器来量化

2442
02:33:47,060 --> 02:33:49,060
 into a finite number of patterns.

2442
02:33:47,060 --> 02:33:49,060
分成有限数量的模式。

2443
02:33:49,060 --> 02:33:51,060
 Okay, and then we use a symbol decoder,

2443
02:33:49,060 --> 02:33:51,060
好的，然后我们使用符号解码器，

2444
02:33:51,060 --> 02:33:53,060
 because some patterns occur more often

2444
02:33:51,060 --> 02:33:53,060
因为某些模式出现的频率更高

2445
02:33:53,060 --> 02:33:55,060
 than the others. We use some symbol decoder

2445
02:33:53,060 --> 02:33:55,060
比其他人。我们使用一些符号解码器

2446
02:33:55,060 --> 02:33:57,060
 such as Huffman coding, right,

2446
02:33:55,060 --> 02:33:57,060
比如霍夫曼编码，对吧，

2447
02:33:57,060 --> 02:33:59,060
 to convert it into

2447
02:33:57,060 --> 02:33:59,060
将其转换为

2448
02:33:59,060 --> 02:34:01,060
 the bitstream. So, when you see this

2448
02:33:59,060 --> 02:34:01,060
比特流。所以，当你看到这个

2449
02:34:01,060 --> 02:34:03,060
 compressed image, then it means that now

2449
02:34:01,060 --> 02:34:03,060
压缩图像，那么这意味着现在

2450
02:34:03,060 --> 02:34:05,060
 you have a compressed bitstream already.

2450
02:34:03,060 --> 02:34:05,060
你已经有一个压缩的比特流了。

2451
02:34:05,060 --> 02:34:07,060
 So, this is the

2451
02:34:05,060 --> 02:34:07,060
所以，这就是

2452
02:34:07,060 --> 02:34:09,060
 encoder. So, encoder

2452
02:34:07,060 --> 02:34:09,060
编码器。所以，编码器

2453
02:34:09,060 --> 02:34:11,060
 means that you take an image,

2453
02:34:09,060 --> 02:34:11,060
意味着你拍摄了一张照片，

2454
02:34:11,060 --> 02:34:13,060
 right, after you have gone through this

2454
02:34:11,060 --> 02:34:13,060
是的，当你经历完这个之后

2455
02:34:13,060 --> 02:34:15,060
 encoder, right, you will have

2455
02:34:13,060 --> 02:34:15,060
编码器，对，你会有

2456
02:34:15,060 --> 02:34:17,060
 the compressed bitstream.

2456
02:34:15,060 --> 02:34:17,060
压缩的比特流。

2457
02:34:17,060 --> 02:34:19,060
 Okay, it's much smaller.

2457
02:34:17,060 --> 02:34:19,060
好吧，它小了很多。

2458
02:34:19,060 --> 02:34:21,060
 Right, so this particular figure now is a

2458
02:34:19,060 --> 02:34:21,060
是的，所以现在这个特定的数字是

2459
02:34:21,060 --> 02:34:23,060
 decoder. So, the decoder means

2459
02:34:21,060 --> 02:34:23,060
解码器。所以，解码器意味着

2460
02:34:23,060 --> 02:34:25,060
 that you have a compressed image

2460
02:34:23,060 --> 02:34:25,060
你有一个压缩图像

2461
02:34:25,060 --> 02:34:27,060
 of bitstream, right, after you

2461
02:34:25,060 --> 02:34:27,060
比特流，对，在你之后

2462
02:34:27,060 --> 02:34:29,060
 go through this decoder, you'll

2462
02:34:27,060 --> 02:34:29,060
通过这个解码器，你会

2463
02:34:29,060 --> 02:34:31,060
 get your reconstructed

2463
02:34:29,060 --> 02:34:31,060
得到你的重建

2464
02:34:31,060 --> 02:34:33,060
 or decompressed image.

2464
02:34:31,060 --> 02:34:33,060
或解压后的图像。

2465
02:34:33,060 --> 02:34:35,060
 So, for this particular process here,

2465
02:34:33,060 --> 02:34:35,060
因此，对于这里的这个特定过程，

2466
02:34:35,060 --> 02:34:37,060
 it's the reverse of this.

2466
02:34:35,060 --> 02:34:37,060
情况正好相反。

2467
02:34:37,060 --> 02:34:39,060
 So, first you have the compressed image of

2467
02:34:37,060 --> 02:34:39,060
所以，首先你有压缩图像

2468
02:34:39,060 --> 02:34:41,060
 bitstream, you let it go through the symbol

2468
02:34:39,060 --> 02:34:41,060
比特流，你让它通过符号

2469
02:34:41,060 --> 02:34:43,060
 decoder. So, this is encoder,

2469
02:34:41,060 --> 02:34:43,060
解码器。所以，这是编码器，

2470
02:34:43,060 --> 02:34:45,060
 this is decoder. Right, and

2470
02:34:43,060 --> 02:34:45,060
这是解码器。对了，还有

2471
02:34:45,060 --> 02:34:47,060
 afterwards, actually there's a missing block here,

2471
02:34:45,060 --> 02:34:47,060
之后，实际上这里缺少一个块，

2472
02:34:47,060 --> 02:34:49,060
 right, this textbook

2472
02:34:47,060 --> 02:34:49,060
对了，这本教科书

2473
02:34:49,060 --> 02:34:51,060
 missed out this block. So, this block here,

2473
02:34:49,060 --> 02:34:51,060
错过了这个区块。所以，这里的这个街区，

2474
02:34:51,060 --> 02:34:53,060
 this is quantizer, this is the de-quantizer.

2474
02:34:51,060 --> 02:34:53,060
这是量化器，这是去量化器。

2475
02:34:53,060 --> 02:34:55,060
 It's just performing the reverse.

2475
02:34:53,060 --> 02:34:55,060
它只是执行相反的操作。

2476
02:34:55,060 --> 02:34:57,060
 One of them you divide the other,

2476
02:34:55,060 --> 02:34:57,060
其中一个你将另一个分开，

2477
02:34:57,060 --> 02:34:59,060
 one of them you divide the other, you multiply.

2477
02:34:57,060 --> 02:34:59,060
将其中一个相除，将另一个相乘。

2478
02:34:59,060 --> 02:35:01,060
 Okay, this is a

2478
02:34:59,060 --> 02:35:01,060
好吧，这是一个

2479
02:35:01,060 --> 02:35:03,060
 full transform, this is the inverse transform.

2479
02:35:01,060 --> 02:35:03,060
完全变换，这就是逆变换。

2480
02:35:03,060 --> 02:35:05,060
 You partition it into numerous

2480
02:35:03,060 --> 02:35:05,060
你把它分成无数个

2481
02:35:05,060 --> 02:35:07,060
 blocks, this you put the blocks

2481
02:35:05,060 --> 02:35:07,060
块，这是你放置的块

2482
02:35:07,060 --> 02:35:09,060
 together. Right, so that's pretty much

2482
02:35:07,060 --> 02:35:09,060
一起。对了，这样就差不多了

2483
02:35:09,060 --> 02:35:11,060
 the reverse of it. So,

2483
02:35:09,060 --> 02:35:11,060
其反面。所以，

2484
02:35:11,060 --> 02:35:13,060
 this full transform, this is the inverse

2484
02:35:11,060 --> 02:35:13,060
这个完整的变换，这是逆变换

2485
02:35:13,060 --> 02:35:15,060
 transform. Okay, so

2485
02:35:13,060 --> 02:35:15,060
转换。好吧，那么

2486
02:35:15,060 --> 02:35:17,060
 next let's look at some of the

2486
02:35:15,060 --> 02:35:17,060
接下来让我们看一些

2487
02:35:17,060 --> 02:35:19,060
 common transform.

2487
02:35:17,060 --> 02:35:19,060
共同变换。

2488
02:35:19,060 --> 02:35:21,060
 So, okay, so for this common

2488
02:35:19,060 --> 02:35:21,060
那么，好吧，对于这个常见的

2489
02:35:21,060 --> 02:35:23,060
 transform is that we apply a one-to-one

2489
02:35:21,060 --> 02:35:23,060
变换是我们应用一对一的

2490
02:35:23,060 --> 02:35:25,060
 transform to the input data.

2490
02:35:23,060 --> 02:35:25,060
转换为输入数据。

2491
02:35:25,060 --> 02:35:27,060
 So, this transformation is a

2491
02:35:25,060 --> 02:35:27,060
所以，这个转变是一个

2492
02:35:27,060 --> 02:35:29,060
 one-to-one transformation. Okay,

2492
02:35:27,060 --> 02:35:29,060
一对一的转变。好的，

2493
02:35:29,060 --> 02:35:31,060
 so why do we want to do the transform? I think we

2493
02:35:29,060 --> 02:35:31,060
那么我们为什么要进行转换呢？我想我们

2494
02:35:31,060 --> 02:35:33,060
 mentioned it early on.

2494
02:35:31,060 --> 02:35:33,060
很早就提到过。

2495
02:35:33,060 --> 02:35:35,060
 The reason why we want to perform the transform

2495
02:35:33,060 --> 02:35:35,060
我们要执行转换的原因

2496
02:35:35,060 --> 02:35:37,060
 is the transform output is in

2496
02:35:35,060 --> 02:35:37,060
变换输出是在

2497
02:35:37,060 --> 02:35:39,060
 a representation which is more

2497
02:35:37,060 --> 02:35:39,060
更具有代表意义

2498
02:35:39,060 --> 02:35:41,060
 suitable for efficient compression

2498
02:35:39,060 --> 02:35:41,060
适合高效压缩

2499
02:35:41,060 --> 02:35:43,060
 than the raw image data. So,

2499
02:35:41,060 --> 02:35:43,060
比原始图像数据。所以，

2500
02:35:43,060 --> 02:35:45,060
 this point pretty much is what I mentioned.

2500
02:35:43,060 --> 02:35:45,060
这一点几乎就是我所提到的。

2501
02:35:45,060 --> 02:35:47,060
 Yeah, once you have this particular

2501
02:35:45,060 --> 02:35:47,060
是的，一旦你有了这个特别的

2502
02:35:47,060 --> 02:35:49,060
 small image

2502
02:35:47,060 --> 02:35:49,060
小图片

2503
02:35:49,060 --> 02:35:51,060
 block, okay,

2503
02:35:49,060 --> 02:35:51,060
阻止，好吧，

2504
02:35:51,060 --> 02:35:53,060
 when you do the transformation,

2504
02:35:51,060 --> 02:35:53,060
当你进行转换时，

2505
02:35:53,060 --> 02:35:55,060
 once it's in this transform domain,

2505
02:35:53,060 --> 02:35:55,060
一旦进入这个变换域，

2506
02:35:55,060 --> 02:35:57,060
 this transform domain, you know,

2506
02:35:55,060 --> 02:35:57,060
这个变换域，你知道，

2507
02:35:57,060 --> 02:35:59,060
 has some good property that we can exploit

2507
02:35:57,060 --> 02:35:59,060
有一些我们可以利用的好特性

2508
02:35:59,060 --> 02:36:01,060
 or its representation

2508
02:35:59,060 --> 02:36:01,060
或其代表

2509
02:36:01,060 --> 02:36:03,060
 is more suitable for compression.

2509
02:36:01,060 --> 02:36:03,060
更适合压缩。

2510
02:36:03,060 --> 02:36:05,060
 Yeah, okay, so

2510
02:36:03,060 --> 02:36:05,060
是啊，好吧，所以

2511
02:36:05,060 --> 02:36:07,060
 among all those transform, one of the

2511
02:36:05,060 --> 02:36:07,060
在所有这些转变中，其中之一

2512
02:36:07,060 --> 02:36:09,060
 most popular transform is the

2512
02:36:07,060 --> 02:36:09,060
最流行的变换是

2513
02:36:09,060 --> 02:36:11,060
 DCT. Okay,

2513
02:36:09,060 --> 02:36:11,060
DCT。好的，

2514
02:36:11,060 --> 02:36:13,060
 so DCT is a

2514
02:36:11,060 --> 02:36:13,060
所以 DCT 是

2515
02:36:13,060 --> 02:36:15,060
 unitary mapping.

2515
02:36:13,060 --> 02:36:15,060
统一映射。

2516
02:36:15,060 --> 02:36:17,060
 So, unitary mapping

2516
02:36:15,060 --> 02:36:17,060
所以，统一映射

2517
02:36:17,060 --> 02:36:19,060
 means that this particular transform

2517
02:36:17,060 --> 02:36:19,060
意味着这个特定的变换

2518
02:36:19,060 --> 02:36:21,060
 matrix, if you call this

2518
02:36:19,060 --> 02:36:21,060
矩阵，如果你称之为

2519
02:36:21,060 --> 02:36:23,060
 transform matrix T,

2519
02:36:21,060 --> 02:36:23,060
变换矩阵 T，

2520
02:36:23,060 --> 02:36:25,060
 then it's T, T-transposed

2520
02:36:23,060 --> 02:36:25,060
然后是 T，T 转置

2521
02:36:25,060 --> 02:36:27,060
 is equal to T-transposed,

2521
02:36:25,060 --> 02:36:27,060
等于 T 转置，

2522
02:36:27,060 --> 02:36:29,060
 T is equal to identity.

2522
02:36:27,060 --> 02:36:29,060
T 等于身份。

2523
02:36:29,060 --> 02:36:31,060
 So, anyway, for those of you who study

2523
02:36:29,060 --> 02:36:31,060
所以，无论如何，对于那些学习的人来说

2524
02:36:31,060 --> 02:36:33,060
 linear algebra, you

2524
02:36:31,060 --> 02:36:33,060
线性代数，你

2525
02:36:33,060 --> 02:36:35,060
 know that this particular

2525
02:36:33,060 --> 02:36:35,060
知道这个特殊的

2526
02:36:35,060 --> 02:36:37,060
 properties of unitary

2526
02:36:35,060 --> 02:36:37,060
单一性的性质

2527
02:36:37,060 --> 02:36:39,060
 transformation.

2527
02:36:37,060 --> 02:36:39,060
转变。

2528
02:36:39,060 --> 02:36:41,060
 Okay, so DCT is a

2528
02:36:39,060 --> 02:36:41,060
好的，所以 DCT 是

2529
02:36:41,060 --> 02:36:43,060
 type of unitary

2529
02:36:41,060 --> 02:36:43,060
单一类型

2530
02:36:43,060 --> 02:36:45,060
 mapping. So, later on, when we

2530
02:36:43,060 --> 02:36:45,060
映射。所以，后来，当我们

2531
02:36:45,060 --> 02:36:47,060
 study about how do we perform

2531
02:36:45,060 --> 02:36:47,060
研究我们的表现

2532
02:36:47,060 --> 02:36:49,060
 this DCT will become clear.

2532
02:36:47,060 --> 02:36:49,060
这个DCT将会变得清晰。

2533
02:36:49,060 --> 02:36:51,060
 So, DCT has a good property

2533
02:36:49,060 --> 02:36:51,060
因此，DCT具有良好的性能

2534
02:36:51,060 --> 02:36:53,060
 because it can pack the energy

2534
02:36:51,060 --> 02:36:53,060
因为它可以储存能量

2535
02:36:53,060 --> 02:36:55,060
 into a small number of kVc.

2535
02:36:53,060 --> 02:36:55,060
变成少量的kVc。

2536
02:36:55,060 --> 02:36:57,060
 So, just like what I mentioned

2536
02:36:55,060 --> 02:36:57,060
所以，就像我提到的那样

2537
02:36:57,060 --> 02:36:59,060
 earlier on, so if you look at

2537
02:36:57,060 --> 02:36:59,060
早些时候，所以如果你看看

2538
02:36:59,060 --> 02:37:01,060
 a small pixel block, we do not know

2538
02:36:59,060 --> 02:37:01,060
一个小像素块，我们不知道

2539
02:37:01,060 --> 02:37:03,060
 where the energy is located.

2539
02:37:01,060 --> 02:37:03,060
能量所在的地方。

2540
02:37:03,060 --> 02:37:05,060
 But after you use a DCT

2540
02:37:03,060 --> 02:37:05,060
但是当你使用DCT之后

2541
02:37:05,060 --> 02:37:07,060
 transform, the energy will be packed

2541
02:37:05,060 --> 02:37:07,060
转变，能量将被压缩

2542
02:37:07,060 --> 02:37:09,060
 into a small number of kVc.

2542
02:37:07,060 --> 02:37:09,060
变成少量的kVc。

2543
02:37:09,060 --> 02:37:11,060
 So, once we can pack into a small number

2543
02:37:09,060 --> 02:37:11,060
所以，一旦我们可以打包成一个小数量

2544
02:37:11,060 --> 02:37:13,060
 of kVc, then we can pay our

2544
02:37:11,060 --> 02:37:13,060
kVc，那么我们可以支付我们的

2545
02:37:13,060 --> 02:37:15,060
 attention to try to represent

2545
02:37:13,060 --> 02:37:15,060
注意尝试代表

2546
02:37:15,060 --> 02:37:17,060
 data for this

2546
02:37:15,060 --> 02:37:17,060
这方面的数据

2547
02:37:17,060 --> 02:37:19,060
 small number of kVc.

2547
02:37:17,060 --> 02:37:19,060
kVc 数少。

2548
02:37:19,060 --> 02:37:21,060
 So, there are some

2548
02:37:19,060 --> 02:37:21,060
所以，有一些

2549
02:37:21,060 --> 02:37:23,060
 well-known transforms,

2549
02:37:21,060 --> 02:37:23,060
众所周知的变换，

2550
02:37:23,060 --> 02:37:25,060
 which include, for

2550
02:37:23,060 --> 02:37:25,060
其中包括，对于

2551
02:37:25,060 --> 02:37:27,060
 example, some of the well-known transforms.

2551
02:37:25,060 --> 02:37:27,060
例如，一些众所周知的变换。

2552
02:37:27,060 --> 02:37:29,060
 It's a DFT,

2552
02:37:27,060 --> 02:37:29,060
这是一个 DFT，

2553
02:37:29,060 --> 02:37:31,060
 discrete Fourier Transform,

2553
02:37:29,060 --> 02:37:31,060
离散傅里叶变换，

2554
02:37:31,060 --> 02:37:33,060
 discrete Cosine Transform, discrete

2554
02:37:31,060 --> 02:37:33,060
离散余弦变换，离散

2555
02:37:33,060 --> 02:37:35,060
 Wave Flare Transform. So, these are some of the

2555
02:37:33,060 --> 02:37:35,060
波耀斑变换。所以，这些是一些

2556
02:37:35,060 --> 02:37:37,060
 popular transforms that have been used.

2556
02:37:35,060 --> 02:37:37,060
已使用的流行变换。

2557
02:37:37,060 --> 02:37:39,060
 But for JPEG

2557
02:37:37,060 --> 02:37:39,060
但对于 JPEG

2558
02:37:39,060 --> 02:37:41,060
 and MPAC, we will be using

2558
02:37:39,060 --> 02:37:41,060
和 MPAC，我们将使用

2559
02:37:41,060 --> 02:37:43,060
 this DCT. That's why we will

2559
02:37:41,060 --> 02:37:43,060
这个 DCT。这就是为什么我们会

2560
02:37:43,060 --> 02:37:45,060
 study, our key focus will be studying

2560
02:37:43,060 --> 02:37:45,060
学习，我们的重点是学习

2561
02:37:45,060 --> 02:37:47,060
 on this. This

2561
02:37:45,060 --> 02:37:47,060
关于这一点。这

2562
02:37:47,060 --> 02:37:49,060
 DWT is used in JPEG

2562
02:37:47,060 --> 02:37:49,060
JPEG 中使用 DWT

2563
02:37:49,060 --> 02:37:51,060
 2000, right? Actually,

2563
02:37:49,060 --> 02:37:51,060
2000，对吗？实际上，

2564
02:37:51,060 --> 02:37:53,060
 now it's less commonly used.

2564
02:37:51,060 --> 02:37:53,060
现在已经不太常用了。

2565
02:37:53,060 --> 02:37:55,060
 That's why we will not touch on it. We will

2565
02:37:53,060 --> 02:37:55,060
这就是为什么我们不会触及它。我们将

2566
02:37:55,060 --> 02:37:57,060
 only be focusing on this DCT

2566
02:37:55,060 --> 02:37:57,060
只关注这个 DCT

2567
02:37:57,060 --> 02:37:59,060
 transform. And then, based on

2567
02:37:57,060 --> 02:37:59,060
转换。然后，基于

2568
02:37:59,060 --> 02:38:01,060
 this DCT transform, then we will explain

2568
02:37:59,060 --> 02:38:01,060
这个DCT变换，然后我们将解释

2569
02:38:01,060 --> 02:38:03,060
 all those properties that we have just mentioned.

2569
02:38:01,060 --> 02:38:03,060
我们刚才提到的所有这些属性。

2570
02:38:05,060 --> 02:38:07,060
 So, just now, this slide here is pretty

2570
02:38:05,060 --> 02:38:07,060
所以，刚才，这张幻灯片很漂亮

2571
02:38:07,060 --> 02:38:09,060
 much explaining about this transform

2571
02:38:07,060 --> 02:38:09,060
关于这个转变的很多解释

2572
02:38:09,060 --> 02:38:11,060
 block. So, the next

2572
02:38:09,060 --> 02:38:11,060
堵塞。那么，接下来

2573
02:38:11,060 --> 02:38:13,060
 block that we have is the quantization.

2573
02:38:11,060 --> 02:38:13,060
我们拥有的块是量化。

2574
02:38:13,060 --> 02:38:15,060
 So, as I mentioned, the objective

2574
02:38:13,060 --> 02:38:15,060
所以，正如我提到的，目标

2575
02:38:15,060 --> 02:38:17,060
 of quantization is that you want to generate

2575
02:38:15,060 --> 02:38:17,060
量化是你想要生成

2576
02:38:17,060 --> 02:38:19,060
 a small number of symbols

2576
02:38:17,060 --> 02:38:19,060
少量符号

2577
02:38:19,060 --> 02:38:21,060
 from the transform coefficient.

2577
02:38:19,060 --> 02:38:21,060
从变换系数。

2578
02:38:21,060 --> 02:38:23,060
 Because, alright,

2578
02:38:21,060 --> 02:38:23,060
因为，好吧，

2579
02:38:23,060 --> 02:38:25,060
 after you have performed this

2579
02:38:23,060 --> 02:38:25,060
执行此操作后

2580
02:38:25,060 --> 02:38:27,060
 transform, the output, right, so

2580
02:38:25,060 --> 02:38:27,060
变换，输出，对，所以

2581
02:38:27,060 --> 02:38:29,060
 for example, the signal

2581
02:38:27,060 --> 02:38:29,060
例如，信号

2582
02:38:29,060 --> 02:38:31,060
 at this particular junction is

2582
02:38:29,060 --> 02:38:31,060
在这个特定的交界处是

2583
02:38:31,060 --> 02:38:33,060
 4x4 pixel block.

2583
02:38:31,060 --> 02:38:33,060
4x4 像素块。

2584
02:38:33,060 --> 02:38:35,060
 After you have performed the transform,

2584
02:38:33,060 --> 02:38:35,060
执行转换后，

2585
02:38:35,060 --> 02:38:37,060
 what you have is a 4x4, for example,

2585
02:38:35,060 --> 02:38:37,060
例如，您拥有一辆 4x4

2586
02:38:37,060 --> 02:38:39,060
 transform coefficients

2586
02:38:37,060 --> 02:38:39,060
变换系数

2587
02:38:39,060 --> 02:38:41,060
 here. So, this transform

2587
02:38:39,060 --> 02:38:41,060
这里。所以，这个变换

2588
02:38:41,060 --> 02:38:43,060
 coefficients, their values are

2588
02:38:41,060 --> 02:38:43,060
系数，它们的值为

2589
02:38:43,060 --> 02:38:45,060
 continuous value.

2589
02:38:43,060 --> 02:38:45,060
连续值。

2590
02:38:45,060 --> 02:38:47,060
 So, therefore, if you want to use

2590
02:38:45,060 --> 02:38:47,060
因此，如果您想使用

2591
02:38:47,060 --> 02:38:49,060
 a computer to represent,

2591
02:38:47,060 --> 02:38:49,060
一台计算机来代表，

2592
02:38:49,060 --> 02:38:51,060
 we must perform quantization.

2592
02:38:49,060 --> 02:38:51,060
我们必须进行量化。

2593
02:38:51,060 --> 02:38:53,060
 So, it's to generate

2593
02:38:51,060 --> 02:38:53,060
所以，它是为了生成

2594
02:38:53,060 --> 02:38:55,060
 a finite number of symbols from the

2594
02:38:53,060 --> 02:38:55,060
有限数量的符号

2595
02:38:55,060 --> 02:38:57,060
 transform coefficient. Because transform

2595
02:38:55,060 --> 02:38:57,060
变换系数。因为改造

2596
02:38:57,060 --> 02:38:59,060
 coefficient initially is continuous value.

2596
02:38:57,060 --> 02:38:59,060
系数最初是连续值。

2597
02:38:59,060 --> 02:39:01,060
 So, we need to perform quantization.

2597
02:38:59,060 --> 02:39:01,060
因此，我们需要进行量化。

2598
02:39:01,060 --> 02:39:03,060
 So, it's irreversible

2598
02:39:01,060 --> 02:39:03,060
所以，这是不可逆转的

2599
02:39:03,060 --> 02:39:05,060
 many-to-one mapping causing information

2599
02:39:03,060 --> 02:39:05,060
多对一映射导致信息

2600
02:39:05,060 --> 02:39:07,060
 loss. So, for many of you

2600
02:39:05,060 --> 02:39:07,060
损失。所以，对于你们很多人来说

2601
02:39:07,060 --> 02:39:09,060
 who have studied your undergrad before, you

2601
02:39:07,060 --> 02:39:09,060
谁曾经学习过你的本科生，你

2602
02:39:09,060 --> 02:39:11,060
 know that once you perform quantization,

2602
02:39:09,060 --> 02:39:11,060
知道一旦你执行量化，

2603
02:39:11,060 --> 02:39:13,060
 information will be lost.

2603
02:39:11,060 --> 02:39:13,060
信息将会丢失。

2604
02:39:13,060 --> 02:39:15,060
 So, information, when information is lost,

2604
02:39:13,060 --> 02:39:15,060
所以，信息，当信息丢失时，

2605
02:39:15,060 --> 02:39:17,060
 that means it's an irreversible process.

2605
02:39:15,060 --> 02:39:17,060
这意味着这是一个不可逆转的过程。

2606
02:39:17,060 --> 02:39:19,060
 So, what it means is that

2606
02:39:17,060 --> 02:39:19,060
那么，它的意思就是

2607
02:39:19,060 --> 02:39:21,060
 if you look at this simple scalar

2607
02:39:19,060 --> 02:39:21,060
如果你看这个简单的标量

2608
02:39:21,060 --> 02:39:23,060
 quantization, your horizontal

2608
02:39:21,060 --> 02:39:23,060
量化，你的水平

2609
02:39:23,060 --> 02:39:25,060
 axis is the input and the vertical axis

2609
02:39:23,060 --> 02:39:25,060
axis 是输入，纵轴

2610
02:39:25,060 --> 02:39:27,060
 is the output. So, suppose

2610
02:39:25,060 --> 02:39:27,060
是输出。所以，假设

2611
02:39:27,060 --> 02:39:29,060
 if your input is in this

2611
02:39:27,060 --> 02:39:29,060
如果你的输入是这样的

2612
02:39:29,060 --> 02:39:31,060
 range here, you can see the input

2612
02:39:29,060 --> 02:39:31,060
范围在这里，你可以看到输入

2613
02:39:31,060 --> 02:39:33,060
 in this range here will be mapped

2613
02:39:31,060 --> 02:39:33,060
在这个范围内这里将被映射

2614
02:39:33,060 --> 02:39:35,060
 to this same output of 0.5.

2614
02:39:33,060 --> 02:39:35,060
到同样的输出 0.5。

2615
02:39:35,060 --> 02:39:37,060
 For this range of input,

2615
02:39:35,060 --> 02:39:37,060
对于这个输入范围，

2616
02:39:37,060 --> 02:39:39,060
 okay, this range of input

2616
02:39:37,060 --> 02:39:39,060
好的，这个输入范围

2617
02:39:39,060 --> 02:39:41,060
 here will be mapped to this output value

2617
02:39:39,060 --> 02:39:41,060
这里将被映射到这个输出值

2618
02:39:41,060 --> 02:39:43,060
 of 0.5. So, that means when you do that,

2618
02:39:41,060 --> 02:39:43,060
0.5。所以，这意味着当你这样做时，

2619
02:39:43,060 --> 02:39:45,060
 it's a many-to-one mapping.

2619
02:39:43,060 --> 02:39:45,060
这是一个多对一的映射。

2620
02:39:45,060 --> 02:39:47,060
 Many value from here

2620
02:39:45,060 --> 02:39:47,060
这里有很多价值

2621
02:39:47,060 --> 02:39:49,060
 will be mapped to this single output

2621
02:39:47,060 --> 02:39:49,060
将被映射到这个单一输出

2622
02:39:49,060 --> 02:39:51,060
 value. So, it's a many-to-one

2622
02:39:49,060 --> 02:39:51,060
价值。所以，这是一个多对一

2623
02:39:51,060 --> 02:39:53,060
 mapping. When you do that,

2623
02:39:51,060 --> 02:39:53,060
映射。当你这样做时，

2624
02:39:53,060 --> 02:39:55,060
 that means some information has been lost

2624
02:39:53,060 --> 02:39:55,060
这意味着一些信息已经丢失

2625
02:39:55,060 --> 02:39:57,060
 already. Why do we say some information has

2625
02:39:55,060 --> 02:39:57,060
已经。为什么我们说有些信息有

2626
02:39:57,060 --> 02:39:59,060
 been lost? Because now

2626
02:39:57,060 --> 02:39:59,060
迷路了？因为现在

2627
02:39:59,060 --> 02:40:01,060
 you know the output is 0.5,

2627
02:39:59,060 --> 02:40:01,060
你知道输出是 0.5，

2628
02:40:01,060 --> 02:40:03,060
 can you recover what is your

2628
02:40:01,060 --> 02:40:03,060
你能恢复你的东西吗

2629
02:40:03,060 --> 02:40:05,060
 original input? You cannot. You do

2629
02:40:03,060 --> 02:40:05,060
原始输入？你不能。你做

2630
02:40:05,060 --> 02:40:07,060
 not know which of this

2630
02:40:05,060 --> 02:40:07,060
不知道这是哪一个

2631
02:40:07,060 --> 02:40:09,060
 input value mapped to this output.

2631
02:40:07,060 --> 02:40:09,060
映射到该输出的输入值。

2632
02:40:09,060 --> 02:40:11,060
 So, therefore, you can see quite clearly

2632
02:40:09,060 --> 02:40:11,060
所以，因此，你可以很清楚地看到

2633
02:40:11,060 --> 02:40:13,060
 from this particular example, it's a

2633
02:40:11,060 --> 02:40:13,060
从这个特定的例子来看，这是一个

2634
02:40:13,060 --> 02:40:15,060
 many-to-one mapping,

2634
02:40:13,060 --> 02:40:15,060
多对一映射，

2635
02:40:15,060 --> 02:40:17,060
 and some information has been lost

2635
02:40:15,060 --> 02:40:17,060
并且一些信息已经丢失

2636
02:40:17,060 --> 02:40:19,060
 already because input value within this

2636
02:40:17,060 --> 02:40:19,060
已经因为输入值在此

2637
02:40:19,060 --> 02:40:21,060
 range will be mapped to this output

2637
02:40:19,060 --> 02:40:21,060
范围将映射到此输出

2638
02:40:21,060 --> 02:40:23,060
 value. So, from these output values

2638
02:40:21,060 --> 02:40:23,060
价值。所以，从这些输出值

2639
02:40:23,060 --> 02:40:25,060
 of 0.5, you cannot recover

2639
02:40:23,060 --> 02:40:25,060
0.5，则无法恢复

2640
02:40:25,060 --> 02:40:27,060
 your original input.

2640
02:40:25,060 --> 02:40:27,060
您的原始输入。

2641
02:40:27,060 --> 02:40:29,060
 If that happened,

2641
02:40:27,060 --> 02:40:29,060
如果发生这种情况，

2642
02:40:29,060 --> 02:40:31,060
 that means some information has been lost.

2642
02:40:29,060 --> 02:40:31,060
这意味着一些信息已经丢失。

2643
02:40:31,060 --> 02:40:33,060
 So, these are some, two examples

2643
02:40:31,060 --> 02:40:33,060
所以，这是一些、两个例子

2644
02:40:33,060 --> 02:40:35,060
 of the scalar

2644
02:40:33,060 --> 02:40:35,060
标量的

2645
02:40:35,060 --> 02:40:37,060
 quantization just to illustrate

2645
02:40:35,060 --> 02:40:37,060
量化只是为了说明

2646
02:40:37,060 --> 02:40:39,060
 the point.

2646
02:40:37,060 --> 02:40:39,060
重点。

2647
02:40:39,060 --> 02:40:41,060
 Right, okay. So, now we have gone through

2647
02:40:39,060 --> 02:40:41,060
对了，好吧。所以，现在我们已经经历了

2648
02:40:41,060 --> 02:40:43,060
 the, we have explained about

2648
02:40:41,060 --> 02:40:43,060
我们已经解释过

2649
02:40:43,060 --> 02:40:45,060
 this quantization already.

2649
02:40:43,060 --> 02:40:45,060
这个量化已经。

2650
02:40:45,060 --> 02:40:47,060
 So, the last one is a symbol

2650
02:40:45,060 --> 02:40:47,060
所以最后一个是一个符号

2651
02:40:47,060 --> 02:40:49,060
 encoder.

2651
02:40:47,060 --> 02:40:49,060
编码器。

2652
02:40:49,060 --> 02:40:51,060
 So, the symbol encoder,

2652
02:40:49,060 --> 02:40:51,060
所以，符号编码器，

2653
02:40:51,060 --> 02:40:53,060
 as I mentioned, after you

2653
02:40:51,060 --> 02:40:53,060
正如我提到的，在你之后

2654
02:40:53,060 --> 02:40:55,060
 have done the quantization,

2654
02:40:53,060 --> 02:40:55,060
已经做了量化，

2655
02:40:55,060 --> 02:40:57,060
 so, very often, some pattern

2655
02:40:55,060 --> 02:40:57,060
所以，很多时候，一些模式

2656
02:40:57,060 --> 02:40:59,060
 will occur more often than the others.

2656
02:40:57,060 --> 02:40:59,060
会比其他情况更频繁地发生。

2657
02:40:59,060 --> 02:41:01,060
 So, once you hear that some patterns

2657
02:40:59,060 --> 02:41:01,060
所以，一旦你听到一些模式

2658
02:41:01,060 --> 02:41:03,060
 occur more than the others,

2658
02:41:01,060 --> 02:41:03,060
比其他情况出现得更多，

2659
02:41:03,060 --> 02:41:05,060
 that means you know that for different patterns, there are

2659
02:41:03,060 --> 02:41:05,060
这意味着您知道对于不同的模式，有

2660
02:41:05,060 --> 02:41:07,060
 some probability distribution.

2660
02:41:05,060 --> 02:41:07,060
一些概率分布。

2661
02:41:07,060 --> 02:41:09,060
 So, when there are some probability distribution,

2661
02:41:07,060 --> 02:41:09,060
因此，当存在某种概率分布时，

2662
02:41:09,060 --> 02:41:11,060
 some pattern occur more than the others,

2662
02:41:09,060 --> 02:41:11,060
某些模式比其他模式出现得更多，

2663
02:41:11,060 --> 02:41:13,060
 then right away, you know, you have to

2663
02:41:11,060 --> 02:41:13,060
然后马上，你知道，你必须

2664
02:41:13,060 --> 02:41:15,060
 use techniques such as entropy and coding

2664
02:41:13,060 --> 02:41:15,060
使用熵和编码等技术

2665
02:41:15,060 --> 02:41:17,060
 to compress it,

2665
02:41:15,060 --> 02:41:17,060
来压缩它，

2666
02:41:17,060 --> 02:41:19,060
 because it's more efficient.

2666
02:41:17,060 --> 02:41:19,060
因为它更有效率。

2667
02:41:19,060 --> 02:41:21,060
 So, this coding part, the objective is to

2667
02:41:19,060 --> 02:41:21,060
所以，这个编码部分的目标是

2668
02:41:21,060 --> 02:41:23,060
 assign a code word of

2668
02:41:21,060 --> 02:41:23,060
分配一个代码字

2669
02:41:23,060 --> 02:41:25,060
 patterns to each symbol

2669
02:41:23,060 --> 02:41:25,060
每个符号的图案

2670
02:41:25,060 --> 02:41:27,060
 at the

2670
02:41:25,060 --> 02:41:27,060
在

2671
02:41:27,060 --> 02:41:29,060
 output of the quantization.

2671
02:41:27,060 --> 02:41:29,060
量化的输出。

2672
02:41:29,060 --> 02:41:31,060
 So, you can, of course, you can choose

2672
02:41:29,060 --> 02:41:31,060
所以，你当然可以，你可以选择

2673
02:41:31,060 --> 02:41:33,060
 to use a fixed length or variable length

2673
02:41:31,060 --> 02:41:33,060
使用固定长度或可变长度

2674
02:41:33,060 --> 02:41:35,060
 coding, but nowadays, you already know,

2674
02:41:33,060 --> 02:41:35,060
编码，但如今，你已经知道，

2675
02:41:35,060 --> 02:41:37,060
 after you have studied the first part, you know

2675
02:41:35,060 --> 02:41:37,060
当你学完第一部分之后，你就知道了

2676
02:41:37,060 --> 02:41:39,060
 that variable length coding is definitely

2676
02:41:37,060 --> 02:41:39,060
可变长度编码肯定是

2677
02:41:39,060 --> 02:41:41,060
 a much better choice.

2677
02:41:39,060 --> 02:41:41,060
一个更好的选择。

2678
02:41:41,060 --> 02:41:43,060
 So, the idea of variable length coding

2678
02:41:41,060 --> 02:41:43,060
所以，变长编码的思想

2679
02:41:43,060 --> 02:41:45,060
 or entropy coding is

2679
02:41:43,060 --> 02:41:45,060
或者熵编码是

2680
02:41:45,060 --> 02:41:47,060
 like what we mentioned before, you assign

2680
02:41:45,060 --> 02:41:47,060
就像我们之前提到的，你分配

2681
02:41:47,060 --> 02:41:49,060
 the code in such a way,

2681
02:41:47,060 --> 02:41:49,060
代码以这种方式，

2682
02:41:49,060 --> 02:41:51,060
 such that the average length of the

2682
02:41:49,060 --> 02:41:51,060
这样的平均长度

2683
02:41:51,060 --> 02:41:53,060
 code word will be reduced.

2683
02:41:51,060 --> 02:41:53,060
码字将会减少。

2684
02:41:53,060 --> 02:41:55,060
 So, those more probable

2684
02:41:53,060 --> 02:41:55,060
那么，那些更有可能的

2685
02:41:55,060 --> 02:41:57,060
 symbols or more common symbols, you assign

2685
02:41:55,060 --> 02:41:57,060
符号或更常见的符号，您指定

2686
02:41:57,060 --> 02:41:59,060
 shorter code word.

2686
02:41:57,060 --> 02:41:59,060
较短的码字。

2687
02:41:59,060 --> 02:42:01,060
 Those less probable symbols, you assign

2687
02:41:59,060 --> 02:42:01,060
那些不太可能的符号，你分配

2688
02:42:01,060 --> 02:42:03,060
 a longer code word, so that overall,

2688
02:42:01,060 --> 02:42:03,060
更长的码字，所以总的来说，

2689
02:42:03,060 --> 02:42:05,060
 the aim is that the average

2689
02:42:03,060 --> 02:42:05,060
目标是平均

2690
02:42:05,060 --> 02:42:07,060
 number of bits per symbol is reduced.

2690
02:42:05,060 --> 02:42:07,060
每个符号的位数减少。

2691
02:42:07,060 --> 02:42:09,060
 So, this is achieved

2691
02:42:07,060 --> 02:42:09,060
那么，这就实现了

2692
02:42:09,060 --> 02:42:11,060
 by assigning shorter code word

2692
02:42:09,060 --> 02:42:11,060
通过分配较短的码字

2693
02:42:11,060 --> 02:42:13,060
 to more probable symbol,

2693
02:42:11,060 --> 02:42:13,060
更可能的符号，

2694
02:42:13,060 --> 02:42:15,060
 and this is the fundamental principle

2694
02:42:13,060 --> 02:42:15,060
这是基本原则

2695
02:42:15,060 --> 02:42:17,060
 of entropy and coding, such as

2695
02:42:15,060 --> 02:42:17,060
熵和编码的关系，例如

2696
02:42:17,060 --> 02:42:19,060
 half-moon coding that we have studied.

2696
02:42:17,060 --> 02:42:19,060
我们研究过的半月编码。

2697
02:42:21,060 --> 02:42:23,060
 So, I think

2697
02:42:21,060 --> 02:42:23,060
所以，我认为

2698
02:42:23,060 --> 02:42:25,060
 we'll probably stop today.

2698
02:42:23,060 --> 02:42:25,060
我们今天可能会停下来。

2699
02:42:25,060 --> 02:42:27,060
 So, that was...

2699
02:42:25,060 --> 02:42:27,060
那么，那是...

2700
02:42:27,060 --> 02:42:29,060
 Thank you.

2700
02:42:27,060 --> 02:42:29,060
谢谢。

2701
02:42:29,060 --> 02:42:31,060
 I'll see you next week.

2701
02:42:29,060 --> 02:42:31,060
下周见。

2702
02:42:59,060 --> 02:43:01,060
 I'll take it down for you.

2702
02:42:59,060 --> 02:43:01,060
我会帮你把它取下来。

2703
02:43:01,060 --> 02:43:03,060
 Okay.

2703
02:43:01,060 --> 02:43:03,060
好的。

2704
02:43:03,060 --> 02:43:05,060
 This sigma s square is

2704
02:43:03,060 --> 02:43:05,060
这个西格玛平方是

2705
02:43:05,060 --> 02:43:07,060
 according to its description,

2705
02:43:05,060 --> 02:43:07,060
根据其描述，

2706
02:43:07,060 --> 02:43:09,060
 it's more like the average to the power of q.

2706
02:43:07,060 --> 02:43:09,060
它更像是 q 次方的平均值。

2707
02:43:09,060 --> 02:43:11,060
 But according to this formula,

2707
02:43:09,060 --> 02:43:11,060
但根据这个公式，

2708
02:43:11,060 --> 02:43:13,060
 it's more like the variance.

2708
02:43:11,060 --> 02:43:13,060
它更像是方差。

2709
02:43:13,060 --> 02:43:15,060
 So, I wonder what you mean.

2709
02:43:13,060 --> 02:43:15,060
所以，我想知道你的意思。

2710
02:43:15,060 --> 02:43:17,060
 This is a signal.

2710
02:43:15,060 --> 02:43:17,060
这是一个信号。

2711
02:43:17,060 --> 02:43:19,060
 This is not a noise.

2711
02:43:17,060 --> 02:43:19,060
这不是噪音。

2712
02:43:19,060 --> 02:43:21,060
 This one is x.

2712
02:43:19,060 --> 02:43:21,060
这个是x.

2713
02:43:21,060 --> 02:43:23,060
 So, this is the signal.

2713
02:43:21,060 --> 02:43:23,060
所以，这就是信号。

2714
02:43:23,060 --> 02:43:25,060
 This is the signal.

2714
02:43:23,060 --> 02:43:25,060
这就是信号。

2715
02:43:25,060 --> 02:43:27,060
 This is the signal.

2715
02:43:25,060 --> 02:43:27,060
这就是信号。

2716
02:43:27,060 --> 02:43:29,060
 This is not a noise.

2716
02:43:27,060 --> 02:43:29,060
这不是噪音。

2717
02:43:29,060 --> 02:43:31,060
 This one is x.

2717
02:43:29,060 --> 02:43:31,060
这个是x.

2718
02:43:31,060 --> 02:43:33,060
 So, in the pixel,

2718
02:43:31,060 --> 02:43:33,060
所以，在像素中，

2719
02:43:33,060 --> 02:43:35,060
 in the pixel,

2719
02:43:33,060 --> 02:43:35,060
在像素中，

2720
02:43:35,060 --> 02:43:37,060
 if you talk about image

2720
02:43:35,060 --> 02:43:37,060
如果你谈论图像

2721
02:43:37,060 --> 02:43:39,060
 as an example,

2721
02:43:37,060 --> 02:43:39,060
举个例子，

2722
02:43:39,060 --> 02:43:41,060
 so, image has different pixel values.

2722
02:43:39,060 --> 02:43:41,060
因此，图像具有不同的像素值。

2723
02:43:41,060 --> 02:43:43,060
 So, that means what? Each of the pixel values

2723
02:43:41,060 --> 02:43:43,060
那么，这意味着什么？每个像素值

2724
02:43:43,060 --> 02:43:45,060
 is squared.

2724
02:43:43,060 --> 02:43:45,060
是平方的。

2725
02:43:45,060 --> 02:43:47,060
 Each of the pixel values

2725
02:43:45,060 --> 02:43:47,060
每个像素值

2726
02:43:47,060 --> 02:43:49,060
 is squared,

2726
02:43:47,060 --> 02:43:49,060
是平方，

2727
02:43:49,060 --> 02:43:51,060
 and afterwards, you take the average.

2727
02:43:49,060 --> 02:43:51,060
然后取平均值。

2728
02:43:51,060 --> 02:43:53,060
 So, yeah.

2728
02:43:51,060 --> 02:43:53,060
所以，是的。

2729
02:43:53,060 --> 02:43:55,060
 The term below is a noise.

2729
02:43:53,060 --> 02:43:55,060
下面的术语是噪音。

2730
02:43:55,060 --> 02:43:57,060
 Okay.

2730
02:43:55,060 --> 02:43:57,060
好的。

2731
02:43:57,060 --> 02:43:59,060
 So, it's more like...

2731
02:43:57,060 --> 02:43:59,060
所以，它更像是...

2732
02:44:03,060 --> 02:44:05,060
 It's more like this one?

2732
02:44:03,060 --> 02:44:05,060
是不是更像这个呢？

2733
02:44:05,060 --> 02:44:07,060
 Yes.

2733
02:44:05,060 --> 02:44:07,060
是的。

2734
02:44:07,060 --> 02:44:09,060
 Okay. Thank you.

2734
02:44:07,060 --> 02:44:09,060
好的。谢谢。

2735
02:44:17,060 --> 02:44:19,060
 So, what's x, d indicate

2735
02:44:17,060 --> 02:44:19,060
那么，x、d 表示什么

2736
02:44:19,060 --> 02:44:21,060
 in the

2736
02:44:19,060 --> 02:44:21,060
在

2737
02:44:21,060 --> 02:44:23,060
 peak signal

2737
02:44:21,060 --> 02:44:23,060
峰值信号

2738
02:44:23,060 --> 02:44:25,060
 signal-noise ratio?

2738
02:44:23,060 --> 02:44:25,060
信噪比？

2739
02:44:27,060 --> 02:44:29,060
 So,

2739
02:44:27,060 --> 02:44:29,060
所以，

2740
02:44:29,060 --> 02:44:31,060
 as it is, I just pick

2740
02:44:29,060 --> 02:44:31,060
事实上，我只是选择

2741
02:44:31,060 --> 02:44:33,060
 signal to noise, right? Pick signal

2741
02:44:31,060 --> 02:44:33,060
信噪比，对吗？拣选信号

2742
02:44:33,060 --> 02:44:35,060
 means that the largest

2742
02:44:33,060 --> 02:44:35,060
意味着最大的

2743
02:44:35,060 --> 02:44:37,060
 value in the

2743
02:44:35,060 --> 02:44:37,060
值在

2744
02:44:37,060 --> 02:44:39,060
 original sequence of the signal.

2744
02:44:37,060 --> 02:44:39,060
信号的原始序列。

2745
02:44:39,060 --> 02:44:41,060
 Okay. So, suppose

2745
02:44:39,060 --> 02:44:41,060
好的。所以，假设

2746
02:44:41,060 --> 02:44:43,060
 if you take the...

2746
02:44:41,060 --> 02:44:43,060
如果你采取...

2747
02:44:43,060 --> 02:44:45,060
 This signal-noise ratio is

2747
02:44:43,060 --> 02:44:45,060
该信噪比为

2748
02:44:45,060 --> 02:44:47,060
 a common matrix used in

2748
02:44:45,060 --> 02:44:47,060
一个常用的矩阵用于

2749
02:44:47,060 --> 02:44:49,060
 measuring the quality for image

2749
02:44:47,060 --> 02:44:49,060
测量图像质量

2750
02:44:49,060 --> 02:44:51,060
 restoration.

2750
02:44:49,060 --> 02:44:51,060
恢复。

2751
02:44:51,060 --> 02:44:53,060
 So, for image,

2751
02:44:51,060 --> 02:44:53,060
所以，对于图像来说，

2752
02:44:53,060 --> 02:44:55,060
 for example,

2752
02:44:53,060 --> 02:44:55,060
例如，

2753
02:44:55,060 --> 02:44:57,060
 if you talk about grayscale first,

2753
02:44:55,060 --> 02:44:57,060
如果你先谈谈灰度，

2754
02:44:57,060 --> 02:44:59,060
 so, grayscale, each pixel, you use 8 bits

2754
02:44:57,060 --> 02:44:59,060
所以，灰度，每个像素，你使用8位

2755
02:44:59,060 --> 02:45:01,060
 to represent. So, that means

2755
02:44:59,060 --> 02:45:01,060
代表。所以，这意味着

2756
02:45:01,060 --> 02:45:03,060
 it's possible values from 0 to 255.

2756
02:45:01,060 --> 02:45:03,060
可能的值从 0 到 255。

2757
02:45:03,060 --> 02:45:05,060
 So, this peak value is

2757
02:45:03,060 --> 02:45:05,060
所以，这个峰值就是

2758
02:45:05,060 --> 02:45:07,060
 255. So, therefore, the number on top is

2758
02:45:05,060 --> 02:45:07,060
255. 因此，上面的数字是

2759
02:45:07,060 --> 02:45:09,060
 255 squared.

2759
02:45:07,060 --> 02:45:09,060
255平方。

2760
02:45:09,060 --> 02:45:11,060
 I know.

2760
02:45:09,060 --> 02:45:11,060
我知道。

2761
02:45:11,060 --> 02:45:13,060
 I have a question

2761
02:45:11,060 --> 02:45:13,060
我有一个问题

2762
02:45:13,060 --> 02:45:15,060
 that's not relevant to the course.

2762
02:45:13,060 --> 02:45:15,060
这与课程无关。

2763
02:45:15,060 --> 02:45:17,060
 Because my

2763
02:45:15,060 --> 02:45:17,060
因为我的

2764
02:45:17,060 --> 02:45:19,060
 annual project is

2764
02:45:17,060 --> 02:45:19,060
年度项目是

2765
02:45:19,060 --> 02:45:21,060
 a newer system of

2765
02:45:19,060 --> 02:45:21,060
一个较新的系统

2766
02:45:21,060 --> 02:45:23,060
 EMT. I'm a year-old student.

2766
02:45:21,060 --> 02:45:23,060
急救人员。我是一名七岁的学生。

2767
02:45:23,060 --> 02:45:25,060
 And I see

2767
02:45:23,060 --> 02:45:25,060
我明白了

2768
02:45:25,060 --> 02:45:27,060
 he informed me there's a

2768
02:45:25,060 --> 02:45:27,060
他告诉我有一个

2769
02:45:27,060 --> 02:45:29,060
 joint PT with Shanghai Jiao Tong.

2769
02:45:27,060 --> 02:45:29,060
与上海交通联合PT。

2770
02:45:29,060 --> 02:45:31,060
 For

2770
02:45:29,060 --> 02:45:31,060
为了

2771
02:45:31,060 --> 02:45:33,060
 PT.

2771
02:45:31,060 --> 02:45:33,060
PT。

2772
02:45:33,060 --> 02:45:35,060
 For him? Yeah, for him. I also see your name

2772
02:45:33,060 --> 02:45:35,060
为了他？是的，为了他。我也看到你的名字

2773
02:45:35,060 --> 02:45:37,060
 there. The question is

2773
02:45:35,060 --> 02:45:37,060
那里。问题是

2774
02:45:37,060 --> 02:45:39,060
 it's not the topic.

2774
02:45:37,060 --> 02:45:39,060
这不是主题。

2775
02:45:39,060 --> 02:45:41,060
 It's just his annual project. You really don't know

2775
02:45:39,060 --> 02:45:41,060
这只是他的年度项目。你真的不知道

2776
02:45:41,060 --> 02:45:43,060
 so much information.

2776
02:45:41,060 --> 02:45:43,060
这么多信息。

2777
02:45:43,060 --> 02:45:45,060
 I don't know if you have any connection

2777
02:45:43,060 --> 02:45:45,060
不知道你有没有什么联系

2778
02:45:45,060 --> 02:45:47,060
 or existing PT students

2778
02:45:45,060 --> 02:45:47,060
或现有的 PT 学生

2779
02:45:47,060 --> 02:45:49,060
 who like under this program.

2779
02:45:47,060 --> 02:45:49,060
谁喜欢下这个计划。

2780
02:45:49,060 --> 02:45:51,060
 Who is the supervisor?

2780
02:45:49,060 --> 02:45:51,060
监督者是谁？

2781
02:45:51,060 --> 02:45:53,060
 I mean, the

2781
02:45:51,060 --> 02:45:53,060
我的意思是，

2782
02:45:53,060 --> 02:45:55,060
 I still don't quite understand what's the question

2782
02:45:53,060 --> 02:45:55,060
我还是不太明白问题是什么

2783
02:45:55,060 --> 02:45:57,060
 you're trying to ask. I just want to ask

2783
02:45:55,060 --> 02:45:57,060
你想问。我只是想问

2784
02:45:57,060 --> 02:45:59,060
 if there's any existing students

2784
02:45:57,060 --> 02:45:59,060
如果有现有的学生

2785
02:45:59,060 --> 02:46:01,060
 who under this joint PT program,

2785
02:45:59,060 --> 02:46:01,060
在这个联合 PT 计划下，

2786
02:46:01,060 --> 02:46:03,060
 like, I want to ask him

2786
02:46:01,060 --> 02:46:03,060
比如说，我想问他

2787
02:46:03,060 --> 02:46:05,060
 if there's some

2787
02:46:03,060 --> 02:46:05,060
如果有一些

2788
02:46:05,060 --> 02:46:07,060
 questions about the degree

2788
02:46:05,060 --> 02:46:07,060
关于学位的问题

2789
02:46:07,060 --> 02:46:09,060
 verification for Chinese, because

2789
02:46:07,060 --> 02:46:09,060
对于中文的验证，因为

2790
02:46:09,060 --> 02:46:11,060
 we need the distribution system.

2790
02:46:09,060 --> 02:46:11,060
我们需要分配系统。

2791
02:46:11,060 --> 02:46:13,060
 Oh, so you're saying

2791
02:46:11,060 --> 02:46:13,060
哦，所以你是说

2792
02:46:13,060 --> 02:46:15,060
 is there are there some other

2792
02:46:13,060 --> 02:46:15,060
还有其他的吗

2793
02:46:15,060 --> 02:46:17,060
 seniors who have actually gone through this

2793
02:46:15,060 --> 02:46:17,060
真正经历过这个事情的前辈

2794
02:46:17,060 --> 02:46:19,060
 kind of program before?

2794
02:46:17,060 --> 02:46:19,060
之前有什么样的节目？

2795
02:46:19,060 --> 02:46:21,060
 My prof is a new prof, so I think he

2795
02:46:19,060 --> 02:46:21,060
我的教授是一位新教授，所以我认为他

2796
02:46:21,060 --> 02:46:23,060
 don't have that cut out. Actually this program is

2796
02:46:21,060 --> 02:46:23,060
没有那个剪掉。其实这个程序是

2797
02:46:23,060 --> 02:46:25,060
 very new. This is also the first time

2797
02:46:23,060 --> 02:46:25,060
很新。这也是第一次

2798
02:46:25,060 --> 02:46:27,060
 I'm doing it. Yeah, so it's a very new

2798
02:46:25,060 --> 02:46:27,060
我正在做。是的，所以这是一个非常新的

2799
02:46:27,060 --> 02:46:29,060
 program. So if you have such

2799
02:46:27,060 --> 02:46:29,060
程序。所以如果你有这样的

2800
02:46:29,060 --> 02:46:31,060
 a question, the best is to ask the office.

2800
02:46:29,060 --> 02:46:31,060
有问题，最好去问办公室。

2801
02:46:31,060 --> 02:46:35,060
 They even show me the sample of the degree.

2801
02:46:31,060 --> 02:46:35,060
他们甚至给我看了学位样本。

2802
02:46:35,060 --> 02:46:37,060
 But

2802
02:46:35,060 --> 02:46:37,060
但

2803
02:46:37,060 --> 02:46:39,060
 we cannot say like for

2803
02:46:37,060 --> 02:46:39,060
我们不能说喜欢

2804
02:46:39,060 --> 02:46:41,060
 the site of China, if they verify

2804
02:46:39,060 --> 02:46:41,060
中国的网站，如果他们核实的话

2805
02:46:41,060 --> 02:46:43,060
 like a foreign or local.

2805
02:46:41,060 --> 02:46:43,060
就像外国人或当地人一样。

2806
02:46:43,060 --> 02:46:45,060
 So I know the US have

2806
02:46:43,060 --> 02:46:45,060
所以我知道美国有

2807
02:46:45,060 --> 02:46:47,060
 a connection with them

2807
02:46:45,060 --> 02:46:47,060
与他们有联系

2808
02:46:47,060 --> 02:46:49,060
 for a long time, but NTU is

2808
02:46:47,060 --> 02:46:49,060
很长一段时间了，但 NTU 是

2809
02:46:49,060 --> 02:46:51,060
 from...

2809
02:46:49,060 --> 02:46:51,060
从...

2810
02:46:51,060 --> 02:46:53,060
 There are some universities

2810
02:46:51,060 --> 02:46:53,060
有一些大学

2811
02:46:53,060 --> 02:46:55,060
 that we have some collaboration

2811
02:46:53,060 --> 02:46:55,060
我们有一些合作

2812
02:46:55,060 --> 02:46:57,060
 for, like, Tsinghua.

2812
02:46:55,060 --> 02:46:57,060
比如清华大学。

2813
02:46:57,060 --> 02:46:59,060
 Yeah, this Tsinghua

2813
02:46:57,060 --> 02:46:59,060
是的，这个清华

2814
02:46:59,060 --> 02:47:01,060
 collaboration with Tsinghua has been ongoing

2814
02:46:59,060 --> 02:47:01,060
与清华大学的合作一直在进行

2815
02:47:01,060 --> 02:47:03,060
 for some time already.

2815
02:47:01,060 --> 02:47:03,060
已经有一段时间了。

2816
02:47:03,060 --> 02:47:05,060
 But other

2816
02:47:03,060 --> 02:47:05,060
但其他

2817
02:47:05,060 --> 02:47:07,060
 universities like

2817
02:47:05,060 --> 02:47:07,060
大学喜欢

2818
02:47:07,060 --> 02:47:09,060
 Shanghai, Jiangtong, De1,

2818
02:47:07,060 --> 02:47:09,060
上海、江通、De1、

2819
02:47:09,060 --> 02:47:11,060
 or at least this is the first time I see

2819
02:47:09,060 --> 02:47:11,060
或者至少这是我第一次看到

2820
02:47:11,060 --> 02:47:13,060
 it. Yeah.

2820
02:47:11,060 --> 02:47:13,060
它。是的。

2821
02:47:13,060 --> 02:47:15,060
 Yeah, so, but I know it's

2821
02:47:13,060 --> 02:47:15,060
是的，所以，但我知道这是

2822
02:47:15,060 --> 02:47:17,060
 pretty new.

2822
02:47:15,060 --> 02:47:17,060
很新。

2823
02:47:17,060 --> 02:47:19,060
 So therefore, again,

2823
02:47:17,060 --> 02:47:19,060
因此，再次，

2824
02:47:19,060 --> 02:47:21,060
 I think this

2824
02:47:19,060 --> 02:47:21,060
我认为这个

2825
02:47:21,060 --> 02:47:23,060
 kind of question is definitely hard for me to answer.

2825
02:47:21,060 --> 02:47:23,060
这样的问题对我来说肯定很难回答。

2826
02:47:23,060 --> 02:47:25,060
 I cannot answer that.

2826
02:47:23,060 --> 02:47:25,060
我无法回答这个问题。

2827
02:47:25,060 --> 02:47:27,060
 So far, at least for myself,

2827
02:47:25,060 --> 02:47:27,060
到目前为止，至少对我自己来说，

2828
02:47:27,060 --> 02:47:29,060
 is that I don't have...

2828
02:47:27,060 --> 02:47:29,060
是我没有...

2829
02:47:29,060 --> 02:47:31,060
 I'm not aware of any

2829
02:47:29,060 --> 02:47:31,060
我不知道有任何

2830
02:47:31,060 --> 02:47:33,060
 senior who have

2830
02:47:31,060 --> 02:47:33,060
高级谁有

2831
02:47:33,060 --> 02:47:35,060
 gone through this program yet.

2831
02:47:33,060 --> 02:47:35,060
已经完成这个程序了。

2832
02:47:35,060 --> 02:47:37,060
 Yeah.

2832
02:47:35,060 --> 02:47:37,060
是的。

2833
02:47:37,060 --> 02:47:39,060
 Okay.

2833
02:47:37,060 --> 02:47:39,060
好的。

2834
02:47:39,060 --> 02:47:41,060
 I have another

2834
02:47:39,060 --> 02:47:41,060
我还有另一个

2835
02:47:41,060 --> 02:47:43,060
 question.

2835
02:47:41,060 --> 02:47:43,060
问题。

2836
02:47:43,060 --> 02:47:45,060
 So how

2836
02:47:43,060 --> 02:47:45,060
那么如何

2837
02:47:45,060 --> 02:47:47,060
 I can comprehend

2837
02:47:45,060 --> 02:47:47,060
我能理解

2838
02:47:47,060 --> 02:47:49,060
 that the

2838
02:47:47,060 --> 02:47:49,060
那

2839
02:47:49,060 --> 02:47:51,060
 entropy

2839
02:47:49,060 --> 02:47:51,060
熵

2840
02:47:51,060 --> 02:47:53,060
 can indicate the

2840
02:47:51,060 --> 02:47:53,060
可以表明

2841
02:47:53,060 --> 02:47:55,060
 smallest number of bits

2841
02:47:53,060 --> 02:47:55,060
最小位数

2842
02:47:55,060 --> 02:47:57,060
 necessary to

2842
02:47:55,060 --> 02:47:57,060
有必要

2843
02:47:57,060 --> 02:48:01,060
 do the encoding?

2843
02:47:57,060 --> 02:48:01,060
进行编码？

2844
02:48:01,060 --> 02:48:03,060
 Okay.

2844
02:48:01,060 --> 02:48:03,060
好的。

2845
02:48:03,060 --> 02:48:05,060
 So this entropy,

2845
02:48:03,060 --> 02:48:05,060
所以这个熵，

2846
02:48:05,060 --> 02:48:07,060
 this term, actually, loosely

2846
02:48:05,060 --> 02:48:07,060
这个词实际上是松散的

2847
02:48:07,060 --> 02:48:09,060
 speaking, they are using...

2847
02:48:07,060 --> 02:48:09,060
说起来，他们正在使用...

2848
02:48:09,060 --> 02:48:11,060
 they are more commonly used in communication theory.

2848
02:48:09,060 --> 02:48:11,060
它们在传播理论中更常用。

2849
02:48:11,060 --> 02:48:13,060
 Yeah.

2849
02:48:11,060 --> 02:48:13,060
是的。

2850
02:48:13,060 --> 02:48:15,060
 So in the communication theory,

2850
02:48:13,060 --> 02:48:15,060
所以在传播理论中，

2851
02:48:15,060 --> 02:48:17,060
 it's an indication of the degree

2851
02:48:15,060 --> 02:48:17,060
这是学位的标志

2852
02:48:17,060 --> 02:48:19,060
 of randomness and how

2852
02:48:17,060 --> 02:48:19,060
随机性以及如何

2853
02:48:19,060 --> 02:48:21,060
 much information is contained

2853
02:48:19,060 --> 02:48:21,060
包含很多信息

2854
02:48:21,060 --> 02:48:23,060
 in the source.

2854
02:48:21,060 --> 02:48:23,060
在源中。

2855
02:48:23,060 --> 02:48:25,060
 But in the context of our

2855
02:48:23,060 --> 02:48:25,060
但在我们的背景下

2856
02:48:25,060 --> 02:48:27,060
 compression

2856
02:48:25,060 --> 02:48:27,060
压缩

2857
02:48:27,060 --> 02:48:29,060
 perspective, this entropy,

2857
02:48:27,060 --> 02:48:29,060
角度来看，这个熵，

2858
02:48:29,060 --> 02:48:31,060
 if you have a data source that

2858
02:48:29,060 --> 02:48:31,060
如果您有一个数据源

2859
02:48:31,060 --> 02:48:33,060
 consists of different symbols,

2859
02:48:31,060 --> 02:48:33,060
由不同的符号组成，

2860
02:48:33,060 --> 02:48:35,060
 but you can calculate its entropy.

2860
02:48:33,060 --> 02:48:35,060
但你可以计算它的熵。

2861
02:48:35,060 --> 02:48:37,060
 When you calculate the entropy,

2861
02:48:35,060 --> 02:48:37,060
当你计算熵时，

2862
02:48:37,060 --> 02:48:39,060
 this number actually

2862
02:48:37,060 --> 02:48:39,060
这个数字实际上

2863
02:48:39,060 --> 02:48:41,060
 indicates to you what is the smallest

2863
02:48:39,060 --> 02:48:41,060
告诉你最小的是什么

2864
02:48:41,060 --> 02:48:43,060
 number of bits

2864
02:48:41,060 --> 02:48:43,060
位数

2865
02:48:43,060 --> 02:48:45,060
 per symbol that you

2865
02:48:43,060 --> 02:48:45,060
每个符号你

2866
02:48:45,060 --> 02:48:47,060
 can use to represent

2866
02:48:45,060 --> 02:48:47,060
可以用来表示

2867
02:48:47,060 --> 02:48:49,060
 a symbol.

2867
02:48:47,060 --> 02:48:49,060
一个符号。

2868
02:48:49,060 --> 02:48:51,060
 So it's

2868
02:48:49,060 --> 02:48:51,060
所以这是

2869
02:48:51,060 --> 02:48:53,060
 easy to understand. For example, you have

2869
02:48:51,060 --> 02:48:53,060
容易理解。例如，你有

2870
02:48:53,060 --> 02:48:55,060
 a symbol. You can always use more bits

2870
02:48:53,060 --> 02:48:55,060
一个符号。您始终可以使用更多位

2871
02:48:55,060 --> 02:48:57,060
 to represent. You can use three...

2871
02:48:55,060 --> 02:48:57,060
代表。您可以使用三个...

2872
02:48:57,060 --> 02:48:59,060
 I mean, you can use eight bits, you can use

2872
02:48:57,060 --> 02:48:59,060
我的意思是，你可以使用八位，你可以使用

2873
02:48:59,060 --> 02:49:01,060
 ten bits, you can use twenty bits. More is

2873
02:48:59,060 --> 02:49:01,060
十位，你可以使用二十位。更多的是

2874
02:49:01,060 --> 02:49:03,060
 okay. But when you try to

2874
02:49:01,060 --> 02:49:03,060
好的。但当你尝试

2875
02:49:03,060 --> 02:49:05,060
 use what is the smallest

2875
02:49:03,060 --> 02:49:05,060
使用最小的

2876
02:49:05,060 --> 02:49:07,060
 number of bits that you can use

2876
02:49:05,060 --> 02:49:07,060
您可以使用的位数

2877
02:49:07,060 --> 02:49:09,060
 to represent this symbol,

2877
02:49:07,060 --> 02:49:09,060
来表示这个符号，

2878
02:49:09,060 --> 02:49:11,060
 there's a theoretical lower

2878
02:49:09,060 --> 02:49:11,060
理论上有一个较低的值

2879
02:49:11,060 --> 02:49:13,060
 bound. So this theoretical lower bound

2879
02:49:11,060 --> 02:49:13,060
边界。所以这个理论下界

2880
02:49:13,060 --> 02:49:15,060
 is the entropy

2880
02:49:13,060 --> 02:49:15,060
是熵

2881
02:49:15,060 --> 02:49:17,060
 from the context of compression.

2881
02:49:15,060 --> 02:49:17,060
从压缩的上下文来看。

2882
02:49:33,060 --> 02:49:35,060
 Okay.

2882
02:49:33,060 --> 02:49:35,060
好的。

2883
02:50:03,060 --> 02:50:05,060
 So

2883
02:50:03,060 --> 02:50:05,060
所以

2884
02:50:33,060 --> 02:50:35,060
 .

2884
02:50:33,060 --> 02:50:35,060
。

2885
02:51:03,060 --> 02:51:05,060
 .

2885
02:51:03,060 --> 02:51:05,060
。

2886
02:51:33,060 --> 02:51:35,060
 .

2886
02:51:33,060 --> 02:51:35,060
。

2887
02:52:03,060 --> 02:52:05,060
 .

2887
02:52:03,060 --> 02:52:05,060
。

2888
02:52:33,060 --> 02:52:35,060
 .

2888
02:52:33,060 --> 02:52:35,060
。

2889
02:53:03,060 --> 02:53:05,060
 .

2889
02:53:03,060 --> 02:53:05,060
。

2890
02:53:33,060 --> 02:53:35,060
 .

2890
02:53:33,060 --> 02:53:35,060
。

2891
02:54:03,060 --> 02:54:05,060
 .

2891
02:54:03,060 --> 02:54:05,060
。

2892
02:54:33,060 --> 02:54:35,060
 .

2892
02:54:33,060 --> 02:54:35,060
。

2893
02:55:03,060 --> 02:55:05,060
 .

2893
02:55:03,060 --> 02:55:05,060
。

2894
02:55:33,060 --> 02:55:35,060
 .

2894
02:55:33,060 --> 02:55:35,060
。

2895
02:56:03,060 --> 02:56:05,060
 .

2895
02:56:03,060 --> 02:56:05,060
。

2896
02:56:33,060 --> 02:56:35,060
 .

2896
02:56:33,060 --> 02:56:35,060
。

2897
02:57:03,060 --> 02:57:05,060
 .

2897
02:57:03,060 --> 02:57:05,060
。

2898
02:57:33,060 --> 02:57:35,060
 .

2898
02:57:33,060 --> 02:57:35,060
。

2899
02:58:03,060 --> 02:58:06,060
 .

2899
02:58:03,060 --> 02:58:06,060
。

2900
02:58:33,060 --> 02:58:36,060
 .

2900
02:58:33,060 --> 02:58:36,060
。

2901
02:59:03,060 --> 02:59:06,060
 .

2901
02:59:03,060 --> 02:59:06,060
。

2902
02:59:33,060 --> 02:59:36,060
 .

2902
02:59:33,060 --> 02:59:36,060
。

