1
00:00:00,000 --> 00:00:17,480
[SILENCE]

2
00:00:17,480 --> 00:00:17,980
OK.

3
00:00:17,980 --> 00:00:19,480
[HAND CLAPS]

4
00:00:19,480 --> 00:00:21,440
Can you hear me?

5
00:00:21,440 --> 00:00:23,520
Right, OK, sorry for the delay.

6
00:00:23,520 --> 00:00:26,920
Right, it's just there's a bit of issue with the audio system.

7
00:00:26,920 --> 00:00:29,400
Right, OK, so in last lecture, actually, we

8
00:00:29,400 --> 00:00:32,920
covered a number of video compression standards,

9
00:00:32,920 --> 00:00:35,080
and mainly we covered the MPEG standard.

10
00:00:35,080 --> 00:00:36,720
So we'll continue on.

11
00:00:36,720 --> 00:00:39,920
So the next standard that we have is the MPEG-7 standard.

12
00:00:39,920 --> 00:00:43,960
So the key point to take note of is that for MPEG-7 standard,

13
00:00:43,960 --> 00:00:46,080
it's not a video compression standard,

14
00:00:46,080 --> 00:00:49,320
but rather a content indexing system,

15
00:00:49,320 --> 00:00:52,320
so that you can perform indexing and retrieval.

16
00:00:52,320 --> 00:00:57,800
OK, so that's one of the important aspects of MPEG-7.

17
00:00:57,800 --> 00:00:59,920
So we can see the goal is to perform

18
00:00:59,920 --> 00:01:01,320
content-based retrieval.

19
00:01:01,320 --> 00:01:03,400
So it's for indexing and retrieval.

20
00:01:03,400 --> 00:01:05,440
It's not for compression.

21
00:01:05,440 --> 00:01:07,520
So its initial target application

22
00:01:07,520 --> 00:01:10,760
is for content creation and consumption.

23
00:01:10,760 --> 00:01:15,000
OK, so it was established in 2001.

24
00:01:15,000 --> 00:01:17,440
So the former name for this MPEG standard

25
00:01:17,440 --> 00:01:20,720
is known as a multimedia content descriptor interface,

26
00:01:20,720 --> 00:01:22,960
and it's not a video coding standard.

27
00:01:22,960 --> 00:01:26,240
So we are not going to pay too much attention to it,

28
00:01:26,240 --> 00:01:28,160
since it's actually not a video compression

29
00:01:28,160 --> 00:01:32,720
standard in our context here.

30
00:01:32,720 --> 00:01:37,520
Right, OK, so we have pretty much covered the MPEG series

31
00:01:37,520 --> 00:01:38,360
of standards.

32
00:01:38,360 --> 00:01:42,360
So next, we are going to move on to the H.26x series

33
00:01:42,360 --> 00:01:44,760
of standards.

34
00:01:44,760 --> 00:01:49,560
So if you remember, so this H.26x series of standards

35
00:01:49,560 --> 00:01:54,280
actually developed by the organization known as ITUT.

36
00:01:54,280 --> 00:01:58,400
So this diagram actually gives a pretty comprehensive kind

37
00:01:58,400 --> 00:02:01,880
of a different standard that was developed over time.

38
00:02:01,880 --> 00:02:04,360
So I think in last lecture, we have actually

39
00:02:04,360 --> 00:02:06,600
spent quite a fair bit of time to cover

40
00:02:06,600 --> 00:02:09,500
most of the important standards.

41
00:02:09,500 --> 00:02:11,840
So for this slide, we will not go through every one of them,

42
00:02:11,840 --> 00:02:16,040
but rather just to focus on the H.26x series of standards.

43
00:02:16,040 --> 00:02:18,520
So we start off with the H.261.

44
00:02:18,520 --> 00:02:21,080
So this is the early years of standards,

45
00:02:21,080 --> 00:02:23,260
mainly for video conferencing.

46
00:02:23,260 --> 00:02:27,180
So it's low bit rate, kind of close to real time

47
00:02:27,180 --> 00:02:28,960
communication.

48
00:02:28,960 --> 00:02:32,220
And afterwards, we move on to this H.262.

49
00:02:32,220 --> 00:02:36,200
So this H.262 is also known as MPEG2,

50
00:02:36,200 --> 00:02:41,880
which is for applications such as the commercial DVD.

51
00:02:41,880 --> 00:02:44,620
And afterwards, we move on to the H.263.

52
00:02:44,620 --> 00:02:49,200
So this is the better improvement as compared to H.261,

53
00:02:49,200 --> 00:02:53,160
again, targeting for low bit rate applications.

54
00:02:53,160 --> 00:02:56,960
And afterwards, we move on to this H.264.

55
00:02:56,960 --> 00:03:01,440
So H.264 is also known as advanced video coding.

56
00:03:01,440 --> 00:03:04,340
So 264 here.

57
00:03:04,340 --> 00:03:06,640
So this is a very important standard

58
00:03:06,640 --> 00:03:09,460
as far as video compression is concerned.

59
00:03:09,460 --> 00:03:10,960
That's why for today's lecture, we're

60
00:03:10,960 --> 00:03:15,340
going to spend more time talking about H.264,

61
00:03:15,340 --> 00:03:18,200
because it is quite a major difference as compared

62
00:03:18,200 --> 00:03:20,100
to the earlier standards.

63
00:03:20,100 --> 00:03:23,240
And afterwards, we move on to the H.265.

64
00:03:23,240 --> 00:03:30,540
So H.265 is also known as a high efficiency video coding here.

65
00:03:30,540 --> 00:03:34,840
So this H.265 actually is quite similar to H.264.

66
00:03:34,840 --> 00:03:39,780
It only provides incremental improvement.

67
00:03:39,780 --> 00:03:42,240
And then finally, we have one of the most recent ones,

68
00:03:42,240 --> 00:03:47,520
which is H.266, also known as the versatile video coding.

69
00:03:47,520 --> 00:03:52,540
So as far as the H.266 series standards are concerned,

70
00:03:52,540 --> 00:03:54,820
it's mainly aligned along these directions here.

71
00:03:54,820 --> 00:03:59,580
So again, the approach we are going to use

72
00:03:59,580 --> 00:04:01,980
is that we are going to start off with a 261.

73
00:04:01,980 --> 00:04:04,380
And afterwards, we are going to explain

74
00:04:04,380 --> 00:04:08,940
for the subsequent standards what are the major improvements.

75
00:04:08,940 --> 00:04:10,700
So first, we'll look at 261.

76
00:04:10,700 --> 00:04:14,180
Actually, 261 standard come out before MPEG-1.

77
00:04:14,180 --> 00:04:18,440
So actually, it was like the ankle for the video compression

78
00:04:18,440 --> 00:04:19,120
standard.

79
00:04:19,120 --> 00:04:21,680
And then many subsequent video compression standards

80
00:04:21,680 --> 00:04:26,320
then learned the lessons or incorporate many features

81
00:04:26,320 --> 00:04:29,040
from this H.261.

82
00:04:29,040 --> 00:04:32,160
So let's look at a quick overview of 261.

83
00:04:32,160 --> 00:04:34,560
So it was developed in 1990.

84
00:04:34,560 --> 00:04:37,960
So initially, it was targeted for video conferencing.

85
00:04:37,960 --> 00:04:39,780
So you can think about it.

86
00:04:39,780 --> 00:04:42,400
Video conferencing application means that your encoding

87
00:04:42,400 --> 00:04:45,260
need to be fast because when I'm talking to you,

88
00:04:45,260 --> 00:04:48,580
you need to be able to receive my--

89
00:04:48,580 --> 00:04:49,640
talk to me very quickly.

90
00:04:49,640 --> 00:04:51,160
So the encoding has to be fast.

91
00:04:51,160 --> 00:04:53,360
And also, the bit rate that I'm going to transmit

92
00:04:53,360 --> 00:04:54,600
need to be low bit rate.

93
00:04:54,600 --> 00:04:57,600
So these are the basic characteristics

94
00:04:57,600 --> 00:05:01,800
to support applications such as video conferencing.

95
00:05:01,800 --> 00:05:03,320
And then the technique that we use

96
00:05:03,320 --> 00:05:07,160
is actually based on the motion compensation idea.

97
00:05:07,160 --> 00:05:09,320
So this idea we have already mentioned.

98
00:05:09,320 --> 00:05:12,880
We have the I-frame that we encode independently.

99
00:05:12,880 --> 00:05:17,180
And we have the P-frame, which we encode it using motion,

100
00:05:17,180 --> 00:05:19,280
estimation, and compensation.

101
00:05:19,280 --> 00:05:21,280
So this is the standard that actually kicks

102
00:05:21,280 --> 00:05:25,640
start this series of video compression approach.

103
00:05:25,640 --> 00:05:30,240
It also supports this 4.2.0 video format.

104
00:05:30,240 --> 00:05:34,540
So in terms of video format that is supported by H.261,

105
00:05:34,540 --> 00:05:36,840
you can see this is the--

106
00:05:36,840 --> 00:05:38,760
the first one is actually the requirement.

107
00:05:38,760 --> 00:05:41,520
It's actually supported by H.261.

108
00:05:41,520 --> 00:05:43,360
The second one is actually optional.

109
00:05:43,360 --> 00:05:45,680
So let's look at the requirement.

110
00:05:45,680 --> 00:05:50,200
So the requirement that we have is a quarter CIF format.

111
00:05:50,200 --> 00:05:54,160
So if you use them for a quarter, that means 1/4 of it,

112
00:05:54,160 --> 00:05:56,960
this common interchange format.

113
00:05:56,960 --> 00:06:00,560
So it's a type of video resolution.

114
00:06:00,560 --> 00:06:05,600
So for quarter CIF, for the luminance plane,

115
00:06:05,600 --> 00:06:07,560
this is the resolution.

116
00:06:07,560 --> 00:06:10,640
And for the chrominous plane, this is the resolution.

117
00:06:10,640 --> 00:06:13,040
So you can see actually the image resolution

118
00:06:13,040 --> 00:06:16,400
is very small because it's used in early years.

119
00:06:16,400 --> 00:06:18,580
So the technique is not so sophisticated.

120
00:06:18,580 --> 00:06:23,040
And also because it's for real-time video conferencing,

121
00:06:23,040 --> 00:06:28,680
so we can only handle very low resolution video here.

122
00:06:28,680 --> 00:06:34,560
So the bit rate is around 9.1, make a bit per second.

123
00:06:34,560 --> 00:06:40,600
OK, so and then for the CIF format, which is four times

124
00:06:40,600 --> 00:06:43,520
the quarter CIF, so you can see horizontally

125
00:06:43,520 --> 00:06:46,120
as well as vertically in terms of resolution,

126
00:06:46,120 --> 00:06:49,700
it's a factor of 2.

127
00:06:49,700 --> 00:06:52,220
So therefore, together it's a factor of 4.

128
00:06:52,220 --> 00:06:56,200
So that's why one is called quarter CIF, the other is CIF.

129
00:06:56,200 --> 00:06:58,880
So this luminance and chrominance resolution,

130
00:06:58,880 --> 00:07:01,360
and the bit rate for uncompressed scheme

131
00:07:01,360 --> 00:07:03,000
is about this resolution.

132
00:07:03,000 --> 00:07:06,800
I mean, this number of bits per second.

133
00:07:06,800 --> 00:07:08,460
Right, OK, so next we are going to look

134
00:07:08,460 --> 00:07:14,320
at some quick overviews of some of the H.261 video format.

135
00:07:14,320 --> 00:07:17,180
For 261, actually there's only two frame type.

136
00:07:17,180 --> 00:07:21,080
You only have the iFrame, which is the intra frame here,

137
00:07:21,080 --> 00:07:24,000
and then pFrame, which is the in the frame here.

138
00:07:24,000 --> 00:07:26,400
So there's only two frame type here.

139
00:07:26,400 --> 00:07:28,600
So as we can be seen here, you only

140
00:07:28,600 --> 00:07:33,160
have the iFrame, which is you encode it independently,

141
00:07:33,160 --> 00:07:35,840
just like MPact1, and then you have the pFrame,

142
00:07:35,840 --> 00:07:37,600
which is you encode it with respect

143
00:07:37,600 --> 00:07:40,180
to the previous reference frame.

144
00:07:40,180 --> 00:07:43,720
And we do not have bFrame for MPact1,

145
00:07:43,720 --> 00:07:47,600
because this then actually is before MPact1.

146
00:07:47,600 --> 00:07:50,520
So iFrames are encoded independently,

147
00:07:50,520 --> 00:07:53,360
and pFrame actually refer to the macro blocks

148
00:07:53,360 --> 00:07:55,280
in the preceding iFrame and pFrame.

149
00:07:55,280 --> 00:07:57,320
So it's the reference frame here.

150
00:07:57,320 --> 00:08:01,280
So this is the basic frame organization,

151
00:08:01,280 --> 00:08:04,560
how it differs from the MPact1.

152
00:08:04,560 --> 00:08:08,240
So in terms of decoding for the iFrame,

153
00:08:08,240 --> 00:08:11,480
just like MPact1 that we've studied before.

154
00:08:11,480 --> 00:08:17,120
So first of all, you have this particular macro block here.

155
00:08:17,120 --> 00:08:22,560
So this macro block consists of one 16 by 16 wide channel,

156
00:08:22,560 --> 00:08:27,440
one 8 by 8 CB block, and one 8 by 8 CR block here.

157
00:08:27,440 --> 00:08:30,680
So if you partition into-- for this macro block,

158
00:08:30,680 --> 00:08:33,280
if you partition it into 8 by 8 blocks,

159
00:08:33,280 --> 00:08:37,280
so you can see you have four 8 by 8 blocks of wide channel,

160
00:08:37,280 --> 00:08:40,720
one 8 by 8 CB, one 8 by 8 CR here.

161
00:08:40,720 --> 00:08:42,360
So each of these blocks, you are going

162
00:08:42,360 --> 00:08:45,520
to go through the compression standard, just like JPEG.

163
00:08:45,520 --> 00:08:46,880
So as we have studied in the JPEG,

164
00:08:46,880 --> 00:08:50,280
we're going to perform DCT, quantization, and trophy

165
00:08:50,280 --> 00:08:52,320
encoding, and then we'll generate the bit stream.

166
00:08:52,320 --> 00:08:57,680
So just very similar to what we have studied for MPact1.

167
00:08:57,680 --> 00:09:01,920
So we can see for iFrame, each macro block consists of four

168
00:09:01,920 --> 00:09:05,920
wide, one CB and one CR, a block of 8 by 8 pixel block,

169
00:09:05,920 --> 00:09:06,880
as mentioned before.

170
00:09:06,880 --> 00:09:10,640
And this particular format is following 4, 2, 0 chroma

171
00:09:10,640 --> 00:09:12,200
subsampling.

172
00:09:12,200 --> 00:09:15,800
So the macro block is of dimension 16 by 16

173
00:09:15,800 --> 00:09:19,680
for the wide channel, 8 by 8 for the CB and CR.

174
00:09:19,680 --> 00:09:22,720
So for each 8 by 8 pixel block, once you partition it

175
00:09:22,720 --> 00:09:25,600
into 8 by 8 pixel blocks, there are six of them.

176
00:09:25,600 --> 00:09:29,640
We perform DCT, going through quantization, Z-Z scanning,

177
00:09:29,640 --> 00:09:31,880
the entropy encoding, and so on.

178
00:09:31,880 --> 00:09:35,400
So this text here pretty much just describes the process

179
00:09:35,400 --> 00:09:35,920
here.

180
00:09:35,920 --> 00:09:41,160
So next for PFrame, so PFrame, the idea, again,

181
00:09:41,160 --> 00:09:42,880
is similar to MPact1.

182
00:09:42,880 --> 00:09:44,720
So we'll just go through it quickly.

183
00:09:44,720 --> 00:09:48,120
So the PFrame encoding is based on motion compensation,

184
00:09:48,120 --> 00:09:49,240
estimation compensation.

185
00:09:49,280 --> 00:09:52,200
So you refer to the previous reference frame.

186
00:09:52,200 --> 00:09:55,200
So for each macro block in the target frame, the current frame

187
00:09:55,200 --> 00:09:59,080
that you have, the PFrame, you perform the motion estimation

188
00:09:59,080 --> 00:10:02,040
to search for the motion vector.

189
00:10:02,040 --> 00:10:04,240
So once you have found the motion vector,

190
00:10:04,240 --> 00:10:07,520
your current macro block, you compare

191
00:10:07,520 --> 00:10:10,760
with the best match block in the previous reference frame.

192
00:10:10,760 --> 00:10:14,240
You take the difference or the prediction error.

193
00:10:14,240 --> 00:10:16,640
And then this prediction error, you go through the standard

194
00:10:16,640 --> 00:10:21,200
steps of encoding it, DCT transform, quantization,

195
00:10:21,200 --> 00:10:22,640
entropy encoding.

196
00:10:22,640 --> 00:10:25,320
So that's the basic idea.

197
00:10:25,320 --> 00:10:27,400
So after prediction, a difference macro block

198
00:10:27,400 --> 00:10:30,200
is computed to measure the prediction error.

199
00:10:30,200 --> 00:10:31,640
And then each of these 8 by 8 blocks

200
00:10:31,640 --> 00:10:35,160
then go through DCT quantization and Z-Z scanning and entropy

201
00:10:35,160 --> 00:10:36,820
encoding.

202
00:10:36,820 --> 00:10:41,240
So the PFrame encodes the difference macro block

203
00:10:41,240 --> 00:10:43,600
or the prediction error.

204
00:10:43,600 --> 00:10:46,880
And also the motion vector, the difference

205
00:10:46,880 --> 00:10:49,960
between the motion vector for consecutive blocks,

206
00:10:49,960 --> 00:10:52,000
we also use the differential coding

207
00:10:52,000 --> 00:10:55,240
to code it first before we let it go through the entropy

208
00:10:55,240 --> 00:10:56,040
encoding.

209
00:10:56,040 --> 00:10:57,800
So exactly similar to what we have

210
00:10:57,800 --> 00:11:01,280
described for the PFrame encoding of MPEG-1.

211
00:11:01,280 --> 00:11:04,640
So there's nothing really that new here.

212
00:11:04,640 --> 00:11:06,800
OK, so this is the visualization to show

213
00:11:06,800 --> 00:11:12,460
how do we perform an encoding for PFrame in H.261.

214
00:11:12,460 --> 00:11:15,760
So suppose this is our current frame that we want to encode.

215
00:11:15,760 --> 00:11:17,960
So we partition it into numerous macro block

216
00:11:17,960 --> 00:11:20,760
of 16 by 16 macro block.

217
00:11:20,760 --> 00:11:23,920
Suppose this is the current macro block that you want to compress.

218
00:11:23,920 --> 00:11:27,720
So you perform a motion estimation.

219
00:11:27,720 --> 00:11:29,520
Compare with the previous reference frame

220
00:11:29,520 --> 00:11:32,360
to see the positions of the best match block.

221
00:11:32,360 --> 00:11:35,560
Suppose this is the positions of the best match block.

222
00:11:35,560 --> 00:11:37,320
So this is the current block and this

223
00:11:37,320 --> 00:11:39,100
is the position of best match block.

224
00:11:39,100 --> 00:11:42,440
Then you can find out what is the motion vector.

225
00:11:42,440 --> 00:11:43,880
So this motion vector, you can let

226
00:11:43,880 --> 00:11:45,680
it go through a differential encoding,

227
00:11:45,680 --> 00:11:48,840
and then afterwards, entropy encoding.

228
00:11:48,840 --> 00:11:51,280
So the next thing is that your current block

229
00:11:51,280 --> 00:11:54,400
that you want to compress and your prediction error.

230
00:11:54,400 --> 00:11:56,960
So the current-- sorry, your current block

231
00:11:56,960 --> 00:11:59,480
and the best match block, when you take their difference,

232
00:11:59,480 --> 00:12:01,840
this will be the prediction error.

233
00:12:01,840 --> 00:12:06,040
So this is called the difference or the prediction error.

234
00:12:06,040 --> 00:12:10,440
So this prediction error can be divided into six blocks.

235
00:12:10,440 --> 00:12:13,000
Each of them, we let it go through DCT, quantization,

236
00:12:13,000 --> 00:12:16,300
and entropy encoding, and finally generate bit stream.

237
00:12:16,300 --> 00:12:20,500
So quite similar to MPEG-1.

238
00:12:20,500 --> 00:12:31,860
So the next thing we want to very briefly touch on

239
00:12:31,860 --> 00:12:37,060
is how do we perform the quantization under the H.261.

240
00:12:37,060 --> 00:12:40,780
So again, the quantization steps is

241
00:12:40,780 --> 00:12:43,420
very similar to what we have in the MPEG-1,

242
00:12:43,420 --> 00:12:46,620
except for 261, because it's an earlier standard,

243
00:12:46,620 --> 00:12:49,220
so there's a little bit less flexibility.

244
00:12:49,220 --> 00:12:51,460
So in terms of their quantization,

245
00:12:51,460 --> 00:12:54,440
matrix is a bit more constrained.

246
00:12:54,440 --> 00:12:58,020
So the quantization matrix used in H.261,

247
00:12:58,020 --> 00:13:02,020
they use a constant step size for all the DCT coefficient

248
00:13:02,020 --> 00:13:03,260
within a macro block.

249
00:13:03,260 --> 00:13:08,820
So if you remember for MPEG-1, which is like the JPEG,

250
00:13:08,820 --> 00:13:12,620
actually for different step size in your quantization matrix,

251
00:13:12,620 --> 00:13:15,420
you have more flexibility to change the value.

252
00:13:15,420 --> 00:13:19,060
Horizontally, vertically, diagonally, the step size

253
00:13:19,060 --> 00:13:20,660
tends to increase.

254
00:13:20,660 --> 00:13:22,540
That's for MPEG-1.

255
00:13:22,540 --> 00:13:26,400
For 261, actually, the step size actually

256
00:13:26,400 --> 00:13:28,760
have constant value.

257
00:13:28,760 --> 00:13:30,820
So if you look at this particular equation that

258
00:13:30,820 --> 00:13:34,700
relates your quantized DCT coefficient and the DCT

259
00:13:34,700 --> 00:13:37,860
coefficient, suppose you have a DCT coefficient,

260
00:13:37,860 --> 00:13:41,040
you want to obtain the quantized DCT coefficient.

261
00:13:41,040 --> 00:13:44,460
We know that what we do is we let it divided by the step size

262
00:13:44,460 --> 00:13:46,900
and then we round it.

263
00:13:46,900 --> 00:13:51,540
So for 261, they have a bit more constraint.

264
00:13:51,540 --> 00:13:55,180
For the DC coefficient of the intra-frame,

265
00:13:55,180 --> 00:13:58,640
this step size is chosen to be a value of 8.

266
00:13:58,640 --> 00:14:01,000
But for all the other coefficients,

267
00:14:01,000 --> 00:14:06,440
all the other 63 coefficients, the quantized DCT coefficient

268
00:14:06,440 --> 00:14:10,040
is given by the DCT coefficient divided by this step size,

269
00:14:10,040 --> 00:14:13,840
whereas this step size is 2 times the scale value.

270
00:14:13,840 --> 00:14:18,040
So the scale value can take any integer between 1 to 33.

271
00:14:18,040 --> 00:14:23,160
But once you choose this value, all the other quantized step

272
00:14:23,160 --> 00:14:24,520
size is the same.

273
00:14:24,520 --> 00:14:27,840
So long story short, it's not as flexible as MPEG-1

274
00:14:27,840 --> 00:14:29,940
because it's an earlier standard.

275
00:14:29,940 --> 00:14:32,060
So these are just some minor differences.

276
00:14:32,060 --> 00:14:34,420
In terms of quantization, for 261,

277
00:14:34,420 --> 00:14:38,620
it's not as flexible as MPEG-1.

278
00:14:38,620 --> 00:14:42,920
OK, so then let's try to look at the quick summary of 261

279
00:14:42,920 --> 00:14:46,180
because it's very similar to MPEG-1.

280
00:14:46,180 --> 00:14:50,180
So I only try to highlight some of the more salient differences

281
00:14:50,180 --> 00:14:53,260
because if I explain too much here, after a while,

282
00:14:53,260 --> 00:14:54,880
all of you are going to start yawning

283
00:14:54,880 --> 00:14:56,340
because it's a reputation.

284
00:14:56,340 --> 00:14:59,480
There's lots of reputation for different evolution

285
00:14:59,480 --> 00:15:02,680
of this video compression standard.

286
00:15:02,680 --> 00:15:04,400
So in terms of the intraframe coding,

287
00:15:04,400 --> 00:15:06,820
so this intraframe, also known as the intra-coding,

288
00:15:06,820 --> 00:15:11,140
as we've seen, this is just exactly similar to JPEG standard.

289
00:15:11,140 --> 00:15:12,220
We take a particle frame.

290
00:15:12,220 --> 00:15:14,600
We partition it into numerous macro block.

291
00:15:14,600 --> 00:15:18,520
So each of the block, we just encode it independently.

292
00:15:18,520 --> 00:15:22,860
So for the interframe, it only consists of P-frame.

293
00:15:22,860 --> 00:15:25,580
So we use a DCT base.

294
00:15:25,580 --> 00:15:30,100
So for each of the block, we try to perform motion estimation

295
00:15:30,100 --> 00:15:31,980
to find the best match block with respect

296
00:15:31,980 --> 00:15:34,000
to the previous reference frame.

297
00:15:34,000 --> 00:15:37,300
So these two blocks, we calculate their difference

298
00:15:37,300 --> 00:15:38,780
or the prediction error.

299
00:15:38,780 --> 00:15:40,300
And this prediction error, then we

300
00:15:40,300 --> 00:15:44,380
let it go through DCT quantization entropy encoding.

301
00:15:44,380 --> 00:15:48,340
So therefore, the prediction error

302
00:15:48,340 --> 00:15:51,460
is subsequently handled using DCT transform.

303
00:15:51,460 --> 00:15:54,780
And then it's used a fixed block size motion estimation,

304
00:15:54,780 --> 00:15:58,800
because you can see it's actually a 16 by 16 macro block.

305
00:15:58,800 --> 00:16:02,080
So the reason why we state here is a fixed block size

306
00:16:02,080 --> 00:16:06,560
is because subsequently, when we look at this H.264,

307
00:16:06,560 --> 00:16:08,620
you can see that there's a contrast.

308
00:16:08,620 --> 00:16:11,860
For 264, it allows different block size

309
00:16:11,860 --> 00:16:15,020
to perform motion compensation.

310
00:16:15,020 --> 00:16:19,340
So some other key feature, it only has I and P-frame,

311
00:16:19,340 --> 00:16:21,620
because it's targeting for video conferencing.

312
00:16:21,620 --> 00:16:26,220
So you can expect to have low resolution and low bit rate.

313
00:16:26,220 --> 00:16:29,860
So it was targeting for video conferencing application

314
00:16:29,860 --> 00:16:31,180
in those early years.

315
00:16:31,180 --> 00:16:35,380
So that was 261.

316
00:16:35,380 --> 00:16:37,700
And afterwards, we move on to 262.

317
00:16:37,700 --> 00:16:41,020
So can any one of you remember 262 is actually

318
00:16:41,020 --> 00:16:42,540
corresponding to MPEG what?

319
00:16:42,540 --> 00:16:48,340
262, H.262 correspond to MPEG?

320
00:16:49,500 --> 00:16:51,620
Two, well, correspond to MPEG two.

321
00:16:51,620 --> 00:16:54,540
Since we have already spent some time talking about MPEG two

322
00:16:54,540 --> 00:16:57,380
in the earlier lecture, so this will not

323
00:16:57,380 --> 00:17:00,320
repeat too much information here,

324
00:17:00,320 --> 00:17:02,340
since it's just the same standard,

325
00:17:02,340 --> 00:17:04,280
but it's used a different name,

326
00:17:04,280 --> 00:17:07,740
because it was jointly developed between this organization,

327
00:17:07,740 --> 00:17:11,080
ITU-T, and ISO and IEC.

328
00:17:11,080 --> 00:17:13,980
Right, okay, so the quick overview

329
00:17:13,980 --> 00:17:16,780
is jointly developed by this ITU-T.

330
00:17:16,780 --> 00:17:19,180
Right, okay, actually, more specifically,

331
00:17:19,180 --> 00:17:21,380
is this study group 16, which is called

332
00:17:21,380 --> 00:17:25,340
Video Coding Expert Group, okay, or VCEG here.

333
00:17:25,340 --> 00:17:27,660
And then also the ISO, IEC,

334
00:17:27,660 --> 00:17:29,780
Moving Picture Expert Group, MPEG.

335
00:17:29,780 --> 00:17:32,300
So it's between these few organizations.

336
00:17:32,300 --> 00:17:37,300
That's why it was called these different names here.

337
00:17:37,300 --> 00:17:40,860
Right, so it's actually known as the MPEG two,

338
00:17:40,860 --> 00:17:44,660
part two, specifically part two is a video compression

339
00:17:44,660 --> 00:17:46,380
part of MPEG two.

340
00:17:46,380 --> 00:17:48,900
Right, it also has this name here.

341
00:17:48,900 --> 00:17:51,660
Okay, right, it's developed in '95.

342
00:17:51,660 --> 00:17:56,300
Okay, so 262 and MPEG two has some basic properties.

343
00:17:56,300 --> 00:17:59,300
I think we have already covered some of the important

344
00:17:59,300 --> 00:18:00,860
expect in previous lecture.

345
00:18:00,860 --> 00:18:03,380
So we'll just highlight, actually it has three frame type,

346
00:18:03,380 --> 00:18:05,060
I frame, P frame, and B frame.

347
00:18:05,060 --> 00:18:08,340
So intra-coded predictive coded frame

348
00:18:08,340 --> 00:18:12,160
and bi-directionally predictive coded frame here.

349
00:18:12,160 --> 00:18:14,860
So you can see, therefore, how it differ from 261 now

350
00:18:14,860 --> 00:18:17,640
is that it introduce the B frame, okay?

351
00:18:17,640 --> 00:18:22,700
Right, okay, let's continue on.

352
00:18:22,700 --> 00:18:26,100
263 and 263 plus, and actually there's also

353
00:18:26,100 --> 00:18:27,980
the 263 plus plus as well.

354
00:18:27,980 --> 00:18:32,540
Right, okay, so what are some quick information

355
00:18:32,540 --> 00:18:33,900
regarding 263?

356
00:18:33,900 --> 00:18:38,180
So it's the basics of development for the subsequent

357
00:18:38,180 --> 00:18:42,380
MPEG four that we have actually covered in last lecture.

358
00:18:42,380 --> 00:18:45,180
Right, okay, so 263 is developed in '96,

359
00:18:45,180 --> 00:18:47,440
263 plus in '98, right?

360
00:18:47,440 --> 00:18:49,740
So kind of early years.

361
00:18:49,740 --> 00:18:53,580
Okay, so right, the objective of course is always

362
00:18:53,580 --> 00:18:56,140
continuously trying to improve the performance

363
00:18:56,140 --> 00:18:59,320
of the standard, right, at lower bit rate here.

364
00:18:59,320 --> 00:19:03,060
So it offer improvement to 261, but it's also

365
00:19:03,060 --> 00:19:05,700
targeting for video conferencing application.

366
00:19:05,700 --> 00:19:08,740
Right, so 263 series is also targeting

367
00:19:08,740 --> 00:19:10,900
video conferencing application.

368
00:19:10,900 --> 00:19:14,820
Right, for 263 plus, it support this subpixel

369
00:19:14,820 --> 00:19:17,840
motion factors up to one eight pixel

370
00:19:17,840 --> 00:19:21,620
of the pixel accuracy for improved compression.

371
00:19:21,620 --> 00:19:24,260
So can anyone of you still remember what's the meaning

372
00:19:24,260 --> 00:19:27,720
of this subpixel motion estimation,

373
00:19:27,720 --> 00:19:31,500
or subpixel accuracy for motion estimation?

374
00:19:39,980 --> 00:19:42,460
Right, so if you think about it, right,

375
00:19:42,460 --> 00:19:44,380
how do you achieve subpixel?

376
00:19:44,380 --> 00:19:49,300
Right, so you have, for example, this current,

377
00:19:49,300 --> 00:19:51,460
this is your current frame, right, partitioned

378
00:19:51,460 --> 00:19:53,020
into numerous macro block.

379
00:19:53,020 --> 00:19:55,140
This is the current macro block that you want to encode.

380
00:19:55,140 --> 00:19:57,060
There's many different macro block.

381
00:19:57,060 --> 00:20:00,160
Suppose this is the macro block you want to encode, right,

382
00:20:00,160 --> 00:20:02,980
and then you refer to the previous reference frame.

383
00:20:02,980 --> 00:20:05,620
So the previous reference frame, you also have

384
00:20:05,620 --> 00:20:08,620
different grid structure, right, grid structures here.

385
00:20:08,620 --> 00:20:11,980
So you have this macro block that you want to

386
00:20:11,980 --> 00:20:15,920
kind of compress, and then, yeah,

387
00:20:15,920 --> 00:20:18,140
in the previous reference frame, usually you would define

388
00:20:18,140 --> 00:20:20,660
a search window, and then you try to find

389
00:20:20,660 --> 00:20:23,280
where is the positions of best match block, right.

390
00:20:23,280 --> 00:20:26,020
So in the early years, when you try to do it,

391
00:20:26,020 --> 00:20:28,980
when you do the checking or moving of this pixel,

392
00:20:28,980 --> 00:20:32,480
it's at the grid level or integer level.

393
00:20:32,480 --> 00:20:35,380
Yeah, so therefore, if you want to actually obtain up

394
00:20:35,380 --> 00:20:38,920
to the sub-pixel level accuracy, what you need to do

395
00:20:38,920 --> 00:20:40,920
is that for this reference frame, right,

396
00:20:40,920 --> 00:20:44,420
suppose these are the two, four pixel values

397
00:20:44,420 --> 00:20:47,300
in the reference frame, yeah, these two are integer

398
00:20:47,300 --> 00:20:51,400
pixel value, you try to do some interpolation, right,

399
00:20:51,400 --> 00:20:55,020
for the values between this integer pixel value.

400
00:20:55,020 --> 00:20:57,980
So if you can do some interpolation between this particular

401
00:20:57,980 --> 00:21:01,660
pixel value, then your previous macro block then,

402
00:21:01,660 --> 00:21:04,980
you can check, right, where is the best match position,

403
00:21:04,980 --> 00:21:08,080
even at the sub-pixel level, okay.

404
00:21:08,080 --> 00:21:10,420
So therefore, right, so for this part here,

405
00:21:10,420 --> 00:21:13,180
pretty much is that you use the interpolation,

406
00:21:13,180 --> 00:21:16,260
to try to interplay some sub-pixel value

407
00:21:16,260 --> 00:21:19,300
in the reference frame, and afterwards, then you can check

408
00:21:19,300 --> 00:21:23,340
what is the motion estimation up to the sub-pixel level.

409
00:21:23,340 --> 00:21:25,340
Okay, so that's the basic idea here.

410
00:21:25,340 --> 00:21:30,340
Right, okay, so for 263, some of the supporting standards,

411
00:21:30,340 --> 00:21:33,380
yeah, so we will not spend too much time on this,

412
00:21:34,260 --> 00:21:36,140
this kind of very detailed information.

413
00:21:36,140 --> 00:21:39,660
So as far as the exam and, you know, is concerned,

414
00:21:39,660 --> 00:21:41,820
right, these are considered as like, you know,

415
00:21:41,820 --> 00:21:44,020
secondary information, or actually it's more like

416
00:21:44,020 --> 00:21:47,420
just for your information, right, you don't really have to

417
00:21:47,420 --> 00:21:51,520
kind of memorize those information, okay, no need to.

418
00:21:51,520 --> 00:21:54,680
Right, so anyway, right, so for H.263, right,

419
00:21:54,680 --> 00:21:57,700
so these are the wider range of the resolution, right,

420
00:21:57,700 --> 00:22:00,700
it correspond to these resolutions here, okay,

421
00:22:00,700 --> 00:22:03,400
for the luminance and the chrominance plane.

422
00:22:03,400 --> 00:22:06,300
Okay, so the bit rate for the uncompressed

423
00:22:06,300 --> 00:22:09,480
and the compressed bit rate, okay, yeah,

424
00:22:09,480 --> 00:22:12,380
is, yeah, so, sorry, this is the maximum bit rate,

425
00:22:12,380 --> 00:22:14,440
and this is the uncompressed bit rate

426
00:22:14,440 --> 00:22:16,140
that it can support, okay.

427
00:22:16,140 --> 00:22:22,400
Right, so what are some of the important features

428
00:22:22,400 --> 00:22:25,780
of 263 plus, right, so it provide more flexibility

429
00:22:25,780 --> 00:22:27,460
in terms of different source format,

430
00:22:27,460 --> 00:22:30,620
that means it can support even larger range

431
00:22:30,620 --> 00:22:33,940
of different resolution, different aspect ratio, right,

432
00:22:33,940 --> 00:22:37,260
okay, the ratio of the width to the height

433
00:22:37,260 --> 00:22:41,760
of the image plane, okay, it also support temporal,

434
00:22:41,760 --> 00:22:45,960
SNR, and the spatial scalability, similar to,

435
00:22:45,960 --> 00:22:48,920
now what we have studied about MPEG-2, right,

436
00:22:48,920 --> 00:22:52,000
it also include this deblocking filter, all right,

437
00:22:52,000 --> 00:22:55,440
so this deblocking filter is because, if you remember,

438
00:22:55,440 --> 00:22:58,160
right, for all this video compression standard,

439
00:22:58,160 --> 00:23:00,900
it's based on the idea that given a current frame

440
00:23:00,900 --> 00:23:02,620
that you want to compress,

441
00:23:02,620 --> 00:23:05,420
you partition into numerous macro block.

442
00:23:05,420 --> 00:23:08,340
So for each block here, right, when you find the motion

443
00:23:08,340 --> 00:23:11,460
as, you know, the best match block,

444
00:23:11,460 --> 00:23:13,920
you take their difference, you encode it, and so on,

445
00:23:13,920 --> 00:23:16,560
you expect that between this current macro block

446
00:23:16,560 --> 00:23:19,020
that you encode and the flowing macro block

447
00:23:19,020 --> 00:23:21,340
that you encode at this boundary, right,

448
00:23:21,340 --> 00:23:24,060
there will be some discontinuity, right,

449
00:23:24,060 --> 00:23:26,660
there'll be some artifact or there'll be some distortion.

450
00:23:26,660 --> 00:23:29,780
So therefore, right, usually between the blocks,

451
00:23:29,780 --> 00:23:31,640
one macro block and the other macro block,

452
00:23:31,640 --> 00:23:35,820
there'll be some visually not very pleasing

453
00:23:35,820 --> 00:23:38,660
kind of artifacts in between, right,

454
00:23:38,660 --> 00:23:41,700
so therefore, for this 263, actually,

455
00:23:41,700 --> 00:23:44,660
they introduce this deblocking filter.

456
00:23:44,660 --> 00:23:46,560
So, as the name suggests, deblocking means

457
00:23:46,560 --> 00:23:49,260
that you want to remove this blockiness effect

458
00:23:49,260 --> 00:23:52,780
at the boundary of different macro block, okay?

459
00:23:52,780 --> 00:23:55,560
Right, so this deblocking filter will actually,

460
00:23:55,560 --> 00:23:58,180
you know, become more important

461
00:23:58,180 --> 00:24:00,760
in the subsequent standards, okay?

462
00:24:00,760 --> 00:24:03,360
But it started in this 263 already.

463
00:24:03,360 --> 00:24:06,240
Okay, so you can see, again,

464
00:24:06,240 --> 00:24:08,560
for this video compression standard, right,

465
00:24:08,560 --> 00:24:11,500
a lot of them is actually kind of,

466
00:24:11,500 --> 00:24:13,460
how should I say, it's an evolution.

467
00:24:13,460 --> 00:24:15,860
You kind of, for different standard,

468
00:24:15,860 --> 00:24:19,020
you start to improve, you know, gradually and gradually,

469
00:24:19,020 --> 00:24:23,000
yeah, but H.264 is considered as a slightly more different,

470
00:24:23,000 --> 00:24:24,920
right, because a lot of the technique used

471
00:24:24,920 --> 00:24:27,420
is quite different from the previous one.

472
00:24:27,420 --> 00:24:30,580
So, that's why 264 is considered

473
00:24:30,580 --> 00:24:33,800
as a more important standard, as we'll see later.

474
00:24:33,800 --> 00:24:37,100
Right, okay, so these are,

475
00:24:37,100 --> 00:24:38,800
just now what we covered before,

476
00:24:38,800 --> 00:24:41,700
261, 262, 263, those are considered

477
00:24:41,700 --> 00:24:43,860
as slightly kind of earlier standard.

478
00:24:43,860 --> 00:24:45,660
So, the more recent standards actually

479
00:24:45,660 --> 00:24:49,140
are 264, 265, 266, so these are considered

480
00:24:49,140 --> 00:24:51,220
as more recent standard, and they are also

481
00:24:51,220 --> 00:24:53,220
commonly grouped together because they have

482
00:24:53,220 --> 00:24:55,880
shared lots of similarity, okay.

483
00:24:55,880 --> 00:24:58,560
So, 264 has a bigger difference

484
00:24:58,560 --> 00:25:00,100
compared to the earlier standard,

485
00:25:00,100 --> 00:25:04,240
but subsequently, 264, 265, 266 are a little bit closer

486
00:25:04,240 --> 00:25:06,900
in terms of the approach they're using.

487
00:25:06,900 --> 00:25:09,300
Right, okay, so who developed this, right,

488
00:25:09,300 --> 00:25:11,720
so it was developed by this ISO/IEC,

489
00:25:11,720 --> 00:25:15,720
and PEC, and the ITUT video coding expert group, right,

490
00:25:15,720 --> 00:25:17,520
okay, like we have mentioned before.

491
00:25:17,520 --> 00:25:21,200
So, what's the objective of these standards here, right?

492
00:25:21,200 --> 00:25:23,200
You can more or less guess already, right.

493
00:25:23,200 --> 00:25:24,900
So, number one is of course to improve

494
00:25:24,900 --> 00:25:27,160
the coding efficiency, you want to code it

495
00:25:27,160 --> 00:25:29,680
into smaller bit rate, but at the same time

496
00:25:29,680 --> 00:25:34,600
still achieve better compression performance.

497
00:25:34,600 --> 00:25:36,560
Right, another thing is that over time,

498
00:25:36,560 --> 00:25:39,220
when you're starting from 264 onward,

499
00:25:39,220 --> 00:25:42,960
the resolutions of the video become larger and larger.

500
00:25:42,960 --> 00:25:45,000
So, therefore, in more recent standard,

501
00:25:45,000 --> 00:25:48,780
you need to be able to handle larger video resolution

502
00:25:48,780 --> 00:25:50,920
and a higher frame rate, okay.

503
00:25:50,920 --> 00:25:53,140
So, therefore, in the more recent standard,

504
00:25:53,140 --> 00:25:55,860
you will try, you need to handle increase

505
00:25:55,860 --> 00:25:57,980
in video resolution as well as the frame rate,

506
00:25:57,980 --> 00:26:01,360
okay, for example, from HD to ultra HD.

507
00:26:01,360 --> 00:26:04,160
Right, and then for 266, the most recent standard,

508
00:26:04,160 --> 00:26:07,920
actually it further develops some other new emerging issues

509
00:26:07,920 --> 00:26:10,740
like high dynamic range video, right,

510
00:26:10,740 --> 00:26:13,460
360 degree video, right,

511
00:26:13,460 --> 00:26:16,480
paranormal video, and so on, okay.

512
00:26:16,480 --> 00:26:21,380
So, it addresses some more emerging situation and use cases.

513
00:26:23,380 --> 00:26:26,000
Okay, so, yeah, so we have covered just now

514
00:26:26,000 --> 00:26:30,180
261, 262, 263, now we are going to come to the focus

515
00:26:30,180 --> 00:26:34,380
of today's lecture, which is 264, right.

516
00:26:34,380 --> 00:26:37,820
Okay, so let's do a quick overview of 264.

517
00:26:37,820 --> 00:26:40,780
So, for 264, it was developed, so this slide

518
00:26:40,780 --> 00:26:42,680
is more like fact-sharing information.

519
00:26:42,680 --> 00:26:46,300
It was developed by ITUT, Video Coding Expert Group,

520
00:26:46,300 --> 00:26:50,100
and this ISO, IEC MPEG Group in 2003, right,

521
00:26:50,100 --> 00:26:53,220
quite some years ago, right, so it was also known

522
00:26:53,220 --> 00:26:56,220
as Advanced Video Coding, or AVC, right,

523
00:26:56,220 --> 00:26:59,540
also known as MPEG 4 part 10, right,

524
00:26:59,540 --> 00:27:01,660
so these are some alternative name.

525
00:27:01,660 --> 00:27:05,900
Okay, it can offer 50% better compression efficiency

526
00:27:05,900 --> 00:27:10,380
than MPEG 2, right, and up to 30% better than 263.

527
00:27:10,380 --> 00:27:13,260
Okay, it has support a wide range of application,

528
00:27:13,260 --> 00:27:16,220
right, including internet video, computer,

529
00:27:16,220 --> 00:27:18,380
you know, Blu-ray, and many others.

530
00:27:18,380 --> 00:27:21,660
Okay, so it will improve the motion compensation

531
00:27:21,660 --> 00:27:24,120
with variable block size, so later on we'll see

532
00:27:24,120 --> 00:27:26,300
what's the meaning of this variable block size,

533
00:27:26,300 --> 00:27:28,220
as well as the multiple reference stream.

534
00:27:28,220 --> 00:27:32,000
Okay, so these are some of the features of H.264.

535
00:27:32,000 --> 00:27:37,540
Right, okay, so let's look at the encoder of this 264.

536
00:27:37,540 --> 00:27:41,900
So encoder means that you have some original video frame,

537
00:27:41,900 --> 00:27:44,560
right, after you encode it, right, what you have

538
00:27:44,560 --> 00:27:48,460
is that you have the encoded bit stream or the compressed

539
00:27:48,460 --> 00:27:50,260
video, so how does it work?

540
00:27:50,260 --> 00:27:52,560
So what you have here is that first of all,

541
00:27:52,560 --> 00:27:55,900
you have some input video frame, okay,

542
00:27:55,900 --> 00:27:58,300
so this is your current frame, suppose this is the current

543
00:27:58,300 --> 00:28:00,920
frame that you want to encode, yeah, you partition

544
00:28:00,920 --> 00:28:04,140
into 16 by 16 macro block, right, so if this is the current

545
00:28:04,140 --> 00:28:06,700
frame you want to encode, right, so you partition it

546
00:28:06,700 --> 00:28:11,040
into numerous 16 by 16 macro block, so this is similar

547
00:28:11,040 --> 00:28:12,800
to what we have studied before.

548
00:28:12,800 --> 00:28:15,980
Okay, and then for one moment let's assume that, right,

549
00:28:15,980 --> 00:28:19,060
okay, at this signal, at this particular juncture here

550
00:28:19,060 --> 00:28:22,260
is actually your previous reference frame,

551
00:28:22,260 --> 00:28:25,700
your constructed reference frame, okay, so this is

552
00:28:25,700 --> 00:28:27,620
the current frame you want to encode, okay,

553
00:28:27,620 --> 00:28:29,660
this is the current frame that you want to encode,

554
00:28:29,660 --> 00:28:32,640
signal at this particular juncture here is your

555
00:28:32,640 --> 00:28:35,020
previous reference frame, okay, you already have

556
00:28:35,020 --> 00:28:38,340
the previous reference frame sitting here already,

557
00:28:38,340 --> 00:28:40,500
okay, previous reference frame sitting here.

558
00:28:40,500 --> 00:28:43,720
So what we do now is that we have our current macro block

559
00:28:43,720 --> 00:28:46,420
in our current frame that we want to compress,

560
00:28:46,420 --> 00:28:49,840
we compare with the previous reference frame here, okay,

561
00:28:49,840 --> 00:28:54,020
so we perform the motion estimation, so once you perform

562
00:28:54,020 --> 00:28:57,560
the motion estimation, right, you can then obtain

563
00:28:57,560 --> 00:29:01,200
the motion vector, right, this motion vector can then

564
00:29:01,200 --> 00:29:03,760
go through the entropy encoding, yeah, okay,

565
00:29:03,760 --> 00:29:06,160
so this part is quite straightforward, and once you have

566
00:29:06,160 --> 00:29:08,640
found out, okay, what is the best match block

567
00:29:08,640 --> 00:29:11,820
in the previous reference frame, okay, so, yeah,

568
00:29:11,820 --> 00:29:14,600
you can take the difference, so this process here

569
00:29:14,600 --> 00:29:17,920
is actually, you can find the best match block, right,

570
00:29:17,920 --> 00:29:20,260
so this best match block then, you take the difference

571
00:29:20,260 --> 00:29:23,760
between your current macro block and the best match block,

572
00:29:23,760 --> 00:29:26,700
okay, so the difference here, this is your difference,

573
00:29:26,700 --> 00:29:29,620
also known as your prediction error, okay,

574
00:29:29,620 --> 00:29:32,640
so your best match block and your, no, sorry,

575
00:29:32,640 --> 00:29:34,640
your current reference block and your best match block

576
00:29:34,640 --> 00:29:38,040
through the motion estimation, okay, so afterwards

577
00:29:38,040 --> 00:29:40,840
you take the difference, okay, so this small arrow here

578
00:29:40,840 --> 00:29:43,280
is you take the difference here, so you have the prediction

579
00:29:43,280 --> 00:29:46,560
error now, so once you have this particular prediction error,

580
00:29:46,560 --> 00:29:50,160
the next thing that it does for this H.264 is that

581
00:29:50,160 --> 00:29:53,400
it go through integer transform, so you can see

582
00:29:53,400 --> 00:29:56,040
this is how it differ from the previous standard,

583
00:29:56,040 --> 00:29:58,280
so for the previous standard, what is the block

584
00:29:58,280 --> 00:29:59,160
we are using here?

585
00:29:59,160 --> 00:30:06,200
For the previous standard, like MPEG-2, MPEG-1,

586
00:30:06,200 --> 00:30:08,040
what is the transform we use?

587
00:30:08,040 --> 00:30:13,760
Anyone still remember?

588
00:30:13,760 --> 00:30:20,880
DCT, right, so for previous standard, they used DCT,

589
00:30:20,880 --> 00:30:23,720
but for H.264, they used integer transform,

590
00:30:23,720 --> 00:30:26,320
so later on, we are going to spend a little bit more time

591
00:30:26,320 --> 00:30:28,540
to find out about this integer transform,

592
00:30:28,540 --> 00:30:31,680
why is it being used and how do we use it, okay,

593
00:30:31,680 --> 00:30:34,380
so, but anyway, at this moment, just know that, right,

594
00:30:34,380 --> 00:30:38,600
you use an integer transform, okay, in H.264,

595
00:30:38,600 --> 00:30:42,960
and afterwards, you go through the scaling and quantization,

596
00:30:42,960 --> 00:30:46,180
similar to the earlier standard, right,

597
00:30:46,180 --> 00:30:48,800
there are some small differences, but in terms of

598
00:30:48,800 --> 00:30:51,780
the basic principle, it's the same, all right, okay,

599
00:30:51,780 --> 00:30:54,380
so once you have done that, then what you have now

600
00:30:54,380 --> 00:30:58,440
is that you have this quantized transform coefficient now,

601
00:30:58,440 --> 00:31:00,420
right, so this quantized transform coefficient,

602
00:31:00,420 --> 00:31:03,200
you can then go through entropy encoding to generate

603
00:31:03,200 --> 00:31:06,580
a bitstream, okay, so you can also see that, right,

604
00:31:06,580 --> 00:31:10,360
you have this particular, sitting on top of this, right,

605
00:31:10,360 --> 00:31:14,420
is that you have what is known as a coder control,

606
00:31:14,420 --> 00:31:18,420
so this particular coder control actually is used to

607
00:31:18,420 --> 00:31:22,060
control the bit rate of your generated video, right,

608
00:31:22,060 --> 00:31:24,700
sometimes you may want your generated video

609
00:31:24,700 --> 00:31:28,100
to have a low bit rate, sometimes, low bit rate,

610
00:31:28,100 --> 00:31:31,240
but you are okay with some lower quality,

611
00:31:31,240 --> 00:31:34,680
sometimes you want a better quality video,

612
00:31:34,680 --> 00:31:37,260
and you can tolerate some higher bit rate,

613
00:31:37,260 --> 00:31:41,380
so this will be controlled by this coder control here,

614
00:31:41,380 --> 00:31:45,280
right, so you use to control the bit rate of your

615
00:31:45,280 --> 00:31:49,120
generated or encoded video, right, okay,

616
00:31:49,120 --> 00:31:52,520
so it can control it by controlling this quantization

617
00:31:52,520 --> 00:31:55,000
steps here, okay, and the corresponding

618
00:31:55,000 --> 00:31:58,560
inverse quantization steps, okay, right, okay,

619
00:31:58,560 --> 00:32:01,120
so anyway, right, so earlier on, we already said that

620
00:32:01,120 --> 00:32:06,120
this is actually our quantized transform coefficient,

621
00:32:06,120 --> 00:32:09,720
right, quantized transform coefficient for the

622
00:32:09,720 --> 00:32:12,460
prediction error, for the prediction error,

623
00:32:12,460 --> 00:32:16,640
okay, so afterwards we do the inverse of the quantization,

624
00:32:16,640 --> 00:32:20,060
inverse of the integer transform, okay, right,

625
00:32:20,060 --> 00:32:23,680
so at this point here then, what we obtain is your,

626
00:32:23,680 --> 00:32:26,720
you know, kind of a reconstructed error

627
00:32:26,720 --> 00:32:29,560
or prediction error now, so signal at this point now

628
00:32:29,560 --> 00:32:32,820
is your reconstructed prediction error, okay,

629
00:32:32,820 --> 00:32:36,360
so this prediction error now, you add with the previous,

630
00:32:36,360 --> 00:32:40,640
no, macro block or the previous frame, okay,

631
00:32:40,640 --> 00:32:44,480
then you can then generate the next frame, okay,

632
00:32:44,480 --> 00:32:47,280
the next frame, right, so this next frame will go through

633
00:32:47,280 --> 00:32:52,280
a deblocking filter to remove the blocking artifact,

634
00:32:52,280 --> 00:32:55,120
okay, at each of the macro block, right,

635
00:32:55,120 --> 00:32:58,160
so then afterwards, at this signal, at this junction now

636
00:32:58,160 --> 00:33:01,880
will be your reconstructed frame, okay,

637
00:33:01,880 --> 00:33:04,060
your reconstructed reference frame now,

638
00:33:04,060 --> 00:33:06,620
so that's pretty much the basic principles

639
00:33:06,620 --> 00:33:11,620
of the H.264 encoder, right, so for the next few slides,

640
00:33:11,620 --> 00:33:15,320
we are going to look into each of this component

641
00:33:15,320 --> 00:33:18,520
a bit more in detail now, right, okay,

642
00:33:18,520 --> 00:33:22,300
but before that, let's look at some high-level properties

643
00:33:22,300 --> 00:33:26,560
of 264, okay, so in terms of the 264,

644
00:33:26,560 --> 00:33:28,360
from just now the diagram, you already see

645
00:33:28,360 --> 00:33:29,800
there's a few important aspects,

646
00:33:29,800 --> 00:33:33,720
number one is that it performs integer transform, okay,

647
00:33:33,720 --> 00:33:37,800
so as opposed to DCT transform that you are familiar with,

648
00:33:37,800 --> 00:33:41,480
for 264, right, so it uses integer transform,

649
00:33:41,480 --> 00:33:44,260
and it's in the block size of four by four blocks,

650
00:33:44,260 --> 00:33:47,480
okay, integer transform in four by four blocks here,

651
00:33:47,480 --> 00:33:50,280
right, so some of the advantages of this integer transform

652
00:33:50,280 --> 00:33:53,880
as you will see later is that it's low complexity,

653
00:33:53,880 --> 00:33:56,040
because for this particular transform matrix

654
00:33:56,040 --> 00:33:58,560
that we are using, right, so the transform matrix

655
00:33:58,560 --> 00:34:00,940
that we are using, each of the coefficient

656
00:34:00,940 --> 00:34:04,240
in the transform matrix, in the transform matrix

657
00:34:04,240 --> 00:34:07,720
are integer, okay, so therefore it takes this name,

658
00:34:07,720 --> 00:34:11,020
integer transform, right, so later on we'll see,

659
00:34:11,020 --> 00:34:13,520
because we are using integer, so, right,

660
00:34:13,520 --> 00:34:15,080
in terms of computation, it's fast,

661
00:34:15,080 --> 00:34:17,120
so therefore it's low complexity,

662
00:34:17,120 --> 00:34:20,200
and also there's no drifting, no drifting is because

663
00:34:20,200 --> 00:34:23,840
previously, when you are using the DCT, right,

664
00:34:23,840 --> 00:34:27,000
because DCT is actually a floating number,

665
00:34:27,000 --> 00:34:29,640
a floating point number, you usually need to round up

666
00:34:29,640 --> 00:34:32,880
this floating point number, and if you do this DCT

667
00:34:32,880 --> 00:34:36,760
many, many times, then your value will start to drift,

668
00:34:36,760 --> 00:34:39,520
okay, so this is known as a drifting problem,

669
00:34:39,520 --> 00:34:43,200
but if you are using integer transform,

670
00:34:43,200 --> 00:34:45,120
all the coefficient in the transform matrix

671
00:34:45,120 --> 00:34:48,320
are integer value, therefore the value will not drift,

672
00:34:48,320 --> 00:34:51,120
right, because there's no rounding off kind of effect.

673
00:34:52,160 --> 00:34:55,400
Okay, so that's one of the important aspect

674
00:34:55,400 --> 00:34:58,320
you use the integer transform, the second one is that

675
00:34:58,320 --> 00:35:02,080
you use a variable block size motion compensation, right,

676
00:35:02,080 --> 00:35:05,180
so in terms of the block size, as opposed to,

677
00:35:05,180 --> 00:35:07,120
you know, the standard before that you see

678
00:35:07,120 --> 00:35:11,240
is always 16 by 16, for H dot 264, right,

679
00:35:11,240 --> 00:35:13,800
it has a wider range of different block,

680
00:35:13,800 --> 00:35:18,800
so the block size can be ranging from 16 to 16,

681
00:35:18,800 --> 00:35:22,760
to four to four, right, so it has different block size here.

682
00:35:22,760 --> 00:35:25,080
Okay, so in terms of the accuracy,

683
00:35:25,080 --> 00:35:28,880
it has a quarter pixel accuracy in motion vectors here,

684
00:35:28,880 --> 00:35:30,920
right, and how it can be achieved, right,

685
00:35:30,920 --> 00:35:33,280
as we have mentioned before, is that we perform

686
00:35:33,280 --> 00:35:36,520
interpolation at the reference frame, okay.

687
00:35:36,520 --> 00:35:40,080
Right, on top of that, for H dot 264,

688
00:35:40,080 --> 00:35:43,840
it can also, you know, provide multiple reference frame

689
00:35:43,840 --> 00:35:47,880
for motion compensation, why do you need to perform,

690
00:35:47,880 --> 00:35:50,760
why does it want to support multiple reference frame,

691
00:35:50,760 --> 00:35:54,920
multiple reference frame motion compensation, any suggestion?

692
00:35:54,920 --> 00:36:08,360
So if you remember, so when we studied about

693
00:36:08,360 --> 00:36:11,920
this reference frame, specifically the P frame

694
00:36:11,920 --> 00:36:15,280
and the B frame, so we say that for P frame, right,

695
00:36:15,280 --> 00:36:17,880
if this is a current frame you want to encode,

696
00:36:17,880 --> 00:36:20,920
for P frame, you refer to the previous reference frame,

697
00:36:20,920 --> 00:36:24,480
okay, so you only have one reference frame to refer to,

698
00:36:24,480 --> 00:36:26,840
but for B frame, for example, for B frame,

699
00:36:26,840 --> 00:36:29,280
if this is the current frame you want to encode,

700
00:36:29,280 --> 00:36:31,920
you have the previous, okay, reference frame,

701
00:36:31,920 --> 00:36:33,900
and you have the flowing reference frame,

702
00:36:33,900 --> 00:36:36,300
so you can refer to two reference frame

703
00:36:36,300 --> 00:36:40,440
to perform the motion estimation and compensation.

704
00:36:40,440 --> 00:36:43,520
So at the time, we say that if you are using B frame,

705
00:36:43,520 --> 00:36:45,840
because you now have two reference frame

706
00:36:45,840 --> 00:36:48,100
to search the best match block,

707
00:36:48,100 --> 00:36:51,600
the chances of you finding a best match block is higher,

708
00:36:51,600 --> 00:36:54,040
yeah, so therefore you can then, you know,

709
00:36:54,040 --> 00:36:58,640
actually achieve a better, kind of,

710
00:36:58,640 --> 00:37:00,580
achieve a higher compression ratio,

711
00:37:00,580 --> 00:37:04,040
because you can find the chances of you finding

712
00:37:04,040 --> 00:37:07,880
a better best match block is higher

713
00:37:07,880 --> 00:37:11,720
respect to your current block.

714
00:37:11,720 --> 00:37:14,760
If it's more similar, that means this arrow is smaller.

715
00:37:14,760 --> 00:37:16,400
If this arrow is smaller, that means you can

716
00:37:16,400 --> 00:37:20,120
compress it into smaller bit rate, so this is good,

717
00:37:20,120 --> 00:37:22,000
but the price you have to pay is that

718
00:37:22,000 --> 00:37:24,960
now you have to do a search for two reference frame.

719
00:37:24,960 --> 00:37:28,160
So that is for last time when we studied about MPEG-1,

720
00:37:28,160 --> 00:37:31,060
so for this, actually, the idea is the same, right,

721
00:37:31,060 --> 00:37:34,440
when you have numerous multiple reference frame,

722
00:37:34,440 --> 00:37:37,480
you have more reference frame that you can refer to,

723
00:37:37,480 --> 00:37:39,280
that means the chances of you finding

724
00:37:39,280 --> 00:37:41,520
a best match block will be higher,

725
00:37:41,520 --> 00:37:43,840
that means you can find a block which is more similar

726
00:37:43,840 --> 00:37:45,140
to your current block.

727
00:37:45,140 --> 00:37:48,920
If you can find a block among all the reference block

728
00:37:48,920 --> 00:37:51,880
that's more similar, that means your arrow is smaller,

729
00:37:51,880 --> 00:37:54,600
arrow is smaller means that you can compress it

730
00:37:54,600 --> 00:37:58,580
into a smaller bit rate, okay, so that's the advantage,

731
00:37:58,580 --> 00:38:01,540
but the disadvantage is similar to the bit frame,

732
00:38:01,540 --> 00:38:04,440
that means during the coding time,

733
00:38:04,440 --> 00:38:06,600
it's going to take a long time to do it,

734
00:38:06,600 --> 00:38:09,520
and for some application, you cannot afford to wait,

735
00:38:09,520 --> 00:38:11,980
right, especially for those, you know,

736
00:38:11,980 --> 00:38:15,440
kind of real-time teleconferencing

737
00:38:15,440 --> 00:38:17,420
or video conferencing application.

738
00:38:17,420 --> 00:38:19,200
Okay, so anyway, there's this option

739
00:38:19,200 --> 00:38:20,740
to support multiple reference frame,

740
00:38:20,740 --> 00:38:22,120
you may choose not to use it,

741
00:38:22,120 --> 00:38:26,200
but there's a such option for you to choose, right, okay,

742
00:38:26,200 --> 00:38:29,600
and then another important difference is that

743
00:38:29,600 --> 00:38:32,600
for the P frame, the intra frame here, the I frame,

744
00:38:32,600 --> 00:38:34,680
I frame is known as intra frame,

745
00:38:34,680 --> 00:38:36,560
also known as intra-coded frame,

746
00:38:36,560 --> 00:38:38,240
they all refer to the same thing,

747
00:38:38,240 --> 00:38:40,080
so for the I frame here, right,

748
00:38:40,080 --> 00:38:43,800
they use a directional spatial prediction, okay,

749
00:38:43,800 --> 00:38:45,480
so later on, we're going to spend some time

750
00:38:45,480 --> 00:38:49,020
to see what's the meaning of this directional spatial

751
00:38:49,020 --> 00:38:52,400
prediction for the coding of the intra frame,

752
00:38:52,400 --> 00:38:55,760
and then also it make use of improved in-loop

753
00:38:55,760 --> 00:38:57,680
deblocking filtering, so this point,

754
00:38:57,680 --> 00:38:59,780
actually we have already mentioned earlier.

755
00:38:59,780 --> 00:39:04,240
Right, so a bit more to continue on,

756
00:39:04,240 --> 00:39:07,200
so for this 264, they also make use of

757
00:39:07,200 --> 00:39:10,080
a context adaptive variable length coding,

758
00:39:10,080 --> 00:39:14,880
and context adaptive binary aromatic coding here,

759
00:39:14,880 --> 00:39:17,000
so these two are entropy,

760
00:39:17,000 --> 00:39:19,200
both are entropy encoding technique,

761
00:39:19,200 --> 00:39:20,920
so what it does is that, for example,

762
00:39:20,920 --> 00:39:23,760
for this context adaptive variable length coding,

763
00:39:23,760 --> 00:39:27,460
is that as opposed to the previous variable length coding,

764
00:39:27,460 --> 00:39:29,700
you only have one codebook, yeah,

765
00:39:29,700 --> 00:39:32,360
or you only use one single Huffman codebook,

766
00:39:32,360 --> 00:39:34,920
for example, right, to do the encoding,

767
00:39:34,920 --> 00:39:39,520
but for 264, you'll look at the context,

768
00:39:39,520 --> 00:39:43,120
what is the current situation for this particular frame is,

769
00:39:43,120 --> 00:39:47,000
and then you may choose one of the most suitable

770
00:39:47,000 --> 00:39:50,000
Huffman codebook or variable length coding

771
00:39:50,000 --> 00:39:52,080
to help to perform the compression,

772
00:39:52,080 --> 00:39:53,640
so that means you'll look at the context

773
00:39:53,640 --> 00:39:55,440
of the current frame, okay,

774
00:39:55,440 --> 00:39:58,480
and then try to choose one of the most suitable

775
00:39:58,480 --> 00:40:01,040
codebook to do the compression, okay,

776
00:40:01,040 --> 00:40:02,360
that's why it's known as

777
00:40:02,360 --> 00:40:05,600
a context adaptive variable length coding, okay,

778
00:40:05,600 --> 00:40:08,960
so this aromatic, binary aromatic coding

779
00:40:08,960 --> 00:40:10,620
is based on the same idea,

780
00:40:10,620 --> 00:40:13,160
so later on we'll talk a little bit more about that,

781
00:40:13,160 --> 00:40:15,040
okay, so it's more robust to error,

782
00:40:15,040 --> 00:40:18,800
data error and loss, okay,

783
00:40:18,800 --> 00:40:21,000
it still employs hybrid coding,

784
00:40:21,000 --> 00:40:23,040
that means you try to encode,

785
00:40:23,040 --> 00:40:26,640
the intra-frame is encoded independently, okay,

786
00:40:26,640 --> 00:40:29,440
right, so, and then you have the other reference frame

787
00:40:29,440 --> 00:40:32,600
that make use of inter-frame motion,

788
00:40:32,600 --> 00:40:34,560
estimation and compensation,

789
00:40:34,560 --> 00:40:37,200
and afterwards, right, the residue error,

790
00:40:37,200 --> 00:40:39,380
you use the transform coding,

791
00:40:39,380 --> 00:40:42,060
in this case it's your integer transform,

792
00:40:42,060 --> 00:40:46,080
so the basic principle is still kind of

793
00:40:46,080 --> 00:40:48,360
inherit some of the basic idea before,

794
00:40:48,360 --> 00:40:51,520
yeah, but it has a relatively major improvement

795
00:40:51,520 --> 00:40:53,640
as compared to the earlier standards,

796
00:40:55,040 --> 00:40:59,420
okay, so let's start off with the motion compensation,

797
00:40:59,420 --> 00:41:02,000
so earlier on we mentioned that for 264,

798
00:41:02,000 --> 00:41:05,600
it actually use a variable block size motion compensation,

799
00:41:05,600 --> 00:41:07,700
okay, so what it means is now,

800
00:41:07,700 --> 00:41:10,400
as opposed to the previous standard,

801
00:41:10,400 --> 00:41:13,320
which always use 16 by 16 blocker,

802
00:41:13,320 --> 00:41:16,040
for H.264 it can use, you know,

803
00:41:16,040 --> 00:41:20,320
either 16 by 16, right, which is known as the M type,

804
00:41:20,320 --> 00:41:22,680
or eight by eight partition,

805
00:41:22,680 --> 00:41:25,080
which is called the eight by eight type here, right,

806
00:41:25,080 --> 00:41:29,240
so it can make use of these two different block size here,

807
00:41:29,240 --> 00:41:31,080
right, and then for each of these block size here,

808
00:41:31,080 --> 00:41:33,400
you can actually further partition it,

809
00:41:33,400 --> 00:41:34,640
for example, this M type,

810
00:41:34,640 --> 00:41:37,920
you can further partition into two eight by 16,

811
00:41:37,920 --> 00:41:39,200
all right, two horizontal one,

812
00:41:39,200 --> 00:41:41,480
or two vertical 16 by eight,

813
00:41:41,480 --> 00:41:43,320
or four eight by eight,

814
00:41:43,320 --> 00:41:45,760
actually each of these you can further partition it

815
00:41:45,760 --> 00:41:48,840
into, you know, ultimately four by four, okay,

816
00:41:48,840 --> 00:41:51,840
so therefore you can see that there's many different kind of

817
00:41:52,880 --> 00:41:55,820
you know, different blocks that you can partition into,

818
00:41:55,820 --> 00:41:58,920
so likewise for this particular eight by eight block,

819
00:41:58,920 --> 00:42:01,480
you can also partition into four by eight,

820
00:42:01,480 --> 00:42:04,400
eight by four, and also four by four blocks here, right,

821
00:42:04,400 --> 00:42:07,600
so this particular ability to use different block sizes

822
00:42:07,600 --> 00:42:09,080
to cater for different needs,

823
00:42:09,080 --> 00:42:11,000
for example, sometimes your certain blocks

824
00:42:11,000 --> 00:42:12,800
is actually quite smooth, right,

825
00:42:12,800 --> 00:42:14,720
there's not lots of texture,

826
00:42:14,720 --> 00:42:19,200
then you can use this kind of 16 by 16 block to encode it,

827
00:42:19,200 --> 00:42:21,280
right, to represent, it's quite good already,

828
00:42:21,280 --> 00:42:23,480
but sometimes you have some certain region

829
00:42:23,480 --> 00:42:25,460
that lots of detail or texture,

830
00:42:25,460 --> 00:42:28,900
then you may want to choose some smaller blocks

831
00:42:28,900 --> 00:42:32,520
to represent it, okay, so that's the basic idea.

832
00:42:32,520 --> 00:42:35,060
Okay, so anyway, by default,

833
00:42:35,060 --> 00:42:37,300
the macro block size is 16 by 16, right,

834
00:42:37,300 --> 00:42:40,840
and then each of these starting from 16 by 16,

835
00:42:40,840 --> 00:42:42,600
or eight by eight, you can further partition

836
00:42:42,600 --> 00:42:46,860
into smaller partition, as illustrated in this figure.

837
00:42:49,140 --> 00:42:51,720
Right, okay, so the next topic that we want to talk about

838
00:42:51,720 --> 00:42:54,080
is the motion compensation.

839
00:42:54,080 --> 00:42:57,960
So for H.264, right, the motion compensation,

840
00:42:57,960 --> 00:42:59,180
estimation and compensation,

841
00:42:59,180 --> 00:43:02,480
is up to a quarter pixel accuracy, okay,

842
00:43:02,480 --> 00:43:06,740
so quarter pixel accuracy in the Luma channel, okay,

843
00:43:06,740 --> 00:43:11,200
so the values at the half pixels and the quarter pixels

844
00:43:11,200 --> 00:43:14,620
can be obtained through interpolation, right,

845
00:43:14,620 --> 00:43:16,120
so for this point here, right,

846
00:43:16,120 --> 00:43:20,220
I'll just quickly move to this particular slide here,

847
00:43:20,220 --> 00:43:22,700
so for example, right, for this particular slide here,

848
00:43:22,700 --> 00:43:25,380
these are some integer pixel value, okay,

849
00:43:25,380 --> 00:43:27,760
so for example, you have an image, right,

850
00:43:27,760 --> 00:43:30,940
this particular point here, okay,

851
00:43:30,940 --> 00:43:35,060
these pixels shown as in this kind of shaded color,

852
00:43:35,060 --> 00:43:37,340
these are the original pixel value,

853
00:43:37,340 --> 00:43:39,340
so all the original pixel value,

854
00:43:39,340 --> 00:43:42,380
so you can actually perform interpolation

855
00:43:42,380 --> 00:43:45,100
to estimate what is the pixel values,

856
00:43:45,100 --> 00:43:46,300
so for example, each of these,

857
00:43:46,300 --> 00:43:47,960
they are some, you can estimate,

858
00:43:47,960 --> 00:43:50,400
they are intermediate values here,

859
00:43:50,400 --> 00:43:52,800
but we will only pay our attention

860
00:43:52,800 --> 00:43:55,420
to these current pixels here, okay,

861
00:43:55,420 --> 00:43:57,820
so these four are integer pixel,

862
00:43:57,820 --> 00:44:00,140
we will only pay our attention to this,

863
00:44:00,140 --> 00:44:02,180
not all these subpixel values

864
00:44:02,180 --> 00:44:04,620
within these four pixel values here,

865
00:44:04,620 --> 00:44:07,500
but the same actually happens to all the other pixels,

866
00:44:07,500 --> 00:44:10,240
yeah, but we are just focusing at these current pixels here,

867
00:44:10,240 --> 00:44:12,120
so you can see that, right,

868
00:44:12,120 --> 00:44:13,840
even this integer pixel value,

869
00:44:13,840 --> 00:44:16,340
actually you can try to use interpolation

870
00:44:16,340 --> 00:44:20,120
to guess or to estimate what are the values in between,

871
00:44:20,120 --> 00:44:22,440
for example, these values in between,

872
00:44:22,440 --> 00:44:25,220
so for these values in between here and here,

873
00:44:25,220 --> 00:44:27,840
this is a half pixel accuracy, right,

874
00:44:27,840 --> 00:44:29,780
so you can see this is integer pixel,

875
00:44:29,780 --> 00:44:32,460
for example, this pixel, say, three,

876
00:44:32,460 --> 00:44:34,000
this is pixel four, right,

877
00:44:34,000 --> 00:44:37,440
so this pixel now is 3.5, so it's .5,

878
00:44:37,440 --> 00:44:39,580
so this is a half pixel accuracy,

879
00:44:39,580 --> 00:44:43,400
so B and H is half pixel accuracy, right,

880
00:44:43,400 --> 00:44:45,460
and then this A here now is,

881
00:44:45,460 --> 00:44:46,660
you can see quite clearly,

882
00:44:46,660 --> 00:44:48,940
is a quarter pixel accuracy,

883
00:44:48,940 --> 00:44:53,160
so therefore, by trying to guess or estimate

884
00:44:53,160 --> 00:44:58,160
or interpolate the values between this integer pixel,

885
00:44:58,160 --> 00:45:01,740
right, once we have found these values here,

886
00:45:01,740 --> 00:45:04,160
then later on, when we perform the estimation,

887
00:45:04,160 --> 00:45:06,900
we can find which of this position

888
00:45:06,900 --> 00:45:09,820
it correspond to the best match block, okay,

889
00:45:09,820 --> 00:45:12,380
so this is the idea that I've been saying

890
00:45:12,380 --> 00:45:13,600
a few times already.

891
00:45:13,600 --> 00:45:18,400
So our focus for the next few slides

892
00:45:18,400 --> 00:45:20,480
will be to see how can we perform

893
00:45:20,480 --> 00:45:23,960
this particular kind of interpolation

894
00:45:23,960 --> 00:45:28,120
to support the motion estimation and compensation.

895
00:45:28,120 --> 00:45:29,960
Right, so let's continue.

896
00:45:29,960 --> 00:45:33,600
Okay, so the pixel value, right,

897
00:45:33,600 --> 00:45:35,200
B and H at half pixel position

898
00:45:35,200 --> 00:45:39,120
are estimated using a six-step filter here,

899
00:45:39,120 --> 00:45:41,860
so if you refer to this figure, B and H is here,

900
00:45:41,860 --> 00:45:44,560
so this B and H is a half pixel value,

901
00:45:44,560 --> 00:45:46,240
so this half pixel value here

902
00:45:46,240 --> 00:45:50,040
is estimated using a six-step filter here.

903
00:45:50,040 --> 00:45:52,280
Six-step filter means that it's a filter

904
00:45:52,280 --> 00:45:54,820
that makes use of six coefficients, right,

905
00:45:54,820 --> 00:45:56,660
so you can see, right, it's a filter

906
00:45:56,660 --> 00:45:58,800
that makes use of six coefficients,

907
00:45:58,800 --> 00:46:03,800
one, minus five, 20, 20, minus five, one, okay?

908
00:46:03,800 --> 00:46:06,220
Right, so specifically, right,

909
00:46:06,220 --> 00:46:08,000
if you want to, for example,

910
00:46:08,000 --> 00:46:10,400
calculate this value B1, how do you do it?

911
00:46:10,400 --> 00:46:12,820
If you want to calculate this, okay,

912
00:46:12,820 --> 00:46:15,520
actually, at this stage here, I'll just,

913
00:46:15,520 --> 00:46:17,820
okay, maybe let me just, right,

914
00:46:17,820 --> 00:46:19,740
so these equations here are the same

915
00:46:19,740 --> 00:46:21,240
as these equations here, right,

916
00:46:21,240 --> 00:46:24,460
so we'll use this equation to show it, right,

917
00:46:24,460 --> 00:46:25,960
so for example, if you want to calculate

918
00:46:25,960 --> 00:46:28,180
this particular pixel value, what do you do?

919
00:46:28,180 --> 00:46:29,020
Right, so first of all,

920
00:46:29,020 --> 00:46:31,600
you calculate intermediate value B1 first,

921
00:46:31,600 --> 00:46:33,420
so this intermediate value you can see

922
00:46:33,420 --> 00:46:36,060
is by performing filtering operation

923
00:46:36,060 --> 00:46:39,760
on this pixel value E to J,

924
00:46:39,760 --> 00:46:42,060
so where is this pixel value E to J?

925
00:46:42,060 --> 00:46:46,780
It's actually at this position, EFGHIJ,

926
00:46:46,780 --> 00:46:49,340
so therefore, if you want to estimate

927
00:46:49,340 --> 00:46:52,140
or interpolate this pixel value B,

928
00:46:52,140 --> 00:46:56,020
first of all, you calculate the intermediate value B1 first,

929
00:46:56,020 --> 00:46:58,640
and afterwards, once you get this B1 here,

930
00:46:58,640 --> 00:47:02,020
you take this B1 plus 16, right,

931
00:47:02,020 --> 00:47:03,700
and then afterwards, you convert this

932
00:47:03,700 --> 00:47:07,060
into a binary number, and you shift to the,

933
00:47:08,220 --> 00:47:13,220
no, shift to the right by five position, okay,

934
00:47:13,220 --> 00:47:16,280
so this particular process here is that,

935
00:47:16,280 --> 00:47:19,540
okay, you take this value, intermediate value B1,

936
00:47:19,540 --> 00:47:21,280
you allow 16, all right,

937
00:47:21,280 --> 00:47:24,080
and then you convert this into a binary number,

938
00:47:24,080 --> 00:47:26,120
and then you do a binary shift, right,

939
00:47:26,120 --> 00:47:27,360
this value, you shift it,

940
00:47:27,360 --> 00:47:30,960
so this particular process is actually equivalent to,

941
00:47:30,960 --> 00:47:34,120
you take this value B1, you divide by 32,

942
00:47:34,120 --> 00:47:36,760
because if it's a binary number,

943
00:47:36,760 --> 00:47:41,160
every time you shift to the right by one spot,

944
00:47:41,160 --> 00:47:42,440
that means you divide by two,

945
00:47:42,440 --> 00:47:44,880
but you divide by two, divide by two, divide by two,

946
00:47:44,880 --> 00:47:47,480
so if you divide by two five times,

947
00:47:47,480 --> 00:47:49,440
that means you divide by two to the power of five,

948
00:47:49,440 --> 00:47:52,860
which means you divide by 32, right,

949
00:47:52,860 --> 00:47:56,160
so the reason why you also add half of it, 16 here,

950
00:47:56,160 --> 00:47:59,000
is because you just want to make sure

951
00:47:59,000 --> 00:48:02,920
that it takes into account the rounding effect,

952
00:48:02,920 --> 00:48:05,680
yeah, it takes into account the rounding effect.

953
00:48:05,680 --> 00:48:08,480
Okay, so anyway, right,

954
00:48:08,480 --> 00:48:11,600
so that's how you can use these values

955
00:48:11,600 --> 00:48:14,200
to approximate your value for B, okay?

956
00:48:14,200 --> 00:48:16,960
So if you want to estimate your value for H,

957
00:48:16,960 --> 00:48:18,320
then what you do is that, first of all,

958
00:48:18,320 --> 00:48:23,320
you take this pixel value ACGMRT, okay?

959
00:48:23,320 --> 00:48:26,080
You use this filter coefficient to multiply,

960
00:48:26,080 --> 00:48:28,380
to generate your intermediate H1,

961
00:48:28,380 --> 00:48:31,380
so this formula here actually means that, right,

962
00:48:31,380 --> 00:48:35,880
the H1, you divide it by 32, and you do the rounding

963
00:48:35,880 --> 00:48:38,840
to the nearest integer, that would give you H,

964
00:48:38,840 --> 00:48:41,520
but in terms of the programming,

965
00:48:41,520 --> 00:48:44,840
usually it's easier if you just simply add up,

966
00:48:44,840 --> 00:48:47,840
because this number in binary representation,

967
00:48:47,840 --> 00:48:49,980
often is in binary representation,

968
00:48:49,980 --> 00:48:52,960
this value here, you just simply add up with 16, right,

969
00:48:52,960 --> 00:48:55,360
and then you do the shift to the right five times,

970
00:48:55,360 --> 00:48:57,200
it's faster, okay?

971
00:48:57,200 --> 00:49:00,160
But actually, in terms of the objective, it's the same.

972
00:49:01,040 --> 00:49:03,300
Right, okay, so let's continue, so with that,

973
00:49:03,300 --> 00:49:06,100
that means you can calculate B and H value here.

974
00:49:06,100 --> 00:49:08,660
Right, so let's continue.

975
00:49:08,660 --> 00:49:13,660
So therefore, by looking at some surrounding pixel value,

976
00:49:13,660 --> 00:49:17,100
right, you should be able to estimate, okay,

977
00:49:17,100 --> 00:49:20,740
or interplay the subpixel value B and H here, okay?

978
00:49:20,740 --> 00:49:24,140
So early on, you can see this particular process here

979
00:49:24,140 --> 00:49:28,540
is actually equivalent to this B1, right?

980
00:49:28,540 --> 00:49:30,820
You divide by two to the power of five,

981
00:49:30,820 --> 00:49:33,100
which is 32, and then you ground it

982
00:49:33,100 --> 00:49:38,100
to the nearest integer value, that is a B, yeah?

983
00:49:38,100 --> 00:49:41,900
But in terms of the implementation in the,

984
00:49:41,900 --> 00:49:45,300
you know, the coder, it's more efficient to do it,

985
00:49:45,300 --> 00:49:48,940
okay, so anyway, this is the same as this,

986
00:49:48,940 --> 00:49:51,540
but in terms of the implementation and coder,

987
00:49:51,540 --> 00:49:53,660
it's easier to do it this way.

988
00:49:53,660 --> 00:49:54,860
Yeah, you add up with 16,

989
00:49:54,860 --> 00:49:57,520
because they are all in binary numbers already,

990
00:49:57,520 --> 00:50:01,080
you just shift, okay, to the right five spots, right,

991
00:50:01,080 --> 00:50:03,460
to throw out the spots here.

992
00:50:03,460 --> 00:50:08,200
Okay, so anyway, yeah, you can either interpret as,

993
00:50:08,200 --> 00:50:11,060
no, this is how you do it to find this B,

994
00:50:11,060 --> 00:50:13,160
or if you are more comfortable,

995
00:50:13,160 --> 00:50:16,520
you can also interpret as converting it into binary number

996
00:50:16,520 --> 00:50:20,680
and then do a shifting by five times, okay, to the right.

997
00:50:20,680 --> 00:50:23,420
Okay, and afterwards, this B and H,

998
00:50:23,420 --> 00:50:25,340
finally this B and H value will be clipped

999
00:50:25,340 --> 00:50:27,440
to the image range, which is typically

1000
00:50:27,440 --> 00:50:30,940
from zero to 255, right, okay?

1001
00:50:30,940 --> 00:50:33,640
So we kind of give a very quick introduction,

1002
00:50:33,640 --> 00:50:37,040
so let's just, you know, repeat the steps here, right,

1003
00:50:37,040 --> 00:50:39,220
so again, what's this particular story here,

1004
00:50:39,220 --> 00:50:41,060
is that number one is that you have all this

1005
00:50:41,060 --> 00:50:44,020
integer pixel value that we know, okay,

1006
00:50:44,020 --> 00:50:45,740
coming from your reference frame.

1007
00:50:45,740 --> 00:50:48,380
We have all this integer value here,

1008
00:50:48,380 --> 00:50:51,740
now our focus is to try to find the subpixel

1009
00:50:51,740 --> 00:50:56,580
and the quarter pixel value for this particular region here.

1010
00:50:56,580 --> 00:50:59,060
Okay, so early on just now we already said, right,

1011
00:50:59,060 --> 00:51:02,120
if you want to find this pixel value, for example, B,

1012
00:51:02,120 --> 00:51:04,960
okay, if you want to find this pixel value,

1013
00:51:04,960 --> 00:51:07,880
this half pixel value B, right,

1014
00:51:07,880 --> 00:51:10,460
so first of all, we use this equation.

1015
00:51:10,460 --> 00:51:13,600
So this equation is also known as filtering, okay,

1016
00:51:13,600 --> 00:51:17,540
using, okay, this pixel value, one, two, three, four,

1017
00:51:17,540 --> 00:51:22,540
five, six, right, so, which is corresponding EFGHIJ, okay?

1018
00:51:24,100 --> 00:51:27,100
Right, so you'll get your intermediate result B1,

1019
00:51:27,100 --> 00:51:30,060
and then once you get the intermediate result B1,

1020
00:51:30,060 --> 00:51:31,580
you can then use this process.

1021
00:51:31,580 --> 00:51:34,220
So this process is equivalent to,

1022
00:51:34,220 --> 00:51:37,020
you divide by 32, you round to the nearest integer,

1023
00:51:37,020 --> 00:51:40,220
then you'll get your integer value for B.

1024
00:51:40,220 --> 00:51:44,260
So by using the same process, if you want to find H here,

1025
00:51:44,260 --> 00:51:46,420
right, first of all, you calculate your intermediate value

1026
00:51:46,420 --> 00:51:50,840
H1 by using this one, two, three, four, five, six, yeah,

1027
00:51:50,840 --> 00:51:54,160
using that, you'll get your intermediate value H1,

1028
00:51:54,160 --> 00:51:56,620
and afterwards, by doing this equation,

1029
00:51:56,620 --> 00:51:59,300
which is the same as divided by 32 and round

1030
00:51:59,300 --> 00:52:02,800
to the nearest integer, you'll get this value H.

1031
00:52:02,800 --> 00:52:05,580
So therefore, B and H you can find already.

1032
00:52:05,580 --> 00:52:08,940
And afterwards, right, suppose if you want to find now

1033
00:52:08,940 --> 00:52:12,360
this J, this value here.

1034
00:52:12,360 --> 00:52:14,960
So if you want to find this value J here,

1035
00:52:14,960 --> 00:52:16,580
then first of all, you have to get

1036
00:52:16,580 --> 00:52:18,640
this intermediate value J1.

1037
00:52:18,640 --> 00:52:21,380
So this intermediate value J1 will depend on,

1038
00:52:21,380 --> 00:52:24,980
you can see, this AA1,

1039
00:52:24,980 --> 00:52:31,260
okay, this AA, BB, H, right.

1040
00:52:31,260 --> 00:52:36,260
Okay, this one here, BB1, the H1, M1, CC1, DT1,

1041
00:52:36,260 --> 00:52:40,700
is actually the same as how you calculate this B here.

1042
00:52:40,700 --> 00:52:42,020
You can see, right.

1043
00:52:42,020 --> 00:52:46,160
So for example, this is, right, you use this five,

1044
00:52:46,160 --> 00:52:49,420
your six pixel value, one, two, three, four, five, six.

1045
00:52:49,420 --> 00:52:51,780
You can first of all calculate the intermediate values

1046
00:52:51,780 --> 00:52:55,500
of AA1, and afterwards AA, okay, similar to this.

1047
00:52:55,500 --> 00:52:58,660
So in other words, actually by using the same idea,

1048
00:52:58,660 --> 00:53:02,460
you can actually find the value here, AA1, BB1,

1049
00:53:02,460 --> 00:53:05,500
the intermediate value, okay, before you reach AA,

1050
00:53:05,500 --> 00:53:07,780
AA1, BB1, and so on and so forth.

1051
00:53:07,780 --> 00:53:10,720
So that means you can actually calculate these values here.

1052
00:53:10,720 --> 00:53:11,560
Okay.

1053
00:53:11,560 --> 00:53:14,540
So once you can get those values,

1054
00:53:14,540 --> 00:53:17,080
then you can use to calculate your J1.

1055
00:53:17,080 --> 00:53:18,760
So once you can get your J1,

1056
00:53:18,760 --> 00:53:22,360
you can use the same process to calculate J, okay.

1057
00:53:22,360 --> 00:53:26,200
So in other words, you can use this formula here

1058
00:53:26,200 --> 00:53:29,000
to calculate your J, yeah.

1059
00:53:29,000 --> 00:53:33,440
Okay, and then once you have found B, H, and J,

1060
00:53:33,440 --> 00:53:35,240
if you want to find this A,

1061
00:53:35,240 --> 00:53:40,120
you can see this A is pretty much B plus H plus one,

1062
00:53:40,120 --> 00:53:42,640
and then afterwards, shift to the left,

1063
00:53:42,640 --> 00:53:43,600
shift to the right by one,

1064
00:53:43,600 --> 00:53:46,880
that means divided by two, round to the nearest integer.

1065
00:53:46,880 --> 00:53:50,860
Okay, yeah, so that means we can then find out the value A,

1066
00:53:50,860 --> 00:53:52,760
and if you want to find the value E,

1067
00:53:52,760 --> 00:53:56,640
it's pretty much take the average between B and H, okay,

1068
00:53:56,640 --> 00:53:58,820
you can see B plus H plus one,

1069
00:53:58,820 --> 00:54:01,880
and then shift to the right by one,

1070
00:54:01,880 --> 00:54:03,340
that means divided by two.

1071
00:54:03,340 --> 00:54:05,360
So that means essentially you are taking the average

1072
00:54:05,360 --> 00:54:08,980
between B and H, okay, and round to the nearest integer.

1073
00:54:08,980 --> 00:54:12,360
Okay, so this is just some equation to show you

1074
00:54:12,360 --> 00:54:15,040
how you can perform the interpolation, right,

1075
00:54:15,040 --> 00:54:17,880
in the event you do not know how to do it.

1076
00:54:17,880 --> 00:54:20,920
So anyway, right, we'll have one exercise

1077
00:54:20,920 --> 00:54:22,440
for you to give it a try, right,

1078
00:54:22,440 --> 00:54:24,600
we are not going to go into too much detail,

1079
00:54:24,600 --> 00:54:26,200
but just one simple exercise,

1080
00:54:26,200 --> 00:54:28,520
at least let you have a feel about

1081
00:54:28,520 --> 00:54:31,980
how do we perform these interpolations here.

1082
00:54:31,980 --> 00:54:33,920
Okay, so in this exercise here, right,

1083
00:54:33,920 --> 00:54:36,480
the same similar setting as before, okay,

1084
00:54:36,480 --> 00:54:39,240
so these are the integer pixel value, right,

1085
00:54:39,240 --> 00:54:41,840
and then these are the equation that's given, okay.

1086
00:54:42,880 --> 00:54:47,220
Right, okay, so to estimate the half pixel, okay,

1087
00:54:47,220 --> 00:54:51,640
and then to estimate the quarter pixel at A and E, right,

1088
00:54:51,640 --> 00:54:53,920
so all the formulas are given, right,

1089
00:54:53,920 --> 00:54:56,760
and then all the relevant pixels are also given,

1090
00:54:56,760 --> 00:54:59,840
so the pixel values are given, okay,

1091
00:54:59,840 --> 00:55:02,240
A is 50, 60, and so on and so forth.

1092
00:55:02,240 --> 00:55:07,180
So they ask you to find the half pixel value at B and H,

1093
00:55:07,180 --> 00:55:10,940
and the quarter pixel value at A and E, okay,

1094
00:55:10,940 --> 00:55:14,160
so yeah, I'll give you a bit of time to give it a try,

1095
00:55:14,160 --> 00:55:16,480
and then we'll go through the answers together.

1096
00:55:16,480 --> 00:55:19,320
(papers rustling)

1097
00:55:19,320 --> 00:55:22,160
(papers rustling)

1098
00:55:22,160 --> 00:55:25,000
(papers rustling)

1099
00:55:25,000 --> 00:55:27,840
(papers rustling)

1100
00:55:27,840 --> 00:55:30,680
(papers rustling)

1101
00:55:30,680 --> 00:55:33,520
(papers rustling)

1102
00:55:33,520 --> 00:55:36,360
(papers rustling)

1103
00:55:36,360 --> 00:55:39,200
(papers rustling)

1104
00:55:39,200 --> 00:55:42,040
(papers rustling)

1105
00:55:42,040 --> 00:55:44,880
(papers rustling)

1106
00:55:44,880 --> 00:55:47,720
(papers rustling)

1107
00:55:47,720 --> 00:55:50,560
(papers rustling)

1108
00:55:50,560 --> 00:55:53,400
(papers rustling)

1109
00:55:53,400 --> 00:55:56,240
(papers rustling)

1110
00:55:56,240 --> 00:55:59,080
(papers rustling)

1111
00:55:59,080 --> 00:56:01,920
(papers rustling)

1112
00:56:01,920 --> 00:56:04,760
(papers rustling)

1113
00:56:04,760 --> 00:56:07,600
(papers rustling)

1114
00:56:07,600 --> 00:56:10,440
(papers rustling)

1115
00:56:10,440 --> 00:56:13,280
(papers rustling)

1116
00:56:13,280 --> 00:56:16,120
(papers rustling)

1117
00:56:16,120 --> 00:56:18,960
(papers rustling)

1118
00:56:18,960 --> 00:56:21,800
(papers rustling)

1119
00:56:21,800 --> 00:56:24,640
(papers rustling)

1120
00:56:24,640 --> 00:56:27,480
(papers rustling)

1121
00:56:27,480 --> 00:56:30,320
(papers rustling)

1122
00:56:31,160 --> 00:56:33,400
(coughing)

1123
00:56:33,400 --> 00:56:36,240
(papers rustling)

1124
00:56:36,240 --> 00:56:39,080
(papers rustling)

1125
00:56:39,080 --> 00:56:41,920
(papers rustling)

1126
00:56:41,920 --> 00:56:44,760
(papers rustling)

1127
00:56:44,760 --> 00:56:47,600
(papers rustling)

1128
00:56:47,600 --> 00:56:50,440
(papers rustling)

1129
00:56:50,440 --> 00:56:53,280
(papers rustling)

1130
00:56:54,600 --> 00:56:57,440
(papers rustling)

1131
00:56:57,440 --> 00:57:00,280
(papers rustling)

1132
00:57:00,280 --> 00:57:03,120
(papers rustling)

1133
00:57:03,120 --> 00:57:05,960
(papers rustling)

1134
00:57:05,960 --> 00:57:08,800
(papers rustling)

1135
00:57:08,800 --> 00:57:11,640
(papers rustling)

1136
00:57:11,640 --> 00:57:14,480
(papers rustling)

1137
00:57:14,480 --> 00:57:17,320
(papers rustling)

1138
00:57:17,320 --> 00:57:20,160
(papers rustling)

1139
00:57:20,160 --> 00:57:23,000
(papers rustling)

1140
00:57:23,000 --> 00:57:25,840
(papers rustling)

1141
00:57:25,840 --> 00:57:28,680
(papers rustling)

1142
00:57:28,680 --> 00:57:31,520
(papers rustling)

1143
00:57:31,520 --> 00:57:34,360
(papers rustling)

1144
00:57:34,360 --> 00:57:37,200
(papers rustling)

1145
00:57:37,200 --> 00:57:40,040
(papers rustling)

1146
00:57:40,040 --> 00:57:42,880
(papers rustling)

1147
00:57:42,880 --> 00:57:45,720
(papers rustling)

1148
00:57:45,720 --> 00:57:48,560
(papers rustling)

1149
00:57:48,560 --> 00:57:51,400
(papers rustling)

1150
00:57:51,400 --> 00:57:54,240
(papers rustling)

1151
00:57:54,240 --> 00:57:57,080
(papers rustling)

1152
00:57:57,080 --> 00:57:59,920
(papers rustling)

1153
00:57:59,920 --> 00:58:02,760
(papers rustling)

1154
00:58:02,760 --> 00:58:05,600
(papers rustling)

1155
00:58:05,600 --> 00:58:08,440
(papers rustling)

1156
00:58:08,440 --> 00:58:11,280
(papers rustling)

1157
00:58:11,280 --> 00:58:14,120
(papers rustling)

1158
00:58:14,120 --> 00:58:16,960
(papers rustling)

1159
00:58:16,960 --> 00:58:19,800
(papers rustling)

1160
00:58:19,800 --> 00:58:22,640
(papers rustling)

1161
00:58:22,640 --> 00:58:25,480
(papers rustling)

1162
00:58:25,480 --> 00:58:28,320
(papers rustling)

1163
00:58:28,320 --> 00:58:31,160
(papers rustling)

1164
00:58:31,160 --> 00:58:34,000
(papers rustling)

1165
00:58:59,920 --> 00:59:02,760
- Okay, so at least you have some time to think about it.

1166
00:59:02,760 --> 00:59:06,680
Right, so yeah, so actually when the formula is provided,

1167
00:59:06,680 --> 00:59:08,680
it's relatively straightforward, right?

1168
00:59:08,680 --> 00:59:11,120
The only thing about this particular part,

1169
00:59:11,120 --> 00:59:15,920
which is a little bit, may not be so familiar.

1170
00:59:15,920 --> 00:59:18,680
So as I mentioned, this particular part here

1171
00:59:18,680 --> 00:59:23,680
is actually equivalent to, you just take B1 divided by 32

1172
00:59:23,680 --> 00:59:28,080
and then round it to the nearest integer.

1173
00:59:28,080 --> 00:59:30,640
Then it's equivalent to these steps already.

1174
00:59:30,640 --> 00:59:35,360
Yeah, okay, so let's try to go through the answers together.

1175
00:59:35,360 --> 00:59:51,080
Right, okay, so the steps, there's nothing tricky about it.

1176
00:59:51,080 --> 00:59:53,400
It's just, you know, pretty much just make sure

1177
00:59:53,400 --> 00:59:55,880
that you apply the formula, right?

1178
00:59:55,880 --> 01:00:00,880
And then, yeah, so for example, for, yeah.

1179
01:00:00,880 --> 01:00:13,960
Yeah, when you want to find out this particular value B,

1180
01:00:13,960 --> 01:00:16,560
first of all, you need to calculate this,

1181
01:00:16,560 --> 01:00:18,480
the kind of intermediate value B1.

1182
01:00:18,480 --> 01:00:21,320
So you have this intermediate value B1.

1183
01:00:21,320 --> 01:00:22,900
You just plug in all the values

1184
01:00:22,900 --> 01:00:25,500
for the corresponding coefficients, okay?

1185
01:00:26,020 --> 01:00:30,000
Right, B is here, so corresponding coefficient here.

1186
01:00:30,000 --> 01:00:33,620
Just plug it in, do a bit of a calculation at home, right?

1187
01:00:33,620 --> 01:00:36,140
Or later on, you'll see that you get the intermediate value

1188
01:00:36,140 --> 01:00:38,260
for B1 and H1 here, right?

1189
01:00:38,260 --> 01:00:39,940
And afterwards, for these two steps here,

1190
01:00:39,940 --> 01:00:41,780
you can either convert it into binary number

1191
01:00:41,780 --> 01:00:44,900
and you do the shifting, which is what the computer would do,

1192
01:00:44,900 --> 01:00:47,740
or you just simply, you know, divide by 32

1193
01:00:47,740 --> 01:00:49,660
and round to the nearest integer, right?

1194
01:00:49,660 --> 01:00:53,300
And then if you do that, you'll see that B is 35 and H is 65.

1195
01:00:53,300 --> 01:00:55,220
That means you actually find the value

1196
01:00:55,220 --> 01:00:58,940
at this half pixel positions already.

1197
01:00:58,940 --> 01:01:01,660
And afterwards, if you want to find this value A, right?

1198
01:01:01,660 --> 01:01:05,620
So this value A is at this positions here.

1199
01:01:05,620 --> 01:01:07,980
So it's given by this formula here.

1200
01:01:07,980 --> 01:01:11,080
So this formula, you just, you know,

1201
01:01:11,080 --> 01:01:14,160
since you already just found out about B, right?

1202
01:01:14,160 --> 01:01:16,740
You also have the G value, right?

1203
01:01:16,740 --> 01:01:17,820
You can do this operation.

1204
01:01:17,820 --> 01:01:22,820
So this operation is the same as you take G plus B,

1205
01:01:22,900 --> 01:01:26,100
right, divided by 32, round to the nearest integer, right?

1206
01:01:26,100 --> 01:01:28,020
You can see it's 33, okay?

1207
01:01:28,020 --> 01:01:30,100
And then the likewise for this one,

1208
01:01:30,100 --> 01:01:33,820
you take 35, add up with 65, okay?

1209
01:01:33,820 --> 01:01:35,620
Plus one, right?

1210
01:01:35,620 --> 01:01:39,000
So this is actually your B and H that you found earlier on.

1211
01:01:39,000 --> 01:01:42,260
Okay, so 35 plus 65, okay?

1212
01:01:42,260 --> 01:01:44,460
You add them up, divided by 32,

1213
01:01:44,460 --> 01:01:45,960
round to the nearest integer.

1214
01:01:45,960 --> 01:01:48,720
Sometimes there's a little bit of ambiguity, right?

1215
01:01:48,720 --> 01:01:51,000
You know, sometimes if it's 0.5,

1216
01:01:51,000 --> 01:01:52,900
it can be, you know, going to both way,

1217
01:01:52,900 --> 01:01:54,640
either way we do the rounding.

1218
01:01:54,640 --> 01:01:56,260
But because we are doing,

1219
01:01:56,260 --> 01:01:58,580
if you use a computer to do the implementation,

1220
01:01:58,580 --> 01:02:00,140
actually it do the shifting.

1221
01:02:00,140 --> 01:02:02,420
That means usually it will round down, yeah?

1222
01:02:02,420 --> 01:02:05,600
So that's why the value is, in this case, is 51.

1223
01:02:05,600 --> 01:02:08,300
You can go and give it a try, yeah.

1224
01:02:08,300 --> 01:02:10,220
Okay, so that's pretty much, right,

1225
01:02:10,220 --> 01:02:14,060
so this particular exercise pretty much just tell you

1226
01:02:14,060 --> 01:02:17,620
that how you can actually use to perform,

1227
01:02:17,620 --> 01:02:21,120
use interpolation to find the sub-pixel value.

1228
01:02:21,120 --> 01:02:23,940
So once you can estimate a sub-pixel value,

1229
01:02:23,940 --> 01:02:27,120
then when you do the motion estimation,

1230
01:02:27,120 --> 01:02:31,640
then the accuracy can be up to a quarter

1231
01:02:31,640 --> 01:02:33,840
of a pixel value accuracy.

1232
01:02:33,840 --> 01:02:38,400
Okay, so that's this part, what it's trying to say.

1233
01:02:38,400 --> 01:02:40,840
So let's continue for a few more slides.

1234
01:02:40,840 --> 01:02:45,120
Right, okay, so for 264,

1235
01:02:45,120 --> 01:02:48,680
there's also some additional option that you can choose.

1236
01:02:48,680 --> 01:02:50,880
Right, so some additional option is that

1237
01:02:50,880 --> 01:02:54,120
when you do the video compression using 264,

1238
01:02:54,120 --> 01:02:56,600
you can choose not to use B-frame, okay?

1239
01:02:56,600 --> 01:02:59,100
So you have the option of not using B-frame.

1240
01:02:59,100 --> 01:03:00,600
So you can kind of easily think about

1241
01:03:00,600 --> 01:03:03,920
when are the cases you may not want to go for B-frame.

1242
01:03:03,920 --> 01:03:06,360
Without even reading the text,

1243
01:03:06,360 --> 01:03:08,940
you can use a common kind of understanding.

1244
01:03:08,940 --> 01:03:11,840
Where are the cases you may choose not to use B-frame?

1245
01:03:14,880 --> 01:03:18,120
When, you know, B-frame is good, right?

1246
01:03:18,120 --> 01:03:20,200
B-frame, because you can actually then,

1247
01:03:20,200 --> 01:03:22,080
you know, get a best match.

1248
01:03:22,080 --> 01:03:25,760
Chances of you getting a better match block is higher.

1249
01:03:25,760 --> 01:03:27,680
That means you can, you know, when this,

1250
01:03:27,680 --> 01:03:31,600
you can find a better, if this is a macro block,

1251
01:03:31,600 --> 01:03:33,800
the chances of you finding a better,

1252
01:03:33,800 --> 01:03:36,080
best match block is higher, right?

1253
01:03:36,080 --> 01:03:37,080
That means error is smaller,

1254
01:03:37,080 --> 01:03:39,260
you can compress it into a smaller bit rate.

1255
01:03:39,260 --> 01:03:40,720
So James-Pikin is good,

1256
01:03:40,720 --> 01:03:43,120
but what's the price you have to pay?

1257
01:03:43,120 --> 01:03:44,840
The price you have to pay is you have to do

1258
01:03:44,840 --> 01:03:49,280
a lot more motion estimation, and this is expensive.

1259
01:03:49,280 --> 01:03:51,800
So therefore what it means is that if your application

1260
01:03:51,800 --> 01:03:54,640
is meant for those fast application like

1261
01:03:54,640 --> 01:03:57,520
those close to video conferencing,

1262
01:03:57,520 --> 01:03:59,480
then you may not want to do,

1263
01:03:59,480 --> 01:04:03,320
you may not want to use B-frame because it can be slow.

1264
01:04:03,320 --> 01:04:05,280
Okay, so that's the reason.

1265
01:04:05,280 --> 01:04:09,000
Yeah, okay, so the prediction of macro block in B-frame

1266
01:04:09,000 --> 01:04:13,320
can introduce delay and also require more storage, right?

1267
01:04:13,320 --> 01:04:15,720
So therefore in some cases, for example,

1268
01:04:15,720 --> 01:04:17,440
applications such as video conferencing,

1269
01:04:17,440 --> 01:04:19,160
you may not want to choose this option

1270
01:04:19,160 --> 01:04:21,800
because 264 will give you this option

1271
01:04:21,800 --> 01:04:24,120
whether you want to use it or not.

1272
01:04:24,120 --> 01:04:25,360
So if you choose this option,

1273
01:04:25,360 --> 01:04:28,140
that means you'll only be using I and P-frame, okay?

1274
01:04:28,140 --> 01:04:30,140
So what's the price you have to pay?

1275
01:04:30,140 --> 01:04:32,280
The compression efficiency is low now

1276
01:04:32,280 --> 01:04:34,920
because chances of you finding a best match block

1277
01:04:34,920 --> 01:04:36,120
will be a little bit less.

1278
01:04:36,120 --> 01:04:38,680
That means the prediction error will be a bit higher,

1279
01:04:38,680 --> 01:04:41,880
right, so you cannot compress a bit as effectively.

1280
01:04:41,880 --> 01:04:44,520
Okay, but the good thing about it is good for applications

1281
01:04:44,520 --> 01:04:47,480
such as video conferencing because it's faster.

1282
01:04:47,480 --> 01:04:51,760
Okay, so this is actually supported in the baseline profile

1283
01:04:51,760 --> 01:04:54,360
and the constrained baseline profile in 264.

1284
01:04:54,360 --> 01:04:58,240
For 264, they also have different profile to support,

1285
01:04:58,240 --> 01:05:01,760
to provide a target for different target application.

1286
01:05:01,760 --> 01:05:05,680
Just similar to the level and the profile in MPAC2.

1287
01:05:05,680 --> 01:05:09,000
Right, okay, so on the other hand,

1288
01:05:09,000 --> 01:05:11,760
as opposed to use no B-frame,

1289
01:05:11,760 --> 01:05:14,640
you can also choose that multiple reference frame, okay?

1290
01:05:14,640 --> 01:05:17,320
So for example, in this case here, right,

1291
01:05:17,320 --> 01:05:19,720
you have one I-frame and then you have a P-frame here.

1292
01:05:19,720 --> 01:05:23,200
So this P-frame can refer to this reference frame

1293
01:05:23,200 --> 01:05:26,200
and this P-frame can refer to previous two reference frame.

1294
01:05:26,200 --> 01:05:29,400
This P-frame can refer to previous three reference frame.

1295
01:05:29,400 --> 01:05:31,800
So that means when you are using more reference frame,

1296
01:05:31,800 --> 01:05:34,600
the chances of you finding a best match block is higher,

1297
01:05:34,600 --> 01:05:37,000
therefore you can compress it better, right?

1298
01:05:37,000 --> 01:05:40,840
But the price is that now it's going to be a lot slower.

1299
01:05:40,840 --> 01:05:43,200
Right, okay, so the opposite of it is that

1300
01:05:43,200 --> 01:05:45,760
you can choose multiple reference frame, okay?

1301
01:05:45,760 --> 01:05:49,160
So therefore, the idea is you try to find the best match

1302
01:05:49,160 --> 01:05:53,560
from each macro block in your P-frame, okay?

1303
01:05:53,560 --> 01:05:56,200
Right, you can go up to N reference frame here.

1304
01:05:56,200 --> 01:05:59,880
So the good thing is that you can improve the efficiency,

1305
01:05:59,880 --> 01:06:03,880
you can compress it into much smaller bit rate, right?

1306
01:06:03,880 --> 01:06:05,200
But the price you have to do now

1307
01:06:05,200 --> 01:06:07,600
is you have to do a lot more computation

1308
01:06:07,600 --> 01:06:09,240
because you have to check respect

1309
01:06:09,240 --> 01:06:11,640
to each of the reference frame.

1310
01:06:11,640 --> 01:06:19,000
Right, okay, so the next topic we are going to cover

1311
01:06:19,000 --> 01:06:20,840
is this integer transform.

1312
01:06:20,840 --> 01:06:23,480
It's probably time for us to take a break.

1313
01:06:23,480 --> 01:06:26,160
So let's come back at 8.05, okay?

1314
01:06:26,160 --> 01:06:27,640
Let's come back at 8.05.

1315
01:06:28,480 --> 01:06:30,720
(rustling)

1316
01:06:30,720 --> 01:06:32,960
(rustling)

1317
01:06:32,960 --> 01:06:35,200
(rustling)

1318
01:06:36,800 --> 01:06:39,040
(rustling)

1319
01:06:39,040 --> 01:06:41,280
(rustling)

1320
01:06:41,280 --> 01:06:43,520
(rustling)

1321
01:06:43,520 --> 01:06:45,760
(rustling)

1322
01:06:45,760 --> 01:06:48,000
(rustling)

1323
01:06:48,000 --> 01:06:50,240
(rustling)

1324
01:06:50,240 --> 01:06:52,480
(rustling)

1325
01:06:52,480 --> 01:06:54,720
(rustling)

1326
01:06:54,720 --> 01:06:56,960
(rustling)

1327
01:06:56,960 --> 01:06:59,200
(rustling)

1328
01:06:59,200 --> 01:07:01,440
(rustling)

1329
01:07:01,440 --> 01:07:03,680
(rustling)

1330
01:07:03,680 --> 01:07:05,920
(rustling)

1331
01:07:05,920 --> 01:07:08,160
(rustling)

1332
01:07:08,160 --> 01:07:10,400
(rustling)

1333
01:07:10,400 --> 01:07:12,640
(rustling)

1334
01:07:12,640 --> 01:07:14,880
(rustling)

1335
01:07:14,880 --> 01:07:17,120
(rustling)

1336
01:07:17,120 --> 01:07:19,360
(rustling)

1337
01:07:19,360 --> 01:07:21,600
(rustling)

1338
01:07:21,600 --> 01:07:23,840
(rustling)

1339
01:07:23,840 --> 01:07:26,080
(rustling)

1340
01:07:26,080 --> 01:07:28,080
(rustling)

1341
01:07:28,080 --> 01:07:30,320
(rustling)

1342
01:07:30,320 --> 01:07:32,560
(rustling)

1343
01:07:32,560 --> 01:07:34,800
(rustling)

1344
01:07:34,800 --> 01:07:37,040
(rustling)

1345
01:07:37,040 --> 01:07:39,280
(rustling)

1346
01:07:39,280 --> 01:07:41,280
(rustling)

1347
01:07:41,280 --> 01:07:43,520
(rustling)

1348
01:07:43,520 --> 01:07:45,760
(rustling)

1349
01:07:45,760 --> 01:07:48,000
(rustling)

1350
01:07:48,000 --> 01:07:50,240
(rustling)

1351
01:07:50,240 --> 01:07:52,240
(rustling)

1352
01:07:52,240 --> 01:07:54,480
(rustling)

1353
01:07:54,480 --> 01:07:56,720
(rustling)

1354
01:07:56,720 --> 01:07:58,960
(rustling)

1355
01:07:58,960 --> 01:08:01,200
(rustling)

1356
01:08:01,200 --> 01:08:03,200
(rustling)

1357
01:08:03,200 --> 01:08:05,440
(rustling)

1358
01:08:05,440 --> 01:08:07,680
(rustling)

1359
01:08:07,680 --> 01:08:09,680
(rustling)

1360
01:08:09,680 --> 01:08:11,920
(rustling)

1361
01:08:11,920 --> 01:08:13,920
(rustling)

1362
01:08:13,920 --> 01:08:16,160
(rustling)

1363
01:08:16,160 --> 01:08:18,400
(rustling)

1364
01:08:18,400 --> 01:08:20,400
(rustling)

1365
01:08:20,400 --> 01:08:22,640
(rustling)

1366
01:08:22,640 --> 01:08:24,640
(rustling)

1367
01:08:24,640 --> 01:08:26,880
(rustling)

1368
01:08:26,880 --> 01:08:29,120
(rustling)

1369
01:08:29,120 --> 01:08:31,120
(rustling)

1370
01:08:31,120 --> 01:08:33,360
(rustling)

1371
01:08:33,360 --> 01:08:35,360
(rustling)

1372
01:08:35,360 --> 01:08:37,600
(rustling)

1373
01:08:37,600 --> 01:08:39,840
(rustling)

1374
01:08:39,840 --> 01:08:41,840
(rustling)

1375
01:08:41,840 --> 01:08:44,080
(rustling)

1376
01:08:44,080 --> 01:08:46,080
(rustling)

1377
01:08:46,080 --> 01:08:48,320
(rustling)

1378
01:08:48,320 --> 01:08:50,560
(rustling)

1379
01:08:50,560 --> 01:08:52,760
(rustling)

1380
01:08:52,760 --> 01:08:54,960
(rustling)

1381
01:08:54,960 --> 01:08:57,160
(rustling)

1382
01:08:57,160 --> 01:08:59,360
(rustling)

1383
01:08:59,360 --> 01:09:01,560
(rustling)

1384
01:09:01,560 --> 01:09:03,760
(rustling)

1385
01:09:03,760 --> 01:09:05,960
(rustling)

1386
01:09:05,960 --> 01:09:08,160
(rustling)

1387
01:09:08,160 --> 01:09:10,360
(rustling)

1388
01:09:10,360 --> 01:09:12,560
(rustling)

1389
01:09:12,560 --> 01:09:14,760
(rustling)

1390
01:09:14,760 --> 01:09:16,960
(rustling)

1391
01:09:16,960 --> 01:09:18,960
(rustling)

1392
01:09:18,960 --> 01:09:20,960
(rustling)

1393
01:09:20,960 --> 01:09:22,960
(rustling)

1394
01:09:22,960 --> 01:09:24,960
(rustling)

1395
01:09:24,960 --> 01:09:26,960
(rustling)

1396
01:09:26,960 --> 01:09:28,960
(rustling)

1397
01:09:28,960 --> 01:09:30,960
(rustling)

1398
01:09:30,960 --> 01:09:32,960
(rustling)

1399
01:09:32,960 --> 01:09:34,960
(rustling)

1400
01:09:34,960 --> 01:09:36,960
(rustling)

1401
01:09:36,960 --> 01:09:38,960
(rustling)

1402
01:09:38,960 --> 01:09:40,960
(rustling)

1403
01:09:40,960 --> 01:09:42,960
(rustling)

1404
01:09:42,960 --> 01:09:44,960
(rustling)

1405
01:09:44,960 --> 01:09:46,960
(rustling)

1406
01:09:46,960 --> 01:09:48,960
(rustling)

1407
01:09:48,960 --> 01:09:50,960
(rustling)

1408
01:09:50,960 --> 01:09:52,960
(rustling)

1409
01:09:52,960 --> 01:09:54,960
(rustling)

1410
01:09:54,960 --> 01:09:56,960
(rustling)

1411
01:09:56,960 --> 01:09:58,960
(rustling)

1412
01:09:58,960 --> 01:10:00,960
(rustling)

1413
01:10:00,960 --> 01:10:02,960
(rustling)

1414
01:10:02,960 --> 01:10:04,960
(rustling)

1415
01:10:04,960 --> 01:10:06,960
(rustling)

1416
01:10:06,960 --> 01:10:08,960
(rustling)

1417
01:10:08,960 --> 01:10:10,960
(rustling)

1418
01:10:10,960 --> 01:10:12,960
(rustling)

1419
01:10:12,960 --> 01:10:14,960
(rustling)

1420
01:10:14,960 --> 01:10:16,960
(rustling)

1421
01:10:16,960 --> 01:10:18,960
(rustling)

1422
01:10:18,960 --> 01:10:20,960
(rustling)

1423
01:10:20,960 --> 01:10:22,960
(rustling)

1424
01:10:22,960 --> 01:10:24,960
(rustling)

1425
01:10:24,960 --> 01:10:26,960
(rustling)

1426
01:10:26,960 --> 01:10:28,960
(rustling)

1427
01:10:28,960 --> 01:10:30,960
(rustling)

1428
01:10:30,960 --> 01:10:32,960
(rustling)

1429
01:10:32,960 --> 01:10:34,960
(rustling)

1430
01:10:34,960 --> 01:10:36,960
(rustling)

1431
01:10:36,960 --> 01:10:38,960
(rustling)

1432
01:10:38,960 --> 01:10:40,960
(rustling)

1433
01:10:40,960 --> 01:10:42,960
(rustling)

1434
01:10:42,960 --> 01:10:44,960
(rustling)

1435
01:10:44,960 --> 01:10:46,960
(rustling)

1436
01:10:46,960 --> 01:10:48,960
(rustling)

1437
01:10:48,960 --> 01:10:50,960
(rustling)

1438
01:10:50,960 --> 01:10:52,960
(rustling)

1439
01:10:52,960 --> 01:10:54,960
(rustling)

1440
01:10:54,960 --> 01:10:56,960
(rustling)

1441
01:10:56,960 --> 01:10:58,960
(rustling)

1442
01:10:58,960 --> 01:11:00,960
(rustling)

1443
01:11:00,960 --> 01:11:02,960
(rustling)

1444
01:11:02,960 --> 01:11:04,960
(rustling)

1445
01:11:04,960 --> 01:11:06,960
(rustling)

1446
01:11:06,960 --> 01:11:08,960
(rustling)

1447
01:11:08,960 --> 01:11:10,960
(rustling)

1448
01:11:10,960 --> 01:11:12,960
(rustling)

1449
01:11:12,960 --> 01:11:14,960
(rustling)

1450
01:11:14,960 --> 01:11:16,960
(rustling)

1451
01:11:16,960 --> 01:11:18,960
(rustling)

1452
01:11:18,960 --> 01:11:20,960
(rustling)

1453
01:11:20,960 --> 01:11:22,960
(rustling)

1454
01:11:22,960 --> 01:11:24,960
(rustling)

1455
01:11:24,960 --> 01:11:26,960
(rustling)

1456
01:11:26,960 --> 01:11:28,960
(rustling)

1457
01:11:28,960 --> 01:11:30,960
(rustling)

1458
01:11:30,960 --> 01:11:32,960
(rustling)

1459
01:11:32,960 --> 01:11:34,960
(rustling)

1460
01:11:34,960 --> 01:11:36,960
(rustling)

1461
01:11:36,960 --> 01:11:38,960
(rustling)

1462
01:11:38,960 --> 01:11:40,960
(rustling)

1463
01:11:40,960 --> 01:11:42,960
(rustling)

1464
01:11:42,960 --> 01:11:44,960
(rustling)

1465
01:11:44,960 --> 01:11:46,960
(rustling)

1466
01:11:46,960 --> 01:11:48,960
(rustling)

1467
01:11:48,960 --> 01:11:50,960
(rustling)

1468
01:11:50,960 --> 01:11:52,960
(rustling)

1469
01:11:52,960 --> 01:11:54,960
(rustling)

1470
01:11:54,960 --> 01:11:56,960
(rustling)

1471
01:11:56,960 --> 01:11:58,960
(rustling)

1472
01:11:58,960 --> 01:12:00,960
(rustling)

1473
01:12:00,960 --> 01:12:02,960
(rustling)

1474
01:12:02,960 --> 01:12:04,960
(rustling)

1475
01:12:04,960 --> 01:12:06,960
(rustling)

1476
01:12:06,960 --> 01:12:08,960
(rustling)

1477
01:12:08,960 --> 01:12:10,960
(rustling)

1478
01:12:10,960 --> 01:12:12,960
(rustling)

1479
01:12:12,960 --> 01:12:14,960
(rustling)

1480
01:12:14,960 --> 01:12:16,960
(rustling)

1481
01:12:16,960 --> 01:12:18,960
(rustling)

1482
01:12:18,960 --> 01:12:20,960
(rustling)

1483
01:12:20,960 --> 01:12:22,960
(rustling)

1484
01:12:22,960 --> 01:12:24,960
(rustling)

1485
01:12:24,960 --> 01:12:26,960
(rustling)

1486
01:12:26,960 --> 01:12:28,960
(rustling)

1487
01:12:28,960 --> 01:12:30,960
(rustling)

1488
01:12:30,960 --> 01:12:32,960
(rustling)

1489
01:12:32,960 --> 01:12:34,960
(rustling)

1490
01:12:34,960 --> 01:12:36,960
(rustling)

1491
01:12:36,960 --> 01:12:38,960
(rustling)

1492
01:12:38,960 --> 01:12:40,960
(rustling)

1493
01:12:40,960 --> 01:12:42,960
(rustling)

1494
01:12:42,960 --> 01:12:44,960
(rustling)

1495
01:12:44,960 --> 01:12:46,960
(rustling)

1496
01:12:46,960 --> 01:12:48,960
(rustling)

1497
01:12:48,960 --> 01:12:50,960
(rustling)

1498
01:12:50,960 --> 01:12:52,960
(rustling)

1499
01:12:52,960 --> 01:12:54,960
(rustling)

1500
01:12:54,960 --> 01:12:56,960
(rustling)

1501
01:12:56,960 --> 01:12:58,960
(rustling)

1502
01:12:58,960 --> 01:13:00,960
(rustling)

1503
01:13:00,960 --> 01:13:02,960
(rustling)

1504
01:13:02,960 --> 01:13:04,960
(rustling)

1505
01:13:04,960 --> 01:13:06,960
(rustling)

1506
01:13:06,960 --> 01:13:08,960
(rustling)

1507
01:13:08,960 --> 01:13:10,960
(rustling)

1508
01:13:10,960 --> 01:13:12,960
(rustling)

1509
01:13:12,960 --> 01:13:14,960
(rustling)

1510
01:13:14,960 --> 01:13:16,960
(rustling)

1511
01:13:16,960 --> 01:13:18,960
(rustling)

1512
01:13:18,960 --> 01:13:20,960
(rustling)

1513
01:13:20,960 --> 01:13:22,960
(rustling)

1514
01:13:22,960 --> 01:13:24,960
(rustling)

1515
01:13:24,960 --> 01:13:26,960
(rustling)

1516
01:13:26,960 --> 01:13:28,960
(rustling)

1517
01:13:28,960 --> 01:13:30,960
(rustling)

1518
01:13:30,960 --> 01:13:32,960
(rustling)

1519
01:13:32,960 --> 01:13:34,960
(rustling)

1520
01:13:34,960 --> 01:13:36,960
(rustling)

1521
01:13:36,960 --> 01:13:38,960
(rustling)

1522
01:13:38,960 --> 01:13:40,960
(rustling)

1523
01:13:40,960 --> 01:13:42,960
(rustling)

1524
01:13:42,960 --> 01:13:44,960
(rustling)

1525
01:13:44,960 --> 01:13:46,960
(rustling)

1526
01:13:46,960 --> 01:13:48,960
(rustling)

1527
01:13:48,960 --> 01:13:50,960
(rustling)

1528
01:13:50,960 --> 01:13:52,960
(rustling)

1529
01:13:52,960 --> 01:13:54,960
(rustling)

1530
01:13:54,960 --> 01:13:56,960
(rustling)

1531
01:13:56,960 --> 01:13:58,960
(rustling)

1532
01:13:58,960 --> 01:14:00,960
(rustling)

1533
01:14:00,960 --> 01:14:02,960
(rustling)

1534
01:14:02,960 --> 01:14:04,960
(rustling)

1535
01:14:04,960 --> 01:14:06,960
(rustling)

1536
01:14:06,960 --> 01:14:08,960
(rustling)

1537
01:14:08,960 --> 01:14:10,960
(rustling)

1538
01:14:10,960 --> 01:14:12,960
(rustling)

1539
01:14:12,960 --> 01:14:14,960
(rustling)

1540
01:14:14,960 --> 01:14:16,960
(rustling)

1541
01:14:16,960 --> 01:14:18,960
(rustling)

1542
01:14:18,960 --> 01:14:20,960
(rustling)

1543
01:14:20,960 --> 01:14:22,960
(rustling)

1544
01:14:22,960 --> 01:14:24,960
(rustling)

1545
01:14:24,960 --> 01:14:26,960
(rustling)

1546
01:14:26,960 --> 01:14:28,960
(rustling)

1547
01:14:28,960 --> 01:14:30,960
(rustling)

1548
01:14:30,960 --> 01:14:32,960
(rustling)

1549
01:14:32,960 --> 01:14:34,960
(rustling)

1550
01:14:34,960 --> 01:14:36,960
(rustling)

1551
01:14:36,960 --> 01:14:38,960
(rustling)

1552
01:14:38,960 --> 01:14:40,960
(rustling)

1553
01:14:40,960 --> 01:14:42,960
(rustling)

1554
01:14:42,960 --> 01:14:44,960
(rustling)

1555
01:14:44,960 --> 01:14:46,960
(rustling)

1556
01:14:46,960 --> 01:14:48,960
(rustling)

1557
01:14:48,960 --> 01:14:50,960
(rustling)

1558
01:14:50,960 --> 01:14:52,960
(rustling)

1559
01:14:52,960 --> 01:14:54,960
(rustling)

1560
01:14:54,960 --> 01:14:56,960
(rustling)

1561
01:14:56,960 --> 01:14:58,960
(rustling)

1562
01:14:58,960 --> 01:15:00,960
(rustling)

1563
01:15:00,960 --> 01:15:02,960
(rustling)

1564
01:15:02,960 --> 01:15:04,960
(rustling)

1565
01:15:04,960 --> 01:15:06,960
(rustling)

1566
01:15:06,960 --> 01:15:08,960
(rustling)

1567
01:15:08,960 --> 01:15:10,960
(rustling)

1568
01:15:10,960 --> 01:15:12,960
(rustling)

1569
01:15:12,960 --> 01:15:14,960
(rustling)

1570
01:15:14,960 --> 01:15:16,960
(rustling)

1571
01:15:16,960 --> 01:15:18,960
(rustling)

1572
01:15:18,960 --> 01:15:20,960
(rustling)

1573
01:15:20,960 --> 01:15:22,960
(rustling)

1574
01:15:22,960 --> 01:15:24,960
(rustling)

1575
01:15:24,960 --> 01:15:26,960
(rustling)

1576
01:15:26,960 --> 01:15:28,960
(rustling)

1577
01:15:28,960 --> 01:15:30,960
(rustling)

1578
01:15:30,960 --> 01:15:32,960
(rustling)

1579
01:15:32,960 --> 01:15:34,960
(rustling)

1580
01:15:34,960 --> 01:15:36,960
(rustling)

1581
01:15:36,960 --> 01:15:38,960
(rustling)

1582
01:15:38,960 --> 01:15:40,960
(rustling)

1583
01:15:40,960 --> 01:15:42,960
(rustling)

1584
01:15:42,960 --> 01:15:44,960
(rustling)

1585
01:15:44,960 --> 01:15:46,960
(rustling)

1586
01:15:46,960 --> 01:15:48,960
(rustling)

1587
01:15:48,960 --> 01:15:50,960
(rustling)

1588
01:15:50,960 --> 01:15:52,960
(rustling)

1589
01:15:52,960 --> 01:15:54,960
(rustling)

1590
01:15:54,960 --> 01:15:56,960
(rustling)

1591
01:15:56,960 --> 01:15:58,960
(rustling)

1592
01:15:58,960 --> 01:16:00,960
(rustling)

1593
01:16:00,960 --> 01:16:02,960
(rustling)

1594
01:16:02,960 --> 01:16:04,960
(rustling)

1595
01:16:04,960 --> 01:16:06,960
(rustling)

1596
01:16:06,960 --> 01:16:08,960
(rustling)

1597
01:16:08,960 --> 01:16:10,960
(rustling)

1598
01:16:10,960 --> 01:16:12,960
(rustling)

1599
01:16:12,960 --> 01:16:14,960
(rustling)

1600
01:16:14,960 --> 01:16:16,960
(rustling)

1601
01:16:16,960 --> 01:16:18,960
(rustling)

1602
01:16:18,960 --> 01:16:20,960
(rustling)

1603
01:16:20,960 --> 01:16:22,960
(rustling)

1604
01:16:22,960 --> 01:16:24,960
(rustling)

1605
01:16:24,960 --> 01:16:26,960
(rustling)

1606
01:16:26,960 --> 01:16:28,960
(rustling)

1607
01:16:28,960 --> 01:16:30,960
(rustling)

1608
01:16:30,960 --> 01:16:32,960
(rustling)

1609
01:16:32,960 --> 01:16:34,960
(rustling)

1610
01:16:34,960 --> 01:16:36,960
(rustling)

1611
01:16:36,960 --> 01:16:38,960
(rustling)

1612
01:16:38,960 --> 01:16:40,960
(rustling)

1613
01:16:40,960 --> 01:16:42,960
(rustling)

1614
01:16:42,960 --> 01:16:44,960
(rustling)

1615
01:16:44,960 --> 01:16:46,960
(rustling)

1616
01:16:46,960 --> 01:16:48,960
(rustling)

1617
01:16:48,960 --> 01:16:50,960
(rustling)

1618
01:16:50,960 --> 01:16:52,960
(rustling)

1619
01:16:52,960 --> 01:16:54,960
(rustling)

1620
01:16:54,960 --> 01:16:56,960
(rustling)

1621
01:16:56,960 --> 01:16:58,960
(rustling)

1622
01:16:58,960 --> 01:17:00,960
(rustling)

1623
01:17:00,960 --> 01:17:02,960
(rustling)

1624
01:17:02,960 --> 01:17:04,960
(rustling)

1625
01:17:04,960 --> 01:17:06,960
(rustling)

1626
01:17:06,960 --> 01:17:08,960
(rustling)

1627
01:17:08,960 --> 01:17:10,960
(rustling)

1628
01:17:10,960 --> 01:17:12,960
(rustling)

1629
01:17:12,960 --> 01:17:14,960
(rustling)

1630
01:17:14,960 --> 01:17:16,960
(rustling)

1631
01:17:16,960 --> 01:17:18,960
(rustling)

1632
01:17:18,960 --> 01:17:20,960
(rustling)

1633
01:17:20,960 --> 01:17:22,960
(rustling)

1634
01:17:22,960 --> 01:17:24,960
(rustling)

1635
01:17:24,960 --> 01:17:26,960
(rustling)

1636
01:17:26,960 --> 01:17:28,960
(rustling)

1637
01:17:28,960 --> 01:17:30,960
(rustling)

1638
01:17:30,960 --> 01:17:32,960
(rustling)

1639
01:17:32,960 --> 01:17:34,960
(rustling)

1640
01:17:34,960 --> 01:17:36,960
(rustling)

1641
01:17:36,960 --> 01:17:38,960
(rustling)

1642
01:17:38,960 --> 01:17:40,960
(rustling)

1643
01:17:40,960 --> 01:17:42,960
(rustling)

1644
01:17:42,960 --> 01:17:44,960
(rustling)

1645
01:17:44,960 --> 01:17:46,960
(rustling)

1646
01:17:46,960 --> 01:17:48,960
(rustling)

1647
01:17:48,960 --> 01:17:50,960
(rustling)

1648
01:17:50,960 --> 01:17:52,960
(rustling)

1649
01:17:52,960 --> 01:17:54,960
(rustling)

1650
01:17:54,960 --> 01:17:56,960
(rustling)

1651
01:17:56,960 --> 01:17:58,960
(rustling)

1652
01:17:58,960 --> 01:18:00,960
(rustling)

1653
01:18:00,960 --> 01:18:02,960
(rustling)

1654
01:18:02,960 --> 01:18:04,960
(rustling)

1655
01:18:04,960 --> 01:18:06,960
(rustling)

1656
01:18:06,960 --> 01:18:08,960
(rustling)

1657
01:18:08,960 --> 01:18:10,960
(rustling)

1658
01:18:10,960 --> 01:18:12,960
(rustling)

1659
01:18:12,960 --> 01:18:14,960
(rustling)

1660
01:18:14,960 --> 01:18:16,960
(rustling)

1661
01:18:16,960 --> 01:18:18,960
(rustling)

1662
01:18:18,960 --> 01:18:20,960
(rustling)

1663
01:18:20,960 --> 01:18:22,960
(rustling)

1664
01:18:22,960 --> 01:18:24,960
(rustling)

1665
01:18:24,960 --> 01:18:26,960
(rustling)

1666
01:18:26,960 --> 01:18:28,960
(rustling)

1667
01:18:28,960 --> 01:18:30,960
(rustling)

1668
01:18:30,960 --> 01:18:32,960
(rustling)

1669
01:18:32,960 --> 01:18:34,960
(rustling)

1670
01:18:34,960 --> 01:18:36,960
(rustling)

1671
01:18:36,960 --> 01:18:38,960
(rustling)

1672
01:18:38,960 --> 01:18:40,960
(rustling)

1673
01:18:40,960 --> 01:18:42,960
(rustling)

1674
01:18:42,960 --> 01:18:44,960
(rustling)

1675
01:18:44,960 --> 01:18:46,960
(rustling)

1676
01:18:46,960 --> 01:18:48,960
(rustling)

1677
01:18:48,960 --> 01:18:50,960
(rustling)

1678
01:18:50,960 --> 01:18:52,960
(rustling)

1679
01:18:52,960 --> 01:18:54,960
(rustling)

1680
01:18:54,960 --> 01:18:56,960
(rustling)

1681
01:18:56,960 --> 01:18:58,960
(rustling)

1682
01:18:58,960 --> 01:19:00,960
(rustling)

1683
01:19:00,960 --> 01:19:02,960
(rustling)

1684
01:19:02,960 --> 01:19:04,960
(rustling)

1685
01:19:04,960 --> 01:19:06,960
(rustling)

1686
01:19:06,960 --> 01:19:08,960
(rustling)

1687
01:19:08,960 --> 01:19:10,960
(rustling)

1688
01:19:10,960 --> 01:19:12,960
(rustling)

1689
01:19:12,960 --> 01:19:14,960
(rustling)

1690
01:19:14,960 --> 01:19:16,960
(rustling)

1691
01:19:16,960 --> 01:19:18,960
(rustling)

1692
01:19:18,960 --> 01:19:20,960
(rustling)

1693
01:19:20,960 --> 01:19:22,960
(rustling)

1694
01:19:22,960 --> 01:19:24,960
(rustling)

1695
01:19:24,960 --> 01:19:26,960
(rustling)

1696
01:19:26,960 --> 01:19:28,960
(rustling)

1697
01:19:28,960 --> 01:19:30,960
(rustling)

1698
01:19:30,960 --> 01:19:32,960
(rustling)

1699
01:19:32,960 --> 01:19:34,960
(rustling)

1700
01:19:34,960 --> 01:19:36,960
(rustling)

1701
01:19:36,960 --> 01:19:38,960
(rustling)

1702
01:19:38,960 --> 01:19:40,960
(rustling)

1703
01:19:40,960 --> 01:19:42,960
(rustling)

1704
01:19:42,960 --> 01:19:44,960
(rustling)

1705
01:19:44,960 --> 01:19:46,960
(rustling)

1706
01:19:46,960 --> 01:19:48,960
(rustling)

1707
01:19:48,960 --> 01:19:50,960
(rustling)

1708
01:19:50,960 --> 01:19:52,960
(rustling)

1709
01:19:52,960 --> 01:19:54,960
(rustling)

1710
01:19:54,960 --> 01:19:56,960
(rustling)

1711
01:19:56,960 --> 01:19:58,960
(rustling)

1712
01:19:58,960 --> 01:20:00,960
(rustling)

1713
01:20:00,960 --> 01:20:02,960
(rustling)

1714
01:20:02,960 --> 01:20:04,960
(rustling)

1715
01:20:04,960 --> 01:20:06,960
(rustling)

1716
01:20:06,960 --> 01:20:08,960
(rustling)

1717
01:20:08,960 --> 01:20:10,960
(rustling)

1718
01:20:10,960 --> 01:20:12,960
(rustling)

1719
01:20:12,960 --> 01:20:14,960
(rustling)

1720
01:20:14,960 --> 01:20:16,960
(rustling)

1721
01:20:16,960 --> 01:20:18,960
(rustling)

1722
01:20:18,960 --> 01:20:20,960
(rustling)

1723
01:20:20,960 --> 01:20:22,960
(rustling)

1724
01:20:22,960 --> 01:20:24,960
(rustling)

1725
01:20:24,960 --> 01:20:26,960
(rustling)

1726
01:20:26,960 --> 01:20:28,960
(rustling)

1727
01:20:28,960 --> 01:20:30,960
(rustling)

1728
01:20:30,960 --> 01:20:32,960
(rustling)

1729
01:20:32,960 --> 01:20:34,960
(rustling)

1730
01:20:34,960 --> 01:20:36,960
(rustling)

1731
01:20:36,960 --> 01:20:38,960
(rustling)

1732
01:20:38,960 --> 01:20:40,960
(rustling)

1733
01:20:40,960 --> 01:20:42,960
(rustling)

1734
01:20:42,960 --> 01:20:44,960
(rustling)

1735
01:20:44,960 --> 01:20:46,960
(rustling)

1736
01:20:46,960 --> 01:20:48,960
(rustling)

1737
01:20:48,960 --> 01:20:50,960
(rustling)

1738
01:20:50,960 --> 01:20:52,960
(rustling)

1739
01:20:52,960 --> 01:20:54,960
(rustling)

1740
01:20:54,960 --> 01:20:56,960
(rustling)

1741
01:20:56,960 --> 01:20:58,960
(rustling)

1742
01:20:58,960 --> 01:21:00,960
(rustling)

1743
01:21:00,960 --> 01:21:02,960
(rustling)

1744
01:21:02,960 --> 01:21:04,960
(rustling)

1745
01:21:04,960 --> 01:21:06,960
(rustling)

1746
01:21:06,960 --> 01:21:08,960
(rustling)

1747
01:21:08,960 --> 01:21:10,960
(rustling)

1748
01:21:10,960 --> 01:21:12,960
(rustling)

1749
01:21:12,960 --> 01:21:14,960
(rustling)

1750
01:21:14,960 --> 01:21:16,960
(rustling)

1751
01:21:16,960 --> 01:21:18,960
(rustling)

1752
01:21:18,960 --> 01:21:20,960
(rustling)

1753
01:21:20,960 --> 01:21:22,960
(rustling)

1754
01:21:22,960 --> 01:21:24,960
(rustling)

1755
01:21:24,960 --> 01:21:26,960
(rustling)

1756
01:21:26,960 --> 01:21:28,960
(rustling)

1757
01:21:28,960 --> 01:21:30,960
(rustling)

1758
01:21:30,960 --> 01:21:32,960
(rustling)

1759
01:21:32,960 --> 01:21:34,960
(rustling)

1760
01:21:34,960 --> 01:21:36,960
(rustling)

1761
01:21:36,960 --> 01:21:38,960
(rustling)

1762
01:21:38,960 --> 01:21:40,960
(rustling)

1763
01:21:40,960 --> 01:21:42,960
(rustling)

1764
01:21:42,960 --> 01:21:44,960
(rustling)

1765
01:21:44,960 --> 01:21:46,960
(rustling)

1766
01:21:46,960 --> 01:21:48,960
(rustling)

1767
01:21:48,960 --> 01:21:50,960
(rustling)

1768
01:21:50,960 --> 01:21:52,960
(rustling)

1769
01:21:52,960 --> 01:21:54,960
(rustling)

1770
01:21:54,960 --> 01:21:56,960
(rustling)

1771
01:21:56,960 --> 01:21:58,960
(rustling)

1772
01:21:58,960 --> 01:22:00,960
(rustling)

1773
01:22:00,960 --> 01:22:02,960
(rustling)

1774
01:22:02,960 --> 01:22:04,960
(rustling)

1775
01:22:04,960 --> 01:22:06,960
(rustling)

1776
01:22:06,960 --> 01:22:08,960
(rustling)

1777
01:22:08,960 --> 01:22:10,960
(rustling)

1778
01:22:10,960 --> 01:22:12,960
(rustling)

1779
01:22:12,960 --> 01:22:14,960
(rustling)

1780
01:22:14,960 --> 01:22:16,960
(rustling)

1781
01:22:16,960 --> 01:22:18,960
(rustling)

1782
01:22:18,960 --> 01:22:20,960
(rustling)

1783
01:22:20,960 --> 01:22:22,960
(rustling)

1784
01:22:22,960 --> 01:22:24,960
(rustling)

1785
01:22:24,960 --> 01:22:26,960
(rustling)

1786
01:22:26,960 --> 01:22:28,960
(rustling)

1787
01:22:28,960 --> 01:22:30,960
(rustling)

1788
01:22:30,960 --> 01:22:32,960
(rustling)

1789
01:22:32,960 --> 01:22:34,960
(rustling)

1790
01:22:34,960 --> 01:22:36,960
(rustling)

1791
01:22:36,960 --> 01:22:38,960
(rustling)

1792
01:22:38,960 --> 01:22:40,960
(rustling)

1793
01:22:40,960 --> 01:22:42,960
(rustling)

1794
01:22:42,960 --> 01:22:44,960
(rustling)

1795
01:22:44,960 --> 01:22:46,960
(rustling)

1796
01:22:46,960 --> 01:22:48,960
(rustling)

1797
01:22:48,960 --> 01:22:50,960
(rustling)

1798
01:22:50,960 --> 01:22:52,960
(rustling)

1799
01:22:52,960 --> 01:22:54,960
(rustling)

1800
01:22:54,960 --> 01:22:56,960
(rustling)

1801
01:22:56,960 --> 01:22:58,960
(rustling)

1802
01:22:58,960 --> 01:23:00,960
(rustling)

1803
01:23:00,960 --> 01:23:02,960
(rustling)

1804
01:23:02,960 --> 01:23:04,960
(rustling)

1805
01:23:04,960 --> 01:23:06,960
(rustling)

1806
01:23:06,960 --> 01:23:08,960
(rustling)

1807
01:23:08,960 --> 01:23:10,960
(rustling)

1808
01:23:10,960 --> 01:23:12,960
(rustling)

1809
01:23:12,960 --> 01:23:14,960
(rustling)

1810
01:23:14,960 --> 01:23:16,960
(rustling)

1811
01:23:16,960 --> 01:23:18,960
(rustling)

1812
01:23:18,960 --> 01:23:20,960
(rustling)

1813
01:23:20,960 --> 01:23:22,960
(rustling)

1814
01:23:22,960 --> 01:23:24,960
(rustling)

1815
01:23:24,960 --> 01:23:26,960
(rustling)

1816
01:23:26,960 --> 01:23:28,960
(rustling)

1817
01:23:28,960 --> 01:23:30,960
(rustling)

1818
01:23:30,960 --> 01:23:32,960
(rustling)

1819
01:23:32,960 --> 01:23:34,960
(rustling)

1820
01:23:34,960 --> 01:23:36,960
(rustling)

1821
01:23:36,960 --> 01:23:38,960
(rustling)

1822
01:23:38,960 --> 01:23:40,960
(rustling)

1823
01:23:40,960 --> 01:23:42,960
(rustling)

1824
01:23:42,960 --> 01:23:44,960
(rustling)

1825
01:23:44,960 --> 01:23:46,960
(rustling)

1826
01:23:46,960 --> 01:23:48,960
(rustling)

1827
01:23:48,960 --> 01:23:50,960
(rustling)

1828
01:23:50,960 --> 01:23:52,960
(rustling)

1829
01:23:52,960 --> 01:23:54,960
(rustling)

1830
01:23:54,960 --> 01:23:56,960
(rustling)

1831
01:23:56,960 --> 01:23:58,960
(rustling)

1832
01:23:58,960 --> 01:24:00,960
(rustling)

1833
01:24:00,960 --> 01:24:02,960
(rustling)

1834
01:24:02,960 --> 01:24:04,960
(rustling)

1835
01:24:04,960 --> 01:24:06,960
(rustling)

1836
01:24:06,960 --> 01:24:08,960
(rustling)

1837
01:24:08,960 --> 01:24:10,960
(rustling)

1838
01:24:10,960 --> 01:24:12,960
(rustling)

1839
01:24:12,960 --> 01:24:14,960
(rustling)

1840
01:24:14,960 --> 01:24:16,960
(rustling)

1841
01:24:16,960 --> 01:24:18,960
(rustling)

1842
01:24:18,960 --> 01:24:20,960
(rustling)

1843
01:24:20,960 --> 01:24:22,960
(rustling)

1844
01:24:22,960 --> 01:24:24,960
(rustling)

1845
01:24:24,960 --> 01:24:26,960
(rustling)

1846
01:24:26,960 --> 01:24:28,960
(rustling)

1847
01:24:28,960 --> 01:24:30,960
(rustling)

1848
01:24:30,960 --> 01:24:32,960
(rustling)

1849
01:24:32,960 --> 01:24:34,960
(rustling)

1850
01:24:34,960 --> 01:24:36,960
(rustling)

1851
01:24:36,960 --> 01:24:38,960
(rustling)

1852
01:24:38,960 --> 01:24:40,960
(rustling)

1853
01:24:40,960 --> 01:24:42,960
(rustling)

1854
01:24:42,960 --> 01:24:44,960
(rustling)

1855
01:24:44,960 --> 01:24:46,960
(rustling)

1856
01:24:46,960 --> 01:24:48,960
(rustling)

1857
01:24:48,960 --> 01:24:50,960
Okay, so welcome back.

1858
01:24:50,960 --> 01:24:56,960
Right, so there are a few students who asked regarding the assignment.

1859
01:24:56,960 --> 01:25:02,960
So I think, yeah, it's probably time for me to just go through the instruction one more time.

1860
01:25:02,960 --> 01:25:05,960
Right, I know when you get old you tend to be very repetitive.

1861
01:25:05,960 --> 01:25:08,960
But just to make sure that no one missed this information.

1862
01:25:08,960 --> 01:25:11,960
Okay, so number one for this assignment in terms of submission,

1863
01:25:11,960 --> 01:25:15,960
please only submit one soft copy PDF file.

1864
01:25:15,960 --> 01:25:16,960
Okay, so only one file.

1865
01:25:16,960 --> 01:25:18,960
Don't submit anything more than one.

1866
01:25:18,960 --> 01:25:22,960
So one way you can do it is for example, for this assignment there's two parts.

1867
01:25:22,960 --> 01:25:25,960
One is a calculation, the other is more like a report writing.

1868
01:25:25,960 --> 01:25:29,960
So what you can do is that for part one when solving the problem,

1869
01:25:29,960 --> 01:25:31,960
you can write on a piece of paper.

1870
01:25:31,960 --> 01:25:34,960
You can take pictures of it, you can scan it.

1871
01:25:34,960 --> 01:25:39,960
And afterwards you paste this particular picture into the work document.

1872
01:25:39,960 --> 01:25:41,960
Yeah, for example for question one.

1873
01:25:41,960 --> 01:25:45,960
And afterwards you continue with question two to write your answer.

1874
01:25:45,960 --> 01:25:48,960
Yeah, and then from this work document you convert it into PDF.

1875
01:25:48,960 --> 01:25:50,960
So this is one way.

1876
01:25:50,960 --> 01:25:52,960
Of course there are other ways you do it.

1877
01:25:52,960 --> 01:25:55,960
But the most important thing is please only submit one file.

1878
01:25:55,960 --> 01:26:01,960
Because when I download the file for marking, I'm going to download 500 something files.

1879
01:26:01,960 --> 01:26:05,960
And sometimes if you don't follow the instruction, some of the files may be missing.

1880
01:26:05,960 --> 01:26:10,960
Okay, so therefore very very important to submit only one soft copy PDF file.

1881
01:26:10,960 --> 01:26:13,960
Okay, and the deadline is 4th of October.

1882
01:26:13,960 --> 01:26:18,960
Right, and also submit your file using this structure.

1883
01:26:18,960 --> 01:26:21,960
Surname_given_name_matriculation_number.

1884
01:26:21,960 --> 01:26:29,960
So for example, if the student's name is Tan Surname_YiMing is the given name_matriculation_number.

1885
01:26:29,960 --> 01:26:34,960
Please stick to this very, stick to this particular standard.

1886
01:26:34,960 --> 01:26:36,960
Don't change your name.

1887
01:26:36,960 --> 01:26:38,960
Some people like to only use their nickname and so on.

1888
01:26:38,960 --> 01:26:40,960
And I cannot find who this person is.

1889
01:26:40,960 --> 01:26:43,960
Yeah, so it's going to create lots of problems.

1890
01:26:43,960 --> 01:26:47,960
So please only follow this naming approach.

1891
01:26:47,960 --> 01:26:52,960
Right, so write your full name and matriculation number on the first page just to be sure.

1892
01:26:52,960 --> 01:26:54,960
Right, in case there's some ambiguity.

1893
01:26:54,960 --> 01:27:01,960
In the past, there are students, we actually, they don't follow this instruction and we find it very difficult to find out who this person is.

1894
01:27:01,960 --> 01:27:03,960
Yeah, and then we have to look at the first page.

1895
01:27:03,960 --> 01:27:06,960
Yeah, so don't, I mean make life easier for me.

1896
01:27:06,960 --> 01:27:10,960
If you make me happier, I'll mark you more linearly.

1897
01:27:10,960 --> 01:27:17,960
Okay, so late submission or non-compliance, if you don't follow these instructions here, you may be penalised.

1898
01:27:17,960 --> 01:27:18,960
Okay, right.

1899
01:27:18,960 --> 01:27:20,960
So the next is regarding the assignment.

1900
01:27:20,960 --> 01:27:23,960
So it's quite clear this instruction is the same as before.

1901
01:27:23,960 --> 01:27:24,960
You have two questions.

1902
01:27:24,960 --> 01:27:28,960
So the first question is compute manually using this two-stage decomposition.

1903
01:27:28,960 --> 01:27:35,960
So this, when I say two-stage decomposition, what I mean is that you have to make use of this formula.

1904
01:27:35,960 --> 01:27:38,960
Compose it row by row and then column by column.

1905
01:27:38,960 --> 01:27:40,960
Don't use the matrix multiplication.

1906
01:27:40,960 --> 01:27:46,960
Use a row by row and then column by column two-stage decomposition.

1907
01:27:46,960 --> 01:27:52,960
And then for this particular question two, it's supposed to be an open-ended problem.

1908
01:27:52,960 --> 01:27:55,960
And you're only asked to write one page.

1909
01:27:55,960 --> 01:27:56,960
Yeah, one page.

1910
01:27:56,960 --> 01:28:04,960
Right, so you can see that because you're only asked to write one page, there's only limited space you can write.

1911
01:28:04,960 --> 01:28:09,960
Okay, so therefore I don't expect you to write all these things here.

1912
01:28:09,960 --> 01:28:11,960
Okay, right.

1913
01:28:11,960 --> 01:28:16,960
No, your one page write-up doesn't have to be covering all these things.

1914
01:28:16,960 --> 01:28:20,960
It doesn't have to cover objectives, applications, training, challenges.

1915
01:28:20,960 --> 01:28:22,960
No, it's not that.

1916
01:28:22,960 --> 01:28:28,960
Yeah, you just have to, for example, you can see here, objectives, yes, you probably have to talk about objectives.

1917
01:28:28,960 --> 01:28:37,960
But afterwards, you can either choose application or train or challenges or if you want a combination of one or two.

1918
01:28:37,960 --> 01:28:40,960
So you can see the sign here is all.

1919
01:28:40,960 --> 01:28:45,960
So therefore you just choose one topic that you really feel is something that's important.

1920
01:28:45,960 --> 01:28:55,960
Yeah, it's not supposed to be a comprehensive report or summary, but rather choose one or two topics that you feel is really important, you want to highlight it.

1921
01:28:55,960 --> 01:29:00,960
Okay, so it's not supposed to be a comprehensive report to cover every single aspect.

1922
01:29:00,960 --> 01:29:04,960
Yeah, you can just focus on the challenge or just focus on the train.

1923
01:29:04,960 --> 01:29:12,960
Okay, or just focus on some very interesting application you have encountered recently and you feel that it has an immediate impact.

1924
01:29:12,960 --> 01:29:16,960
Right, for example, the CHETGBT-01 recently.

1925
01:29:16,960 --> 01:29:19,960
Yeah, that could be something that's very interesting recently.

1926
01:29:19,960 --> 01:29:22,960
Right, you can see what it can do.

1927
01:29:22,960 --> 01:29:32,960
Yeah, and actually just recently I also see that, heard that one of the professor, I'm not sure whether it's from Harvard, they are teaching the mathematics.

1928
01:29:32,960 --> 01:29:41,960
So this, I think, math professor, they actually asked their student to use, to train some LLM model.

1929
01:29:41,960 --> 01:29:47,960
And afterwards this trained model would then represent them to sit for some math test.

1930
01:29:47,960 --> 01:29:55,960
Yeah, and their score would be based on how well they train this particular model, LLM model to do the score.

1931
01:29:55,960 --> 01:29:57,960
So that could be something very interesting.

1932
01:29:57,960 --> 01:29:59,960
Yeah, because nowadays there are so many tools there.

1933
01:29:59,960 --> 01:30:05,960
If you really can develop or train a model to help you to solve the problem, it could be quite interesting as well.

1934
01:30:05,960 --> 01:30:07,960
So any, therefore, it's open-ended.

1935
01:30:07,960 --> 01:30:10,960
Yeah, please choose any topics that you feel is interesting.

1936
01:30:10,960 --> 01:30:14,960
It can be application, train, challenges.

1937
01:30:14,960 --> 01:30:15,960
Yeah, okay.

1938
01:30:15,960 --> 01:30:17,960
Any questions?

1939
01:30:17,960 --> 01:30:20,960
Yeah, because there are some students asking this, so I just want to clarify this.

1940
01:30:20,960 --> 01:30:22,960
All right, okay.

1941
01:30:22,960 --> 01:30:24,960
So then this part is clear.

1942
01:30:24,960 --> 01:30:29,960
And the submission, as I mentioned before, you just come to the assignment, you just click it.

1943
01:30:29,960 --> 01:30:36,960
Yeah, and then afterwards you can just upload the file, just upload one PDF file.

1944
01:30:36,960 --> 01:30:37,960
That's it.

1945
01:30:37,960 --> 01:30:38,960
Yeah, end of the story.

1946
01:30:38,960 --> 01:30:42,960
And you are only given, I think, two or three times to submit it.

1947
01:30:42,960 --> 01:30:48,960
So make sure that before you submit, you check everything is correct.

1948
01:30:48,960 --> 01:30:49,960
Right, okay.

1949
01:30:49,960 --> 01:31:02,960
So with that, actually I just happen to have a -- let me see.

1950
01:31:02,960 --> 01:31:05,960
Yeah, I'm not sure whether some of you have seen it before.

1951
01:31:05,960 --> 01:31:08,960
Right, so it's actually a video, yeah, it's in Chinese.

1952
01:31:08,960 --> 01:31:15,960
I cannot find any, you know, subtitle in English, so that's why I have to play this video in Chinese.

1953
01:31:15,960 --> 01:31:20,960
But for those of you who don't understand Chinese, you can kind of guess what it's trying to talk about.

1954
01:31:20,960 --> 01:31:21,960
It's about homework.

1955
01:31:21,960 --> 01:31:23,960
So if you have watched it before, yeah, just bear with me.

1956
01:31:23,960 --> 01:31:25,960
So let me just play this video for you.

1957
01:31:25,960 --> 01:31:27,960
[video playing]

1958
01:31:27,960 --> 01:31:30,960
Yo, it's very loud.

1959
01:31:30,960 --> 01:31:33,960
Okay, let me just reduce the volume a bit.

1960
01:31:33,960 --> 01:31:37,960
[video playing]

1961
01:31:37,960 --> 01:31:44,960
Right, and there may be a few slightly vulgar words I understand from my students, so just don't get offended.

1962
01:31:44,960 --> 01:32:13,960
[video playing]

1963
01:32:13,960 --> 01:32:42,960
[video playing]

1964
01:32:42,960 --> 01:33:09,960
[video playing]

1965
01:33:09,960 --> 01:33:32,960
[video playing]

1966
01:33:32,960 --> 01:33:36,960
[snoring]

1967
01:33:36,960 --> 01:34:05,960
[video playing]

1968
01:34:05,960 --> 01:34:32,960
[video playing]

1969
01:34:32,960 --> 01:34:59,960
[video playing]

1970
01:34:59,960 --> 01:35:03,960
Okay, so let's hope it will not happen to you.

1971
01:35:03,960 --> 01:35:21,960
[video playing]

1972
01:35:21,960 --> 01:35:23,960
Okay, so let's continue on.

1973
01:35:23,960 --> 01:35:27,960
So the next topic we're going to look at is the integer transform.

1974
01:35:27,960 --> 01:35:33,960
So as we have explained earlier on, so for 2.6.4, we use integer transform instead of DCT.

1975
01:35:33,960 --> 01:35:35,960
So why do we do that?

1976
01:35:35,960 --> 01:35:42,960
Right, so the reason why we use integer transform is that traditionally DCT may cause some prediction shift.

1977
01:35:42,960 --> 01:35:48,960
So what it means is that DCT, because it's actually a floating point number, right,

1978
01:35:48,960 --> 01:35:55,960
so therefore you actually need to cap it within a certain digit of representation, and this will cause some error.

1979
01:35:55,960 --> 01:36:02,960
If you repeat the process many times, because we are doing video compression, you need to compute this DCT many times,

1980
01:36:02,960 --> 01:36:04,960
so the error will start to accumulate.

1981
01:36:04,960 --> 01:36:06,960
Okay, so that's not good.

1982
01:36:06,960 --> 01:36:20,960
Right, so therefore, DCT will cause prediction shift because this floating point calculation and the rounding error will result in this accumulation of error during the transform and the inverse transform process.

1983
01:36:20,960 --> 01:36:24,960
Right, and this error can be accumulated because you do the DCT many times.

1984
01:36:24,960 --> 01:36:28,960
So therefore, this may result in some larger error towards the end.

1985
01:36:28,960 --> 01:36:38,960
Okay, so therefore, for 2.6.4, we use integer transform to address this issue because for 2.6.4, we use integer transform,

1986
01:36:38,960 --> 01:36:43,960
whereas the coefficient in your transform matrix is actually integer.

1987
01:36:43,960 --> 01:36:51,960
So therefore, you will not have these problems here, and also it's more efficient because you're using computation using integer.

1988
01:36:51,960 --> 01:36:57,960
Right, okay, and 2.6.4 will also make use of the quantization scheme with some nonlinear step size.

1989
01:36:57,960 --> 01:37:06,960
The step size is actually nonlinear to help to control the rate value later, so later on we'll talk about this point.

1990
01:37:06,960 --> 01:37:12,960
Okay, so next let's quickly look at how do we perform integer transform in 2.6.4.

1991
01:37:12,960 --> 01:37:25,960
Right, so just a quick recap. So for 2DDCT that we studied before, it can be done using multiplications, can be realized using consecutive 1D transform.

1992
01:37:25,960 --> 01:37:31,960
Or in other words, the 2DDCT can be implemented using these equations here.

1993
01:37:31,960 --> 01:37:37,960
Okay, so for example, F is your pixel block, in this case for example, the 4 by 4 pixel block,

1994
01:37:37,960 --> 01:37:45,960
and if this T is a DCT matrix, therefore in order to obtain the 2DDCT, we just simply need to apply this formula,

1995
01:37:45,960 --> 01:37:51,960
and you'll obtain the 2DDCT through the matrix multiplication approach.

1996
01:37:51,960 --> 01:38:01,960
Okay, so specifically, if you look at this particular DCT matrix here, this 4 by 4 DCT matrix, right, it can be written in this form here,

1997
01:38:01,960 --> 01:38:10,960
whereas this value A here is actually half, this value B here, right, is this, and the value C here is given by this.

1998
01:38:10,960 --> 01:38:18,960
So therefore, given A, B and C, you can actually write down this particular 4 by 4 DCT matrix.

1999
01:38:18,960 --> 01:38:27,960
Right, okay, so early on, as I mentioned, for this DCT matrix, one of the issues is that it's a floating point number.

2000
01:38:27,960 --> 01:38:36,960
So therefore, in our case here, because we want to reduce these accumulations of the floating, you know, rounding error,

2001
01:38:36,960 --> 01:38:44,960
and also we want it to be more efficient, so therefore, our aim is to take this 4 by 4 DCT matrix and convert it,

2002
01:38:44,960 --> 01:38:49,960
or approximate it using some kind of an integer matrix here.

2003
01:38:49,960 --> 01:38:50,960
So how do we do it?

2004
01:38:50,960 --> 01:39:00,960
So one way we can simply do it is that we take our 4 by 4 DCT matrix, we multiply with a particular scaling coefficient called alpha,

2005
01:39:00,960 --> 01:39:04,960
and we round to the nearest integer, okay, then we'll get this particular matrix.

2006
01:39:04,960 --> 01:39:11,960
So this is your transform matrix that you use in the integer transform, okay.

2007
01:39:11,960 --> 01:39:18,960
So for this integer transform, the value that we choose for alpha is 2.5, right.

2008
01:39:18,960 --> 01:39:26,960
So if we use just now the DCT matrix shown in the previous slide, we multiply with the scaling coefficients of 2.5,

2009
01:39:26,960 --> 01:39:34,960
we round to the nearest integer, right, then you can go and check that this is how your matrix looks like.

2010
01:39:34,960 --> 01:39:39,960
Okay, so this is the matrix that is used in your integer transform.

2011
01:39:39,960 --> 01:39:50,960
So if you look at this particular matrix here, you can see for each of the row here, right, they are actually orthogonal, right.

2012
01:39:50,960 --> 01:39:57,960
So that means this vector, you take the dot product within this vector and any of the row vector is actually equal to zero.

2013
01:39:57,960 --> 01:40:03,960
So therefore, for different row, right, they are orthogonal, yeah, for different row they are orthogonal.

2014
01:40:03,960 --> 01:40:09,960
But if you look at their row, their norm or the length of each of the row vector is different, okay.

2015
01:40:09,960 --> 01:40:14,960
So therefore, right, this is one of the properties between different row, they are orthogonal,

2016
01:40:14,960 --> 01:40:19,960
but the unit length vector for each of the rows are different, okay.

2017
01:40:19,960 --> 01:40:29,960
So this is something that needs to be taken into account later on when we do the quantization.

2018
01:40:29,960 --> 01:40:34,960
Okay, so this is what we mentioned here, right, so for each of the row, actually they are orthogonal.

2019
01:40:34,960 --> 01:40:41,960
However, each of the row no longer have the same norm, right, some of them is larger, some is smaller.

2020
01:40:41,960 --> 01:40:49,960
So therefore, later on we need to somehow handle this, right, such that because each of this particular norm for each of the row are different,

2021
01:40:49,960 --> 01:40:55,960
so we need to handle this and how we handle it is we will do it during the quantization step later.

2022
01:40:55,960 --> 01:41:05,960
So later on we will see that the normalization step, right, to handle different norm for different row is managed by the quantization step that we will show shortly.

2023
01:41:05,960 --> 01:41:14,960
Right, okay, so we have the forward transform, so for the inverse transform, this is the given inverse transform here.

2024
01:41:14,960 --> 01:41:28,960
Okay, so next let's see how do we perform this integer transform, right, coupled with scaling and quantization in H.264.

2025
01:41:28,960 --> 01:41:37,960
Right, so for H.264, suppose, right, if you remember the block that we used to perform the processing because the most basic block is a 4 by 4 block.

2026
01:41:37,960 --> 01:41:50,960
So we will take F, for example, F is a 4 by 4 input matrix, 4 by 4 pixel block, right, okay, and if we call this F cap to be the quantized transform output,

2027
01:41:50,960 --> 01:41:53,960
okay, this transform now is the integer transform.

2028
01:41:53,960 --> 01:41:58,960
So therefore, the forward transform, how do we do it is that first of all we perform this particular process here.

2029
01:41:58,960 --> 01:42:04,960
So this is the 4 by 4 pixel block, so you multiply with H and the H transpose.

2030
01:42:04,960 --> 01:42:11,960
So you can see these steps here is actually very similar to your DCT, except now instead of the DCT matrix,

2031
01:42:11,960 --> 01:42:18,960
now you are replacing it with this particular integer transform matrix now, okay, H.

2032
01:42:18,960 --> 01:42:21,960
Right, okay, and H has been given already.

2033
01:42:21,960 --> 01:42:29,960
So after you calculate this, right, so this you can kind of interpret as your integer transform output already, okay.

2034
01:42:29,960 --> 01:42:36,960
So for this integer transform output, the next thing is that, right, in the previous MPEG study,

2035
01:42:36,960 --> 01:42:44,960
what you do next is that you divide by the quantization matrix Q, yeah, we divide by the quantization matrix Q,

2036
01:42:44,960 --> 01:42:54,960
but for H.264, it's common that we represent slightly differently by, you know, showing that you multiply with this matrix MF here, okay,

2037
01:42:54,960 --> 01:42:56,960
and then you divide by this scaling coefficient.

2038
01:42:56,960 --> 01:43:05,960
So this is, you know, kind of a little bit, okay, in H.264, right, we call this MF the quantization matrix,

2039
01:43:05,960 --> 01:43:11,960
but it's actually a little bit different from the quantization matrix that we have in the MPEG.

2040
01:43:11,960 --> 01:43:18,960
Okay, so anyway, this part is to perform the integer transform, this part is to perform the quantization,

2041
01:43:18,960 --> 01:43:28,960
and afterwards, if you remember, after you perform the quantization, you round it, okay, and then you'll get your quantized transform output.

2042
01:43:28,960 --> 01:43:36,960
Okay, so this operator here is the matrix multiplication, this dot here is the element by element multiplication, okay,

2043
01:43:36,960 --> 01:43:45,960
and this MF here is actually a 4 by 4 quantization matrix that is, you know, derived from a smaller matrix called M,

2044
01:43:45,960 --> 01:43:57,960
and then quantization parameter QP. So later on, we are going to see, right, how this matrix M can be constructed from this matrix M as well as this QP here.

2045
01:43:57,960 --> 01:44:24,960
So, but before it, I just want to very quickly draw the attention here, which is --

2046
01:44:24,960 --> 01:44:36,960
Okay, so if you refer to this particular equation just now we introduced regarding the integer transform coupled with the quantization scaling in 264,

2047
01:44:36,960 --> 01:44:42,960
so you can see this equation, right, is nothing but you have a 4 by 4 pixel block, you take the integer transform, okay,

2048
01:44:42,960 --> 01:44:51,960
and afterwards, you multiply with this particular term here. So this particular term here, this term here, you can interpret it almost like, you know,

2049
01:44:51,960 --> 01:45:04,960
similar to whatever that you have divided by this quantization matrix, okay. So if you remember the DCT, DCT pretty much is that you have the output, okay,

2050
01:45:04,960 --> 01:45:14,960
and then you divide by the quantization matrix, yeah, but for these particular equations here, right, this is your transform output and you multiply with this.

2051
01:45:14,960 --> 01:45:27,960
So this term here, this particular M term here, you can kind of think about is the reciprocal of the quantization matrix that we have studied in JPEG as well as the earlier MPEG, yeah.

2052
01:45:27,960 --> 01:45:37,960
So, yeah, anyway, this is what the approach they introduced, but I just want to kind of relate, link you back to your previous understanding of what's happening, okay.

2053
01:45:37,960 --> 01:45:47,960
So because previously when we studied about JPEG as well as the earlier MPEG, we said after we performed the transform, we divide by the quantization matrix, okay.

2054
01:45:47,960 --> 01:45:55,960
I mean this is the, no, I mean the, each individual value we divide by the corresponding quantization step size, yeah, or the matrix.

2055
01:45:55,960 --> 01:46:04,960
But for this 2, 6, 4, we represent it in this way here, okay. So therefore the relationship now you can see is actually more like reciprocal.

2056
01:46:04,960 --> 01:46:14,960
If this MF is large, then this Q is small, right. If it's Q, if MF is small, then this Q is large. So it's a reciprocal relationship.

2057
01:46:14,960 --> 01:46:31,960
So this point I just would like to highlight this so that it probably will be a bit easier for you to understand because you are more comfortable with the output of the quantization divided by some value, right, the quantization step size rather than multiplying with this, okay.

2058
01:46:31,960 --> 01:46:47,960
But now with this relationship, right, at least it's easier for you to follow. Okay, so anyway let's just continue.

2059
01:46:47,960 --> 01:46:53,960
Right, okay, so next, right, this particular matrix MF, how do we obtain this matrix MF?

2060
01:46:53,960 --> 01:47:09,960
So for this matrix MF, okay, if for this quantization parameters here, so this quantization parameter is used to control the bit rate, okay, of your scheme, yeah, if used to control the bit rate of your scheme.

2061
01:47:09,960 --> 01:47:19,960
So if the quantization value is large, that means your bit rate will be small, yeah. If the quantization value is small, that means the bit rate will be larger, okay.

2062
01:47:19,960 --> 01:47:30,960
So let's look at this particular, right, so anyway this quantization parameter is a parameter to control, as I mentioned, to control the output generated bit rate, okay.

2063
01:47:30,960 --> 01:47:40,960
Right, so for the range of quantization parameter between 0 and 6, right, okay, for this matrix here, MF will be given by this table here.

2064
01:47:40,960 --> 01:47:51,960
Right, so for this table here, you can see that there are actually three possible entries. One, okay, first of all, it's depending on, each of these values is depending on the quantization parameter Qp, okay.

2065
01:47:51,960 --> 01:47:59,960
Each of these entries here, right, depends on Qp and it also depends on the second parameter 0, 1 or 2, right.

2066
01:47:59,960 --> 01:48:12,960
So therefore, for each of the entries, okay, in this particular matrix MF, will depend on what is the quantization parameter and also what is this value 0, 1 or 2, okay.

2067
01:48:12,960 --> 01:48:23,960
So fortunately, for this particular value here, there's a lookup table. So you can refer to a lookup table to find out exactly what each of these values is, okay.

2068
01:48:23,960 --> 01:48:41,960
So this lookup table is given here. So this is the lookup table. So this lookup table, you can see that Qp, right, okay, the Qp value, first of all, for the value between 0 to 5, right, for the corresponding value 0 to 5, these are the corresponding values for these positions here.

2069
01:48:41,960 --> 01:48:58,960
So for example, let's take the first example. When Qp is equal to 0, okay, right, you can see the positions at 0, 0, 0, 2, 2, 0 and 2, 2, that means these four values, 1, 2, 3, 4, will be taking this value, okay.

2070
01:48:58,960 --> 01:49:16,960
When the value Qp is 0, right, okay, the position at this, no, 1, 1, 1, 1, okay, because the index starts from 0, so 1, 1, 1, 3, okay, 3, 1 and 3, 3 will be taking this value, okay.

2071
01:49:16,960 --> 01:49:26,960
And then the rest of them, which is indicated by 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 will be taking this value here, okay.

2072
01:49:26,960 --> 01:49:44,960
So therefore, first you identify what is the Qp parameter you decide to choose, yeah, and afterwards, right, by using this lookup table, then you'll be able to fill in the value 0 using this, 1 using this and 2 using this value, okay.

2073
01:49:44,960 --> 01:49:54,960
And then using this lookup table, you'll be able to write down, for example, the quantization matrix that correspond to Qp value of 0, okay.

2074
01:49:54,960 --> 01:49:56,960
Let's take one more example.

2075
01:49:56,960 --> 01:50:06,960
Suppose now, right, you decided to use a quantization parameter of 1, okay, suppose you decided to use 1 now, okay.

2076
01:50:06,960 --> 01:50:16,960
So for 1 now, right, so if you choose a value Qp of equal to 1, then these four values, 1, 2, 3, 4, will be taking this value, okay.

2077
01:50:16,960 --> 01:50:24,960
Those values that correspond to the second parameter of 1 will take this value and those that correspond to the parameter of 2 will take this value.

2078
01:50:24,960 --> 01:50:37,960
So therefore, with that, using this lookup table, you'll be able to write down this particular matrix Mf, okay, for the range from 0 to 6, 0 to 5.

2079
01:50:37,960 --> 01:50:41,960
But what if your value Qp is greater than 5?

2080
01:50:41,960 --> 01:50:51,960
So if your value Qp is greater than 5, then what you do is that you take each of these corresponding entries, you replace by these particular expressions here.

2081
01:50:51,960 --> 01:50:59,960
So these expressions here, these particular notations here is a modulo, right, that means you take the remainder, okay.

2082
01:50:59,960 --> 01:51:06,960
So this modulo, you take the remainder and this part here is you divide by 6 and you take the floor, the lower value, right.

2083
01:51:06,960 --> 01:51:19,960
So therefore, if the range is greater than 6, each of these values, once you have found it, you just perform this operation and you'll be able to still write down your matrix Mf, okay.

2084
01:51:19,960 --> 01:51:22,960
So this is how we generate this Mf here.

2085
01:51:22,960 --> 01:51:26,960
Actually, this is a little bit more on the secondary detail.

2086
01:51:26,960 --> 01:51:32,960
I mean, if I really want to ask you, I would definitely provide this Mf for you or provide this table for you.

2087
01:51:32,960 --> 01:51:39,960
I would not expect you to memorize it because it's just not possible to memorize.

2088
01:51:39,960 --> 01:51:41,960
Okay.

2089
01:51:41,960 --> 01:51:55,960
So next, so therefore we have already explained, right, so in the 264, when you want to perform the quantized transform coefficient, this is how you do.

2090
01:51:55,960 --> 01:52:05,960
You do the transformation, you multiply with this particular matrix, okay, which is equivalent to like you divide by the Q matrix in the previous kind of understanding, right.

2091
01:52:05,960 --> 01:52:11,960
You drown it, okay, then your output now will be the quantized transform coefficient, okay.

2092
01:52:11,960 --> 01:52:17,960
So now if you want to do the reverse, yeah, to do the reverse is actually very similar, okay.

2093
01:52:17,960 --> 01:52:22,960
So now, suppose this is your quantized transform coefficient now, right.

2094
01:52:22,960 --> 01:52:28,960
So first thing first, you need to de-quantize it by multiplying with Vi, okay.

2095
01:52:28,960 --> 01:52:30,960
So this is the de-quantization.

2096
01:52:30,960 --> 01:52:40,960
So after you're performing the de-quantization, then you multiply with the, you know, this particular inverse, okay, inverse matrix here, right.

2097
01:52:40,960 --> 01:52:43,960
And then afterwards, you round to the nearest integer, right.

2098
01:52:43,960 --> 01:52:49,960
And then you'll be able to obtain your reconstructed pixel block, okay.

2099
01:52:49,960 --> 01:52:56,960
So this processes, you know, just a reverse of just now default transform.

2100
01:52:56,960 --> 01:53:07,960
Okay, so how now for this equation here, right, we just now the H inverse is already given in the equation, right, the previous slides.

2101
01:53:07,960 --> 01:53:14,960
So this Vi here, the de-quantize matrix here, so how do we obtain this de-quantize matrix here?

2102
01:53:14,960 --> 01:53:23,960
So Vi is a 4 by 4 de-quantization matrix and it can be again obtained through a lookup table of this V and the quantization parameter, okay.

2103
01:53:23,960 --> 01:53:25,960
So let's look at it.

2104
01:53:25,960 --> 01:53:33,960
Right, okay, so again this Vi here, similar to just now the Mi, this Vi here, right, you have 4 by 4 entries here.

2105
01:53:33,960 --> 01:53:36,960
So for each of this entry here, it depends on two parameters.

2106
01:53:36,960 --> 01:53:43,960
What is the quantization parameter Qp and what is the second index, whether it's 0, 1 or 2, okay.

2107
01:53:43,960 --> 01:53:49,960
So for the range of Qp between 0 and 6, you can refer to this lookup table here, right.

2108
01:53:49,960 --> 01:53:52,960
So for example, let's just take one example here.

2109
01:53:52,960 --> 01:54:02,960
When you have a Qp of 0, suppose in a particular compression scheme, right, to compress a certain video, you decide to choose a Qp of 0, yeah.

2110
01:54:02,960 --> 01:54:07,960
That means now, okay, we have decided Qp is going to be equal to 0, okay.

2111
01:54:07,960 --> 01:54:14,960
So this value that corresponds to 0, the position 0 here, right, will take this value, okay.

2112
01:54:14,960 --> 01:54:17,960
Those correspond to 1 as the second index, will take this value.

2113
01:54:17,960 --> 01:54:21,960
Those that correspond to 2, right, will take this value here.

2114
01:54:21,960 --> 01:54:29,960
So therefore, once you decide what's the Qp value, you'll be able to write down this particular de-quantization matrix, okay.

2115
01:54:29,960 --> 01:54:39,960
So likewise, if you decide, for example, if the Qp is equal to say 4, right, therefore 16, 25 and 20 will be used to fill up this table here.

2116
01:54:39,960 --> 01:54:47,960
Right, so therefore, what it means is that for Qp value between 0 to 5, you can write down this de-quantization matrix.

2117
01:54:47,960 --> 01:54:57,960
If the value is greater than 6 here, then what we need to do is that, right, this, each of this entry that we have obtained earlier is going to be replaced by this, yeah.

2118
01:54:57,960 --> 01:55:07,960
So replaced by this means that now your Qp is taking modulo of 6, okay, that means modulo means you take the, divide by 6 and you take the remainder, okay.

2119
01:55:07,960 --> 01:55:15,960
Right, and afterwards this term is that Qp, you divide it by 6 and you take the floor, right, okay.

2120
01:55:15,960 --> 01:55:26,960
So with this equation, that means no matter what it is, once you decide what is the Qp parameter, that means you decide what is the bit rate you want for this particular compressed video,

2121
01:55:26,960 --> 01:55:30,960
then you'll be able to generate this de-quantization matrix.

2122
01:55:30,960 --> 01:55:33,960
Okay.

2123
01:55:33,960 --> 01:55:43,960
So as I mentioned in, you know, if in the exam or in the quiz, yeah, I would not, you know, kind of, yeah, I would not ask you to memorize all this value.

2124
01:55:43,960 --> 01:55:59,960
If there's anything, if I want to ask, I'll provide, you know, the values for you, right, so that you can just compute it directly.

2125
01:55:59,960 --> 01:56:05,960
Okay, so now let's take the examples here now.

2126
01:56:05,960 --> 01:56:17,960
Right, so the examples now, let's look at this, for example, right, we start off with the Qp parameter of 0 and then later on we're going to see what is the effect when we change different Qp parameters here.

2127
01:56:17,960 --> 01:56:31,960
Suppose we start with the Qp parameter of 0, right, so now for the Qp parameter of 0, once we decide the Qp parameter, that means we decide, we can write down our quantization matrix Mf, okay.

2128
01:56:31,960 --> 01:56:35,960
So we can write down this Mf here from just now the lookup table.

2129
01:56:35,960 --> 01:56:56,960
Right, suppose the current block that we are considering is this particular 4 by 4 pixel block, right, you go through this particular quantization matrix in 264, alright, okay, and afterwards we use this formula to do the calculation, you will see that this is your quantized transform coefficient.

2130
01:56:56,960 --> 01:57:10,960
So afterwards, during the inverse process, we use this equation to calculate, right, so again, given the Qp parameter, that means we can write down this Vi matrix just now from the lookup table, right.

2131
01:57:10,960 --> 01:57:25,960
So afterwards we have this formula here, right, we have the quantized transform coefficient, right, we have this Vi, we can go through the calculation and we'll then obtain your reconstructed pixel block.

2132
01:57:25,960 --> 01:57:35,960
So now if we compare our original pixel block and the reconstructed pixel block, you will see that the error in this case is 0, they are all 0, okay, so this is what we have.

2133
01:57:35,960 --> 01:57:48,960
So you can see that when your quantization parameters is actually 0, right, so when your quantization parameter is 0, your error is small.

2134
01:57:48,960 --> 01:57:55,960
So, okay, we can just continue on with a few and afterwards we'll try to draw some conclusions, okay.

2135
01:57:55,960 --> 01:58:10,960
So now, suppose we choose a quantization parameter of 6, right, so if we choose a quantization parameter of 6, that means we can write down this matrix, okay, MF and this inverse matrix Vi, okay.

2136
01:58:10,960 --> 01:58:18,960
Right, so suppose now same pixel block as before, right, going through just now the equation, we can obtain the quantized transform coefficient.

2137
01:58:18,960 --> 01:58:25,960
So given the quantized transform coefficient together with the quantization matrix, we can reconstruct our pixel block.

2138
01:58:25,960 --> 01:58:38,960
So now if we compare this to original pixel block and your reconstructed pixel block, okay, you can see that now the error is becoming a bit bigger, okay.

2139
01:58:38,960 --> 01:58:44,960
So you can see now when your quantization parameter is 6, your error starts to increase.

2140
01:58:44,960 --> 01:58:48,960
Okay, let's continue one more before we try to draw the conclusion.

2141
01:58:48,960 --> 01:58:57,960
Now if our QP parameter is 30, right, if our QP parameter is 30, from just now the process we mentioned, I know it's a bit cumbersome for you to see now,

2142
01:58:57,960 --> 01:59:04,960
but if you go through the motion, you can actually write down your MF matrix and the Vi matrix here, okay.

2143
01:59:04,960 --> 01:59:15,960
Right, so now, okay, again, given this same pixel block, going through the same process, just now using the equation, we can calculate your quantized transform coefficient.

2144
01:59:15,960 --> 01:59:21,960
From this quantized transform coefficient, using the formula, we can calculate your reconstructed pixel block.

2145
01:59:21,960 --> 01:59:25,960
If you compare, you'll see that this is the error now, okay.

2146
01:59:25,960 --> 01:59:39,960
So what do you notice as you increase the quantization parameter, what do you notice in terms of the error, the reconstructed error?

2147
01:59:39,960 --> 01:59:51,960
You see quite obviously as you increase this QP parameter here, the error will start to increase, right.

2148
01:59:51,960 --> 02:00:19,960
So why is it the case?

2149
02:00:19,960 --> 02:00:30,960
Okay, so we can see earlier on we say that QP is a parameter to control the bit rate of a generated video, right, so it's a parameter for us to control.

2150
02:00:30,960 --> 02:00:40,960
Okay, so now another thing you notice is that as QP is becoming larger, say suppose you go down this, as QP becomes larger,

2151
02:00:40,960 --> 02:00:46,960
the values in this matrix here actually become smaller, correct.

2152
02:00:46,960 --> 02:00:56,960
If you go down the row, as QP becomes larger from 0, 1, 2, 3, the values in each of these entries here actually become smaller, right.

2153
02:00:56,960 --> 02:01:03,960
So that means as QP becomes larger, okay, the value in M becomes smaller.

2154
02:01:03,960 --> 02:01:08,960
If the value in M becomes smaller, that means the value in Q becomes larger.

2155
02:01:08,960 --> 02:01:15,960
This Q is the traditional quantization step size that you have studied in JPEG, right.

2156
02:01:15,960 --> 02:01:25,960
So as your QP becomes larger, go down the table, as it becomes larger from 0 to 5, the value in M becomes smaller.

2157
02:01:25,960 --> 02:01:33,960
If the value in M becomes smaller, that means your traditional quantization step size will become larger, right.

2158
02:01:33,960 --> 02:01:44,960
So, right, if you remember just last time when we studied in JPEG standard, if the quantization step size becomes larger, what will happen?

2159
02:01:44,960 --> 02:01:52,960
In the JPEG compression, if your quantization step size becomes larger, what will happen?

2160
02:01:52,960 --> 02:01:55,960
To the quality of your reconstructed video.

2161
02:01:55,960 --> 02:02:03,960
If your quantization step size becomes larger, that means your quantization error would be larger,

2162
02:02:03,960 --> 02:02:10,960
that means actually your reconstructed error will be larger as well, correct.

2163
02:02:10,960 --> 02:02:19,960
So that's why you can see just now, as your QP increased from 0 to 5, for example, your M value becomes smaller,

2164
02:02:19,960 --> 02:02:27,960
going down this table you can see it becomes smaller, that means your step size in Q becomes larger.

2165
02:02:27,960 --> 02:02:35,960
And the step size becomes larger, that means your reconstructed error will become larger, just like what you have studied in JPEG.

2166
02:02:35,960 --> 02:02:45,960
And when this Q becomes larger, the quantization step size becomes larger, that means the reconstruction error will increase, correct.

2167
02:02:45,960 --> 02:02:48,960
But the bit rate would decrease.

2168
02:02:48,960 --> 02:02:59,960
So this is, therefore, it's just in terms of this particular notation, right, because somehow in 264 they use this MF notation as compared to this Q notation.

2169
02:02:59,960 --> 02:03:11,960
Therefore, you can see by changing this particular value QP here, you can control, you can do a trade-off between the bit rate that you generate versus the error that you have.

2170
02:03:11,960 --> 02:03:21,960
So when your QP increased, just now, you can see from this particular video, this particular result here,

2171
02:03:21,960 --> 02:03:32,960
when your QP increased from 0 to 6 to 30, you can see that the corresponding error quantization, the error will start to increase.

2172
02:03:32,960 --> 02:03:40,960
But the advantage that you obtain is that the bit rate will start to reduce, so you have a smaller file size, or your bit rate is lower.

2173
02:03:40,960 --> 02:03:56,960
So therefore, this QP parameter is a parameter, user-designed parameter, you can decide for your application what is a suitable value you want to choose to achieve your target bit rate.

2174
02:03:56,960 --> 02:03:59,960
Right, so let's continue.

2175
02:03:59,960 --> 02:04:03,960
So the next thing we are going to look at is the intra-coding.

2176
02:04:03,960 --> 02:04:07,960
So we are going to look at the coding of the intra-frame here.

2177
02:04:07,960 --> 02:04:18,960
So for the intra-coding of 264, the intra-coded macro block are predicted using some neighboring reconstructed pixel block.

2178
02:04:18,960 --> 02:04:27,960
So this one we are going to see how is it a little bit different from the previous JPEG as well as the MPEG 1 and 2.

2179
02:04:27,960 --> 02:04:32,960
Because it uses neighboring pixels to help to do the prediction.

2180
02:04:32,960 --> 02:04:44,960
So later on we will see. And then also for the intra-coding under 264, it can use different prediction blocks, for example 4 by 4, 16 by 16.

2181
02:04:44,960 --> 02:04:53,960
For 4 by 4 blocks here, there is a 9 prediction mode, and for 16 by 16 there is a 4 prediction mode.

2182
02:04:53,960 --> 02:05:02,960
So later on we will see a little bit more about what is the basic idea behind this intra-coding of 264.

2183
02:05:02,960 --> 02:05:11,960
But let's try to go through some of this particular text information first.

2184
02:05:11,960 --> 02:05:17,960
And then later on when we come to the slide, the slide will be a lot easier to understand.

2185
02:05:17,960 --> 02:05:24,960
So for each of the prediction modes, the predicted values and the actual values will be compared to produce the prediction error.

2186
02:05:24,960 --> 02:05:30,960
So for example this is a current 4 by 4 block that we want to encode in iFrame.

2187
02:05:30,960 --> 02:05:36,960
We use a neighboring pixel to do the prediction. So we use a neighboring pixel to do the prediction.

2188
02:05:36,960 --> 02:05:43,960
So once you have done the prediction, then the predicted value and the actual value, that means the error or the prediction error,

2189
02:05:43,960 --> 02:05:48,960
you will be able to obtain the prediction error or the residue.

2190
02:05:48,960 --> 02:05:55,960
So the mode that generates the smallest error or residue will be chosen as a prediction mode for this block.

2191
02:05:55,960 --> 02:06:05,960
And afterwards this residue is then sent to the integer transform for the transformation.

2192
02:06:05,960 --> 02:06:17,960
From this particular write-up it may be a bit harder for you to understand, but it's easiest if you try to look at some of these particular slides here.

2193
02:06:17,960 --> 02:06:22,960
It can make the understanding a lot easier to understand.

2194
02:06:22,960 --> 02:06:36,960
So for example, in this 264, if you want to encode an iFrame, you can partition into many different block structures.

2195
02:06:36,960 --> 02:06:41,960
But one of the most basic block structures that you have is the 4 by 4 block.

2196
02:06:41,960 --> 02:06:47,960
So we are going to use the 4 by 4 block as an example because there are a few different variations.

2197
02:06:47,960 --> 02:06:51,960
So we're going to use this 4 by 4 block as an example here.

2198
02:06:51,960 --> 02:06:56,960
Suppose if you want to encode this 4 by 4 block here, what do we do?

2199
02:06:56,960 --> 02:07:03,960
So what we do is that we make use of some neighbouring pixels for this 4 by 4 block here.

2200
02:07:03,960 --> 02:07:10,960
So these are some neighbouring pixels here, some neighbouring pixels, centered at this 4 by 4 block here.

2201
02:07:10,960 --> 02:07:22,960
Afterwards, we'll use this different direction as a prediction to see what would be the predicted value for this 4 by 4 pixel block here.

2202
02:07:22,960 --> 02:07:35,960
So suppose if you use a mode of zero, that means if you want to find out what are the values here, we'll use this pixel A to predict all these values here, if you're using mode zero here.

2203
02:07:35,960 --> 02:07:40,960
So for mode zero, you can see our prediction is in this vertical direction here.

2204
02:07:40,960 --> 02:07:47,960
So to predict all the values, these four values here, we use A to predict these four values.

2205
02:07:47,960 --> 02:07:53,960
We use B to predict these four values, we use C to predict this and D to predict this.

2206
02:07:53,960 --> 02:08:03,960
And afterwards, we take this actual pixel value minus the prediction that would give you the prediction error for mode zero.

2207
02:08:03,960 --> 02:08:07,960
So later on we'll have some examples, it will become a lot clearer.

2208
02:08:07,960 --> 02:08:17,960
So if we use mode one, mode one you can see is horizontal, that means we use this pixel value, the neighbouring pixel value to predict the four pixel values in this block here.

2209
02:08:17,960 --> 02:08:23,960
So you use I to predict this, J to predict this, K to predict this and L to predict this.

2210
02:08:23,960 --> 02:08:32,960
So once you do the prediction, you have the actual pixel value and you have the prediction, you take that difference, then you can get the prediction value for mode one.

2211
02:08:32,960 --> 02:08:36,960
So you're going to go through all these different modes.

2212
02:08:36,960 --> 02:08:41,960
So for different modes, you're going to get different predicted values.

2213
02:08:41,960 --> 02:08:46,960
So for each of the predicted values, you're going to get the different prediction error.

2214
02:08:46,960 --> 02:08:53,960
And afterwards, you're going to see which of these modes gives the best prediction or the smallest prediction error.

2215
02:08:53,960 --> 02:09:01,960
Then you're going to say that, okay, the particular mode that gives us the smallest error, that is the one we're going to use as a prediction.

2216
02:09:01,960 --> 02:09:13,960
So therefore, you can see in this intra-coding, the basic idea is that instead of, if you remember previously in JPEG,

2217
02:09:13,960 --> 02:09:21,960
what we do is that we partition into numerous, this 8 by 8 pixel block and then we kind of more or less encode it independently.

2218
02:09:21,960 --> 02:09:30,960
But in this particular case now, for 264, we are using the neighbouring pixel to guess what this kind of pixel is first.

2219
02:09:30,960 --> 02:09:37,960
And then get the error, the prediction error, and then only afterwards, we go through the transform.

2220
02:09:37,960 --> 02:09:44,960
So this is the main idea. That means we try to do the prediction first by using this direction.

2221
02:09:44,960 --> 02:09:47,960
So you can see a different directional spatial prediction.

2222
02:09:47,960 --> 02:09:52,960
So that's why this is the name. Direction, because you can see you have different direction.

2223
02:09:52,960 --> 02:09:55,960
And spatial, because the prediction is in the space domain.

2224
02:09:55,960 --> 02:10:00,960
So it's a directional spatial prediction.

2225
02:10:00,960 --> 02:10:05,960
So more specifically, just now you can see we have these eight directions here.

2226
02:10:05,960 --> 02:10:09,960
Actually, the mode, they are all together nine modes of them.

2227
02:10:09,960 --> 02:10:16,960
So there are nine intra 4 by 4 prediction mode for this H.264 intra-coding.

2228
02:10:16,960 --> 02:10:20,960
So early on, for example, if you look at mode zero, it's a vertical.

2229
02:10:20,960 --> 02:10:26,960
That means we use, this is the 4 by 4 block that we want to encode.

2230
02:10:26,960 --> 02:10:32,960
We use the four pixels above it, A, B, C, D, to predict their value.

2231
02:10:32,960 --> 02:10:36,960
And afterwards, we can then get the prediction error.

2232
02:10:36,960 --> 02:10:40,960
So this is if you use mode zero, we call it vertical.

2233
02:10:40,960 --> 02:10:44,960
If we use mode one, horizontal, that means if this is the block we want to encode,

2234
02:10:44,960 --> 02:10:53,960
we take the four pixel value next to it, we predict the value for each of this row.

2235
02:10:53,960 --> 02:10:58,960
Afterwards, you'll be able to compute the prediction error using mode one.

2236
02:10:58,960 --> 02:11:05,960
For mode two here, you're using this four eight pixel value, A, B, C, D, I, J, K, L.

2237
02:11:05,960 --> 02:11:09,960
You take the average of this eight pixel value.

2238
02:11:09,960 --> 02:11:15,960
So this average value will be the predictor for all this pixel value within here.

2239
02:11:15,960 --> 02:11:18,960
And afterwards, you can then get the prediction error for this.

2240
02:11:18,960 --> 02:11:23,960
So therefore, you can actually go through all these different nine modes here.

2241
02:11:23,960 --> 02:11:30,960
And you'll be able to actually get the eight, all these nine different prediction error.

2242
02:11:30,960 --> 02:11:35,960
And then the one that gives you the smallest prediction error, you're going to use the particular mode.

2243
02:11:35,960 --> 02:11:44,960
And afterwards, you're going to let it go through the integer transform to transform this particular prediction error.

2244
02:11:44,960 --> 02:11:49,960
So that is the high level message.

2245
02:11:49,960 --> 02:11:54,960
So again, by just looking at that, it may be a little bit unclear what exactly does it mean.

2246
02:11:54,960 --> 02:11:57,960
So the best way to understand is go through one example.

2247
02:11:57,960 --> 02:12:03,960
Because once you have one example, if you can understand, that means you actually understand what it's trying to say already.

2248
02:12:03,960 --> 02:12:06,960
Okay, so let's look at this particular exercise here.

2249
02:12:06,960 --> 02:12:12,960
So this exercise here says that let's consider a simplified H.264 4x4 intra-coding.

2250
02:12:12,960 --> 02:12:19,960
So the coding is for the 4x4 block, is for the intra-coding, for the intra-frame.

2251
02:12:19,960 --> 02:12:23,960
That use only mode zero, mode one, and mode two.

2252
02:12:23,960 --> 02:12:29,960
The original actually had nine, but to make this particular example simpler,

2253
02:12:29,960 --> 02:12:34,960
we'll only be focusing on this mode zero, one, and two, to make it easier.

2254
02:12:34,960 --> 02:12:38,960
So we'll only be focusing on these three modes here.

2255
02:12:38,960 --> 02:12:47,960
And afterwards, it says that, okay, no, assume...

2256
02:12:47,960 --> 02:12:52,960
Assume we have this particular 8x8 image here.

2257
02:12:52,960 --> 02:12:59,960
It asks you to find the smallest prediction error for the indicated 4x4 pixel block.

2258
02:12:59,960 --> 02:13:01,960
So suppose now you have this particular image here.

2259
02:13:01,960 --> 02:13:08,960
This is the current 4x4 pixel block we are focusing on.

2260
02:13:08,960 --> 02:13:18,960
So it asks you to find the smallest prediction error for this particular 4x4 pixel block using these three different modes here.

2261
02:13:18,960 --> 02:13:21,960
Let's give it a try.

2262
02:13:21,960 --> 02:13:27,960
Use these three different modes that I explained to you before, mode zero, one, and two,

2263
02:13:27,960 --> 02:13:34,960
and try to find the smallest prediction error for this 4x4 pixel block.

2264
02:13:34,960 --> 02:13:44,960
[silence]

2265
02:13:44,960 --> 02:13:54,960
[silence]

2266
02:13:54,960 --> 02:14:04,960
[silence]

2267
02:14:04,960 --> 02:14:14,960
[silence]

2268
02:14:14,960 --> 02:14:24,960
[silence]

2269
02:14:24,960 --> 02:14:34,960
[silence]

2270
02:14:34,960 --> 02:14:44,960
[silence]

2271
02:14:44,960 --> 02:14:54,960
[silence]

2272
02:14:54,960 --> 02:15:04,960
[silence]

2273
02:15:04,960 --> 02:15:14,960
[silence]

2274
02:15:14,960 --> 02:15:24,960
[silence]

2275
02:15:24,960 --> 02:15:34,960
[silence]

2276
02:15:34,960 --> 02:15:44,960
[silence]

2277
02:15:44,960 --> 02:15:54,960
[silence]

2278
02:15:54,960 --> 02:16:04,960
[silence]

2279
02:16:04,960 --> 02:16:14,960
[silence]

2280
02:16:14,960 --> 02:16:24,960
[silence]

2281
02:16:24,960 --> 02:16:34,960
[silence]

2282
02:16:34,960 --> 02:16:44,960
[silence]

2283
02:16:44,960 --> 02:16:54,960
[silence]

2284
02:16:54,960 --> 02:17:04,960
[silence]

2285
02:17:04,960 --> 02:17:14,960
[silence]

2286
02:17:14,960 --> 02:17:24,960
[silence]

2287
02:17:24,960 --> 02:17:34,960
[silence]

2288
02:17:34,960 --> 02:17:44,960
[silence]

2289
02:17:44,960 --> 02:17:54,960
[silence]

2290
02:17:54,960 --> 02:18:04,960
[silence]

2291
02:18:04,960 --> 02:18:14,960
[silence]

2292
02:18:14,960 --> 02:18:24,960
[silence]

2293
02:18:24,960 --> 02:18:34,960
[silence]

2294
02:18:34,960 --> 02:18:44,960
[silence]

2295
02:18:44,960 --> 02:18:54,960
[silence]

2296
02:18:54,960 --> 02:19:04,960
[silence]

2297
02:19:04,960 --> 02:19:14,960
[silence]

2298
02:19:14,960 --> 02:19:24,960
[silence]

2299
02:19:24,960 --> 02:19:34,960
[silence]

2300
02:19:34,960 --> 02:19:44,960
[silence]

2301
02:19:44,960 --> 02:19:54,960
[silence]

2302
02:19:54,960 --> 02:20:04,960
[silence]

2303
02:20:04,960 --> 02:20:14,960
[silence]

2304
02:20:14,960 --> 02:20:24,960
[silence]

2305
02:20:24,960 --> 02:20:34,960
[silence]

2306
02:20:34,960 --> 02:20:44,960
[silence]

2307
02:20:44,960 --> 02:20:54,960
[silence]

2308
02:20:54,960 --> 02:21:04,960
[silence]

2309
02:21:04,960 --> 02:21:14,960
[silence]

2310
02:21:14,960 --> 02:21:24,960
[silence]

2311
02:21:24,960 --> 02:21:34,960
[silence]

2312
02:21:34,960 --> 02:21:44,960
[silence]

2313
02:21:44,960 --> 02:21:54,960
[silence]

2314
02:21:54,960 --> 02:22:04,960
[silence]

2315
02:22:04,960 --> 02:22:14,960
[silence]

2316
02:22:14,960 --> 02:22:24,960
[silence]

2317
02:22:24,960 --> 02:22:34,960
[silence]

2318
02:22:34,960 --> 02:22:44,960
[silence]

2319
02:22:44,960 --> 02:22:54,960
[silence]

2320
02:22:54,960 --> 02:23:04,960
[silence]

2321
02:23:04,960 --> 02:23:12,960
So therefore if you look at this particular result here, so you can see therefore if you're using mode 0, the vertical predictions,

2322
02:23:12,960 --> 02:23:20,960
right, you can see the prediction now is the first column is all 70, right, second column is 70, 90, 90, right?

2323
02:23:20,960 --> 02:23:30,960
So that's a prediction. And afterwards, what is the error? So the error is that you simply take the original value minus your predicted value.

2324
02:23:30,960 --> 02:23:44,960
So for example, 80 minus 70 will give you 10, okay? 90 minus 70 will give you 20. So if you do that, you'll be able to get the prediction error using mode 0.

2325
02:23:44,960 --> 02:23:52,960
So for mode 1, we are going to use now horizontal. That means this row, we are going to predict using 60. So the first row is all 60,

2326
02:23:52,960 --> 02:24:02,960
second row is 60, third row is 80, okay? Last row is 80. So this is our prediction. Afterwards, we take the actual block minus predicted block,

2327
02:24:02,960 --> 02:24:12,960
we get our error, okay? So that's mode 2. That's mode 1. Mode 2, we'll take the average, right, the average of this 4 plus this 4, 8 pixel value.

2328
02:24:12,960 --> 02:24:20,960
So if you want to calculate the error, you just take the calculation, you'll see it's 75. So therefore, our predictor, our prediction is actually a block of 75.

2329
02:24:20,960 --> 02:24:26,960
If you want to calculate the error, you just take this block minus this block and you'll get the prediction error here.

2330
02:24:26,960 --> 02:24:36,960
So therefore, now for three different modes, you'll get three different predictions, right? So this prediction is in the form of a matrix, okay?

2331
02:24:36,960 --> 02:24:46,960
A matrix like this. Right, so the question actually asks next, right, find the least prediction error block, okay, for this 4 by 4 pixel block.

2332
02:24:46,960 --> 02:24:54,960
That means in this simple example, we're only going to look at this three mode and see which is the one that gives you the smallest error.

2333
02:24:54,960 --> 02:25:00,960
So in order to find which is the one that gives you the smallest error, you need to define what's the matrix you're using, right?

2334
02:25:00,960 --> 02:25:08,960
So the matrix to define this in our example here is we'll be using the sum of absolute error.

2335
02:25:08,960 --> 02:25:16,960
Okay, that means each of these terms here, we take its absolute value, we sum it up, okay? We take its absolute value, we sum up all these values, right?

2336
02:25:16,960 --> 02:25:24,960
So, okay, because all these numbers are positive, right, in the case, for example, some of the numbers are negative, you just take the absolute first.

2337
02:25:24,960 --> 02:25:32,960
If it's negative 5, take the absolute, it becomes 5, and then you sum up all of them. Right, so if you do that, right, by doing that,

2338
02:25:32,960 --> 02:25:42,960
you'll be able to see that, okay, which is the one that gives you the smallest error. So as I mentioned, sum of absolute error means that you take the absolute value of each of these terms,

2339
02:25:42,960 --> 02:25:50,960
and afterwards you sum them up, right? Then you'll get the sum of absolute error for mode 0, mode 1, and for mode 2.

2340
02:25:50,960 --> 02:26:00,960
So, right, if you go through the exercise for this, you'll see that the one that gives you the smallest error is actually mode 0.

2341
02:26:00,960 --> 02:26:10,960
Okay, so this is the one that gives you the smallest error. Okay, so therefore we answer the question, the smallest prediction error is actually this block here.

2342
02:26:10,960 --> 02:26:20,960
Right, so in this case, a prediction error is actually a block or a matrix. Okay, so let's continue.

2343
02:26:20,960 --> 02:26:32,960
Okay, next it says that, right, we already found the prediction error just now, okay, right, it says that this prediction error is going to be passed through the integer transform,

2344
02:26:32,960 --> 02:26:44,960
okay, given by this particular matrix here. Okay, so ask you to find the output of the integer transform. Okay, so output of the integer transform.

2345
02:26:44,960 --> 02:26:54,960
So you already obtained the prediction error. Now you are supposed to let it go through the integer transform to get the transform output of this prediction error.

2346
02:26:54,960 --> 02:27:02,960
Right, so let's give it a try, okay, to calculate this, to perform this transform.

2347
02:27:02,960 --> 02:27:08,960
Okay, I'll show you this intermediate result because you need the intermediate result.

2348
02:27:08,960 --> 02:27:15,960
So the intermediate result just now, we already see that this is the smallest prediction error.

2349
02:27:15,960 --> 02:27:25,960
One is the one with the smallest prediction error.

2350
02:27:25,960 --> 02:27:35,960
Okay.

2351
02:27:35,960 --> 02:27:45,960
Okay.

2352
02:27:45,960 --> 02:27:55,960
Okay.

2353
02:27:55,960 --> 02:28:05,960
Okay.

2354
02:28:18,960 --> 02:28:27,960
Okay, so anyway, I think that part is just a matter of some familiarization because I think the steps are quite straightforward.

2355
02:28:27,960 --> 02:28:39,960
So therefore, what you need to do is now that, okay, so for you to obtain the integer transform, this is the formula we'll be using, okay, similar to the DCT,

2356
02:28:39,960 --> 02:28:49,960
except for this matrix H now is actually given by this particular integer matrix here, okay.

2357
02:28:49,960 --> 02:28:59,960
Right, so next, right, so we just need to do the multiplication. So for the solutions here, first of all, you multiply these two, okay,

2358
02:28:59,960 --> 02:29:07,960
this matrix H together with this to get the result, the intermediate result, and then this intermediate result, you multiply with this H transpose.

2359
02:29:07,960 --> 02:29:13,960
And if you go through the calculation, you'll see that this is the result that we have, okay.

2360
02:29:13,960 --> 02:29:19,960
So this is the result for this part here. So that's pretty much the answer to this question.

2361
02:29:19,960 --> 02:29:29,960
So from this particular question, you already can see that, right, the idea of using these three different modes.

2362
02:29:29,960 --> 02:29:38,960
Okay, I think the high-level idea already mentioned is that for this 264, the intra-coding, we make use of the neighboring values,

2363
02:29:38,960 --> 02:29:42,960
because since they are there, we should try to leverage on the information.

2364
02:29:42,960 --> 02:29:47,960
And then, but which way is the best, right, we have nine different schemes to come up with it, okay.

2365
02:29:47,960 --> 02:29:53,960
So what we'll do is that for each of these nine schemes, right, we'll try to see which one gives us the smallest prediction error,

2366
02:29:53,960 --> 02:30:01,960
and this smallest prediction error will then go through the integer transform. So that's the basic idea.

2367
02:30:01,960 --> 02:30:13,960
And the exercise actually only focuses on these three different modes, yeah, but in the rear H.264 for 4x4 mode, actually there are nine different modes like this.

2368
02:30:13,960 --> 02:30:21,960
Right, okay, so I think, yeah, okay, maybe I'll just quickly go through this particular question, and then you can think about it at home, yeah,

2369
02:30:21,960 --> 02:30:29,960
and illustrate today, the solution today. So the next exercise is on the integer transform for P-frame coding, yeah.

2370
02:30:29,960 --> 02:30:35,960
So it says that for P-frame coding, right, in 264, right, you'll be using the integer transform.

2371
02:30:35,960 --> 02:30:45,960
So in this particular example here, right, we'll, okay, assume that using this simple operations here, this transform operations here, right,

2372
02:30:45,960 --> 02:30:59,960
and the matrix, the integer DCT matrix is given here, okay. So it asks you to find out what is the two advantages of using integer transform as compared to DCT, yeah.

2373
02:30:59,960 --> 02:31:11,960
Right, and afterwards, okay, the next part is that they assume that, okay, so the target frame is a P, assume the target frame below is a P-frame, okay,

2374
02:31:11,960 --> 02:31:19,960
and this is part of the, okay, so this is the target frame, and we are only focusing on this particular 4x4 macro block here.

2375
02:31:19,960 --> 02:31:29,960
So, okay, so this is our target frame, and this is a P-frame, okay, and then afterwards we assume that the macro block we are looking at is only this 4x4 block here, okay.

2376
02:31:29,960 --> 02:31:36,960
So they ask you to find out, okay, for this particular current macro block here, what is the motion vector, okay.

2377
02:31:36,960 --> 02:31:43,960
So this is the target frame, and this is the reference frame. So you're supposed to find out what's the motion vector, right.

2378
02:31:43,960 --> 02:31:54,960
So afterwards, you're supposed to find out, okay, what is the corresponding, in this particular equation here, what is this corresponding item that it should correspond to, okay.

2379
02:31:54,960 --> 02:31:58,960
And then afterwards, what is the output of this particular transform, okay.

2380
02:31:58,960 --> 02:32:06,960
So pretty much these questions for P-frame encoding, right, so this current target frame, you're only looking at one particular 4x4 pixel block, right,

2381
02:32:06,960 --> 02:32:12,960
so you're supposed to do the motion estimation, right, to find out what's the motion vector.

2382
02:32:12,960 --> 02:32:20,960
Once you've found the motion vector, you're supposed to find out what is the predicted error, okay, what's the prediction error, okay, or what's the difference.

2383
02:32:20,960 --> 02:32:26,960
And afterwards, once you've found the difference, you're supposed to actually do the integer transform, okay.

2384
02:32:26,960 --> 02:32:29,960
So that's pretty much what this question is asking about.

2385
02:32:29,960 --> 02:32:36,960
Okay, I think we'll probably go through the answer next week, right, we'll call it a day. I'll see you next week. Okay, bye-bye.

2386
02:32:37,960 --> 02:32:39,960
Thank you.

2387
02:32:39,960 --> 02:32:42,960
[ Applause ]

2388
02:32:42,960 --> 02:32:52,960
[ Silence ]

2389
02:32:52,960 --> 02:33:02,960
[ Silence ]

2390
02:33:02,960 --> 02:33:12,960
[ Silence ]

2391
02:33:12,960 --> 02:33:22,960
[ Silence ]

2392
02:33:22,960 --> 02:33:32,960
[ Silence ]

2393
02:33:32,960 --> 02:33:42,960
[ Silence ]

2394
02:33:42,960 --> 02:33:52,960
[ Silence ]

2395
02:33:52,960 --> 02:34:02,960
[ Silence ]

2396
02:34:02,960 --> 02:34:12,960
[ Silence ]

