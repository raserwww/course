1
00:04:30,000 --> 00:04:41,000
 Okay, so good evening class, just a reminder, okay, so today is the 5th of September, so

2
00:04:41,000 --> 00:04:47,520
 that's why we are in this Leakonshin LT here, but next week the lecture will be in LT2A

3
00:04:47,520 --> 00:04:53,800
 again, so it's back to the North Spine, whereas you can have your fried rice over there.

4
00:04:53,800 --> 00:04:58,320
 Okay, so just a reminder, next week's lecture is in North Spine.

5
00:04:58,920 --> 00:05:06,719
 Alright, okay, so and also the lecture note part 4 is available, so you can proceed to download it.

6
00:05:06,719 --> 00:05:13,360
 And then finally, just a reminder again regarding the assignment, because there are always some students

7
00:05:13,360 --> 00:05:16,719
 who somehow do not pay attention.

8
00:05:16,719 --> 00:05:22,159
 Right, so the assignment one is ready, so the very important thing is that please,

9
00:05:22,160 --> 00:05:29,360
 right, submit only a single soft copy PDF file, so don't submit two, don't submit three, just one file will do.

10
00:05:29,360 --> 00:05:36,320
 Okay, right, and then afterwards name your file using surname, underscore, given name, underscore,

11
00:05:36,320 --> 00:05:42,320
 multiplication number. So for example, the surname is Tan, okay, given name is E-Ming,

12
00:05:42,320 --> 00:05:46,520
 and then this is a multiplication number connected by underscore.

13
00:05:46,520 --> 00:05:54,760
 Okay, and then, yeah, just to play safe, also write your full name and multiplication number on the first page of your assignment.

14
00:05:54,760 --> 00:06:00,200
 Right, if you are late in submission, or if you don't follow this instruction, you can be penalized.

15
00:06:00,200 --> 00:06:07,719
 Okay, because I remember last year, no, there are about 300 students and there are some students who do not follow the instruction

16
00:06:07,719 --> 00:06:12,400
 and really took me a few hours to sort out all those whose assignment it is.

17
00:06:12,400 --> 00:06:16,840
 So it is going to take a long time, so please follow this instruction strictly.

18
00:06:16,840 --> 00:06:25,919
 Okay, so for those of you who are new to submission using NTU Learn, what you need to do is simply click on this particular submission button.

19
00:06:25,919 --> 00:06:34,159
 So we click it, right, okay, you just need to upload the file. You have one single PDF file, just click on this upload file button,

20
00:06:34,159 --> 00:06:40,760
 okay, and then you browse or local file, and then you just upload the particular file, and then you click the submit and that's it.

21
00:06:40,880 --> 00:06:47,240
 Right, so each student will be given three chances, so maximum is three, you can only submit three times, yeah?

22
00:06:47,240 --> 00:06:51,039
 So please make sure that you check carefully before you do the submission.

23
00:06:52,240 --> 00:06:53,240
 Any questions?

24
00:06:55,400 --> 00:06:59,400
 Right, so if not, then this the announcement, just to be clear.

25
00:07:05,320 --> 00:07:08,440
 Okay, then next, let's continue on with our lecture.

26
00:07:08,440 --> 00:07:16,800
 So in previous lecture, actually we introduced very quickly the general steps in the JPEG encoder.

27
00:07:16,800 --> 00:07:21,960
 So let's do a quick recap before we dive into where we left off last time.

28
00:07:21,960 --> 00:07:29,159
 Okay, so what we have is that, Jane speaking, even the image is very common that we convert this image into the YCBCR format.

29
00:07:29,159 --> 00:07:32,640
 Okay, so you have the Y channel, CB and CR channel, right?

30
00:07:32,640 --> 00:07:36,480
 Okay, and then typically it's in a 420 chroma subsampling.

31
00:07:36,520 --> 00:07:43,480
 Okay, so that means for the CB and CR, every 2x2 pixel block, you only keep one CB and one CR.

32
00:07:43,480 --> 00:07:47,960
 So this will study a bit more when we come to the M-Pack compression.

33
00:07:47,960 --> 00:07:55,360
 Okay, and then afterwards we know we'll partition this particular image into multiple 8x8 pixel block.

34
00:07:55,360 --> 00:07:56,560
 This is what we have.

35
00:07:56,560 --> 00:07:59,160
 Okay, and then we'll perform DCT, right?

36
00:07:59,160 --> 00:08:05,640
 So in this DCT is known as a 2D DCT, but moving forward, we'll just call it DCT because it's understood

37
00:08:05,640 --> 00:08:07,800
 that we are referring to 2D DCT.

38
00:08:07,800 --> 00:08:17,120
 So when you perform the DCT for every 8x8 pixel block, after you perform the 2D DCT, you're going to get 8x8 coefficient.

39
00:08:17,120 --> 00:08:20,000
 So 8x8 DCT coefficient here.

40
00:08:20,000 --> 00:08:30,760
 Right, and afterwards we're going to perform quantization to quantize this 8x8 DCT coefficient into 8x8 quantized DCT coefficient.

41
00:08:30,760 --> 00:08:36,520
 So the reason why we need to perform this quantization, as explained in previous lecture, is quite simple.

42
00:08:36,520 --> 00:08:41,840
 It's because we are using finite number of bits to represent this image.

43
00:08:41,840 --> 00:08:47,920
 So once you are using a finite number of bits, that means you have a finite number of levels that you can represent.

44
00:08:47,920 --> 00:08:51,040
 So therefore we need to perform quantization.

45
00:08:51,040 --> 00:08:57,640
 So this is where we stop in previous lecture when we come to the steps of this quantization.

46
00:08:57,640 --> 00:09:00,600
 So that's why we are now going to continue.

47
00:09:00,640 --> 00:09:07,200
 So in order to perform this quantization, we need to use a quantization table.

48
00:09:07,200 --> 00:09:11,000
 Now let's look into the quantization steps now.

49
00:09:11,000 --> 00:09:23,720
 Right, so in last week we mentioned that we will try to explain how do we perform the quantization first before we come back to the slides to further elaborate on some of the points.

50
00:09:23,720 --> 00:09:26,120
 So let's do that.

51
00:09:26,160 --> 00:09:33,240
 So if you remember in last week, we mentioned that when we want to perform quantization, the idea is quite straightforward.

52
00:09:33,240 --> 00:09:37,120
 So this is the DCT quantize, this is a DCT coefficient.

53
00:09:37,120 --> 00:09:42,560
 So you remember just now, you have the 8x8 pixel block after you perform the DCT.

54
00:09:42,560 --> 00:09:45,320
 This is the 8x8 DCT coefficient.

55
00:09:45,320 --> 00:09:48,320
 Right, so therefore this is your 8x8 DCT coefficient.

56
00:09:48,320 --> 00:09:53,040
 So when you perform quantization, you need to make use of a quantization table.

57
00:09:53,040 --> 00:09:55,360
 So this is the quantization table here.

58
00:09:55,600 --> 00:09:58,440
 So how you perform quantization is actually very straightforward.

59
00:09:58,440 --> 00:10:01,880
 It's an element by element quantization.

60
00:10:01,880 --> 00:10:10,200
 So what it means is that you take this value, for example, you divide by the corresponding value here, and then you round to the nearest integer.

61
00:10:10,200 --> 00:10:13,800
 So for example, 120 divided by 10 is 12.

62
00:10:13,800 --> 00:10:16,800
 Round to the nearest integer is still 12.

63
00:10:16,800 --> 00:10:23,000
 Right, but if you, for example, have this particular number, which is 40, you divide by 15.

64
00:10:23,040 --> 00:10:26,960
 And if you round to the nearest integer, you will see that it's actually 3.

65
00:10:26,960 --> 00:10:35,040
 Right, so which is, therefore each of the element here, you divide by the corresponding entry in your quantization table.

66
00:10:35,040 --> 00:10:41,360
 And then you round to the nearest integer, you'll get this quantized DCT coefficient here.

67
00:10:41,360 --> 00:10:50,080
 Okay, so the values in this particular quantization table here, each of these particular value, we can either call it value, or sometimes we call it step size.

68
00:10:50,080 --> 00:10:52,120
 Right, you refer to the same thing.

69
00:10:52,120 --> 00:10:55,800
 So in previous lecture, I actually asked you these questions here.

70
00:10:55,800 --> 00:11:00,240
 Right, no, if you observe this particular quantization table, what do you notice?

71
00:11:00,240 --> 00:11:08,480
 Yeah, so I didn't, some of you point out in last lecture, you'll notice that this particular quantization table is valued, it's not even.

72
00:11:08,480 --> 00:11:13,320
 So the value was stuck to increase horizontally, vertically and diagonally.

73
00:11:13,320 --> 00:11:18,440
 Right, you can see the values here are small and the value near this range are large.

74
00:11:18,440 --> 00:11:23,320
 So can some of you still remember what is the reason we do that?

75
00:11:26,760 --> 00:11:29,120
 Remember I mentioned that there are two reasons why we do that.

76
00:11:29,120 --> 00:11:39,760
 Why do we design the quantization table in such a way that the values near these top left corners are small and the values near these corners are large?

77
00:11:41,600 --> 00:11:42,600
 Why?

78
00:11:49,000 --> 00:11:49,480
 Anyone?

79
00:11:49,480 --> 00:11:50,480
 You can still remember?

80
00:11:52,120 --> 00:11:55,600
 Yeah, to reduce the error, but why is it by design?

81
00:11:55,600 --> 00:11:57,080
 This way you can reduce the error.

82
00:12:03,000 --> 00:12:03,480
 Yes?

83
00:12:07,800 --> 00:12:17,600
 Ah, okay, so yeah, I guess what you're trying to say is that, right, from last lecture, we know that given an 8 by 8 pixel block, right, because pixel values,

84
00:12:17,840 --> 00:12:24,600
 because of the property of spatial redundancy, the pixel value tends to change slowly in the pixel domain.

85
00:12:24,600 --> 00:12:32,040
 So once you perform DCT, right, that means the energy will be packed into the low AC corner, right?

86
00:12:32,040 --> 00:12:34,640
 So this is known as the energy compaction.

87
00:12:34,640 --> 00:12:43,880
 That means, now most of the DCT coefficient near this top left corner, or corresponding to the low AC regions, are large.

88
00:12:43,880 --> 00:12:46,200
 You can see the value here, they are large here, right?

89
00:12:46,200 --> 00:12:55,280
 So therefore, to reduce the quantization error, right, because most of the values here are large, to reduce the quantization error, okay,

90
00:12:55,280 --> 00:13:02,280
 that correspond to this large value here, right, we'll use a small step size, because the smaller the step size,

91
00:13:02,280 --> 00:13:06,160
 that means we know that the smaller the quantization error will be.

92
00:13:06,160 --> 00:13:16,040
 Okay, so that's the one of the reason, okay, because the DCT coefficient near this corner, or the low AC coefficient, have large value.

93
00:13:16,040 --> 00:13:21,199
 Therefore, to reduce the quantization error, therefore we use a small step size here.

94
00:13:21,199 --> 00:13:23,160
 So that's one, the first reason.

95
00:13:23,160 --> 00:13:24,160
 What's the second reason?

96
00:13:29,160 --> 00:13:38,599
 Okay, exactly, because human visual systems are more sensitive to changes or distortion or error at low frequency component,

97
00:13:38,599 --> 00:13:40,959
 and this is a low frequency component.

98
00:13:40,960 --> 00:13:50,080
 That means any small changes in the quantization error or values here would actually introduce more perceptual difference to your eye.

99
00:13:50,080 --> 00:13:56,880
 So therefore, because humans are more sensitive to no coefficient near this corner, so therefore, by using the same argument,

100
00:13:56,880 --> 00:14:01,160
 we should reduce the error caused by the quantization here.

101
00:14:01,160 --> 00:14:03,600
 Hence, we should use a small step size here.

102
00:14:03,600 --> 00:14:10,840
 Okay, so these are the two reasons why the quantization table was designed in this particular manner.

103
00:14:11,040 --> 00:14:17,280
 So with that basic understanding, now we can go back to the explanation here.

104
00:14:17,280 --> 00:14:22,760
 So the quantization, as I mentioned, because we're using a finite number of bits to represent the image,

105
00:14:22,760 --> 00:14:30,760
 so therefore we need to perform quantization, so that you can only represent with a finite number of levels,

106
00:14:30,760 --> 00:14:37,120
 so as to map the continuous value into a finite number of discrete values.

107
00:14:37,160 --> 00:14:40,400
 So in order to do that, we'll be using the quantization table.

108
00:14:40,400 --> 00:14:46,480
 So from the earlier operation, you'll see that we need a quantization table to perform the quantization.

109
00:14:46,480 --> 00:14:53,480
 So when you perform quantization, it's clear that information loss will occur, because it's a many to one mapping now.

110
00:14:53,480 --> 00:14:58,320
 So therefore, information loss will occur during the quantization.

111
00:14:59,280 --> 00:15:02,960
 Right, okay, so next, the properties of the quantization table.

112
00:15:02,960 --> 00:15:07,600
 So just now we have spent a bit of time to explain about some of the properties.

113
00:15:07,600 --> 00:15:12,160
 So okay, we know that human is more sensitive to the DC and low AC coefficient, right?

114
00:15:12,160 --> 00:15:14,040
 So we have just explained about it.

115
00:15:14,040 --> 00:15:20,280
 So therefore, more emphasis should be taken in quantizing this DC and low AC coefficient.

116
00:15:20,280 --> 00:15:22,240
 So what do we mean by more emphasis?

117
00:15:23,200 --> 00:15:29,360
 More emphasis means that we should try to make sure that there's less quantization error near this region.

118
00:15:29,360 --> 00:15:35,800
 So less quantization error means that we should have a smaller value or step size near those regions.

119
00:15:35,800 --> 00:15:45,880
 Okay, so therefore, we'll use a smaller step size or quantization value to quantize those DC and low AC coefficient to reduce the quantization error.

120
00:15:45,880 --> 00:15:50,720
 So just now, we spent quite a bit of time to explain about the reason.

121
00:15:50,720 --> 00:15:59,800
 Okay, and further, we know that the step size and all the value in the quantization table is a compromise between the level of compression and information loss.

122
00:15:59,800 --> 00:16:04,640
 So what it means is that for this particular step size in the quantization table,

123
00:16:04,640 --> 00:16:10,520
 if you increase the value or if you increase the step size, what will happen?

124
00:16:10,520 --> 00:16:13,600
 From the quantization error perspective, right?

125
00:16:13,680 --> 00:16:21,720
 So suppose this particular quantization table, if all these values here will increase this value,

126
00:16:21,720 --> 00:16:28,480
 so if it increases value, what would be its impact in terms of the quantization error?

127
00:16:28,480 --> 00:16:33,920
 The error would increase or decrease.

128
00:16:33,920 --> 00:16:38,640
 For example, instead of 10 here, if I increase it to 20,

129
00:16:38,640 --> 00:16:44,880
 do you think you'll introduce more quantization error or less quantization error?

130
00:16:44,880 --> 00:16:46,480
 More, right?

131
00:16:46,480 --> 00:16:51,840
 So larger step size means that you'll introduce more quantization error.

132
00:16:51,840 --> 00:16:56,240
 Okay, but if you do that, what would be the potential advantage?

133
00:16:56,240 --> 00:17:04,160
 So for example, if you increase the step size here, you know the price you have to pay is now, you'll introduce more quantization error.

134
00:17:04,160 --> 00:17:10,640
 That means later on, your reconstructed images would be not as good.

135
00:17:10,640 --> 00:17:16,720
 So for example, initially given an image, you partition it into numerous 8x8 pixel blocks.

136
00:17:16,720 --> 00:17:23,720
 So each of the pixel blocks, you do the transformation to get the 8x8 DCT coefficient.

137
00:17:23,720 --> 00:17:30,160
 And afterwards, you perform the quantization, then you get your quantized DCT coefficient.

138
00:17:30,160 --> 00:17:38,960
 So if you use a large step size in the quantization table here, that means actually you introduce more error in your quantized DCT coefficient.

139
00:17:38,960 --> 00:17:40,880
 So that is the downside.

140
00:17:40,880 --> 00:17:50,160
 But what could be the potential advantage of doing that if you want to use a large quantization step size in the table?

141
00:17:50,160 --> 00:17:59,040
 Are there any potential advantages if you increase the step size?

142
00:17:59,120 --> 00:18:00,879
 Surely there must be some advantage.

143
00:18:00,879 --> 00:18:11,040
 If there's no advantage, then people will just put the step size all equal to one, or they don't perform quantization at all, or they just do a quantization with a step size of one already.

144
00:18:11,040 --> 00:18:14,480
 So surely you must have a reasonable value here.

145
00:18:14,480 --> 00:18:17,680
 It cannot be overly small.

146
00:18:17,680 --> 00:18:23,840
 So what's the advantage if you increase the step size?

147
00:18:23,919 --> 00:18:30,000
 So if you increase the step size, what will happen is that you are going to get a lot of...

148
00:18:30,000 --> 00:18:34,159
 This quantized value is going to be smaller, generally speaking, smaller.

149
00:18:34,159 --> 00:18:39,199
 And in particular, you're going to get a lot of zero near this corner here.

150
00:18:39,199 --> 00:18:45,600
 Because to start off, your DCT coefficient near this corner is already small.

151
00:18:45,600 --> 00:18:46,800
 This is an exaggeration.

152
00:18:46,800 --> 00:18:48,560
 Usually there will be some value here.

153
00:18:48,560 --> 00:18:51,040
 But start off is already small.

154
00:18:51,120 --> 00:18:56,800
 If you divide by a large step size, that means these values are likely going to have a lot of zero.

155
00:18:56,800 --> 00:19:05,760
 So when you have a lot of zero bunch together, a subsequent technique known as a run-length coding is going to compress it more effectively.

156
00:19:05,760 --> 00:19:14,800
 Therefore, what it means is that if you use the largest step size, you are going to get more zero near this high AC coefficient.

157
00:19:14,800 --> 00:19:19,200
 And therefore, your subsequent run-length coding is going to compress it better.

158
00:19:19,200 --> 00:19:22,000
 And your file size is going to become smaller.

159
00:19:22,000 --> 00:19:32,000
 So therefore, to summarize, if you use a larger step size, the price you have to pay is that your reconstructed image may not be as good now.

160
00:19:32,000 --> 00:19:34,240
 Because you have more quantization error.

161
00:19:34,240 --> 00:19:38,960
 But the advantage that you have is now your file size is much smaller.

162
00:19:38,960 --> 00:19:42,240
 Or in other words, its compression ratio is higher.

163
00:19:42,240 --> 00:19:44,880
 So therefore, it's actually a trade-off.

164
00:19:44,880 --> 00:19:54,320
 You can see that the step size of the value in the quantization table is a compromise or a trade-off between the level of compression and the information loss.

165
00:19:54,320 --> 00:19:56,640
 So let's just repeat one more time.

166
00:19:56,640 --> 00:20:02,640
 If you use a large step size, the information loss will be large or small.

167
00:20:02,640 --> 00:20:09,760
 If you use a large step size, the information loss or the quantization error will be large or small.

168
00:20:10,080 --> 00:20:14,240
 But your level of compression now will be high or low.

169
00:20:14,240 --> 00:20:18,720
 If you use a large step size, your level of compression will be...

170
00:20:18,720 --> 00:20:25,680
 Level of compression or the compression ratio means how much you can compress it.

171
00:20:25,680 --> 00:20:29,120
 It's going to be high, right?

172
00:20:29,120 --> 00:20:39,520
 If you use a large compression ratio, that means your AC coefficient is going to be...

173
00:20:39,520 --> 00:20:44,560
 Lots of zero. That means the subsequent run-line coding can compress it into much smaller file size.

174
00:20:44,560 --> 00:20:51,440
 Therefore, your compression ratio is going to be large or your level of compression.

175
00:20:51,440 --> 00:20:54,240
 You can compress it into a much smaller file size.

176
00:20:54,240 --> 00:20:54,879
 Okay?

177
00:20:54,879 --> 00:20:59,040
 So now if you do the reverse, if you use a small step size...

178
00:20:59,040 --> 00:21:05,360
 Suppose if we use a small step size in your quantization table, the information loss now will be...

179
00:21:05,360 --> 00:21:07,439
 Large or small.

180
00:21:07,439 --> 00:21:13,280
 If you use a small step size, the information loss will be small.

181
00:21:13,280 --> 00:21:21,600
 But your level of compression will be small as well because now you cannot compress it that well.

182
00:21:21,600 --> 00:21:22,479
 Okay?

183
00:21:22,479 --> 00:21:22,719
 Right?

184
00:21:22,719 --> 00:21:22,959
 Okay.

185
00:21:22,959 --> 00:21:24,719
 So therefore it's actually a compromise.

186
00:21:24,719 --> 00:21:29,040
 You have to choose a suitable value to balance between these two factors.

187
00:21:30,479 --> 00:21:30,719
 Right?

188
00:21:30,719 --> 00:21:31,040
 Okay.

189
00:21:31,040 --> 00:21:35,360
 So now, mathematically, how do we represent quantization?

190
00:21:35,360 --> 00:21:40,320
 So we can see that the quantization is illustrated using this formula.

191
00:21:40,320 --> 00:21:44,879
 So first of all, this FUV here is a DCT coefficient.

192
00:21:44,879 --> 00:21:45,520
 Okay?

193
00:21:45,520 --> 00:21:48,879
 And then this QUV here is the quantization...

194
00:21:49,680 --> 00:21:51,920
 The value in the quantization table.

195
00:21:51,920 --> 00:21:52,159
 Right?

196
00:21:52,159 --> 00:21:55,920
 And then this F cap here is your quantized DCT coefficient.

197
00:21:55,920 --> 00:22:00,560
 So essentially what you see is that you take your DCT coefficient,

198
00:22:00,560 --> 00:22:06,399
 you divide that by the quantization value in your quantization table element by element,

199
00:22:07,040 --> 00:22:11,919
 you round to the nearest integer, and then you obtain your quantized DCT coefficient.

200
00:22:11,919 --> 00:22:12,159
 Right?

201
00:22:12,159 --> 00:22:17,200
 So that's pretty much the equation that described the process that we have explained earlier on.

202
00:22:17,840 --> 00:22:18,080
 Right?

203
00:22:18,080 --> 00:22:18,399
 Okay.

204
00:22:18,399 --> 00:22:23,360
 So because for an image, typically we change it into YCBCR domain.

205
00:22:23,360 --> 00:22:30,000
 So you have the luminance component as well as the chrominance component here.

206
00:22:30,000 --> 00:22:36,160
 So for the luminance component, this is a typical quantization table that we use.

207
00:22:36,160 --> 00:22:42,880
 And for the chrominance, CB and CR component, these are the typical quantization table that we use.

208
00:22:42,880 --> 00:22:47,120
 How do you obtain these two quantizations is that when the people, the chip hack,

209
00:22:48,240 --> 00:22:51,920
 working group that designed this particular quantization table,

210
00:22:51,920 --> 00:22:57,360
 they try out many different types of images and find out this particular quantization table

211
00:22:57,360 --> 00:22:58,320
 seems to work well.

212
00:22:58,320 --> 00:22:58,560
 Right?

213
00:22:58,560 --> 00:23:03,760
 So that's why they decided to adopt this two default quantization table.

214
00:23:05,760 --> 00:23:06,080
 All right?

215
00:23:06,080 --> 00:23:06,320
 Okay.

216
00:23:06,320 --> 00:23:09,120
 So this process, we just explained how do we perform the quantization.

217
00:23:10,639 --> 00:23:10,879
 Right.

218
00:23:10,879 --> 00:23:11,200
 Okay.

219
00:23:11,200 --> 00:23:16,960
 So next we are going to compare or study the effects of this particular quantization now.

220
00:23:16,960 --> 00:23:20,000
 See, suppose we have this well-known Lina image.

221
00:23:20,639 --> 00:23:24,560
 I think some of you know where this Lina image come from.

222
00:23:24,560 --> 00:23:24,800
 Right?

223
00:23:25,760 --> 00:23:28,480
 Anyone know where this Lina image come from?

224
00:23:30,960 --> 00:23:37,840
 So this is a very well-known image from an image processing perspective.

225
00:23:37,840 --> 00:23:40,480
 Actually, this particular image initially come from a magazine.

226
00:23:41,600 --> 00:23:44,159
 Yeah, it come from a very well-known magazine.

227
00:23:44,159 --> 00:23:44,800
 Right?

228
00:23:44,800 --> 00:23:46,800
 You all can go and find out which magazine it is.

229
00:23:47,360 --> 00:23:47,600
 Right.

230
00:23:47,600 --> 00:23:47,919
 Okay.

231
00:23:47,919 --> 00:23:49,440
 By current standard, it's nothing.

232
00:23:50,480 --> 00:23:50,800
 Okay.

233
00:23:50,800 --> 00:23:54,399
 So anyway, this is a very well-known image called Lina, right?

234
00:23:54,399 --> 00:23:57,919
 From the image compression, image processing perspective.

235
00:23:57,919 --> 00:24:01,440
 So now if you look at some, one of this 8x8 pixel block here.

236
00:24:01,440 --> 00:24:04,480
 So let's look at this particular 8x8 pixel block here.

237
00:24:04,480 --> 00:24:08,480
 And this particular 8x8 pixel block here is coming from a smooth region.

238
00:24:08,480 --> 00:24:08,879
 All right?

239
00:24:08,879 --> 00:24:12,320
 It's a region that smooth or has low frequency content.

240
00:24:12,320 --> 00:24:17,440
 So if you look, if you zoom in and look at this 8x8 pixel value here, right?

241
00:24:17,440 --> 00:24:20,560
 Using Fij to represent, you can see this is the pixel block here.

242
00:24:21,040 --> 00:24:22,879
 So the value change very slowly.

243
00:24:22,879 --> 00:24:26,399
 So this has, this is, we can call it a smooth region,

244
00:24:26,399 --> 00:24:30,000
 or it has low frequency content because the value change very slowly.

245
00:24:30,560 --> 00:24:30,800
 Right?

246
00:24:30,800 --> 00:24:31,040
 Okay.

247
00:24:31,040 --> 00:24:36,240
 So next assuming that we perform DCT on this 8x8 pixel block,

248
00:24:36,240 --> 00:24:40,000
 then we'll get this 8x8 DCT coefficient here.

249
00:24:40,000 --> 00:24:42,320
 So if you look at this 8x8 DCT coefficient,

250
00:24:42,320 --> 00:24:48,399
 we can see that the energy is actually packed on this top left corner now.

251
00:24:48,400 --> 00:24:51,680
 So energy is defined as each of the value you squared.

252
00:24:51,680 --> 00:24:58,720
 So it's quite obvious that now energy is packed to this low AC coefficient or top left corner.

253
00:24:58,720 --> 00:25:01,840
 And then for this high AC coefficient, you can see the values are smooth.

254
00:25:02,400 --> 00:25:02,720
 Okay?

255
00:25:03,360 --> 00:25:03,600
 Right?

256
00:25:03,600 --> 00:25:08,080
 So next, okay, so you can see this is a smooth image of pixel block here.

257
00:25:09,200 --> 00:25:09,440
 Right?

258
00:25:09,440 --> 00:25:12,000
 So next we perform the quantization.

259
00:25:12,000 --> 00:25:13,760
 So how do we perform the quantization?

260
00:25:13,760 --> 00:25:18,320
 What it means is that we take this particular 8x8 pixel block, right?

261
00:25:18,720 --> 00:25:22,080
 We look at, okay, we use this quantization table.

262
00:25:22,080 --> 00:25:23,760
 We take the corresponding value.

263
00:25:23,760 --> 00:25:29,360
 For example, this value here, 515 divided by this value 16,

264
00:25:29,360 --> 00:25:31,360
 and round to the nearest integer.

265
00:25:31,360 --> 00:25:31,680
 Okay?

266
00:25:31,680 --> 00:25:34,160
 And then we'll get the first value here.

267
00:25:34,720 --> 00:25:34,960
 Okay?

268
00:25:34,960 --> 00:25:40,000
 And then if you repeat that, you take your second DCT coefficient 65,

269
00:25:40,880 --> 00:25:47,440
 you divide by the corresponding quantization values or step size at the corresponding position.

270
00:25:47,520 --> 00:25:52,000
 You round to the nearest integer, then you'll get this second value here.

271
00:25:52,000 --> 00:25:52,560
 Okay?

272
00:25:52,560 --> 00:25:57,360
 So you repeat that, then you're complete and you obtain your quantized DCT coefficient.

273
00:25:58,000 --> 00:26:00,560
 So once you obtain your quantized DCT coefficient,

274
00:26:00,560 --> 00:26:07,360
 then actually there's a further, no steps for you to perform the compression using entropy encoding.

275
00:26:07,360 --> 00:26:07,840
 Okay?

276
00:26:07,840 --> 00:26:11,200
 But that one, we assume that, no, we are not going to look into it at the moment.

277
00:26:11,200 --> 00:26:14,960
 We just assume that you can actually continue with the compression

278
00:26:14,960 --> 00:26:18,960
 and then finally obtain a compressed image or bit stream.

279
00:26:18,960 --> 00:26:21,360
 So now you have a compressed image already.

280
00:26:21,360 --> 00:26:26,160
 So now if you want to do the reverse, you want to decompress or reconstruct the image,

281
00:26:26,160 --> 00:26:32,400
 then we have to do the reverse of performing the inverse entropy encoding.

282
00:26:32,400 --> 00:26:32,640
 Right?

283
00:26:32,640 --> 00:26:34,640
 And then once we reach that particular stage,

284
00:26:34,640 --> 00:26:39,280
 then the next thing is that we need to do the inverse quantization.

285
00:26:39,840 --> 00:26:40,400
 Okay?

286
00:26:40,400 --> 00:26:40,560
 Right?

287
00:26:40,560 --> 00:26:42,960
 So we need to do the inverse quantization.

288
00:26:42,960 --> 00:26:47,920
 So during the quantization step, what we do is that we take the quantization,

289
00:26:48,800 --> 00:26:50,160
 this is a DCT coefficient.

290
00:26:51,200 --> 00:26:55,280
 We divide by the corresponding value in the quantization table,

291
00:26:55,280 --> 00:26:57,120
 we round to the nearest integer.

292
00:26:57,120 --> 00:26:59,200
 So that is a forward quantization.

293
00:26:59,200 --> 00:27:04,160
 So in the inverse quantization, right, so what we do is that we take this,

294
00:27:04,160 --> 00:27:11,840
 we multiply with the corresponding value in your quantization table to obtain this de-quantized

295
00:27:12,800 --> 00:27:13,040
 decantization.

296
00:27:13,040 --> 00:27:13,919
 So it's quite straightforward.

297
00:27:13,919 --> 00:27:14,320
 Right?

298
00:27:14,320 --> 00:27:18,399
 During quantization, you divide during the de-quantization, you multiply.

299
00:27:18,399 --> 00:27:18,879
 Okay?

300
00:27:18,879 --> 00:27:21,600
 So therefore for each of these particular values here,

301
00:27:21,600 --> 00:27:27,040
 you multiply with the corresponding quantization values in the quantization table,

302
00:27:28,080 --> 00:27:33,520
 and then you obtain this de-quantized DCT coefficient.

303
00:27:33,520 --> 00:27:33,919
 All right?

304
00:27:33,919 --> 00:27:37,760
 So once you have this de-quantized DCT coefficient,

305
00:27:37,760 --> 00:27:43,200
 and after works what you can do is that you can perform the inverse DCT to construct the

306
00:27:43,200 --> 00:27:45,360
 reconstructed pixel block already.

307
00:27:45,360 --> 00:27:51,280
 So you can see, right, one is that you have the forward path which is doing the encoding,

308
00:27:51,280 --> 00:27:52,720
 right, to obtain your bitstream.

309
00:27:52,720 --> 00:27:56,720
 The other is doing the reverse, which is trying to perform the decoding,

310
00:27:56,720 --> 00:27:58,879
 which is to reconstruct your pixel block.

311
00:27:58,879 --> 00:28:02,240
 So therefore now, this is your reconstructed pixel block.

312
00:28:02,240 --> 00:28:02,640
 Okay?

313
00:28:02,640 --> 00:28:06,080
 So you start off with this particular pixel block.

314
00:28:06,159 --> 00:28:06,480
 Okay?

315
00:28:06,480 --> 00:28:08,720
 And then this is your reconstructed pixel block.

316
00:28:08,720 --> 00:28:12,240
 If you take the difference between them, right, so this is the arrow.

317
00:28:12,240 --> 00:28:15,760
 So this arrow is a difference between your original pixel block

318
00:28:15,760 --> 00:28:18,320
 minus your reconstructed pixel block.

319
00:28:18,320 --> 00:28:18,639
 Okay?

320
00:28:18,639 --> 00:28:20,240
 So this is the pixel blocks here.

321
00:28:20,240 --> 00:28:23,919
 So what can you observe from this particular arrow?

322
00:28:31,199 --> 00:28:35,760
 So you notice that most of these values here are actually quite small.

323
00:28:36,080 --> 00:28:36,240
 Right?

324
00:28:36,240 --> 00:28:41,679
 That means actually, you know, your compression has performed quite well because, right,

325
00:28:41,679 --> 00:28:46,879
 given original image, you do the compression, okay, to compress into the bitstream.

326
00:28:46,879 --> 00:28:50,800
 And after works, you do the reverse to reconstruct your pixel block.

327
00:28:50,800 --> 00:28:55,840
 You'll notice that your original pixel block and your reconstructed or decompressed pixel

328
00:28:55,840 --> 00:28:58,320
 blocks are arrows are actually very small.

329
00:28:58,320 --> 00:28:58,560
 Right?

330
00:28:58,560 --> 00:29:04,960
 So therefore what it means is that, you know, for JPEG or Technic, it can actually compress

331
00:29:04,960 --> 00:29:08,160
 this kind of a smooth pixel block quite well.

332
00:29:09,520 --> 00:29:09,840
 Okay?

333
00:29:09,840 --> 00:29:11,760
 Now let's look at a second example.

334
00:29:11,760 --> 00:29:17,920
 This second example now is that we are going to look at this particular 8x8 pixel block here now.

335
00:29:17,920 --> 00:29:23,200
 So this particular 8x8 pixel block now is coming from what we know as a texture region.

336
00:29:24,000 --> 00:29:24,400
 Okay?

337
00:29:24,400 --> 00:29:25,120
 Texture.

338
00:29:25,120 --> 00:29:25,360
 Right?

339
00:29:25,360 --> 00:29:29,120
 That means actually, there's a certain pattern or in other words, there are high frequency

340
00:29:29,120 --> 00:29:30,000
 components.

341
00:29:30,000 --> 00:29:32,640
 That means the pixel value changed very quickly.

342
00:29:32,720 --> 00:29:35,520
 So this is the 8x8 pixel block now.

343
00:29:35,520 --> 00:29:40,480
 So if you zoom in and show the pixel distribution of this 8x8 pixel block,

344
00:29:40,480 --> 00:29:42,160
 you can see this is how it looks like.

345
00:29:42,160 --> 00:29:42,400
 Okay?

346
00:29:42,400 --> 00:29:44,080
 The pixel value changed quite quickly.

347
00:29:44,720 --> 00:29:44,960
 Right?

348
00:29:44,960 --> 00:29:50,560
 So after you perform the DCT, right, you will see that this is our DCT-KVCN here.

349
00:29:50,560 --> 00:29:50,800
 Right?

350
00:29:50,800 --> 00:29:51,120
 Okay.

351
00:29:51,120 --> 00:29:59,360
 So if you observe this particular DCT-KVCN here, as compared to the DCT-KVCN for just now

352
00:29:59,360 --> 00:30:04,000
 the earlier smooth block, what do you observe?

353
00:30:04,000 --> 00:30:04,719
 What's the difference?

354
00:30:05,520 --> 00:30:14,240
 The DCT-KVCN for a smooth pixel block versus the DCT-KVCN for a texture pixel block.

355
00:30:14,240 --> 00:30:14,959
 What do you notice?

356
00:30:26,719 --> 00:30:27,520
 What do you notice?

357
00:30:29,760 --> 00:30:37,280
 The high frequency component, the values are,

358
00:30:41,360 --> 00:30:52,000
 okay, for this texture region, the high AC-KVCN here, the values are lower or larger as compared to

359
00:30:52,000 --> 00:30:57,120
 larger, right, larger compared to the, just on the smooth block.

360
00:30:57,120 --> 00:31:03,040
 So if you compare, if I can just show you one more time, so you can see this is the DCT-KVCN

361
00:31:03,040 --> 00:31:04,239
 for the smooth block.

362
00:31:04,239 --> 00:31:08,000
 You can see most of the energy now is packed to this corner already.

363
00:31:08,000 --> 00:31:08,399
 Okay?

364
00:31:08,399 --> 00:31:12,479
 The values at this high AC-KVCN are actually small.

365
00:31:12,959 --> 00:31:13,199
 Right?

366
00:31:13,199 --> 00:31:16,639
 As compared to now, this is the texture block.

367
00:31:16,639 --> 00:31:22,399
 You can see actually for this high AC-KVCN here, actually the values are larger.

368
00:31:23,040 --> 00:31:25,120
 So the reason is, the question is why?

369
00:31:25,120 --> 00:31:32,239
 Why is that for a texture pixel block, right, for a texture block like this?

370
00:31:32,239 --> 00:31:37,120
 Somehow this high AC-KVCN's, their values are not so large.

371
00:31:37,120 --> 00:31:42,399
 I mean, for this pixel block, the high AC-KVCN's, their values are large.

372
00:31:43,120 --> 00:31:47,840
 Or in other words, the energy compaction properly is not so good for texture region.

373
00:31:48,800 --> 00:31:49,600
 What is the reason?

374
00:31:50,480 --> 00:31:57,040
 If you remember, right, when we study about this DCT transform, what is the assumption

375
00:31:57,040 --> 00:32:01,600
 for this particular properties of energy compaction property to be valid?

376
00:32:05,120 --> 00:32:12,000
 DCT, we say that it can actually perform energy compaction, pack the energy into a small number

377
00:32:12,000 --> 00:32:12,959
 of kVCN.

378
00:32:12,959 --> 00:32:15,600
 But that's under the assumption that what?

379
00:32:15,600 --> 00:32:17,040
 Under what assumption?

380
00:32:17,440 --> 00:32:19,120
 Under what assumption?

381
00:32:23,600 --> 00:32:24,639
 Under what assumption?

382
00:32:26,159 --> 00:32:33,200
 In the original pixel domain, the pixel values are changing slowly, right?

383
00:32:33,200 --> 00:32:35,360
 So the pixel values are changing slowly.

384
00:32:35,360 --> 00:32:38,560
 Okay, so which is true just now for the smooth region?

385
00:32:38,560 --> 00:32:45,600
 But for the texture pixel block like this, because the pixel values are changing very quickly,

386
00:32:45,679 --> 00:32:49,040
 therefore actually it has high energy contained.

387
00:32:49,040 --> 00:32:54,639
 That's why, you know, this particular high AC-KVCN's, their values are larger.

388
00:32:54,639 --> 00:33:02,719
 So in other words, the energy compaction properties is not so well exhibited in this

389
00:33:02,719 --> 00:33:07,199
 texture region, because the assumption that the pixel values change very slowly is not

390
00:33:07,199 --> 00:33:08,399
 correct here now.

391
00:33:08,399 --> 00:33:12,719
 Okay, we say that for most of the images, if you look at a small pixel region,

392
00:33:12,720 --> 00:33:16,000
 usually the pixel value changes slowly, but there are some exceptions.

393
00:33:16,000 --> 00:33:19,200
 For example, an exception is this texture region.

394
00:33:19,200 --> 00:33:21,600
 So anyway, yeah, so this is the comparison.

395
00:33:21,600 --> 00:33:27,600
 So next if we continue, so we have this DCT-KVCN, we see that for texture region,

396
00:33:27,600 --> 00:33:30,880
 the AC-KVCN's, the values are also larger.

397
00:33:31,680 --> 00:33:34,720
 Okay, afterwards we perform the quantization.

398
00:33:34,720 --> 00:33:36,560
 We make use of a quantization table.

399
00:33:36,560 --> 00:33:38,320
 We repeat what we've described.

400
00:33:38,320 --> 00:33:41,840
 So you'll see that this is your quantized DCT-KVCN.

401
00:33:41,919 --> 00:33:42,720
 All right, okay.

402
00:33:42,720 --> 00:33:48,080
 So you come to this stage already, and afterwards you continue on to compress it into a small file

403
00:33:48,080 --> 00:33:48,720
 size.

404
00:33:48,720 --> 00:33:52,879
 So next you want to do the reverse of reconstructing the image now.

405
00:33:52,879 --> 00:33:57,679
 So you do the reverse of the entropy encoding, and afterwards you need to perform.

406
00:33:58,399 --> 00:34:01,679
 When you come to this stage, the fault stage is the quantization.

407
00:34:01,679 --> 00:34:07,439
 So the decoder stage would then be decantization or inverse quantization.

408
00:34:07,440 --> 00:34:12,240
 So you just take this, you multiply with the corresponding value in the quantization table,

409
00:34:12,240 --> 00:34:14,880
 you'll get your decantized DCT-KVCN.

410
00:34:15,440 --> 00:34:18,480
 Right, and afterwards you perform the inverse DCT.

411
00:34:18,480 --> 00:34:21,040
 This is your reconstructed pixel block.

412
00:34:21,040 --> 00:34:23,920
 So now you take the difference between your original pixel block

413
00:34:24,960 --> 00:34:28,880
 and your reconstructed pixel block, you'll see that this is the error.

414
00:34:28,880 --> 00:34:37,360
 Okay, so now if you compare the errors for the smooth region, okay, versus the error for the

415
00:34:37,360 --> 00:34:42,240
 texture region, you can see that, right, the error for the texture region is much larger now.

416
00:34:42,720 --> 00:34:48,000
 Okay, so these are all the observations that we will know, right, when we perform JPEG compression,

417
00:34:48,000 --> 00:34:50,880
 it's impact on different types of pixel block.

418
00:34:50,880 --> 00:34:55,360
 Jane speaking, for smooth region, it can compress it well, right, the error will be smaller,

419
00:34:55,360 --> 00:35:01,440
 but for a texture region, it doesn't work so well, because it does not satisfy the assumption that,

420
00:35:01,440 --> 00:35:04,960
 you know, the pixel value changes slowly.

421
00:35:04,960 --> 00:35:13,200
 Okay, right, okay, so now we come to this point that let's try to do a simple exercise to see

422
00:35:13,200 --> 00:35:15,120
 whether you understand what I've been talking about.

423
00:35:15,680 --> 00:35:20,160
 Right, okay, so for this exercise, it says that in a new image compression scheme,

424
00:35:20,160 --> 00:35:25,520
 a student would like to follow similar steps in the baseline JPEG to perform grayscale image

425
00:35:25,520 --> 00:35:26,560
 compression.

426
00:35:26,560 --> 00:35:32,160
 Okay, however, the student proposed to partition the image into multiple 4x4 pixel block,

427
00:35:32,160 --> 00:35:37,520
 perform 4x4 DCT for each block, and follow by the corresponding quantization and entropy

428
00:35:38,080 --> 00:35:38,640
 encoding.

429
00:35:39,200 --> 00:35:44,960
 So part one, it asks you to briefly describe a mean similarity and a mean difference between the

430
00:35:44,960 --> 00:35:52,319
 basis functions of the DCT used in this new compression scheme, and the one used in baseline

431
00:35:52,319 --> 00:35:52,799
 JPEG.

432
00:35:53,359 --> 00:35:59,680
 Okay, so I think we have covered just now the, you know, this basis function in the previous

433
00:35:59,680 --> 00:36:06,160
 lecture, and in the past 30 minutes or so, we also spent some time to talk about the quantization.

434
00:36:06,160 --> 00:36:10,879
 Right, okay, so now it's probably time for you to take a pause, think about it, and then afterwards

435
00:36:10,879 --> 00:36:12,879
 you'll go through the answers together.

436
00:36:24,160 --> 00:36:29,440
 Yeah, so by the way, all these are past year exam questions, so I include it here so that you

437
00:36:29,440 --> 00:36:41,920
 can go through it in the lecture and you also know what to expect in the exam.

438
00:37:29,440 --> 00:37:55,040
 Okay, so yeah, at least we have some time to think about it.

439
00:37:55,040 --> 00:38:00,880
 So any suggestion? What do you think is the similarity between the basis function for this

440
00:38:00,880 --> 00:38:07,840
 new scheme, which is a 4x4 block scheme versus the JPEG?

441
00:38:09,840 --> 00:38:14,320
 Right, so first of all, for JPEG, what is the pixel block that we partitioned into?

442
00:38:15,279 --> 00:38:21,600
 It's an 8x8, right? So for JPEG, given an image, we partitioned into numerous 8x8 pixel blocks,

443
00:38:21,680 --> 00:38:28,240
 but for this current scheme, it's a 4x4 pixel block, even an image, we partitioned into 4x4 pixel

444
00:38:28,240 --> 00:38:36,160
 block. Okay, so now one is 4x4, JPEG is 8x8. So in terms of their basis function, can you at least

445
00:38:36,720 --> 00:38:41,279
 explain, for example, we can start with the difference. The difference is much easier to

446
00:38:41,279 --> 00:38:45,839
 explain. What's the difference? There are actually quite a number of them, but just give me one,

447
00:38:45,840 --> 00:38:57,440
 the obvious one. In terms of the JPEG 8x8, how many DCT basis functions do you have? How many

448
00:38:57,440 --> 00:39:10,240
 different types? How many? 64, right? So if you remember, yeah, for JPEG, right, so you have 64

449
00:39:10,240 --> 00:39:15,919
 different types of basis functions, but for 4x4 pixel blocks, how many different types do you have?

450
00:39:18,319 --> 00:39:19,839
 16, huh? So you can see.

451
00:39:26,799 --> 00:39:32,720
 Yeah, okay, so this is for the 4x4 pixel block, right? So the types of basis function that you

452
00:39:32,720 --> 00:39:39,040
 have is 16 of them, and this is the DCT. Sorry, this is the JPEG, you have 64. So the number of

453
00:39:39,040 --> 00:39:46,720
 DCT basis function is 16 versus 64. So that's one, the difference. In terms of similarity, what you

454
00:39:46,720 --> 00:39:54,400
 can notice is that if you look at both the basis function for this 4x4 DCT and for this 8x8 DCT,

455
00:39:54,400 --> 00:40:00,080
 you can see that as you move in the horizontal direction, in the vertical direction, or in the

456
00:40:00,080 --> 00:40:08,320
 diagonal direction, the spatial frequency start to increase. Yeah, how fast the pattern changes

457
00:40:08,400 --> 00:40:13,360
 start to increase. So that is the common similarity between these two different sets of

458
00:40:14,080 --> 00:40:22,080
 basis functions. So that could be the, you can list it out as the difference and similarity.

459
00:40:38,480 --> 00:40:47,280
 So therefore you can see similarity is that both basis functions have an increasing horizontal,

460
00:40:47,280 --> 00:40:52,160
 horizontal, vertical, and diagonal spatial frequency. Okay, so that's the similarity.

461
00:40:52,160 --> 00:40:58,720
 And for the difference for this particular scheme, because it's used for 4x4 DCT, so you have 16

462
00:40:58,720 --> 00:41:05,360
 different types of basis function. As opposed to JPEG, which use 8x8 DCT, which you have 64

463
00:41:05,360 --> 00:41:11,040
 different types of basis function. So therefore we have this one similarity and one difference

464
00:41:11,040 --> 00:41:16,960
 between these two basis functions for these two. Right, okay, so next let's move on to the next

465
00:41:16,960 --> 00:41:17,760
 part of the questions.

466
00:41:26,640 --> 00:41:31,680
 All right, okay, so next part of the question is ask, okay, ask you to write down a suitable

467
00:41:31,680 --> 00:41:37,200
 quantization table for this new compression scheme. Briefly justify your answer. So I'll give you

468
00:41:37,200 --> 00:41:42,560
 one moment to think about for this new scheme, which is based on 4x4, you know, partitioned image

469
00:41:42,560 --> 00:41:49,200
 into 4x4 pixel block. What could be a suitable quantization table? I'll give you one moment

470
00:41:49,200 --> 00:41:52,000
 to think about it, and then we'll go through the answer together.

471
00:42:31,680 --> 00:42:42,000
 Okay.

472
00:42:42,000 --> 00:43:04,720
 Okay, all right, so at least I have some time to think about it. So what do you think are the

473
00:43:04,720 --> 00:43:09,920
 key properties, right, when you try to write down the quantization table for this new scheme?

474
00:43:10,000 --> 00:43:14,560
 What should be the size of this quantization table? It should be.

475
00:43:18,080 --> 00:43:22,320
 Sorry, a bit louder. The size of the quantization table should be what?

476
00:43:24,000 --> 00:43:32,240
 4x4, huh? And then what are some basic rule of thumb when you write down the quantization table?

477
00:43:32,240 --> 00:43:43,919
 Birth the value horizontally, vertically, and diagonally in the increasing horizontal,

478
00:43:43,919 --> 00:43:49,919
 vertical, and diagonal direction. The value should be increasing or decreasing,

479
00:43:50,720 --> 00:43:56,560
 increasing, right? So these are two basic properties for you to write down the quantization table.

480
00:43:56,560 --> 00:44:00,000
 Okay, so therefore one possible answer would be like this.

481
00:44:07,840 --> 00:44:13,200
 So a possible quantization table could be like this, right? So the key information,

482
00:44:13,200 --> 00:44:18,560
 as I mentioned, it should be first of all 4x4 in terms of dimension, and in terms of the value as

483
00:44:18,560 --> 00:44:26,000
 you move increasing horizontal spatial frequency, vertical, and the diagonal spatial frequency,

484
00:44:26,080 --> 00:44:31,840
 you can see the value will start to increase in all this direction based on what we have discussed

485
00:44:31,840 --> 00:44:37,600
 before. Okay, so so long as you follow this principle, whatever answer you provide, I'll give you

486
00:44:38,320 --> 00:44:44,480
 full mark so long as you follow that principle. Okay, so the explanation is that the quantization

487
00:44:44,480 --> 00:44:49,760
 table should be 4x4 with increasing step size in the horizontal, vertical, and diagonal direction.

488
00:44:50,160 --> 00:44:55,440
 Right, so the reason is, you know, this is to reduce the quantization error, okay, for the DC

489
00:44:55,440 --> 00:45:01,360
 and low AC coefficient, right, as the DCT coefficients are larger. So this one is the first reason

490
00:45:01,360 --> 00:45:05,840
 we mentioned. And also second reason is because humans are more sensitive to distortion, error

491
00:45:05,840 --> 00:45:10,880
 or distortion in this region. So therefore we also need to make sure that, you know, the step size

492
00:45:10,880 --> 00:45:15,440
 near these regions are smaller. So that's exactly what we have discussed, you know, for the past,

493
00:45:16,400 --> 00:45:20,080
 no 30 minutes or so. Okay, any questions?

494
00:45:22,240 --> 00:45:27,920
 Right, so if not, then this answer again will be available from tomorrow on works, so there's no

495
00:45:27,920 --> 00:45:39,360
 need for you to copy. All right, okay, so now we have actually completed the quantization. So next

496
00:45:39,360 --> 00:45:43,680
 we are going to continue on. So the next thing that we are going to do now is that after we have

497
00:45:43,680 --> 00:45:48,080
 performed the quantization, the next step that we are going to do is we are going to do the

498
00:45:48,080 --> 00:45:54,000
 entropy encoding here. So the entropy encoding actually will be consisting of four key steps.

499
00:45:54,640 --> 00:45:59,279
 The first step is known as a vectoring or zigzag scanning, right, so later on we will see what is

500
00:45:59,279 --> 00:46:06,799
 a zigzag scanning. And afterwards we are going to perform differential encoding, right, or is also

501
00:46:06,800 --> 00:46:12,720
 known as a differential pulse code modulation for the DC coefficient, right, okay. And then for the

502
00:46:12,720 --> 00:46:18,000
 AC coefficient, we are going to use the run-land coding. And then finally all this is we are going

503
00:46:18,000 --> 00:46:23,120
 to put it through the half-moon coding. So anyway, this is just the general steps in the next few

504
00:46:23,120 --> 00:46:28,480
 slides we are going to explain each of these steps a bit more in detail. Right, okay, so you can see

505
00:46:28,480 --> 00:46:33,440
 all these four steps here. The first step that you have to do is a vectoring or zigzag scanning,

506
00:46:33,440 --> 00:46:39,200
 right. So the objective of this particular zig, okay, maybe let's look at what this zigzag scanning

507
00:46:39,200 --> 00:46:44,640
 is first. So this zigzag scanning is like this. So just now what we have is that we have performed

508
00:46:44,640 --> 00:46:51,520
 the quantization already. So now we have this particular quantized DCT coefficient. So for this

509
00:46:51,520 --> 00:46:58,240
 particular quantized DCT coefficient, it's actually a matrix or a 2D array. So we want to convict it

510
00:46:58,240 --> 00:47:06,000
 into a vector. So we want to convert this particular matrix into a vector, okay. So when we convert

511
00:47:06,000 --> 00:47:11,839
 this matrix into a vector, right, okay, there's a few different ways we can do it, right. So the way

512
00:47:11,839 --> 00:47:16,319
 we are going to do it in this case is that we are going to start off with this DC coefficient,

513
00:47:16,319 --> 00:47:23,520
 and we are going to collect or convert this matrix into this vector in this way here. We are going

514
00:47:23,600 --> 00:47:30,880
 to scan through the coefficient in this particular manner, okay. Right. So afterwards then the first

515
00:47:30,880 --> 00:47:38,400
 value here is the DC coefficient, and the rest of the 63 coefficients are the AC coefficients here.

516
00:47:38,960 --> 00:47:44,240
 Right. So this is the example. After, for example, we perform this zigzag scanning here.

517
00:47:44,240 --> 00:47:48,880
 But the question is that why do we want to scan the coefficient in this particular manner?

518
00:47:49,840 --> 00:47:55,360
 Now what's the logic behind it? Why do we want to scan the DC coefficient in this particular fashion?

519
00:48:03,520 --> 00:48:08,640
 So the reason why we want to do it in this way is because if you remember, the first coefficient

520
00:48:08,640 --> 00:48:14,800
 is a DC coefficient, and these are the low AC coefficient, and these are the high AC coefficient.

521
00:48:14,880 --> 00:48:21,280
 And now based on the properties of the energy compaction, as well as the designs of your quantization

522
00:48:21,280 --> 00:48:29,040
 table, we know that near this AC coefficients here, you are going to get lots of value, which is zero.

523
00:48:29,040 --> 00:48:36,080
 Right. Because to start off with the, your quantize, your DC coefficient near this corner is already

524
00:48:36,080 --> 00:48:42,480
 small, and then you divide by a very large step size. That means you're going to get lots of zeros

525
00:48:42,480 --> 00:48:48,240
 near this high AC coefficient. So therefore, these orders of scanning will try to group

526
00:48:48,240 --> 00:48:55,280
 a lots of the zeros together. Okay. So therefore, by scanning through the DCT coefficient,

527
00:48:55,280 --> 00:49:01,840
 quantized DCT coefficient in this manner, a lot of the value zero here can be grouped together.

528
00:49:01,840 --> 00:49:09,200
 So this will facilitate the subsequent, no, running coding later. Right. Okay. So that's the basic

529
00:49:09,200 --> 00:49:15,520
 idea. We try to group the low AC coefficient together and the high AC coefficient together,

530
00:49:15,520 --> 00:49:21,040
 and the high AC coefficient because there are lots of zero. Right. So it will make your subsequent

531
00:49:21,040 --> 00:49:27,120
 run-land coding more effective. Okay. So that's the basic idea. So this process is known as a ZIXX

532
00:49:27,120 --> 00:49:34,319
 scanning. Right. So it converts this quantized 2D matrix into one D vector here. So the objective

533
00:49:34,320 --> 00:49:41,520
 is to exploit the presence of lots of zeros in the quantized matrix, particularly near this high

534
00:49:41,520 --> 00:49:47,440
 AC coefficient here. Okay. So that's what we do. So once we have done that, then your subsequent

535
00:49:47,440 --> 00:49:52,880
 vectors here, usually, no, towards the later part, you are going to get lots of zeros here.

536
00:49:54,960 --> 00:50:00,080
 Okay. So now the next thing is that after ZIXX scanning now, we are going to consider the DC

537
00:50:00,080 --> 00:50:05,440
 coefficients and the AC coefficient separately. So the DC coefficients, we are going to use a

538
00:50:05,440 --> 00:50:11,920
 differential coding or the predictive coding to do the compressions here. So you can see that

539
00:50:11,920 --> 00:50:18,400
 the DC coefficient is treated separately from the rest of the 63 AC coefficient. Right. And what's

540
00:50:18,400 --> 00:50:25,200
 the meaning of the DC coefficient? So if you remember in our previous last week's exercise,

541
00:50:25,200 --> 00:50:32,000
 no, we do try to calculate the DC coefficient. We say that the DC coefficient is an indication of the

542
00:50:32,000 --> 00:50:39,040
 average brightness or intensity of the pixel block. Okay. So the DC coefficient reflects the

543
00:50:39,040 --> 00:50:45,759
 average brightness or intensity of the pixel block here. Right. So the DC coefficients are

544
00:50:45,759 --> 00:50:51,439
 encoded using differential coding or predictive coding. So what it means is that, suppose if we

545
00:50:51,440 --> 00:50:57,520
 look at this, this is the first pixel block. Okay. 8 by 8 pixel block. And you have another 8 by 8

546
00:50:57,520 --> 00:51:02,960
 pixel block next to it. So for these two pixel blocks, each of them you are going to perform just

547
00:51:02,960 --> 00:51:09,680
 now the process of DCT transform quantization, ZIXX scanning. Right. And then you're going to get

548
00:51:09,680 --> 00:51:15,840
 this block, your give rise to a 64 dimensional factor. This block, you're going to give rise to

549
00:51:16,560 --> 00:51:22,400
 64 dimensional vector. And then for the two DC coefficient between them, we are going to use

550
00:51:22,400 --> 00:51:28,240
 a predictive coding to represent it. But why do we want to use predictive coding or differential

551
00:51:28,240 --> 00:51:36,160
 coding? What's the logic behind it? So when you use a differential coding, right, it's based on

552
00:51:36,160 --> 00:51:42,800
 the idea if these two values are the two DC value. Okay. For these two blocks, their values are very

553
00:51:43,760 --> 00:51:51,200
 similar or very different. Okay. When the values are very similar, right, it's actually good to use

554
00:51:51,200 --> 00:51:57,760
 predictive coding to encode it. Because the idea of predictive coding is that instead of representing

555
00:51:57,760 --> 00:52:03,280
 each of these values individually, we calculate their difference. So if these two values are very

556
00:52:03,280 --> 00:52:10,000
 similar and we calculate their difference, then the difference is very small. And if the difference

557
00:52:10,080 --> 00:52:16,080
 is very small, that means you can, you only need to use a small number of bits to represent them.

558
00:52:16,080 --> 00:52:22,240
 And hence you can achieve the compression. Right. So in short, the reason why we use the

559
00:52:23,200 --> 00:52:29,120
 differential coding or predictive coding to encode the difference between these two DC

560
00:52:29,120 --> 00:52:36,160
 coefficient is because each of the DC coefficient is an indication of how bright this block is

561
00:52:36,240 --> 00:52:40,799
 compared to the neighboring blocks. And we know that given a particular image, if you partition it

562
00:52:40,799 --> 00:52:46,399
 into many, many pixel blocks, for two consecutive pixel blocks, do you think their brightness are

563
00:52:46,399 --> 00:52:51,440
 going to be very similar to each other? It is, right? So if you look at, you know, just look at my

564
00:52:51,440 --> 00:52:57,040
 shirt, if you look at two consecutive pixel blocks, their average brightness or intensity is going to

565
00:52:57,040 --> 00:53:01,680
 be very similar. If they are very similar, that means their corresponding DC values are going to

566
00:53:01,680 --> 00:53:06,000
 be very similar. If they are corresponding DC value is very similar, that means we can use

567
00:53:06,000 --> 00:53:13,440
 predictive coding, right, to take this DC value minus this, this, the following DC value and the

568
00:53:13,440 --> 00:53:18,399
 arrow will be very small. And when the arrow is very small, you only need to use a small number

569
00:53:18,399 --> 00:53:24,080
 of bits to represent it. So therefore it's actually a good idea to use a differential of

570
00:53:24,080 --> 00:53:30,319
 predictive coding to code the DC coefficient. Okay. So that's the basic idea. So the difference,

571
00:53:30,320 --> 00:53:35,680
 which is also known as a prediction arrow between the DC coefficients of the current block and the

572
00:53:35,680 --> 00:53:41,680
 previous block is encoded. Okay. Based on what I've just explained. Okay. So the reason is because,

573
00:53:42,240 --> 00:53:47,760
 okay, as I mentioned, differential coding is used as the average brightness or intensity between two,

574
00:53:48,320 --> 00:53:54,240
 no consecutive blocks are very similar. Okay. So that's the basic idea for the DC coefficient. We

575
00:53:54,240 --> 00:54:02,000
 use differential coding to code it. Right. Next, we have the running coding now. So early on,

576
00:54:02,000 --> 00:54:08,319
 you can see that. Okay. So this particular DC coefficient, for example, this current block,

577
00:54:08,319 --> 00:54:12,799
 this is the DC coefficient. Just now we mentioned if you have another block, that means you have

578
00:54:12,799 --> 00:54:18,720
 another factor. So this DC coefficient and the DC coefficient for the two blocks, we use a differential

579
00:54:18,720 --> 00:54:26,080
 coding to code it. Right. So now we are going to look at this, the rest of the 63 AC coefficient.

580
00:54:27,279 --> 00:54:32,000
 So for this AC coefficient, how are we going to encode it? So the technique we are going to use

581
00:54:32,000 --> 00:54:37,279
 is known as a run name coding or run name encoding. You refer to the same thing. So

582
00:54:38,080 --> 00:54:42,799
 for the AC coefficient, we are going to use run name coding or run name encoding. Right.

583
00:54:43,839 --> 00:54:47,839
 Sometimes you use coding. Sometimes you use encoding. This works. It's interchangeable. So

584
00:54:47,840 --> 00:54:53,280
 there's no difference. Okay. So the AC coefficients are going to be encoded using run name encoding.

585
00:54:54,000 --> 00:54:58,960
 Right. So the running encoding, it exploit the presence of a large number of zeros in the

586
00:54:59,840 --> 00:55:05,280
 AC values by trying to group the zeros together. So earlier on, if you remember, when you do the

587
00:55:05,280 --> 00:55:11,360
 zigzag scanning, right, okay, at the later part, you're going to get many, many zeros. So these

588
00:55:11,360 --> 00:55:17,280
 zeros can be grouped together. Okay. Together. So that's what's trying to say by trying to

589
00:55:17,280 --> 00:55:24,240
 exploit the presence of a large number of zeros in the AC coefficient here. So this running coding

590
00:55:24,240 --> 00:55:31,200
 actually has a unique syntax. So running coding, the syntax is actually the use, you know, a pass

591
00:55:31,200 --> 00:55:36,960
 of values. So for running coding, actually, it consists of strings of pairs. That means there's

592
00:55:36,960 --> 00:55:41,840
 many different strings of pairs here. So each of the pairs in this particular

593
00:55:42,240 --> 00:55:50,080
 running coding, it consists of two values, skip and value here. So skip means that, right, the

594
00:55:50,080 --> 00:55:56,000
 number of zeros you are going to encounter before you see the number of zero you are going to

595
00:55:56,000 --> 00:56:01,680
 experience before you see the first non-zero value, right? Because we know that when we scan the AC

596
00:56:01,680 --> 00:56:08,080
 coefficient, that's many, many, many, zero there. Right. So how we are going to encode it is we are

597
00:56:08,080 --> 00:56:15,920
 going to use many different pairs like this or strings of pairs. For each of this particular pair,

598
00:56:15,920 --> 00:56:20,400
 this skip value means that how many, in this current value, how many zeros are you going to

599
00:56:20,400 --> 00:56:25,920
 experience first before you encounter the first non-zero value? So the number of zeros that

600
00:56:25,920 --> 00:56:31,920
 you encounter is known as a skip. So you can see the number of zeros in this current run. Okay.

601
00:56:31,920 --> 00:56:38,080
 And then this value here is the first non-zero value that you encounter. So therefore, for example,

602
00:56:38,080 --> 00:56:44,400
 when you scan the rest of the 63 AC coefficient, first, the first run, maybe, you know, you see,

603
00:56:44,400 --> 00:56:48,640
 for example, three zero, right? Then you are going to have three, which represent the three zero.

604
00:56:48,640 --> 00:56:54,320
 And then the first non-zero value that you encounter, then you have one pair. Okay. And

605
00:56:54,320 --> 00:57:00,240
 afterwards, you continue to see how many zero you encounter. Okay. So the number of zero you

606
00:57:00,240 --> 00:57:06,479
 encounter is called skip. And then the first non-zero value you encounter is that you encounter

607
00:57:06,479 --> 00:57:11,759
 is called value. So you are going to get many skip value pairs, skip value pairs, skip value pairs

608
00:57:11,759 --> 00:57:18,319
 until at the end, when the rest of the values are all zero, we have a unique symbol called zero,

609
00:57:18,319 --> 00:57:24,879
 comma, zero. Okay. Which indicate the rest of the AC coefficients are all zero already.

610
00:57:24,880 --> 00:57:28,400
 Okay. So these are some of the details and text. Actually, you don't have to

611
00:57:29,280 --> 00:57:35,360
 know the detail, but I just roughly tell you this is how they do it. Okay. So for running coding,

612
00:57:35,360 --> 00:57:41,840
 right, it's going to be represented as a string. Okay. Of this skip value pair. Okay. Each of

613
00:57:41,840 --> 00:57:46,800
 the skip value pairs, the number of zero encounter and the first non-zero value that you have.

614
00:57:46,800 --> 00:57:53,360
 Okay. So that's the running coding. And then after finally, right, once you have for the

615
00:57:53,920 --> 00:57:59,760
 DC coefficient, we have used just now the differential coding, the AC coefficient, right,

616
00:57:59,760 --> 00:58:05,760
 we use a running coding to reduce it into a strings of many skip value pair. Right. So

617
00:58:06,400 --> 00:58:12,000
 the next thing is that we notice that, for example, for this DC coefficient after predictive coding,

618
00:58:12,000 --> 00:58:17,840
 as well as a running coding, right, this particular pattern of the skip value pair patterns that you

619
00:58:17,840 --> 00:58:23,760
 see, some pattern occur more often than the others. So if some pattern occur more often than

620
00:58:23,760 --> 00:58:28,560
 the others, then the logical way for you to do it is the next step to further compress is to use

621
00:58:28,560 --> 00:58:34,880
 an entropy encoding. So Huffman coding, as we have studied in the previous lecture, right,

622
00:58:34,880 --> 00:58:41,760
 is a common entropy encoding technique. So that's why we use it. So, okay, the explanation is given

623
00:58:41,760 --> 00:58:47,520
 here. So after differential coding and the running coding, some patterns occur more often than the

624
00:58:47,600 --> 00:58:53,280
 others. Some values or some patterns occur more often than the others. So therefore, entropy

625
00:58:53,280 --> 00:58:58,640
 coding such as Huffman coding is then used to compress the symbol based on what we study in

626
00:58:58,640 --> 00:59:05,040
 the first week's lecture. So the ideas of Huffman coding to recap is that, okay, for more commonly

627
00:59:05,040 --> 00:59:09,759
 seen pattern or more frequent pattern, you use the shorter code works to represent. And for the

628
00:59:09,759 --> 00:59:15,520
 less common pattern, you use a longer code work to represent it. Okay. So therefore, high compression

629
00:59:15,520 --> 00:59:21,040
 can be achieved by replacing frequent pattern with shorter code work and vice versa. Okay. So

630
00:59:21,040 --> 00:59:25,440
 Huffman coding is used on both the differential coding and the running coding.

631
00:59:28,560 --> 00:59:34,320
 Right. Okay. So next, this slide here shows the, you know, the image quality versus the number of

632
00:59:34,320 --> 00:59:40,800
 DCT component that we have. So if you remember in the particular, in last week's lecture, we talked

633
00:59:40,800 --> 00:59:49,120
 about the DCT coefficients, right? So there's DCT coefficients here. Okay. So, right, for example,

634
00:59:49,120 --> 00:59:55,440
 this particular diagram shows that if this is your original pixel block, if you only keep one DCT

635
00:59:55,440 --> 01:00:01,600
 coefficient, that means you only keep the DC coefficient, right, then when you try to perform

636
01:00:01,600 --> 01:00:08,560
 the image reconstruction, you only give the average intensity of this image. Right. Okay. But if you

637
01:00:08,560 --> 01:00:14,000
 start to increase the number of DCT coefficient that we have, right, by scanning through the first

638
01:00:14,000 --> 01:00:21,279
 few AC, by keeping the DC plus the first few AC coefficient. Okay. But keeping a small number of

639
01:00:22,000 --> 01:00:29,279
 this particular DCT coefficient, you can start to see your reconstructed pixel block start to

640
01:00:29,279 --> 01:00:35,440
 improve significantly already. And then if you use up to 12 DCT coefficient, you can see your

641
01:00:35,440 --> 01:00:42,080
 reconstructed pixel block or image becoming better and better. Okay. So therefore, what it means is

642
01:00:42,080 --> 01:00:47,280
 that for this DCT here, you only need to keep a small number, right, because of this energy

643
01:00:47,280 --> 01:00:53,680
 compaction probability, you, energy compaction property, you only need to use a small number of

644
01:00:53,680 --> 01:01:00,480
 DCT coefficient for you to be able to reconstruct your pixel block more effectively. Okay.

645
01:01:01,120 --> 01:01:08,720
 Right. Okay. So just now in the previous slide, we say that, okay, so so far, what have you done,

646
01:01:08,720 --> 01:01:13,840
 right? We have given a particular image, we partitioned into numerous 8 by 8 pixel blocks.

647
01:01:13,840 --> 01:01:18,960
 Each of the pixel blocks, we let it go through the DCT transform, right? Okay. And then each of the

648
01:01:18,960 --> 01:01:25,120
 DCT coefficient, we let it go through the quantization to obtain the quantized DCT coefficient.

649
01:01:25,120 --> 01:01:30,400
 All right. Okay. And afterwards we go through a zigzag scanning to convert it into a 64-dimensional

650
01:01:30,400 --> 01:01:36,240
 vector. The DC coefficient, because different blocks are similar, we use differential coding.

651
01:01:36,240 --> 01:01:42,480
 For the AC coefficient, we use the running coding, right? And afterwards, this DC and AC, we let it

652
01:01:42,480 --> 01:01:48,240
 go through the entropy and coding such as half-moon coding, right? So this is what we have now.

653
01:01:48,240 --> 01:01:53,279
 So one up to this stage now, the last thing that you need to do is you need to pack all this

654
01:01:53,280 --> 01:02:01,040
 information right into a particular JPEG syntax, right? Okay. So therefore, the last step is we

655
01:02:01,040 --> 01:02:07,600
 need to do the frame building here. So JPEG have a certain form of syntax to define how do you pack

656
01:02:07,600 --> 01:02:13,760
 those information. So JPEG define the syntax for the bitstream, right? For this image. So the

657
01:02:13,760 --> 01:02:19,040
 rule of this particular frame builder is to capture all those information that we have extracted,

658
01:02:19,040 --> 01:02:24,560
 format it properly based on what JPEG can understand and then put it into this bitstream.

659
01:02:25,279 --> 01:02:29,759
 So therefore, this go to capture all the information, right, from this image into a

660
01:02:29,759 --> 01:02:35,440
 certain format that JPEG can understand, right? So then that's the end of the story. Okay.

661
01:02:36,880 --> 01:02:43,040
 So therefore, if you have a quick look at this, right, so we pretty much cover all of them already.

662
01:02:43,600 --> 01:02:50,960
 So yeah, let's just do a quick recap. We have the original image typically we convert into YCBCR

663
01:02:52,400 --> 01:02:58,160
 color space. And then for this CB and CR, usually we perform some chroma sub sampling. So that means

664
01:02:58,160 --> 01:03:03,360
 for example, a two by two pixel block usually will only keep one CB and we keep one CR here.

665
01:03:04,160 --> 01:03:08,800
 Okay. And then for this image, we are going to partition into numerous eight by eight pixel block.

666
01:03:09,600 --> 01:03:13,280
 Okay. Each of them will go through a DCT to get the DCT coefficient.

667
01:03:13,840 --> 01:03:18,240
 Each pixel block will go through a quantization to get the quantized DCT coefficient.

668
01:03:18,240 --> 01:03:22,480
 So in the process of performing this quantization, we need a quantization table

669
01:03:22,480 --> 01:03:28,080
 that we have just explained. So this particular quantized DCT coefficient, we're going to use

670
01:03:28,080 --> 01:03:34,080
 just now the zigzag scanning by performing that, right, we'll convert into the vector.

671
01:03:34,560 --> 01:03:40,640
 So the first value is a DC value. The rest of the 63 values are the AC value. So

672
01:03:41,600 --> 01:03:46,160
 the DC value, we are going to go through the differential pulse code modulation,

673
01:03:46,160 --> 01:03:51,040
 which is also the differential coding. Okay. And afterwards, because some pattern occur more than

674
01:03:51,040 --> 01:03:56,240
 the others, we use the entropy coding such as halfman coding to perform the compression.

675
01:03:56,799 --> 01:04:00,480
 And for this AC coefficient, because there are lots of zero, okay,

676
01:04:01,440 --> 01:04:07,600
 we need, so we'll exploit the halfman, sorry, the running coding and code it. And the output

677
01:04:07,600 --> 01:04:13,040
 is that some of those pattern, the skip value pairs are more often. That's why again, we exploit

678
01:04:13,040 --> 01:04:19,520
 entropy coding to compress it. Okay. So in order to use this coding, we need a coding table,

679
01:04:19,520 --> 01:04:25,200
 for example, a halfman table that has been trained in advance. And then finally, all this information,

680
01:04:25,279 --> 01:04:30,799
 like the tables, the pattern that you obtain, you're going to pack into your JPEG bitstream here.

681
01:04:30,799 --> 01:04:35,680
 So you have the data here. You have some header, some control information, and then you have this

682
01:04:35,680 --> 01:04:41,919
 table that contain all the table information. So this completes the JPEG encoding process.

683
01:04:56,000 --> 01:05:00,879
 Right. Okay. So now if you look at this JPEG bitstream, so JPEG bitstream is just now the final

684
01:05:01,600 --> 01:05:06,720
 file or the bitstream that we have. So the bitstream structure is organized in this way.

685
01:05:06,720 --> 01:05:12,080
 So at the highest level, you have a start of an image. All right. So these are the, you know,

686
01:05:12,080 --> 01:05:18,000
 the header or the control information. And this frame is like the data in the image. And this frame

687
01:05:18,000 --> 01:05:23,200
 can further be divided into a few scans here. So even a particular JPEG image, you know,

688
01:05:23,200 --> 01:05:28,319
 it can be divided into a few scan. So a few scan is usually referring to a few lines of

689
01:05:28,319 --> 01:05:34,799
 eight by eight pixel block. So that's a meaning of a scan. Right. And then in one scan, for example,

690
01:05:34,799 --> 01:05:39,680
 a few lines of eight by eight pixel block, it can be further divided into a few different segments.

691
01:05:39,680 --> 01:05:46,640
 So a few segments is actually, you know, a few eight by eight pixel block is arranged together.

692
01:05:46,640 --> 01:05:51,839
 That's called a segment. And afterwards beneath each segment, then you have the eight by eight

693
01:05:51,840 --> 01:05:55,840
 pixel block. So this is how JPEG organized their bitstream.

694
01:05:57,920 --> 01:06:02,960
 Okay. So now we have studied the forward transform. That means given an image, we go through all

695
01:06:02,960 --> 01:06:08,240
 this process, we can get the bitstream. So now from this bitstream or the JPEG image that you

696
01:06:08,240 --> 01:06:14,400
 store in, for example, your mobile phone, if you want to know display the image back, right, so this

697
01:06:14,400 --> 01:06:21,680
 is known as the decompression. Okay. So right. Therefore now we want to look at the reverse,

698
01:06:21,680 --> 01:06:28,080
 which is the JPEG decoder. So JPEG decoder means that you have a JPEG file or the bitstream,

699
01:06:28,720 --> 01:06:35,760
 right? After you go through this JPEG decoder, you want to reconstruct your or decompress an image.

700
01:06:35,760 --> 01:06:41,600
 Okay. So therefore this JPEG decoder is exactly the reverse of the JPEG encoder that we have studied.

701
01:06:42,160 --> 01:06:46,560
 So right. The flow is like this. We have the JPEG bitstream or image. We let it go through the

702
01:06:46,560 --> 01:06:53,520
 frame decoder. So it extracts some information, right? So it extracts some control information

703
01:06:53,520 --> 01:06:57,360
 and also extract all the tables. So just now you can see we have the

704
01:06:57,360 --> 01:07:01,759
 halfman table. We have the quantization table and some control information.

705
01:07:02,319 --> 01:07:08,000
 So we extract those information. And the next thing is that, right? So the reverse of just now

706
01:07:08,000 --> 01:07:12,400
 the JPEG encoding, we'll see the reverse, the first reverse process that we need to do the

707
01:07:12,400 --> 01:07:19,920
 halfman decoding. Okay. So after the halfman decoding, we have the DC component and we have

708
01:07:19,920 --> 01:07:25,760
 the AC component. So the DC component, we need to now go through the differential decoding.

709
01:07:26,800 --> 01:07:31,680
 The AC component, we need to let it go through the ground length decoding. So the reverse of

710
01:07:31,680 --> 01:07:36,880
 what they are experienced. So once we have the DC and the AC coefficient, we need to organize them

711
01:07:36,880 --> 01:07:42,960
 properly into the matrix form. And then we need to let it go through the decantization or the

712
01:07:42,960 --> 01:07:49,840
 inverse quantization. Okay. Right. And afterwards, we need to let it go through the inverse DCT.

713
01:07:50,560 --> 01:07:55,760
 Right. And then finally, right, we need to let it go through the image builder to make sure that

714
01:07:55,760 --> 01:08:00,240
 all the eight by eight pixel block are arranged properly. And then finally, you will have your

715
01:08:00,240 --> 01:08:08,799
 reconstructed image. Okay. So that's basically the reverse of it. So now, early on from diagram,

716
01:08:08,799 --> 01:08:14,560
 I already explained the steps. So let's just look at the right up here for this JPEG decoder.

717
01:08:14,560 --> 01:08:19,840
 So JPEG decoder extract the control information and the table and then pass to the image builder,

718
01:08:19,840 --> 01:08:23,920
 as mentioned. So the first thing you need to do is you need to go through the halfman decoder,

719
01:08:24,480 --> 01:08:32,160
 right, to extract DC and the AC component. Right. So and then the DC component need to go through

720
01:08:32,160 --> 01:08:38,960
 the differential decoding, right, differential decoding to get the DC coefficient. And the AC

721
01:08:38,960 --> 01:08:44,960
 component need to let it pass through the running coding to get the AC coefficient. Right. So afterwards,

722
01:08:44,960 --> 01:08:50,960
 you need to rearrange it into the matrix format. And then we need to let it go through the inverse

723
01:08:50,960 --> 01:08:56,640
 quantization or decantization. Right. So once you obtain the decantized coefficient,

724
01:08:56,640 --> 01:09:02,960
 we need to let it go through the inverse DC to get your original pixel block. And after

725
01:09:02,960 --> 01:09:07,359
 works, you need to arrange all this pixel block properly. And then you will be able to obtain

726
01:09:07,359 --> 01:09:17,600
 your original image. Okay. So that's pretty much that. Okay. So now with that, so we can go through

727
01:09:18,560 --> 01:09:22,720
 simple exercise. Actually this exercise is just like what we have just explained.

728
01:09:22,720 --> 01:09:28,160
 So you can see, for example, one of the sample pass here question, it asks you to draw a simple

729
01:09:28,160 --> 01:09:34,240
 block diagram of the baseline, JPEG decoder, and then clearly label all the key components in the

730
01:09:34,240 --> 01:09:40,080
 diagram. All right. Actually we just covered it. But if you want, you can just know, close it and

731
01:09:40,080 --> 01:09:45,600
 then think for one moment whether you can still highlight some of the blocks here. Okay. I'll

732
01:09:45,600 --> 01:09:57,600
 give you just one moment and then we'll, I'll just show you the answer.

733
01:10:03,120 --> 01:10:09,600
 Yes.

734
01:10:10,560 --> 01:10:11,600
 Yeah. There are some.

735
01:10:16,720 --> 01:10:24,000
 Most of the time they have some, some, how should I say, standard protocols are either in terms of

736
01:10:24,000 --> 01:10:31,120
 padding or some way to manage that. But those are actually some, I would say it's a secondary issue.

737
01:10:31,120 --> 01:10:37,200
 You can do some padding. Either you impose some constraint on the number of pixels,

738
01:10:37,280 --> 01:10:39,679
 which is a multiple of eight, or you can do some padding.

739
01:10:44,240 --> 01:10:53,200
 All right. Okay. So therefore for the answer, yeah, it's actually quite.

740
01:10:57,679 --> 01:10:59,200
 All right. Okay. Let me see.

741
01:11:07,440 --> 01:11:18,320
 Okay. So the answer is actually this diagram that we have just shown you a little bit earlier.

742
01:11:18,320 --> 01:11:22,720
 So in the exam, what you need to do is simply just, no, sketch this diagram and label all

743
01:11:22,720 --> 01:11:28,000
 the components properly. Yeah. So since I've just explained a little bit earlier, so I'll not go through

744
01:11:28,000 --> 01:11:35,200
 it again here.

745
01:11:37,440 --> 01:11:46,160
 All right. Okay. So now we have actually covered part two. So in this part here, we actually

746
01:11:47,440 --> 01:11:52,480
 studied the following. So we look at some term and concept and trophy encoding. And then we talk

747
01:11:52,480 --> 01:11:58,080
 about the basic of image and video compression. We look into the general transform base coding

748
01:11:58,080 --> 01:12:04,400
 or compression. Now that we spend some time to explain about the properties of DCT, especially

749
01:12:04,400 --> 01:12:09,360
 from the perspective of change of basis. And then we spend some time to discuss about the

750
01:12:09,360 --> 01:12:15,280
 JPEG standards. Yeah. Okay. So that's pretty much part two. I think it's probably time we take a

751
01:12:15,280 --> 01:12:20,400
 short break. Right. So let's take a short break until eight and then we'll resume at eight PM.

752
01:12:34,400 --> 01:12:44,400
 Okay.

753
01:13:04,400 --> 01:13:14,400
 Okay.

754
01:13:34,400 --> 01:13:44,400
 Okay.

755
01:14:04,400 --> 01:14:14,400
 Okay.

756
01:14:34,400 --> 01:14:44,400
 Okay.

757
01:15:04,400 --> 01:15:14,400
 Okay.

758
01:15:34,400 --> 01:15:44,400
 Okay.

759
01:16:04,400 --> 01:16:14,400
 Okay.

760
01:16:34,400 --> 01:16:44,400
 Okay.

761
01:17:04,400 --> 01:17:14,400
 Okay.

762
01:17:34,400 --> 01:17:44,400
 Okay.

763
01:18:04,400 --> 01:18:14,400
 Okay.

764
01:18:34,400 --> 01:18:44,400
 Okay.

765
01:19:04,400 --> 01:19:14,400
 Okay.

766
01:19:34,400 --> 01:19:44,400
 Okay.

767
01:20:04,400 --> 01:20:14,400
 Okay.

768
01:20:34,400 --> 01:20:44,400
 Okay.

769
01:21:04,400 --> 01:21:14,400
 Okay.

770
01:21:34,400 --> 01:21:44,400
 Okay.

771
01:22:04,400 --> 01:22:14,400
 Okay.

772
01:22:34,400 --> 01:22:44,400
 Okay.

773
01:23:04,400 --> 01:23:14,400
 Okay.

774
01:23:34,400 --> 01:23:44,400
 Okay.

775
01:24:04,400 --> 01:24:14,400
 Okay.

776
01:24:34,400 --> 01:24:44,400
 Okay.

777
01:25:04,400 --> 01:25:14,400
 Okay.

778
01:25:34,400 --> 01:25:44,400
 Okay.

779
01:26:04,400 --> 01:26:14,400
 Okay.

780
01:26:34,400 --> 01:26:44,400
 Okay.

781
01:27:04,400 --> 01:27:14,400
 Okay.

782
01:27:34,400 --> 01:27:44,400
 Okay.

783
01:28:04,400 --> 01:28:14,400
 Okay.

784
01:28:34,400 --> 01:28:44,400
 Okay.

785
01:29:04,400 --> 01:29:14,400
 Okay.

786
01:29:34,400 --> 01:29:44,400
 Okay.

787
01:30:04,400 --> 01:30:14,400
 Okay.

788
01:30:14,400 --> 01:30:16,400
 Okay.

789
01:30:16,400 --> 01:30:20,400
 Okay.

790
01:30:20,400 --> 01:30:28,400
 Okay.

791
01:30:28,400 --> 01:30:30,400
 Okay.

792
01:30:30,400 --> 01:30:32,400
 Okay.

793
01:30:32,400 --> 01:30:38,559
 You are welcome to read up from these references or any sources that you can find from the

794
01:30:38,559 --> 01:30:39,559
 internet.

795
01:30:39,559 --> 01:30:44,200
 Right, so the outline for part three is that, first of all, we are going to look at some

796
01:30:44,200 --> 01:30:46,040
 video coding as well as standards.

797
01:30:46,040 --> 01:30:52,480
 And in particular, we'll be focusing on the MPEG as well as the H.26X series of the video

798
01:30:52,480 --> 01:30:57,120
 compression standard, because these are the dominant video compression standards.

799
01:30:57,519 --> 01:31:02,120
 And then finally, we'll be looking at some new emerging coding standards.

800
01:31:02,120 --> 01:31:06,120
 Okay, so that's the plan for part three.

801
01:31:06,120 --> 01:31:09,120
 Right, so first, we are going to look at video coding and standards.

802
01:31:09,120 --> 01:31:12,120
 So we are going to understand some of the basic theory.

803
01:31:12,120 --> 01:31:15,120
 Oh, sorry.

804
01:31:17,120 --> 01:31:21,120
 Okay, maybe let me just quickly run through one more time.

805
01:31:22,120 --> 01:31:27,120
 Right, okay, so part three is on video compression and standard.

806
01:31:27,120 --> 01:31:29,120
 Okay, so these are some references.

807
01:31:29,120 --> 01:31:30,120
 Right, any questions?

808
01:31:30,120 --> 01:31:33,120
 Just read up from them or from the internet.

809
01:31:33,120 --> 01:31:35,120
 Okay, so these are outlines.

810
01:31:35,120 --> 01:31:38,120
 So first of all, we'll be looking at some video coding and standard.

811
01:31:38,120 --> 01:31:43,120
 And then we'll be looking at these two types of video compression standard MPEG series

812
01:31:43,120 --> 01:31:47,120
 as well as the H.26X series of standard.

813
01:31:47,120 --> 01:31:51,120
 And then we'll be looking at some emerging direction.

814
01:31:51,120 --> 01:31:58,120
 Okay, so next we'll be touching on this video coding and standard as some of the basic theory behind it.

815
01:31:58,120 --> 01:32:04,120
 Right, so first we'll be trying to cover some of the basic concepts of video compression.

816
01:32:04,120 --> 01:32:13,120
 Right, okay, before that, let me just play a short video, right, to kind of warm yourself up a bit.

817
01:32:13,120 --> 01:32:18,120
 Starting 8th September, grab 99% off breaking deals on Shoppe.

818
01:33:43,120 --> 01:33:48,120
 Okay, so we'll be looking at some of the basic concepts of video compression.

819
01:33:48,120 --> 01:33:53,120
 Okay, so first we'll be looking at some of the basic concepts of video compression.

820
01:33:53,120 --> 01:33:58,120
 Okay, so first we'll be looking at some of the basic concepts of video compression.

821
01:33:58,120 --> 01:34:03,120
 Okay, so first we'll be looking at some of the basic concepts of video compression.

822
01:34:03,120 --> 01:34:08,120
 Okay, so first we'll be looking at some of the basic concepts of video compression.

823
01:34:08,120 --> 01:34:13,120
 Okay, so first we'll be looking at some of the basic concepts of video compression.

824
01:34:13,120 --> 01:34:18,120
 Okay, so first we'll be looking at some of the basic concepts of video compression.

825
01:34:18,120 --> 01:34:23,120
 Okay, so first we'll be looking at some of the basic concepts of video compression.

826
01:34:23,120 --> 01:34:28,120
 Okay, so first we'll be looking at some of the basic concepts of video compression.

827
01:34:28,120 --> 01:34:33,120
 Okay, so first we'll be looking at some of the basic concepts of video compression.

828
01:34:33,120 --> 01:34:38,120
 Okay, so first we'll be looking at some of the basic concepts of video compression.

829
01:34:38,120 --> 01:34:43,120
 Okay, so first we'll be looking at some of the basic concepts of video compression.

830
01:34:43,120 --> 01:34:48,120
 Okay, so first we'll be looking at some of the basic concepts of video compression.

831
01:34:48,120 --> 01:34:53,120
 Okay, so first we'll be looking at some of the basic concepts of video compression.

832
01:34:53,120 --> 01:34:58,120
 Okay, so first we'll be looking at some of the basic concepts of video compression.

833
01:34:58,120 --> 01:35:14,120
 Okay, so anyway it's a long video, so hope that this part of the lecture will be as lively as this.

834
01:35:14,120 --> 01:35:18,120
 Okay, but probably Laili not.

835
01:35:18,120 --> 01:35:25,120
 Okay, so anyway, for video compression, a lot of them, even though there are some basic underlying techniques behind it,

836
01:35:25,120 --> 01:35:29,120
 but there's also lots of more standard based issue.

837
01:35:29,120 --> 01:35:37,120
 So anyway, we'll try to make this lecture a bit more interesting by trying to carving some of the more intuition behind video compression

838
01:35:37,120 --> 01:35:41,120
 rather than focusing a lot on the syntax.

839
01:35:41,120 --> 01:35:46,120
 So we'll try to explain the idea behind it rather than focus on the syntax.

840
01:35:46,120 --> 01:35:54,120
 Right, okay, so in order to continue with the video compression, let's do a quick recap of some of the redundancy that exists in the video.

841
01:35:54,120 --> 01:36:04,120
 Right, so as you can remember, video is nothing but a sequence of frame that you play very quickly and based on the human vision persistent,

842
01:36:04,120 --> 01:36:07,120
 it will give the impression of the smooth motion.

843
01:36:07,120 --> 01:36:10,120
 Right, so there's a basic idea behind this video.

844
01:36:10,120 --> 01:36:14,120
 And of course, also there's an audio expect to it.

845
01:36:14,120 --> 01:36:19,120
 Okay, so now in a video, it exists a lot of redundant information.

846
01:36:19,120 --> 01:36:30,120
 That's why when we are trying to perform video compression, our key objective is to remove this redundancy or extra unnecessary information from the video.

847
01:36:30,120 --> 01:36:34,120
 So what are some of the redundancy that exists in a video?

848
01:36:34,120 --> 01:36:36,120
 Right, so let's do a quick recap.

849
01:36:36,120 --> 01:36:39,120
 So the first redundancy that we have is a spatial redundancy.

850
01:36:39,120 --> 01:36:44,120
 By now, after study about the JPEG standard, you should be quite familiar with this concept already.

851
01:36:44,120 --> 01:36:53,120
 So spatial redundancy means that given a particular image, in particular, if you look at a small pixel neighborhood, the pixel values tend to change very slowly.

852
01:36:53,120 --> 01:36:59,120
 So if the pixel value changes very slowly, that means there's lots of redundant information.

853
01:36:59,120 --> 01:37:05,120
 Rather than representing each pixel value, actually you can think of some better way to represent it.

854
01:37:05,120 --> 01:37:09,120
 So that's the basic idea of the spatial redundancy.

855
01:37:09,120 --> 01:37:13,120
 So spatial redundancy refers to the statistical corrosion.

856
01:37:13,120 --> 01:37:24,120
 So corrosion can be interpreted as a similarity or relatedness between pixels in an image or more specifically within a small pixel neighborhood.

857
01:37:24,120 --> 01:37:32,120
 Okay, so because these types of redundancy exist within a single frame, so that's why it's also known as intraframe redundancy.

858
01:37:32,120 --> 01:37:39,120
 So for example, if you look at one of these small pixel neighborhoods here, it's quite clear that the pixel values are very similar to each other.

859
01:37:39,120 --> 01:37:42,120
 So there's lots of redundant information.

860
01:37:42,120 --> 01:37:48,120
 So when we perform video compression, we should try to remove this redundancy.

861
01:37:48,120 --> 01:37:52,120
 So the next redundancy is known as a temporal redundancy.

862
01:37:52,120 --> 01:37:57,120
 So if you remember, temporal redundancy refers to time-based redundancy.

863
01:37:57,120 --> 01:38:03,120
 So in this particular example here, a video is actually a sequence of frames that change very slowly.

864
01:38:03,120 --> 01:38:12,120
 So if you look at these three frames in a video, so if you look at a small, for example, pixel corresponding pixel location,

865
01:38:12,120 --> 01:38:17,120
 you can see that the pixel values are very similar across different frames.

866
01:38:17,120 --> 01:38:20,120
 And for different frames, this is along the time axis.

867
01:38:20,120 --> 01:38:25,120
 So therefore there's lots of redundancy in the time axis.

868
01:38:25,120 --> 01:38:29,120
 So therefore it's known as the temporal redundancy.

869
01:38:29,120 --> 01:38:38,120
 So temporal redundancy refers to the statistical correlation or similarity or relatedness between pixels from successive frames,

870
01:38:38,120 --> 01:38:43,120
 for example, successive frames, in a particular position, for example.

871
01:38:43,120 --> 01:38:48,120
 So because this type of redundancy exists across different frames,

872
01:38:48,120 --> 01:38:51,120
 so therefore it's also known as an interframe redundancy.

873
01:38:51,120 --> 01:38:59,120
 It's a redundant information that exists across different frames, hence interframe.

874
01:38:59,120 --> 01:39:05,120
 Right, okay, so the third type of redundancy that has to do with a human visual system,

875
01:39:05,120 --> 01:39:08,120
 which is known as a psycho-visual redundancy here.

876
01:39:08,120 --> 01:39:12,120
 So in particular, we have the frequency masking here.

877
01:39:12,120 --> 01:39:21,120
 So the frequency masking says that humans are more sensitive to any changes or distortion or noise in low-frequency component

878
01:39:21,120 --> 01:39:24,120
 as compared to high-frequency component.

879
01:39:24,120 --> 01:39:31,120
 So if you take these particular two images here, right, so for example, if you look at these particular sky regions here,

880
01:39:31,120 --> 01:39:38,120
 right, if there's some noise or some distortion, maybe for example in the form of having a dot here or a bird here,

881
01:39:38,120 --> 01:39:42,120
 our eye can actually spot this thing quite readily.

882
01:39:42,120 --> 01:39:50,120
 That means if there's some distortion or some change, actually our eyes can spot changes in the low AC component quite readily.

883
01:39:50,120 --> 01:39:53,120
 So this is as opposed to this image here.

884
01:39:53,120 --> 01:39:58,120
 So you can see this image has lots of texture or high AC component.

885
01:39:58,120 --> 01:40:03,120
 So if you have a small inset here, actually our eyes cannot spot it so readily.

886
01:40:03,120 --> 01:40:06,120
 So it's just how human visual system works, okay.

887
01:40:06,120 --> 01:40:10,120
 So this particular observation is known as a frequency masking.

888
01:40:10,120 --> 01:40:16,120
 So it says that human is less sensitive to noise or distortion in high-frequency component, okay, and vice versa.

889
01:40:16,120 --> 01:40:23,120
 Vice versa means that now human is more sensitive to noise and distortion in low-frequency component, okay.

890
01:40:23,120 --> 01:40:28,120
 So this is known as a frequency masking, right, and then next is the color masking.

891
01:40:28,120 --> 01:40:31,120
 So color masking we have mentioned a number of times already.

892
01:40:31,120 --> 01:40:40,120
 So human is more sensitive to the luminance or the brightness component as compared to the chrominance or the color component.

893
01:40:40,120 --> 01:40:48,120
 So therefore human is more sensitive to the luminance or brightness component as compared to the chrominance or the color component.

894
01:40:48,120 --> 01:41:00,120
 So when we are trying to perform video compression, actually the objective is we are trying to exploit all this redundancy that exists either within the frame,

895
01:41:00,120 --> 01:41:08,120
 or across the frame that has to do with a human visual system and how we represent the code to perform the compression.

896
01:41:08,120 --> 01:41:12,120
 So that's a basic underlying idea.

897
01:41:12,120 --> 01:41:15,120
 So therefore how do we perform video compression?

898
01:41:15,120 --> 01:41:17,120
 How do we compress the video?

899
01:41:17,120 --> 01:41:21,120
 So we are going to exploit all the redundancy that we have just explained.

900
01:41:21,120 --> 01:41:29,120
 So by removing the spatial redundancy, by reducing the temporal redundancy, and by exploiting the cycle visual redundancy.

901
01:41:29,120 --> 01:41:35,120
 So in the following slides you'll see no different strategy to do that.

902
01:41:35,120 --> 01:41:45,120
 So in real life, there's actually many, many different video compression standard, but all of these standards, their goal is the same, which is to reduce these types of redundancy.

903
01:41:45,120 --> 01:41:49,120
 So on top of that, we also want to improve the coding efficiency.

904
01:41:49,120 --> 01:41:51,120
 That means how we represent the big pattern.

905
01:41:51,120 --> 01:41:58,120
 So some of the things that we have studied before, including for example, the Hartman coding, right, the differential or predictive coding.

906
01:41:58,120 --> 01:42:05,120
 These two refer to the same, or for example, one length coding that we have studied in JPEG.

907
01:42:05,120 --> 01:42:11,120
 So these are the two key strategies we are going to use to perform video compression.

908
01:42:11,120 --> 01:42:15,120
 Okay, start on here.

909
01:42:15,120 --> 01:42:26,120
 Press the wrong button.

910
01:42:26,120 --> 01:42:31,120
 Okay, so next let's look at what's the structures of a video.

911
01:42:31,120 --> 01:42:36,120
 So as we have mentioned before, a video is nothing but a sequence of frames.

912
01:42:36,120 --> 01:42:38,120
 So you have a sequence of frames here.

913
01:42:38,120 --> 01:42:44,120
 So for this sequence of frames, very often we are going to organize it into multiple what we know as a group of pictures.

914
01:42:44,120 --> 01:42:46,120
 So video is a sequence of frames.

915
01:42:46,120 --> 01:42:52,120
 So we are going to organize it into numerous group of pictures, which is also known as a GOP.

916
01:42:52,120 --> 01:42:56,120
 So we are going to organize it into numerous GOP, right?

917
01:42:56,120 --> 01:43:00,120
 Okay, and then if you look at each of these particular picture, right?

918
01:43:00,120 --> 01:43:08,120
 So picture, in the context of video compression, we can call it image, we can call it picture, we can call it frame.

919
01:43:08,120 --> 01:43:10,120
 They're all referred to the same thing.

920
01:43:10,120 --> 01:43:17,120
 Okay, so if you look at these single pictures here, you can see this picture of this frame can be divided into a few different slices.

921
01:43:17,120 --> 01:43:22,120
 So just now in JPEG compression, we also see this slice structure.

922
01:43:22,120 --> 01:43:24,120
 So these different slices.

923
01:43:24,120 --> 01:43:30,120
 And then for each of the slice here, right, it's going to be further divided into a few macro block.

924
01:43:30,120 --> 01:43:32,120
 So each of these is a macro block.

925
01:43:32,120 --> 01:43:38,120
 Okay, so this macro block is a little bit different from the JPEG.

926
01:43:38,120 --> 01:43:52,120
 So for a macro block, it consists of one 16 by 16 pixel block of wide channel, one 8 by 8 pixel block of CB, and one 8 by 8 pixel block of CR.

927
01:43:52,120 --> 01:44:02,120
 So in other words, the macro block structures that you have here in video compression, right, it consists of four 8 by 8 pixel block of wide channel,

928
01:44:02,120 --> 01:44:10,120
 which is the luminance channel, one 8 by 8 pixel block of CB, and one 8 by 8 pixel block of CR.

929
01:44:10,120 --> 01:44:19,120
 So you can see here, okay, you have one, two, three, four, four 8 by 8 pixel block of luminance or wide channel, one CB and one CR channel.

930
01:44:19,120 --> 01:44:23,120
 So this is known as a macro block here, okay, in video compression.

931
01:44:23,120 --> 01:44:28,120
 So now, right, there's an alternative way of looking at this particular video structure.

932
01:44:28,120 --> 01:44:31,120
 So you have this particular video sequence, which is what's being shown here.

933
01:44:31,120 --> 01:44:37,120
 So this video sequence can be divided into numerous GOP, group of pictures like this.

934
01:44:37,120 --> 01:44:42,120
 So numerous GOP, right, and then you have some header information.

935
01:44:42,120 --> 01:44:45,120
 Okay, so which are some control information here.

936
01:44:45,120 --> 01:44:48,120
 Under GOP, right, so you can see this is one GOP.

937
01:44:48,120 --> 01:44:52,120
 Under one GOP, you have a few different pictures of frames here.

938
01:44:52,120 --> 01:44:55,120
 So one GOP, you have different pictures.

939
01:44:55,120 --> 01:44:59,120
 And then under one picture, you can be divided into a few different slices.

940
01:44:59,120 --> 01:45:03,120
 For example, a few different slices, okay.

941
01:45:03,120 --> 01:45:06,120
 And under one slice, you can have multiple macro blocks.

942
01:45:06,120 --> 01:45:10,120
 Okay, so you can see there are many different macro blocks.

943
01:45:10,120 --> 01:45:17,120
 Okay, and then under each macro block, it can be divided into six blocks here, which is this six blocks here.

944
01:45:17,120 --> 01:45:23,120
 Okay, four luminance blocks, one CB and one CR.

945
01:45:23,120 --> 01:45:24,120
 So you have six blocks here.

946
01:45:24,120 --> 01:45:34,120
 And then for each of the blocks here, right, it will consist of the DC component, which is using a differential coding and the AC component, which is just now the ground link coding.

947
01:45:34,120 --> 01:45:42,120
 Yeah, so actually for lots of the video compression, it also exploit what we have learned in the JPEG compression.

948
01:45:42,120 --> 01:45:50,120
 So therefore, right, you can see that there are some certain similarity with respect to what you have learned in the JPEG.

949
01:45:50,120 --> 01:45:55,120
 And that will be bring forward to the video compression as well.

950
01:45:55,120 --> 01:45:59,120
 Right, okay, so let's look at this macro block a little bit closer.

951
01:45:59,120 --> 01:46:01,120
 So a macro block consists of things like this.

952
01:46:01,120 --> 01:46:11,120
 So you can see you have four 8x8 pixel blocks of wide channel, one 8x8 pixel block of CB and one 8x8 pixel block of CR.

953
01:46:11,120 --> 01:46:15,120
 So you can see one macro block has four 8x8 pixels of wide channel.

954
01:46:15,120 --> 01:46:19,120
 So Y is the luminance, one CB and one CR.

955
01:46:19,120 --> 01:46:27,120
 So this 4x8 pixel block you can also see is equivalent to a 16x16 this Y component.

956
01:46:27,120 --> 01:46:28,120
 Y is the luminance.

957
01:46:28,120 --> 01:46:33,120
 Okay, and the corresponding 8x8 CB and CR component here.

958
01:46:33,120 --> 01:46:37,120
 Right, okay, so we have explained this a few times already.

959
01:46:37,120 --> 01:46:44,120
 So a macro block has four luminance blocks, one, two, three, four, and two prominence block, one CB and one CR.

960
01:46:44,120 --> 01:46:51,120
 So this is the basic building block for the DCT operations and motion compensation in video compression.

961
01:46:51,120 --> 01:46:57,120
 So subsequently we were talking about, you know, this is DCT operations as well as motion compensation.

962
01:46:57,120 --> 01:47:00,120
 Right, it's going to be based on this structure.

963
01:47:00,120 --> 01:47:03,120
 Okay.

964
01:47:03,120 --> 01:47:07,120
 Right, okay, so next let's look at what's the basic idea in video compression.

965
01:47:07,120 --> 01:47:11,120
 So the main idea in video compression actually is centered on two things.

966
01:47:11,120 --> 01:47:15,120
 You have the motion estimation and motion compensation.

967
01:47:15,120 --> 01:47:19,120
 So what is motion estimation and motion compensation?

968
01:47:19,120 --> 01:47:23,120
 So if you think about it for one moment, a video is actually a sequence of frames.

969
01:47:23,120 --> 01:47:25,120
 Okay, a sequence of frames.

970
01:47:25,120 --> 01:47:28,120
 And each of these frames are very similar to each other.

971
01:47:28,120 --> 01:47:32,120
 So like what we mentioned just now the interframe redundancy.

972
01:47:32,120 --> 01:47:38,120
 So therefore, instead of trying to, you know, represent each of this particular pixel value,

973
01:47:38,120 --> 01:47:45,120
 what you can do is that for each of the frame, we can partition it into numerous macro block.

974
01:47:45,120 --> 01:47:50,120
 Okay, we can partition it into numerous macro block like what we have explained earlier on.

975
01:47:50,120 --> 01:47:53,120
 And afterwards, suppose this is the current frame.

976
01:47:53,120 --> 01:47:57,120
 Okay, this is the current frame that we want to compress or include.

977
01:47:57,120 --> 01:48:01,120
 We partition it into numerous macro block.

978
01:48:01,120 --> 01:48:07,120
 Okay, suppose this is a current macro block that we want to compress right in our current frame.

979
01:48:07,120 --> 01:48:13,120
 So this current macro block that we want to compress in this current frame will compare to the previous reference frame.

980
01:48:13,120 --> 01:48:22,120
 Okay, so we'll compare with the previous reference frame and try to see where is the most similar block or the best match block.

981
01:48:22,120 --> 01:48:29,120
 Right, so the process of trying to find out the most similar block is known as a motion estimation.

982
01:48:29,120 --> 01:48:33,120
 You want to find out where it is, the most similar block.

983
01:48:33,120 --> 01:48:37,120
 So suppose this is your current frame, this is your reference frame.

984
01:48:37,120 --> 01:48:43,120
 So you try to find, okay, this current macro block here, you try to find the positions of the most similar block.

985
01:48:43,120 --> 01:48:52,120
 Suppose you find the most, the best match block is here, then this relative offset, you know, how much you move from this position to this position.

986
01:48:52,120 --> 01:48:54,120
 This is known as a motion factor.

987
01:48:54,120 --> 01:48:58,120
 Okay, the relative displacement is known as a motion factor.

988
01:48:58,120 --> 01:49:02,120
 So the process of finding the best match block is motion estimation.

989
01:49:02,120 --> 01:49:09,120
 And afterwards, once you found the best match block and your current block that you want to encode, you take their difference.

990
01:49:09,120 --> 01:49:12,120
 Then this is known as the motion compensation.

991
01:49:12,120 --> 01:49:14,120
 You try to find the prediction error.

992
01:49:14,120 --> 01:49:25,120
 So why we want to do that as mentioned many times is because for a video, if you just imagine your hand, this current video of the hand in this current frame, it may be here.

993
01:49:25,120 --> 01:49:30,120
 In the next frame or the previous frame, it may be just a little bit, it's very, very similar to it.

994
01:49:30,120 --> 01:49:36,120
 So therefore, very likely you can find a best match block quite readily.

995
01:49:36,120 --> 01:49:39,120
 Okay, so therefore, this is the main ideas in video compression.

996
01:49:39,120 --> 01:49:49,120
 It consists of motion compensation estimation, which is trying to predict the motion factor, right, the position of the best match block.

997
01:49:49,120 --> 01:49:56,120
 And then motion compensation, which is you're trying to find a small difference between your actual macro block.

998
01:49:56,120 --> 01:50:05,120
 That means the current block you want to compress as well as the predicted, that means the best match block that you have found earlier.

999
01:50:05,120 --> 01:50:12,120
 Okay, right, so we can easily understand this motion estimation and compensation from this figure.

1000
01:50:12,120 --> 01:50:18,120
 So again, just imagine, for example, this is the current frame that you want to compress.

1001
01:50:18,120 --> 01:50:20,120
 Right, so this is the current frame you want to compress.

1002
01:50:20,120 --> 01:50:24,120
 The first thing that you do is you partition it into numerous macro blocks.

1003
01:50:24,120 --> 01:50:28,120
 So each of these is actually a macro block here.

1004
01:50:28,120 --> 01:50:33,120
 Now, suppose if we look at this current macro block, you want to compress this current macro block.

1005
01:50:33,120 --> 01:50:36,120
 So what we do is that we look at the previous reference frame.

1006
01:50:36,120 --> 01:50:41,120
 Okay, because this frame, your current frame and the previous reference frame should be very similar.

1007
01:50:41,120 --> 01:50:47,120
 Okay, so standard at this particular positions here, standard at this particular position, you're going to define a such a frame.

1008
01:50:47,120 --> 01:50:49,120
 You're going to define a such window.

1009
01:50:49,120 --> 01:50:54,120
 Okay, your search window is where you're trying to find this best match block.

1010
01:50:54,120 --> 01:51:02,120
 So standard at this current position here, right in the previous reference frame at the same center position, you define a search window.

1011
01:51:02,120 --> 01:51:10,120
 And afterwards, you try to find what is the positions of the most similar block or best match block.

1012
01:51:10,120 --> 01:51:17,120
 Suppose after you scan through all the positions, you find that the most similar block is this block here.

1013
01:51:17,120 --> 01:51:25,120
 Then the relative offset from this standard here to this particular standard here, this is known as the motion factor here.

1014
01:51:25,120 --> 01:51:27,120
 Okay, so this is the motion factor.

1015
01:51:27,120 --> 01:51:30,120
 This is the most similar block or the best match block here.

1016
01:51:30,120 --> 01:51:38,120
 So this particular process of trying to find out the positions of the most similar block is known as motion estimation.

1017
01:51:38,120 --> 01:51:46,120
 So after you have found this match, best match block, you can see this block here, the current block you're trying to compress and the best match block.

1018
01:51:46,120 --> 01:51:49,120
 If you look at it, there's still a small difference.

1019
01:51:49,120 --> 01:51:52,120
 Yeah, because if you imagine it's still a video.

1020
01:51:52,120 --> 01:51:56,120
 So even if you found a block, which is most similar, there's still a small difference.

1021
01:51:56,120 --> 01:52:03,120
 So therefore you need to take the difference between your current block and the best match block, right?

1022
01:52:03,120 --> 01:52:04,120
 You take that difference.

1023
01:52:04,120 --> 01:52:09,120
 So this particular process of taking the difference is known as motion compensation.

1024
01:52:09,120 --> 01:52:12,120
 Okay, so these two concepts here.

1025
01:52:12,120 --> 01:52:16,120
 Right, okay, so let's continue on.

1026
01:52:16,120 --> 01:52:24,120
 Right, so in many video compression, there's also these ideas of intraframe and the interframe compressions here.

1027
01:52:24,120 --> 01:52:32,120
 Right, so you can see that for many video compression techniques such as MPEC or H.26 series of compression,

1028
01:52:32,120 --> 01:52:36,120
 they make use of both the intraframe as well as the interframe compression.

1029
01:52:36,120 --> 01:52:38,120
 So what is intraframe compression?

1030
01:52:38,120 --> 01:52:43,120
 So as the name suggests, intraframe compression means it's a compression within the frame.

1031
01:52:43,120 --> 01:52:45,120
 Okay, it's a compression within the frame.

1032
01:52:45,120 --> 01:52:48,120
 So typically given a particular video, right?

1033
01:52:48,120 --> 01:52:56,120
 For example, just now we say a video can be divided into many GOP structures, many group of picture structures.

1034
01:52:56,120 --> 01:52:59,120
 So now if you look at one GOP structure, right?

1035
01:52:59,120 --> 01:53:03,120
 So you look at one GOP structure, there's a few different frame types.

1036
01:53:03,120 --> 01:53:06,120
 So later on we are going to see, right, there's a few different frame types here.

1037
01:53:06,120 --> 01:53:09,120
 So some of the frame types, right?

1038
01:53:09,120 --> 01:53:13,120
 For example, in the context of MPEC 1, right?

1039
01:53:13,120 --> 01:53:19,120
 So in the context of MPEC 1, the GOP structure actually has three frame types.

1040
01:53:19,120 --> 01:53:24,120
 The i-frame, the p-frame as well as the b-frame that we are going to study shortly.

1041
01:53:24,120 --> 01:53:26,120
 So for the i-frame, right?

1042
01:53:26,120 --> 01:53:29,120
 So i-frame stands for intra-coded frame.

1043
01:53:29,120 --> 01:53:35,120
 That means we are going to compress this frame independently, just like it's a JPEG image.

1044
01:53:35,120 --> 01:53:41,120
 Okay, so for this GOP structure, there's an i-frame, there's a p-frame, and then there's a b-frame in between.

1045
01:53:41,120 --> 01:53:46,120
 So for i-frame, we are going to compress it independently just like JPEG images.

1046
01:53:46,120 --> 01:53:51,120
 So these types of frames, because we are going to compress it independently, right?

1047
01:53:51,120 --> 01:53:53,120
 It does not depend on other frame.

1048
01:53:53,120 --> 01:53:56,120
 So it's known as an intra-frame compression.

1049
01:53:56,120 --> 01:54:05,120
 So therefore, for some of the frames in the video, we will consider some of these frames just like they are steel images, like in a JPEG image, right?

1050
01:54:05,120 --> 01:54:11,120
 So for example, the i-frames in the MPEC, we are going to compress it independently, okay?

1051
01:54:11,120 --> 01:54:17,120
 Right, so because we compress it independently, we treat it just like it's an image.

1052
01:54:17,120 --> 01:54:23,120
 So the goal is to reduce the spatial redundancy just like in the MPEC compression.

1053
01:54:23,120 --> 01:54:30,120
 So it will use a technique which is very similar to the JPEG compression that we have studied earlier on.

1054
01:54:30,120 --> 01:54:34,120
 So this is known as the intra-frame compression.

1055
01:54:34,120 --> 01:54:39,120
 Okay, so the next types of frames that we have is known as the inter-frame compression.

1056
01:54:39,120 --> 01:54:45,120
 So the inter-frame compression, as the name suggests, the means is a compression that exists across a frame.

1057
01:54:46,120 --> 01:54:53,120
 So when it's across a frame, actually it's based on the idea of the motion, estimation and compensation that we have just studied.

1058
01:54:53,120 --> 01:55:01,120
 Right, so for inter-frame compression, it makes use of the correlation across the temporal domain, right?

1059
01:55:01,120 --> 01:55:10,120
 So for example, in the context of MPEC standard, right, we have the P-frame and B-frame here, which we'll study shortly.

1060
01:55:10,120 --> 01:55:16,120
 So for P-frame and B-frame in MPEC, it actually right, perform inter-frame compression, okay?

1061
01:55:16,120 --> 01:55:23,120
 You look at two, you look at, for example, this current frame that you want to compress, you compare with the previous reference frame,

1062
01:55:23,120 --> 01:55:28,120
 you try to find the positions of the best match block, you calculate the difference.

1063
01:55:28,120 --> 01:55:33,120
 So which is the motion, estimation, compensation we just introduced, yeah?

1064
01:55:33,120 --> 01:55:38,120
 So when you are using, you know, across two different frames, we call inter-frame compression.

1065
01:55:38,120 --> 01:55:48,120
 So therefore, for many video compression standard, they usually, you know, leverage on both intra-frame compression as well as inter-frame compression.

1066
01:55:48,120 --> 01:55:56,120
 So for inter-frame compression, because you are utilizing the correlation across two different frames in the temporal domain,

1067
01:55:56,120 --> 01:56:02,120
 so the goal is to reduce temporal redundancy, the similarity across different frames, right?

1068
01:56:02,120 --> 01:56:11,120
 And it makes use of the technique of a motion, estimation, and compensation technique that we have just introduced a short while ago.

1069
01:56:11,120 --> 01:56:17,120
 Right, okay, so the next thing is that we are going to look at, you know, this, you know, the color space.

1070
01:56:17,120 --> 01:56:25,120
 So similar to JPEC, for MPEC, typically the color space we are going to use is the YCBCR color space.

1071
01:56:25,120 --> 01:56:28,120
 So if you look at this particular image here, right, okay.

1072
01:56:28,120 --> 01:56:35,120
 So anyway, the luminance sometimes, short form we just called Luma, okay, chrominance sometimes we just called Chroma, okay?

1073
01:56:35,120 --> 01:56:37,120
 So this is a short form here, right?

1074
01:56:37,120 --> 01:56:48,120
 So for this MPEC, for video compression, right, most of the time we will convert the color space into YCBCR color space here, right?

1075
01:56:48,120 --> 01:56:52,120
 So if you look at, for example, this image here is in the RGB color space here.

1076
01:56:52,120 --> 01:56:57,120
 So if we convert it into the YCBCR color space, you can see this is the Y channel.

1077
01:56:57,120 --> 01:57:01,120
 This is the CB and this is the CR channels here, right?

1078
01:57:01,120 --> 01:57:10,120
 Okay, so you can see that actually our eyes are more sensitive to this particular Y channel and less sensitive to this CB and CR channel, right?

1079
01:57:10,120 --> 01:57:19,120
 So because our eyes are less sensitive to this CB and CR channel, so if you want to perform compression, what can we do?

1080
01:57:19,120 --> 01:57:27,120
 Since our eyes, number one is that, okay, why do we want to represent this video in YCBCR color space?

1081
01:57:27,120 --> 01:57:30,120
 Why?

1082
01:57:30,120 --> 01:57:44,120
 Why is it common for us to convert the color space for video into YCBCR color space for compression?

1083
01:57:44,120 --> 01:57:49,120
 I think we actually kind of very briefly touched on this in one of the earlier lecture.

1084
01:57:49,120 --> 01:57:55,120
 So the reason why we commonly represent an image in this YCBCR color space is that, right?

1085
01:57:55,120 --> 01:58:02,120
 Because our eyes are more sensitive to the Y channel and less sensitive to the CB and CR channel.

1086
01:58:02,120 --> 01:58:13,120
 That means once we convert the color space into this particular representation, there's a very intuitive and very logical way on how we can perform the compression now.

1087
01:58:13,120 --> 01:58:20,120
 Because compression means that we want to compress using as few bits as possible, right?

1088
01:58:20,120 --> 01:58:30,120
 If we can represent this image in this YCBCR color space and we already know once we represent in this color space, our eyes are sensitive to this,

1089
01:58:30,120 --> 01:58:33,120
 but our eyes are not sensitive to this CB and CR.

1090
01:58:33,120 --> 01:58:41,120
 Therefore, there's a very natural scheme which is that means we don't have to keep all the pixels in the CB and CR channel, right?

1091
01:58:41,120 --> 01:58:44,120
 Since our eyes are not so sensitive to it, right?

1092
01:58:44,120 --> 01:58:49,120
 So we can drop some of the pixels in the CB and CR channel.

1093
01:58:49,120 --> 01:58:57,120
 So the reason why we can drop is by dropping it, it hardly makes any difference to how we perceive this video, right?

1094
01:58:57,120 --> 01:59:08,120
 So that's why once we are in this space here, we can simply only keep a small number of subsets of pixels in this CB and CR channel.

1095
01:59:08,120 --> 01:59:12,120
 So this particular process is known as a chroma subsampling.

1096
01:59:12,120 --> 01:59:19,120
 That means we only perform subsampling for some of the pixels in the CB and CR channel.

1097
01:59:19,120 --> 01:59:22,120
 So that's the ideas of chroma subsampling.

1098
01:59:22,120 --> 01:59:31,120
 So it turns out that actually there's also a few different ways, a few different strategies we can decide what are the chroma pixels we want to keep.

1099
01:59:31,120 --> 01:59:34,120
 So therefore, there's a few different subsampling format.

1100
01:59:34,120 --> 01:59:37,120
 So let's look at some of the common subsampling format.

1101
01:59:37,120 --> 01:59:41,120
 So the first subsampling format is known as a 444, right?

1102
01:59:41,120 --> 01:59:48,120
 So there's no need for you to interpret whether there's a mathematical kind of interpretation behind it.

1103
01:59:48,120 --> 01:59:51,120
 There's no need to. Just remember there's this structure.

1104
01:59:51,120 --> 01:59:58,120
 444 correspond to this 422 correspond to this format and so on and so forth.

1105
01:59:58,120 --> 02:00:04,120
 So pretty much 444 chroma subsampling means that you do not perform any subsampling at all, right?

1106
02:00:04,120 --> 02:00:11,120
 So if you look at these particular examples here, so right, actually, right, you have one wide channel here.

1107
02:00:11,120 --> 02:00:15,120
 So for 444, that means the wide channel, we keep all the eight pixels here.

1108
02:00:15,120 --> 02:00:19,120
 In this particular case, we are showing a two by four pixel block.

1109
02:00:19,120 --> 02:00:24,120
 So for 444, we keep all the wide channel pixels.

1110
02:00:24,120 --> 02:00:32,120
 And then these blocks here, actually, the interpretation of this U plus B means that you have one U block and you have one V block.

1111
02:00:32,120 --> 02:00:34,120
 So let's take a shortcut and show them together.

1112
02:00:34,120 --> 02:00:40,120
 But actually, you have one two by four U block and one two by four V block here.

1113
02:00:40,120 --> 02:00:45,120
 So that means we keep all the U block pixels and we keep all the V block pixels.

1114
02:00:45,120 --> 02:00:52,120
 So now if you have those three two by four pixel block, we put them together in the RGB.

1115
02:00:52,120 --> 02:00:53,120
 This is how it looks like.

1116
02:00:53,120 --> 02:00:58,120
 Okay. So this is if you use a 444, that means we do not do any subsampling.

1117
02:00:58,120 --> 02:01:03,120
 So the next subsampling that we have is the 422 chroma subsampling.

1118
02:01:03,120 --> 02:01:11,120
 So for the 422 chroma subsampling, right, for the wide channel, again, because our eyes are sensitive to it, so we keep all the pixel.

1119
02:01:11,120 --> 02:01:13,120
 So we keep all the pixel value.

1120
02:01:13,120 --> 02:01:21,120
 Now, okay, for the U channel, just remember you have one block, which is corresponding to U and the other block, which is corresponding to V.

1121
02:01:21,120 --> 02:01:23,120
 So actually, there are two blocks there.

1122
02:01:23,120 --> 02:01:35,120
 Right. So for 422 chroma subsampling, what you do is that for every two horizontal CB, okay, this U and V actually is very similar to CB and CR.

1123
02:01:35,120 --> 02:01:39,120
 So we just interpret U and V and CB and CR.

1124
02:01:39,120 --> 02:01:41,120
 They are the same in this context here.

1125
02:01:41,120 --> 02:01:47,120
 So for every two horizontal U pixel or CB pixel, we only keep one.

1126
02:01:47,120 --> 02:01:49,120
 Okay. That means we drop the other one.

1127
02:01:49,120 --> 02:02:00,120
 We only keep, for every two horizontal pixel, we only keep one U, okay, or two horizontal pixel, we only keep one U or we only keep one CB here.

1128
02:02:00,120 --> 02:02:06,120
 And likewise, for the CR or the V channel, every two horizontal pixel, we only keep one.

1129
02:02:06,120 --> 02:02:13,120
 That means you actually drops half of the pixel in the U and V channel, or the CB and CR channel already.

1130
02:02:13,120 --> 02:02:23,120
 Okay. So now if you put those three blocks together, why U and V together, this is how it looks like after you have performed a 422 chroma subsampling.

1131
02:02:23,120 --> 02:02:24,120
 Okay.

1132
02:02:24,120 --> 02:02:32,120
 Right. So the next one is that, okay, the other well-known subsampling format is known as a 420.

1133
02:02:32,120 --> 02:02:36,120
 So for 420, that means the Y channel, we keep all the pixel.

1134
02:02:36,120 --> 02:02:42,120
 Right. For this U and V, if we consider the U block here, right, every two by two pixel block, we only keep one.

1135
02:02:42,120 --> 02:02:48,120
 One U pixel. Every two by two pixel block, we only keep one U pixel.

1136
02:02:48,120 --> 02:02:53,120
 And then likewise for V, every two by two pixel block, we only keep one V pixel.

1137
02:02:53,120 --> 02:02:57,120
 Every two by two pixel block, we only keep one V pixels here.

1138
02:02:57,120 --> 02:03:00,120
 So now if we have these three blocks together, we put them together.

1139
02:03:00,120 --> 02:03:09,120
 This is how a 420 chroma subsample pixel will look like if we change it to the RGB representations here.

1140
02:03:09,120 --> 02:03:10,120
 Okay.

1141
02:03:10,120 --> 02:03:15,120
 Right. And then next, the next one is the 411 chroma subsampling.

1142
02:03:15,120 --> 02:03:20,120
 So for 411 chroma subsampling, what we have is again, the Y channel, we keep all the pixel.

1143
02:03:20,120 --> 02:03:26,120
 And then for each of the U and V, every four horizontal pixel, we only keep one U.

1144
02:03:26,120 --> 02:03:30,120
 Okay. And every four horizontal pixel, we only keep one V pixel.

1145
02:03:30,120 --> 02:03:33,120
 So if we put them together, this is how it looks like.

1146
02:03:33,120 --> 02:03:38,120
 Okay. So these are the, a few common chroma subsampling format that we have.

1147
02:03:38,120 --> 02:03:44,120
 So you can see for 422 and 411, it involves horizontal subsampling.

1148
02:03:44,120 --> 02:03:48,120
 Every two pixel, you keep one or every four pixel, you keep one.

1149
02:03:48,120 --> 02:03:53,120
 Okay. And then for 420, it involves a horizontal and vertical subsampling.

1150
02:03:53,120 --> 02:03:56,120
 Every two by two pixel block, you only keep one.

1151
02:03:56,120 --> 02:03:58,120
 Every two by two pixel block, you only keep one.

1152
02:03:58,120 --> 02:04:04,120
 So if you look at now, if you look at this chroma subsampling format, you notice that, okay,

1153
02:04:04,120 --> 02:04:11,120
 this original pixel block and then this, another three chroma subsampling blocks are,

1154
02:04:11,120 --> 02:04:13,120
 it looks kind of different now.

1155
02:04:13,120 --> 02:04:17,120
 But earlier on, you know, we mentioned that our eyes are not so sensitive to it.

1156
02:04:17,120 --> 02:04:21,120
 So by right, if you perform some chroma subsampling, you know,

1157
02:04:21,120 --> 02:04:24,120
 your eye cannot tell the difference between them.

1158
02:04:24,120 --> 02:04:29,120
 So, so how do we explain, explain this?

1159
02:04:35,120 --> 02:04:43,120
 By right, it should be something like, because our eyes are not so sensitive to this chroma channel,

1160
02:04:43,120 --> 02:04:45,120
 so we can drop some of the pixels, right?

1161
02:04:45,120 --> 02:04:49,120
 So by right, what it means is that, you know, after you perform this subsampling, right,

1162
02:04:49,120 --> 02:04:55,120
 this pixel block should visually look similar to this original pixel block, right,

1163
02:04:55,120 --> 02:04:57,120
 that you do not drop any pixel.

1164
02:04:57,120 --> 02:05:03,120
 But if you look at it, actually it looks kind of different.

1165
02:05:03,120 --> 02:05:09,120
 Okay, so actually, yeah, the thing is like this, because if you are talking about, for example, a TV,

1166
02:05:09,120 --> 02:05:14,120
 you know, a TV nowadays, a big TV actually has many, many pixels, right?

1167
02:05:14,120 --> 02:05:18,120
 So now we are more like, you know, we really, really zoom in to look at a small pixel block,

1168
02:05:18,120 --> 02:05:20,120
 and you can tell the difference.

1169
02:05:20,120 --> 02:05:23,120
 But if you zoom out, because there are so many pixels there, right,

1170
02:05:23,120 --> 02:05:29,120
 actually from our visual perspective, right, you can hardly tell them apart, okay?

1171
02:05:29,120 --> 02:05:34,120
 So the reason why you can tell them apart now is because you zoom in and look at it so closely.

1172
02:05:34,120 --> 02:05:37,120
 But once you zoom out, right, there are millions of pixels.

1173
02:05:37,120 --> 02:05:43,120
 Actually from the visual perception perspective, you can hardly tell them apart, okay?

1174
02:05:43,120 --> 02:05:47,120
 Right, okay, so therefore the basic idea of chroma subsampling,

1175
02:05:47,120 --> 02:05:49,120
 I think we have spent some time to talk about it.

1176
02:05:49,120 --> 02:05:54,120
 The basic idea is human is more sensitive to the luminous component than the chroma component.

1177
02:05:54,120 --> 02:06:01,120
 So in order to achieve compression, that means to try to, you know, keep as few pixels as possible, right?

1178
02:06:01,120 --> 02:06:06,120
 The chroma component can be subsampled, or in other words, some of the pixels can be dropped, okay?

1179
02:06:06,120 --> 02:06:12,120
 So if you perform 422 chroma subsampling, that means every two horizontal Y-sampled,

1180
02:06:12,120 --> 02:06:16,120
 we only keep one CB, one CB and one CR pixel, right?

1181
02:06:16,120 --> 02:06:19,120
 If we use, for example, the 420 chroma subsampling,

1182
02:06:19,120 --> 02:06:25,120
 for every 2x2Y-sampled, we only keep one CB and one CR sample.

1183
02:06:25,120 --> 02:06:28,120
 So based on what we have explained.

1184
02:06:28,120 --> 02:06:35,120
 Right, okay, so next I'm going to play you a very short video to explain the basic principles of video coding.

1185
02:06:35,120 --> 02:06:39,120
 So again, with some, you know, animation and visualization,

1186
02:06:39,120 --> 02:06:44,120
 sometimes it's easier for you to understand than just simply using the words that I've described.

1187
02:06:44,120 --> 02:06:48,120
 Okay, so let me just play this short video for you.

1188
02:06:49,120 --> 02:06:55,120
 If you watch videos on the web, you use video codecs.

1189
02:06:55,120 --> 02:06:59,120
 But what exactly is a video codec?

1190
02:06:59,120 --> 02:07:04,120
 Codecs reduce large videos to more manageable sizes. This is called compression.

1191
02:07:04,120 --> 02:07:09,120
 Without codecs, serving video on the web would be almost impossible.

1192
02:07:09,120 --> 02:07:15,120
 Uncompressed or raw video simply requires too much data to transmit over even the fastest networks.

1193
02:07:15,120 --> 02:07:21,120
 For example, a 5 minute mobile video without compression uses over 3 gigabytes of data.

1194
02:07:21,120 --> 02:07:26,120
 A 5 minute HD video uses over 25 gigabytes.

1195
02:07:26,120 --> 02:07:30,120
 Files this large would take many hours to download to your computer for playback.

1196
02:07:30,120 --> 02:07:33,120
 On a mobile connection, they take weeks.

1197
02:07:33,120 --> 02:07:39,120
 So how does a codec shrink all that data to something that you can play on your device in seconds?

1198
02:07:39,120 --> 02:07:42,120
 Codecs use sophisticated algorithms to work their magic.

1199
02:07:42,120 --> 02:07:48,120
 But you don't need to know what a discrete cosine transform or entropy encoder is to understand the basics.

1200
02:07:48,120 --> 02:07:54,120
 The first thing to keep in mind is that digital videos are sequences of pictures called frames,

1201
02:07:54,120 --> 02:07:57,120
 much like the frames in conventional movie film.

1202
02:07:57,120 --> 02:08:01,120
 In most web video, there are about 30 frames per second of video.

1203
02:08:01,120 --> 02:08:09,120
 Because there are so many pictures per second of video, the picture in each frame varies only slightly from the frames before it and those after it.

1204
02:08:10,120 --> 02:08:13,120
 Codecs work by removing similarities in the uncompressed frames,

1205
02:08:13,120 --> 02:08:17,120
 keeping only the differences and coding the differences as symbols.

1206
02:08:17,120 --> 02:08:22,120
 After all the redundancies are removed, the resulting data, called the encoded bitstream,

1207
02:08:22,120 --> 02:08:26,120
 uses far less data than the original uncompressed source.

1208
02:08:26,120 --> 02:08:31,120
 There are two parts to a codec, an encoder and a decoder.

1209
02:08:31,120 --> 02:08:36,120
 The encoder compresses the video stream into a binary encoded bitstream.

1210
02:08:36,120 --> 02:08:43,120
 The decoder restores the encoded bitstream back into sequential pictures or frames or playback.

1211
02:08:43,120 --> 02:08:47,120
 The encoding process results in some loss of the original video's quality.

1212
02:08:47,120 --> 02:08:52,120
 One test of a codec's quality is measuring the size of that loss.

1213
02:08:52,120 --> 02:08:58,120
 On the decoding side, simplicity and speed are perhaps the most important qualities of a codec.

1214
02:08:58,120 --> 02:09:03,120
 After all, a decoder isn't much use if no one's computer is powerful enough to run it.

1215
02:09:03,120 --> 02:09:07,120
 So that's a brief introduction to the world of video codecs.

1216
02:09:07,120 --> 02:09:12,120
 Next time you watch a video on the web, you'll know something about the amazing technology that makes it possible.

1217
02:09:19,120 --> 02:09:24,120
 Okay, so that's a quick introduction and visualizations of the video coding or compression.

1218
02:09:25,120 --> 02:09:32,120
 Next, we're going to start off with explaining the basics of the MPEG compression now.

1219
02:09:32,120 --> 02:09:46,120
 The approach we're going to talk about this video compression is that we'll be focusing our attention on, for example, one of the MPEG standard.

1220
02:09:46,120 --> 02:09:48,120
 For example, MPEG 1 standard.

1221
02:09:48,120 --> 02:09:51,120
 So we'll explain the MPEG 1 standard a bit more in detail.

1222
02:09:51,120 --> 02:10:03,120
 And then after works, we are going to explain for the subsequent different compression standard like MPEG 2, MPEG 4, Hitch.264, and so on and so forth,

1223
02:10:03,120 --> 02:10:05,120
 and see what is the difference between them.

1224
02:10:05,120 --> 02:10:09,120
 Because the matter of fact is that there are many video compression standards there.

1225
02:10:09,120 --> 02:10:14,120
 If we try to explain all the compression standard in detail, after a while,

1226
02:10:14,120 --> 02:10:20,120
 many of you are going to lose interest because it's just like a lot of reputation and redundancy and so on.

1227
02:10:20,120 --> 02:10:28,120
 So therefore, the approach that we are going to use when we are trying to explain this video compression is that we will start off with the early video compression standard.

1228
02:10:28,120 --> 02:10:30,120
 We'll explain a bit more in detail.

1229
02:10:30,120 --> 02:10:40,120
 And afterwards, for the subsequent more recent video standard, we'll try to explain for each iterations of a standard what is the improvement that was introduced.

1230
02:10:40,120 --> 02:10:49,120
 So it will be more concise and it's also easier for you to learn rather than trying to file all the repetitions.

1231
02:10:49,120 --> 02:10:58,120
 So that's why we'll start with the MPEG standard because when you study about video compression, this is the most common standard we start with.

1232
02:10:58,120 --> 02:11:03,120
 So the objective of the MPEG 1 is to perform video compression.

1233
02:11:03,120 --> 02:11:06,120
 So we try to encode or compress the video signal here.

1234
02:11:06,120 --> 02:11:14,120
 So by now, you probably already know that for MPEG standard, it's actually set similar to the earlier general video compression standard.

1235
02:11:14,120 --> 02:11:17,120
 It will be based on DCT coding.

1236
02:11:17,120 --> 02:11:24,120
 So we'll be using DCT and then it will also be using the motion estimation and compensation.

1237
02:11:24,120 --> 02:11:26,120
 So the idea that we have introduced.

1238
02:11:26,120 --> 02:11:32,120
 So for the DCT coding, the objective is to reduce the intraference redundancy.

1239
02:11:32,120 --> 02:11:42,120
 So earlier on, if you remember, when we given a particular video, there'll be some frame that you encode it independently without reference to any other frame.

1240
02:11:42,120 --> 02:11:48,120
 So we encode it independently just like an IFrame or like a JPEG image.

1241
02:11:48,120 --> 02:11:53,120
 So for those types of frames here, we'll be using the DCT coding.

1242
02:11:53,120 --> 02:12:00,120
 And our goal is to remove the intra frame redundancy within the frame itself.

1243
02:12:00,120 --> 02:12:05,120
 And then for some frame, you'll be comparing the similarity across two different frames.

1244
02:12:05,120 --> 02:12:10,120
 So for those frames, the goal is to remove the interframe redundancy.

1245
02:12:10,120 --> 02:12:17,120
 So the technique that we'll be using is the motion estimation and compensation that we have introduced.

1246
02:12:17,120 --> 02:12:19,120
 So this is a recap.

1247
02:12:19,120 --> 02:12:27,120
 So for MPEG, they'll also use this macro block structure, which consists of four 8x8 blocks of wide channel,

1248
02:12:27,120 --> 02:12:32,120
 one 8x8 block of CB and one 8x8 blocks of CR.

1249
02:12:32,120 --> 02:12:42,120
 So you can see you have one luminance component and then you have two chromium components, CB and CR, and it's using 420 chroma subsampling.

1250
02:12:42,120 --> 02:12:52,120
 So if you recall, just now for the 420 chroma subsampling, every 2x2 wide sample, you only keep one CB and you keep one CR.

1251
02:12:52,120 --> 02:12:55,120
 So therefore, in terms of structure, it will be like this.

1252
02:12:55,120 --> 02:13:05,120
 Four 8x8 blocks of wide channel, one 8x8 blocks of CB and one 8x8 blocks of CR.

1253
02:13:05,120 --> 02:13:09,120
 Using this chroma subsampling strategy.

1254
02:13:09,120 --> 02:13:16,120
 So next, we are going to explain about this MPEG video structure a little bit more in detail now.

1255
02:13:16,120 --> 02:13:18,120
 So first, you have a video sequence.

1256
02:13:18,120 --> 02:13:26,120
 This video sequence can be organized into multiple GOP structures, group of picture, GOP1, GOP2 and so on and so forth.

1257
02:13:26,120 --> 02:13:36,120
 So if you look at one GOP structure, if you zoom it in, you can see that it has an i-frame, it has p-frame and then it has b-frame in between.

1258
02:13:36,120 --> 02:13:38,120
 Actually, there's a small error here.

1259
02:13:38,120 --> 02:13:41,120
 For one GOP structure, you only have one i-frame.

1260
02:13:41,120 --> 02:13:45,120
 So this line here actually should be stopping until this b here.

1261
02:13:45,120 --> 02:13:48,120
 This line should only be stopping until this b.

1262
02:13:48,120 --> 02:13:56,120
 So for one GOP, you would have one i-frame, which is intra-coated frame.

1263
02:13:56,120 --> 02:13:58,120
 You encode it independently.

1264
02:13:58,120 --> 02:14:05,120
 You have some p-frame, which is you encode with respect to the previous reference frame.

1265
02:14:05,120 --> 02:14:12,120
 And then you have some b-frame, which is you encode with respect to the previous and the following reference frame.

1266
02:14:12,120 --> 02:14:17,120
 So anyway, we'll talk a little bit more about this later on.

1267
02:14:17,120 --> 02:14:24,120
 But in short, one GOP, as you know now, is that you have i-frame, you have p-frame, as well as you have b-frame.

1268
02:14:24,120 --> 02:14:29,120
 So we'll explain each of these frame type a little bit more closely later.

1269
02:14:29,120 --> 02:14:38,120
 So now if you look at each of these particular frames here, either ip or b-frames here, it can be further divided into different slices.

1270
02:14:38,120 --> 02:14:41,120
 For example, this slice number one, this slice number two.

1271
02:14:41,120 --> 02:14:47,120
 And in each slice, it can be further partitioned into numerous macro blocks and b.

1272
02:14:47,120 --> 02:14:55,120
 And each macro block will consist of just now, we say 4A by 8, y block, 1A by 8, CB and 1A by 8, CR.

1273
02:14:55,120 --> 02:15:00,120
 So all together it will be 6A by 8 pixel blocks.

1274
02:15:00,120 --> 02:15:06,120
 So that's the basic organizations of the MPEG video, how it looks like.

1275
02:15:06,120 --> 02:15:10,120
 So now we are going to zoom in to look at the GOP structures now.

1276
02:15:10,120 --> 02:15:12,120
 GOP stands for group of pictures here.

1277
02:15:12,120 --> 02:15:19,120
 So if you zoom in and look at one GOP structure here, so in one GOP structure, you have one i-frame.

1278
02:15:19,120 --> 02:15:24,120
 You can have a few p-frames and then you have some b-frames in between here.

1279
02:15:24,120 --> 02:15:26,120
 So what is i-frame here?

1280
02:15:26,120 --> 02:15:29,120
 So i-frame stands for infra-coded frame.

1281
02:15:29,120 --> 02:15:36,120
 That means it's a frame type that you encode independently by itself, just like JPEG standard.

1282
02:15:36,120 --> 02:15:38,120
 So this is the i-frame here.

1283
02:15:38,120 --> 02:15:42,120
 So the next frame type that we have is known as a p-frame.

1284
02:15:42,120 --> 02:15:45,120
 So p-frames stands for predictive coded frame.

1285
02:15:45,120 --> 02:15:52,120
 So for predictive coded frame, when you want to encode it, you have to compare with respect to the previous reference frame.

1286
02:15:52,120 --> 02:15:58,120
 For example, if you want to encode this p-frame, you need to refer to the previous reference frame here.

1287
02:15:58,120 --> 02:16:04,120
 If you want to encode this p-frame here, you need to refer to the previous reference frame or anchor frame here.

1288
02:16:04,120 --> 02:16:09,120
 So your reference frame can either be i-frame or it can be p-frame.

1289
02:16:09,120 --> 02:16:17,120
 So because now you are comparing this frame with respect to the previous reference frame, so it's an interframe now.

1290
02:16:17,120 --> 02:16:20,120
 It's an interframe redundant, interframe compression.

1291
02:16:20,120 --> 02:16:27,120
 So when you are performing the interframe compression, that means you need to perform motion, estimation and compensation.

1292
02:16:27,120 --> 02:16:30,120
 So you can see there's a motion compensation here.

1293
02:16:30,120 --> 02:16:32,119
 You have a motion compensation here.

1294
02:16:32,119 --> 02:16:33,119
 So this is the p-frame.

1295
02:16:33,120 --> 02:16:36,120
 So the third frame type that you have is a b-frame here.

1296
02:16:36,120 --> 02:16:40,120
 So this b-frame refers to bi-directional frame here.

1297
02:16:40,120 --> 02:16:51,120
 So bi-directional frame here means that if you want to encode this b-frame here, you need to compare with respect to the previous reference frame and the following reference frame.

1298
02:16:51,120 --> 02:17:00,120
 In this case here, for example, if you look at this example here, the previous reference frame is the i-frame and the following reference frame is p-frame here.

1299
02:17:00,120 --> 02:17:07,120
 So you need to compare your b-frame with respect to this previous and the following reference frame to do the compression.

1300
02:17:07,120 --> 02:17:16,120
 So likewise for this b-frame here, if you want to encode or compare this b-frame, you need to compare respect to this i-frame and this p-frame here.

1301
02:17:16,120 --> 02:17:21,120
 So these are the three important frame types in MPEG-1 standard here.

1302
02:17:21,120 --> 02:17:29,120
 So because for b-frame, you are comparing with respect to the previous and the following reference frame, it's known as bi-directional motion compensation.

1303
02:17:29,120 --> 02:17:34,120
 You compare with before and you compare with after.

1304
02:17:34,120 --> 02:17:38,120
 Okay, so next with the figure, we have very briefly explained.

1305
02:17:38,120 --> 02:17:43,120
 So now we can further elaborate a little bit about this GOP structure here.

1306
02:17:43,120 --> 02:17:47,120
 You can see a video sequence is divided into numerous GOP structures.

1307
02:17:47,120 --> 02:17:51,120
 So a video, you can partition it into numerous GOP.

1308
02:17:51,120 --> 02:17:56,120
 So for each GOP, you may have these three video types, i-frame.

1309
02:17:56,120 --> 02:18:06,120
 So i-frame stands for intra-coded frame, p-frame stands for predicted coded frame, and b-frame stands for bi-directional coded frame.

1310
02:18:06,120 --> 02:18:08,120
 So i, p, and b-frame.

1311
02:18:08,120 --> 02:18:13,120
 So next we are going to look at each of these particular frame type a bit more in detail now.

1312
02:18:13,120 --> 02:18:14,120
 So i-frame.

1313
02:18:14,120 --> 02:18:20,120
 So i-frame, as we mentioned, we encode it independently just like JPEG here.

1314
02:18:20,120 --> 02:18:23,120
 So it's coded without reference to any other frame.

1315
02:18:23,120 --> 02:18:29,120
 The wide CB and CR blocks are coded independently just like JPEG that you have studied.

1316
02:18:29,120 --> 02:18:31,120
 Okay, so this part should be straightforward.

1317
02:18:31,120 --> 02:18:34,120
 Next we'll look at p-frame and b-frame here.

1318
02:18:34,120 --> 02:18:41,120
 So for p-frame and b-frame, actually because when you encode it, you compare with some other reference frame.

1319
02:18:41,120 --> 02:18:47,120
 So because you compare with some other reference frame, it's known as inter-coded, right?

1320
02:18:47,120 --> 02:18:49,120
 Because it's inter between two frames.

1321
02:18:49,120 --> 02:18:54,120
 So it's inter-coded or sometimes also known as inter-plation frame here.

1322
02:18:54,120 --> 02:18:59,120
 Okay, so p-frames are coded using motion estimation and compensation, right?

1323
02:18:59,120 --> 02:19:02,120
 From the previous angle frame.

1324
02:19:02,120 --> 02:19:07,120
 So the previous angle frame can be i-frame or it can be p-frame just like what we see here.

1325
02:19:07,120 --> 02:19:12,120
 Okay, if you want to encode this p-frame, it has to compare with the previous reference or angle frame.

1326
02:19:12,120 --> 02:19:17,120
 And this reference or angle frame can either be i-frame or p-frame.

1327
02:19:19,120 --> 02:19:26,120
 Okay, and then b-frames are encoded using prediction from either the past, future or both angle frame.

1328
02:19:26,120 --> 02:19:36,120
 So for b-frame, for b-frame here, for example, this b-frame, you are going to compare with the past as well as the future angle frame.

1329
02:19:36,120 --> 02:19:39,120
 Okay, so you are going to do three comparisons.

1330
02:19:39,120 --> 02:19:46,120
 You're going to compare with the previous reference frame, the following reference frame, and you're going to take the average of them.

1331
02:19:46,120 --> 02:19:53,120
 So we are going to see a bit more about how do we encode each of these frames a bit more in detail later.

1332
02:19:53,120 --> 02:19:58,120
 So you can see p-frames encoded using prediction from the past, from the future or both.

1333
02:19:58,120 --> 02:20:06,120
 Okay, so this is the MPEG-1 display encoding order.

1334
02:20:06,120 --> 02:20:08,120
 So suppose we have a video, right?

1335
02:20:08,120 --> 02:20:12,120
 So in this video here, we have these particular different frames here.

1336
02:20:12,120 --> 02:20:15,120
 So this is showing the GOP structures here.

1337
02:20:15,120 --> 02:20:21,120
 So in terms of the display format, when you are trying to display frame by frame, right, the structure is like this.

1338
02:20:21,120 --> 02:20:28,120
 Firstly, you have the i-frame, and then you have some p-frame, okay, and then you have some b-frame in between.

1339
02:20:28,120 --> 02:20:35,120
 So this is when you display the video, when you play a video playback, this is how the frame will be played.

1340
02:20:35,120 --> 02:20:38,120
 i, bb, p, bb, p, bb.

1341
02:20:38,120 --> 02:20:42,120
 This i here is actually belonging to the next GOP structure.

1342
02:20:42,120 --> 02:20:46,120
 Okay, yeah, so this is how if you play a video, it will be shown.

1343
02:20:46,120 --> 02:20:53,120
 But when you are trying to perform the coding and transmission, say suppose when, you know, this video you have already compressed it,

1344
02:20:53,120 --> 02:21:00,120
 and when you want to transmit different frame information to the receiver end.

1345
02:21:00,120 --> 02:21:07,120
 So how we encode and how we transmit it is a little bit different from how we display it.

1346
02:21:07,120 --> 02:21:11,120
 So what we do is that first of all, we will be transmitting this i-frame first.

1347
02:21:11,120 --> 02:21:22,120
 And then afterwards, we will be transmitting the p-frame and afterwards, we'll be transmitting the two b-frames in between.

1348
02:21:22,120 --> 02:21:30,120
 And then next, we will be transmitting the next p-frame, and then we will be transmitting these two b-frames in between.

1349
02:21:30,120 --> 02:21:33,120
 And then, you know, so on and so forth.

1350
02:21:33,120 --> 02:21:36,320
 So the question is that why do we want to do it in this way?

1351
02:21:36,320 --> 02:21:38,760
 So when we're doing the coding and the transmission,

1352
02:21:38,760 --> 02:21:43,040
 why is it that we transmit the iframe first,

1353
02:21:43,040 --> 02:21:46,120
 followed by P, and then followed by the B in between?

1354
02:21:47,840 --> 02:21:49,240
 So what's the reason?

1355
02:21:59,880 --> 02:22:01,840
 Okay, so in order to answer the questions,

1356
02:22:01,880 --> 02:22:03,280
 I just asked the self, right?

1357
02:22:03,280 --> 02:22:05,800
 Okay, suppose you are at the receiver side.

1358
02:22:05,800 --> 02:22:07,960
 Okay, once you transmit this,

1359
02:22:07,960 --> 02:22:11,320
 but suppose if you receive this iframe, the first iframe,

1360
02:22:11,320 --> 02:22:12,720
 do you think you can decode it?

1361
02:22:14,480 --> 02:22:15,680
 Can you decode it?

1362
02:22:15,680 --> 02:22:16,520
 You can, right?

1363
02:22:16,520 --> 02:22:20,600
 Because iframe is, no, when you try to decode it

1364
02:22:20,600 --> 02:22:22,240
 or reconstruct a frame,

1365
02:22:22,240 --> 02:22:24,160
 it does not refer to any other frame.

1366
02:22:24,160 --> 02:22:27,760
 That means you can reconstruct this iframe directly.

1367
02:22:27,760 --> 02:22:31,200
 Now, say suppose, suppose for one moment, right?

1368
02:22:31,200 --> 02:22:34,200
 If we decide, say, okay, we transmit this b-frame.

1369
02:22:34,200 --> 02:22:36,200
 Suppose we don't follow this order.

1370
02:22:36,200 --> 02:22:38,680
 Suppose a second frame, you try to be smart,

1371
02:22:38,680 --> 02:22:41,240
 you say that, okay, I'm going to transmit b-frame.

1372
02:22:41,240 --> 02:22:42,800
 Okay, after I transmit the first iframe,

1373
02:22:42,800 --> 02:22:44,720
 suppose I transmit the b-frame.

1374
02:22:44,720 --> 02:22:46,600
 Suppose if we transmit the b-frame,

1375
02:22:46,600 --> 02:22:48,120
 and at the receiver side,

1376
02:22:48,120 --> 02:22:50,440
 once you receive this b-frame,

1377
02:22:50,440 --> 02:22:53,160
 do you think you'll be able to decode it?

1378
02:22:53,160 --> 02:22:55,600
 Will you be able to reconstruct this b-frame?

1379
02:22:57,080 --> 02:22:58,560
 The answer is yes or no?

1380
02:22:59,400 --> 02:23:01,119
 No, right?

1381
02:23:01,119 --> 02:23:01,960
 Why?

1382
02:23:01,960 --> 02:23:06,600
 Because in order to reconstruct this b-frame,

1383
02:23:06,600 --> 02:23:11,400
 you need both the previous reference of anchor frame i

1384
02:23:11,400 --> 02:23:16,279
 as well as the following anchor frame p.

1385
02:23:16,279 --> 02:23:18,320
 So therefore, even if I transmit b-frame,

1386
02:23:18,320 --> 02:23:19,199
 there's nothing I can do.

1387
02:23:19,199 --> 02:23:22,199
 I still have to wait for the p-frame to arrive first.

1388
02:23:22,199 --> 02:23:24,519
 Because in order to reconstruct this b-frame,

1389
02:23:24,519 --> 02:23:27,240
 you need to know the knowledge of iframe and p-frame.

1390
02:23:27,280 --> 02:23:28,920
 So because of that simple logic,

1391
02:23:28,920 --> 02:23:32,080
 that means we must transmit iframe first,

1392
02:23:32,080 --> 02:23:36,000
 which it can decode or reconstruct independently.

1393
02:23:36,000 --> 02:23:37,880
 And after works, you'll transmit this p-frame,

1394
02:23:37,880 --> 02:23:40,520
 because this p-frame will depend

1395
02:23:40,520 --> 02:23:42,720
 on the previous reference frame iframe.

1396
02:23:42,720 --> 02:23:46,160
 So only after I've reconstructed this iframe here,

1397
02:23:46,160 --> 02:23:49,440
 I'll be able to reconstruct the p-frame.

1398
02:23:49,440 --> 02:23:53,480
 So therefore, we will transmit the p-frame second.

1399
02:23:53,480 --> 02:23:56,840
 And after works, only after I get the iframe and the p-frame,

1400
02:23:56,840 --> 02:24:00,320
 then I can transmit the two b-frame in between.

1401
02:24:00,320 --> 02:24:02,160
 Because this two b-frame will depend

1402
02:24:02,160 --> 02:24:07,440
 on the previous iframe and the following p-frame

1403
02:24:07,440 --> 02:24:08,800
 before it can decode.

1404
02:24:08,800 --> 02:24:11,080
 So that's why due to that logic,

1405
02:24:11,080 --> 02:24:14,120
 this is the order you need to transmit your video.

1406
02:24:17,160 --> 02:24:17,640
 Right.

1407
02:24:17,640 --> 02:24:19,280
 So next, let's spend a bit of time

1408
02:24:19,280 --> 02:24:23,760
 to talk about the design issues in the GOP structure.

1409
02:24:23,760 --> 02:24:25,840
 So based on what you've studied now,

1410
02:24:25,840 --> 02:24:28,720
 so what frame type in the GOP structure do you think

1411
02:24:28,720 --> 02:24:32,120
 will have the largest and the smallest compression ratio

1412
02:24:32,120 --> 02:24:33,160
 and why?

1413
02:24:33,160 --> 02:24:38,000
 So now you have three different frame type iframe,

1414
02:24:38,000 --> 02:24:39,280
 p-frame, and b-frame.

1415
02:24:39,280 --> 02:24:40,760
 So out of these three frame type,

1416
02:24:40,760 --> 02:24:45,800
 which one do you think will have the highest compression ratio?

1417
02:24:45,800 --> 02:24:48,760
 So if you remember, the definition of compression ratio

1418
02:24:48,760 --> 02:24:51,520
 means that it's a storage requirement.

1419
02:24:51,520 --> 02:24:54,680
 OK, compression ratio is defined as the storage requirement

1420
02:24:54,680 --> 02:24:58,360
 for original data or uncompressed data

1421
02:24:58,360 --> 02:25:02,600
 over the data storage requirement for a compressed data.

1422
02:25:02,600 --> 02:25:05,520
 That means the higher the compression ratio,

1423
02:25:05,520 --> 02:25:09,680
 the smaller you can compress the frame

1424
02:25:09,680 --> 02:25:12,280
 into smaller file size.

1425
02:25:12,280 --> 02:25:15,960
 So based on that, which one do you

1426
02:25:15,960 --> 02:25:18,520
 think will have the highest compression ratio?

1427
02:25:19,520 --> 02:25:22,200
 OK, I hear someone say b-frame, right?

1428
02:25:22,200 --> 02:25:24,800
 So why b-frame will have the highest compression ratio?

1429
02:25:35,000 --> 02:25:39,480
 So generally speaking, you have iframe, p-frame, and b-frame.

1430
02:25:39,480 --> 02:25:43,000
 So iframe actually is based on intra-frame compression.

1431
02:25:43,000 --> 02:25:46,720
 That means it's like a JPEG-based approach.

1432
02:25:46,840 --> 02:25:51,880
 So you have to compress all the blocks within a frame.

1433
02:25:51,880 --> 02:25:54,279
 So this iframe is intra-frame.

1434
02:25:54,279 --> 02:25:56,640
 And p-frame and b-frame is actually

1435
02:25:56,640 --> 02:25:57,760
 inter-frame compression.

1436
02:25:57,760 --> 02:26:02,760
 That means they are trying to compare the similarity across two

1437
02:26:02,760 --> 02:26:03,960
 frames.

1438
02:26:03,960 --> 02:26:06,679
 So generally speaking, for video, because we know that for video,

1439
02:26:06,679 --> 02:26:08,240
 each frame must be very similar.

1440
02:26:08,240 --> 02:26:10,279
 So therefore, when you look at different frames,

1441
02:26:10,279 --> 02:26:12,279
 there are lots of similarity.

1442
02:26:12,279 --> 02:26:14,119
 So when you're looking at different frames,

1443
02:26:14,119 --> 02:26:15,279
 there are lots of similarity.

1444
02:26:15,320 --> 02:26:18,840
 There's lots of redundancy across different frames.

1445
02:26:18,840 --> 02:26:21,040
 So therefore, generally speaking,

1446
02:26:21,040 --> 02:26:23,400
 techniques that leverage or frame type that

1447
02:26:23,400 --> 02:26:25,920
 make use of inter-frame compression,

1448
02:26:25,920 --> 02:26:29,400
 you'll be able to compress it into a smaller file size.

1449
02:26:29,400 --> 02:26:33,560
 So therefore, what it means is that p-frame and b-frame

1450
02:26:33,560 --> 02:26:36,440
 would have higher compression than iframe,

1451
02:26:36,440 --> 02:26:39,440
 because it's based on inter-frame redundancy.

1452
02:26:39,440 --> 02:26:42,800
 So therefore, p and b, their compression ratio

1453
02:26:42,800 --> 02:26:45,519
 will be greater than i, because across different frames,

1454
02:26:45,519 --> 02:26:46,320
 they are very similar.

1455
02:26:46,320 --> 02:26:48,000
 So they will be able to compress it

1456
02:26:48,000 --> 02:26:50,439
 into a much smaller file size.

1457
02:26:50,439 --> 02:26:54,119
 So we know p and b compression ratio is greater than i.

1458
02:26:54,119 --> 02:26:57,119
 But now the next question is between p and b.

1459
02:26:57,119 --> 02:26:59,519
 Which one will have a smaller compression ratio?

1460
02:27:03,679 --> 02:27:06,920
 So p-frame, if this is a p-frame,

1461
02:27:06,920 --> 02:27:10,160
 it only leveraged on one previous frame

1462
02:27:10,160 --> 02:27:11,679
 to perform the compression.

1463
02:27:11,680 --> 02:27:14,920
 But for b-frame, suppose this is a current b-frame,

1464
02:27:14,920 --> 02:27:17,200
 you'll compare the previous reference frame

1465
02:27:17,200 --> 02:27:18,680
 and the following reference frame

1466
02:27:18,680 --> 02:27:21,640
 to perform the compression.

1467
02:27:21,640 --> 02:27:26,840
 So therefore, do you think p-frame or do you think b-frame

1468
02:27:26,840 --> 02:27:31,280
 has a higher chance of finding a more similar matching block?

1469
02:27:36,400 --> 02:27:37,920
 Which one will have a higher chance

1470
02:27:37,920 --> 02:27:43,120
 of finding a more similar matching block?

1471
02:27:43,120 --> 02:27:45,280
 It should be.

1472
02:27:45,280 --> 02:27:46,040
 b-frame, right?

1473
02:27:46,040 --> 02:27:48,840
 Because p-frame only rely on one frame.

1474
02:27:48,840 --> 02:27:52,200
 But b-frame, it can look at the previous as well as the following.

1475
02:27:52,200 --> 02:27:55,880
 So therefore, if you are looking at this particular b-frame

1476
02:27:55,880 --> 02:27:58,920
 here, you partition it into numerous macro blocks.

1477
02:27:58,920 --> 02:28:00,680
 So for this current macro block that you

1478
02:28:00,680 --> 02:28:02,960
 want to compress under the b-frame,

1479
02:28:02,960 --> 02:28:06,280
 you can refer to the previous reference frame

1480
02:28:06,320 --> 02:28:08,360
 as well as the flowing reference frame.

1481
02:28:08,360 --> 02:28:11,400
 So the chances of you finding a best matched block

1482
02:28:11,400 --> 02:28:13,160
 is much higher.

1483
02:28:13,160 --> 02:28:15,560
 If you can find a best matched block much higher,

1484
02:28:15,560 --> 02:28:20,400
 that means subsequently due to the motion compensation,

1485
02:28:20,400 --> 02:28:22,760
 the error between them is much smaller.

1486
02:28:22,760 --> 02:28:25,400
 If the error is smaller, then intuitively,

1487
02:28:25,400 --> 02:28:28,800
 you probably are likely going to compress it better.

1488
02:28:28,800 --> 02:28:30,320
 So therefore, the compression ratio

1489
02:28:31,240 --> 02:28:37,320
 in terms of the IP and b-frame here,

1490
02:28:37,320 --> 02:28:40,480
 b-frame will have the highest compression ratio,

1491
02:28:40,480 --> 02:28:45,199
 followed by p-frame, followed by i-frame.

1492
02:28:45,199 --> 02:28:47,600
 So that's this particular question here.

1493
02:28:47,600 --> 02:28:50,800
 So anyway, this one, I will not give you the answer

1494
02:28:50,800 --> 02:28:51,960
 since it's a discussion.

1495
02:28:51,960 --> 02:28:54,640
 I think you should be able to follow it.

1496
02:28:54,640 --> 02:28:56,279
 So the next thing is how do you choose

1497
02:28:56,279 --> 02:28:58,360
 the suitable GOP structures here?

1498
02:28:58,360 --> 02:29:02,680
 So these GOP structures refer to, for example,

1499
02:29:02,680 --> 02:29:06,360
 how big this particular size should be.

1500
02:29:06,360 --> 02:29:09,440
 Actually, in this case, you refer to n is equal to 9.

1501
02:29:09,440 --> 02:29:12,840
 So this n is equal to 9 is actually your GOP structures

1502
02:29:12,840 --> 02:29:13,720
 here.

1503
02:29:13,720 --> 02:29:15,440
 n is equal to 9 is a GOP structure.

1504
02:29:15,440 --> 02:29:19,240
 You can see 1, 2, 3, 1, 2, 3, 1, 2, 3.

1505
02:29:19,240 --> 02:29:25,200
 So this GOP structure, GOP size is n is equal to 9.

1506
02:29:25,200 --> 02:29:27,520
 So this is actually a design parameter.

1507
02:29:27,520 --> 02:29:31,880
 You can choose a small GOP structure, GOP size,

1508
02:29:31,880 --> 02:29:34,280
 or you can choose a large GOP size.

1509
02:29:34,280 --> 02:29:37,640
 But usually, there must be a trade-off.

1510
02:29:37,640 --> 02:29:39,960
 Otherwise, people will just keep choosing a very long one

1511
02:29:39,960 --> 02:29:41,040
 or a very short one.

1512
02:29:41,040 --> 02:29:42,800
 So that must be a trade-off.

1513
02:29:42,800 --> 02:29:44,080
 So what is a trade-off?

1514
02:29:46,680 --> 02:29:49,880
 So how do we choose a suitable GOP size?

1515
02:29:49,880 --> 02:29:54,720
 So what is the potential impact of this GOP size?

1516
02:29:54,720 --> 02:29:58,679
 If you choose, for example, a very large GOP size,

1517
02:29:58,679 --> 02:30:00,679
 if you choose a large GOP size, what

1518
02:30:00,679 --> 02:30:02,240
 will be the potential advantage?

1519
02:30:13,720 --> 02:30:18,160
 If you choose a very large GOP size,

1520
02:30:18,160 --> 02:30:22,640
 that means the chances of you having B-frame is higher

1521
02:30:22,640 --> 02:30:23,679
 or lower.

1522
02:30:23,720 --> 02:30:26,440
 The percentage or the proportion of B-frame

1523
02:30:26,440 --> 02:30:28,520
 will be higher or lower.

1524
02:30:28,520 --> 02:30:30,240
 Higher, right?

1525
02:30:30,240 --> 02:30:33,120
 So if the proportion of the B-frame will be higher,

1526
02:30:33,120 --> 02:30:36,720
 so from earlier on, we know that B-frame has higher compression

1527
02:30:36,720 --> 02:30:38,480
 ratio, right?

1528
02:30:38,480 --> 02:30:41,200
 So if you have more B-frame, and each B-frame

1529
02:30:41,200 --> 02:30:46,200
 has higher compression ratio, that means overall,

1530
02:30:46,200 --> 02:30:51,440
 you will be able to make this video,

1531
02:30:51,440 --> 02:30:56,520
 the final file size will be larger or smaller.

1532
02:30:56,520 --> 02:30:58,000
 Smaller, right?

1533
02:30:58,000 --> 02:31:02,040
 So therefore, if you choose a large GOP structure,

1534
02:31:02,040 --> 02:31:05,040
 that means the number of iframes that you have

1535
02:31:05,040 --> 02:31:08,280
 will be higher in terms of proportion.

1536
02:31:08,280 --> 02:31:11,120
 And because we know that B-frame has higher compression

1537
02:31:11,120 --> 02:31:15,200
 ratio, that means overall, your file size will be smaller.

1538
02:31:15,200 --> 02:31:17,680
 So if you choose large GOP structure,

1539
02:31:17,680 --> 02:31:19,760
 your compression ratio will be higher,

1540
02:31:19,760 --> 02:31:22,000
 and your file size will be smaller.

1541
02:31:22,000 --> 02:31:23,560
 But what's the price you have to pay?

1542
02:31:26,200 --> 02:31:29,000
 I mean, surely there must be some disadvantage, right?

1543
02:31:29,000 --> 02:31:32,520
 Otherwise, people just choose as big as possible

1544
02:31:32,520 --> 02:31:34,480
 the GOP structure already.

1545
02:31:34,480 --> 02:31:36,160
 There must be a price that you have to pay.

1546
02:31:36,160 --> 02:31:37,480
 So what's the price you have to pay?

1547
02:31:44,200 --> 02:31:44,700
 Sorry?

1548
02:31:45,140 --> 02:31:50,420
 Ah, yeah, OK, that's exactly the point.

1549
02:31:50,420 --> 02:31:57,140
 So if you think about this video compression techniques,

1550
02:31:57,140 --> 02:31:59,180
 for example, for P-frame and B-frame,

1551
02:31:59,180 --> 02:32:02,020
 it's inter-frame compression.

1552
02:32:02,020 --> 02:32:04,020
 That means when you want to compress one frame,

1553
02:32:04,020 --> 02:32:06,220
 you refer to the previous reference frame.

1554
02:32:06,220 --> 02:32:09,260
 You want to compress one frame for P-frame and B-frame.

1555
02:32:09,260 --> 02:32:11,500
 You refer to the previous reference frame.

1556
02:32:11,500 --> 02:32:15,180
 So what it means is that in the process of encoding

1557
02:32:15,180 --> 02:32:17,620
 or due to transmission or whatever error,

1558
02:32:17,620 --> 02:32:20,220
 when there's an error occurring in one frame,

1559
02:32:20,220 --> 02:32:22,940
 say, suppose an error occurring in this P-frame

1560
02:32:22,940 --> 02:32:25,980
 due to some packet loss or due to some issue,

1561
02:32:25,980 --> 02:32:30,380
 this particular error is going to keep propagating.

1562
02:32:30,380 --> 02:32:32,180
 It's going to keep propagating.

1563
02:32:32,180 --> 02:32:36,220
 So how do you stop this error from being propagated continuously?

1564
02:32:36,220 --> 02:32:38,260
 You need to have an i-frame to stop.

1565
02:32:38,260 --> 02:32:40,220
 So i-frame is like start afresh.

1566
02:32:40,220 --> 02:32:42,099
 We start things afresh.

1567
02:32:42,099 --> 02:32:46,300
 So therefore, if you choose a very large GOP structure,

1568
02:32:46,300 --> 02:32:49,220
 you run this risk that, no, if error occur,

1569
02:32:49,220 --> 02:32:52,460
 it's going to propagate for a long time.

1570
02:32:52,460 --> 02:32:55,460
 So therefore, you cannot choose a GOP to be overly long.

1571
02:32:55,460 --> 02:32:58,820
 Otherwise, when the error occur, this error propagation

1572
02:32:58,820 --> 02:33:00,420
 is going to be very long.

1573
02:33:00,420 --> 02:33:02,660
 So therefore, you may want to choose.

1574
02:33:02,660 --> 02:33:04,740
 If you choose a large GOP structure,

1575
02:33:04,740 --> 02:33:08,660
 the advantage is that your compression ratio will be high.

1576
02:33:08,660 --> 02:33:11,940
 You'll compress into small file size.

1577
02:33:11,940 --> 02:33:15,539
 But the price you have to pay is now the error propagation.

1578
02:33:15,539 --> 02:33:17,700
 Potentially, it's much longer now.

1579
02:33:17,700 --> 02:33:21,100
 So that's the shortcoming.

1580
02:33:21,100 --> 02:33:23,700
 So that's the trade-off between these two issues.

1581
02:33:28,020 --> 02:33:31,539
 So yeah, probably I'll just very quickly talk

1582
02:33:31,539 --> 02:33:34,220
 about this motion, estimation and compensation.

1583
02:33:34,220 --> 02:33:36,539
 So this motion, estimation and compensation,

1584
02:33:36,539 --> 02:33:38,140
 I think the idea we already mentioned

1585
02:33:38,140 --> 02:33:39,580
 is quite clear.

1586
02:33:39,580 --> 02:33:42,660
 So we are trying to leverage on the temporal redundancy,

1587
02:33:42,660 --> 02:33:46,019
 because we know that for consecutive frames in the videos,

1588
02:33:46,019 --> 02:33:47,099
 they're very similar.

1589
02:33:47,099 --> 02:33:49,619
 So if between different frames are very similar,

1590
02:33:49,619 --> 02:33:52,180
 then we are just trying to find the best match block,

1591
02:33:52,180 --> 02:33:55,900
 take their difference, and then encode it.

1592
02:33:55,900 --> 02:33:58,660
 So in video, not every frame needs

1593
02:33:58,660 --> 02:34:00,500
 to be coded independently.

1594
02:34:00,500 --> 02:34:02,740
 Many of the frame, like P frame and B frame,

1595
02:34:02,740 --> 02:34:06,980
 that we've studied before, we are going to code it in the frame.

1596
02:34:06,980 --> 02:34:08,660
 So therefore, the idea is that we

1597
02:34:08,660 --> 02:34:11,779
 are going to take the difference between our current frame

1598
02:34:11,779 --> 02:34:13,699
 and the previous reference frame.

1599
02:34:13,699 --> 02:34:17,420
 We take their difference, we encode their difference.

1600
02:34:17,420 --> 02:34:20,100
 And because these two, your current block

1601
02:34:20,100 --> 02:34:22,859
 and the previous reference blocks are very similar,

1602
02:34:22,859 --> 02:34:24,260
 so if they are very similar, that means

1603
02:34:24,260 --> 02:34:26,220
 that difference is very small.

1604
02:34:26,220 --> 02:34:27,619
 And if it is very small, that means

1605
02:34:27,619 --> 02:34:30,420
 it's very easy for you to do the compression now.

1606
02:34:30,420 --> 02:34:34,220
 Because if between your current macro block

1607
02:34:34,260 --> 02:34:37,179
 and your best match block, if you take their difference,

1608
02:34:37,179 --> 02:34:39,340
 or the prediction error is very small,

1609
02:34:39,340 --> 02:34:41,779
 when they are very small, you only need very small number

1610
02:34:41,779 --> 02:34:43,699
 of bits represented.

1611
02:34:43,699 --> 02:34:47,179
 So therefore, then it's very suitable for compression.

1612
02:34:47,179 --> 02:34:50,580
 So for this type of technique, what we have probably mentioned

1613
02:34:50,580 --> 02:34:52,820
 too many times already, is leveraging

1614
02:34:52,820 --> 02:34:54,740
 a motion estimation and compensation.

1615
02:34:54,740 --> 02:34:58,900
 So motion estimation means try to find the positions

1616
02:34:58,900 --> 02:35:00,859
 of the motion factor.

1617
02:35:00,859 --> 02:35:02,900
 Motion compensation is try to predict

1618
02:35:02,940 --> 02:35:05,060
 the difference between your current macro block

1619
02:35:05,060 --> 02:35:07,140
 and the best match block, the small error.

1620
02:35:08,900 --> 02:35:11,420
 So this particular figure shows how we do that.

1621
02:35:12,779 --> 02:35:15,180
 So when we want to perform motion estimation,

1622
02:35:15,180 --> 02:35:17,180
 so what we do is that suppose we start off

1623
02:35:17,180 --> 02:35:19,660
 with a particular current frame,

1624
02:35:19,660 --> 02:35:21,940
 this is the frame that we want to compress,

1625
02:35:21,940 --> 02:35:24,100
 we partition into numerous macro blocks.

1626
02:35:24,100 --> 02:35:26,580
 So each of these is a macro block.

1627
02:35:26,580 --> 02:35:28,460
 Suppose now this is a current macro block

1628
02:35:28,460 --> 02:35:31,740
 that we want to compress.

1629
02:35:31,740 --> 02:35:33,580
 So what we do now is that we look

1630
02:35:33,580 --> 02:35:35,380
 at the previous reference frame.

1631
02:35:35,380 --> 02:35:37,420
 Okay, one of the previous reference frame.

1632
02:35:37,420 --> 02:35:40,300
 Standard at this particular positions here,

1633
02:35:40,300 --> 02:35:43,060
 we are going to define a search window here.

1634
02:35:43,060 --> 02:35:45,140
 Okay, we are going to define this search window.

1635
02:35:45,140 --> 02:35:48,699
 So this search window has a size of two P plus one

1636
02:35:48,699 --> 02:35:49,860
 by two P plus one.

1637
02:35:49,860 --> 02:35:53,260
 So we are going to check each of this particular position

1638
02:35:53,260 --> 02:35:55,619
 in this particular search window.

1639
02:35:55,619 --> 02:35:58,300
 So we are going to look at all the positions

1640
02:35:58,300 --> 02:36:01,740
 to find the positions of the best match block

1641
02:36:01,740 --> 02:36:03,259
 or most similar block.

1642
02:36:03,259 --> 02:36:07,740
 Okay, so the process of trying to find out

1643
02:36:07,740 --> 02:36:10,460
 within this particular search window here,

1644
02:36:10,460 --> 02:36:14,340
 which position has the most similar block is known as,

1645
02:36:15,900 --> 02:36:17,500
 this process is known as motion.

1646
02:36:21,060 --> 02:36:23,179
 The position, the process of trying to find out

1647
02:36:23,179 --> 02:36:25,820
 the best match block in the previous reference frame

1648
02:36:25,820 --> 02:36:26,980
 is known as motion.

1649
02:36:29,300 --> 02:36:30,820
 Estimation, right?

1650
02:36:30,820 --> 02:36:32,580
 Okay, it's known as motion estimation.

1651
02:36:32,580 --> 02:36:35,380
 So suppose you go through this search window,

1652
02:36:35,380 --> 02:36:36,980
 you find that this is the positions

1653
02:36:36,980 --> 02:36:38,259
 of the best match block.

1654
02:36:38,259 --> 02:36:41,660
 Okay, then afterwards the offset between this position

1655
02:36:42,660 --> 02:36:44,380
 to the position of the best match block,

1656
02:36:44,380 --> 02:36:46,779
 this is known as the motion factor.

1657
02:36:46,779 --> 02:36:48,619
 Okay, so it's the relative offset.

1658
02:36:48,619 --> 02:36:51,859
 So this is known as the motion factor here.

1659
02:36:51,859 --> 02:36:54,019
 So once you found this motion,

1660
02:36:54,019 --> 02:36:55,980
 okay, you found the best match block,

1661
02:36:55,980 --> 02:36:57,380
 you take your current macro block

1662
02:36:57,380 --> 02:36:59,019
 that you want to compress,

1663
02:36:59,019 --> 02:37:01,779
 minus your best match block.

1664
02:37:01,779 --> 02:37:04,900
 So this best match block sometimes is also known

1665
02:37:04,900 --> 02:37:06,939
 as a predicted block.

1666
02:37:06,939 --> 02:37:08,619
 Okay, so you take the difference,

1667
02:37:08,619 --> 02:37:10,380
 then you have this prediction error.

1668
02:37:10,380 --> 02:37:13,420
 So this prediction error is in the form of a matrix,

1669
02:37:13,420 --> 02:37:16,140
 and usually their values should be very small.

1670
02:37:16,140 --> 02:37:17,179
 Okay, right?

1671
02:37:17,179 --> 02:37:20,660
 So you take the difference between your current block

1672
02:37:20,660 --> 02:37:23,660
 you want to compress and your best match block,

1673
02:37:23,660 --> 02:37:26,699
 the process of taking the difference is known

1674
02:37:26,700 --> 02:37:28,820
 as motion compensation.

1675
02:37:28,820 --> 02:37:33,820
 Okay, so motion vector, motion vector search

1676
02:37:34,140 --> 02:37:37,620
 is limited to the immediate neighborhood.

1677
02:37:37,620 --> 02:37:40,140
 So for example, this search window here.

1678
02:37:40,140 --> 02:37:42,220
 So both horizontal and vertical displacement

1679
02:37:42,220 --> 02:37:43,700
 in the range of minus P to P,

1680
02:37:43,700 --> 02:37:46,820
 if you are talking about from this position minus P

1681
02:37:46,820 --> 02:37:49,340
 and minus from minus P to P,

1682
02:37:49,340 --> 02:37:51,620
 both vertically and horizontally,

1683
02:37:51,620 --> 02:37:53,780
 then you'll give rise to a search window

1684
02:37:53,780 --> 02:37:56,660
 of two P plus one times two P plus one.

1685
02:37:56,700 --> 02:37:59,060
 Okay, so quite easy to understand.

1686
02:38:00,220 --> 02:38:02,580
 Right, okay, so these equations actually just shows

1687
02:38:02,580 --> 02:38:07,580
 how do we calculate the more exact calculations

1688
02:38:08,260 --> 02:38:12,660
 of trying to perform the motion estimation.

1689
02:38:12,660 --> 02:38:15,020
 So the idea is actually quite simple.

1690
02:38:15,020 --> 02:38:18,060
 In order to perform this motion estimation,

1691
02:38:18,060 --> 02:38:19,780
 we need to calculate the difference

1692
02:38:19,780 --> 02:38:22,100
 between two macro block, all right?

1693
02:38:22,100 --> 02:38:24,340
 So pretty much what it means is that,

1694
02:38:24,340 --> 02:38:26,900
 okay, so we have this current macro block

1695
02:38:26,900 --> 02:38:29,180
 that we want to compress, all right?

1696
02:38:29,180 --> 02:38:30,260
 This current macro block.

1697
02:38:30,260 --> 02:38:31,940
 And afterwards, we are going,

1698
02:38:31,940 --> 02:38:34,620
 and then, okay, so this current frame,

1699
02:38:34,620 --> 02:38:36,900
 we partitioned into numerous macro block.

1700
02:38:36,900 --> 02:38:39,700
 Suppose this is a current macro block we want to compress.

1701
02:38:39,700 --> 02:38:42,660
 So, okay, we refer to the previous reference frame.

1702
02:38:42,660 --> 02:38:44,060
 Okay, standard at this position,

1703
02:38:44,060 --> 02:38:46,100
 we define a search window, right?

1704
02:38:46,100 --> 02:38:49,060
 So in afterwards, we just try to, you know,

1705
02:38:49,060 --> 02:38:50,780
 move this particular macro block

1706
02:38:50,780 --> 02:38:53,300
 because behind there's a reference image.

1707
02:38:53,340 --> 02:38:56,140
 So you try to move this particular reference block,

1708
02:38:56,140 --> 02:38:59,900
 and at each position, you try to find the difference.

1709
02:38:59,900 --> 02:39:01,660
 But how do we define the difference?

1710
02:39:01,660 --> 02:39:03,500
 The difference is defined as this

1711
02:39:04,660 --> 02:39:07,980
 mean absolute difference, MAD here, okay?

1712
02:39:07,980 --> 02:39:10,539
 So this mean absolute difference, okay?

1713
02:39:10,539 --> 02:39:12,259
 At this particular position,

1714
02:39:12,259 --> 02:39:15,900
 I and J is defined as the offset, all right?

1715
02:39:15,900 --> 02:39:18,699
 And you try to find which position is it, okay?

1716
02:39:18,699 --> 02:39:20,980
 So I and J is offset here.

1717
02:39:20,980 --> 02:39:24,619
 So you can see this particular term here is actually,

1718
02:39:24,619 --> 02:39:28,660
 no, the pixels in your current macro block

1719
02:39:28,660 --> 02:39:30,260
 that you want to compress.

1720
02:39:30,260 --> 02:39:32,220
 So this is the current macro block

1721
02:39:32,220 --> 02:39:33,420
 that you want to compress,

1722
02:39:33,420 --> 02:39:37,220
 which is defined as this macro block, okay?

1723
02:39:37,220 --> 02:39:41,580
 And this term here is actually the positions,

1724
02:39:41,580 --> 02:39:44,260
 the pixels in the macro block of the reference frame.

1725
02:39:44,260 --> 02:39:47,300
 That means, no, at each of center,

1726
02:39:47,300 --> 02:39:48,859
 at each of these positions here.

1727
02:39:48,859 --> 02:39:50,699
 So at each of this particular position,

1728
02:39:50,700 --> 02:39:53,020
 for example, you have a macro block, okay?

1729
02:39:53,020 --> 02:39:54,380
 So you have the current macro block

1730
02:39:54,380 --> 02:39:55,340
 that you want to compress,

1731
02:39:55,340 --> 02:39:58,420
 and at different position, the corresponding macro block.

1732
02:39:59,300 --> 02:40:01,980
 Okay, so you take their difference, okay?

1733
02:40:01,980 --> 02:40:04,580
 Absolute value, right?

1734
02:40:04,580 --> 02:40:06,820
 So these two summation is to check,

1735
02:40:06,820 --> 02:40:09,700
 no, all the particular macro block size,

1736
02:40:09,700 --> 02:40:10,960
 all the macro block size.

1737
02:40:10,960 --> 02:40:11,980
 So the macro block size,

1738
02:40:11,980 --> 02:40:13,980
 suppose we assume it to be n in this case.

1739
02:40:13,980 --> 02:40:17,780
 So you check all the pixel values in the macro block size,

1740
02:40:17,780 --> 02:40:18,780
 okay?

1741
02:40:18,780 --> 02:40:20,940
 You take their absolute difference,

1742
02:40:20,940 --> 02:40:24,620
 you sum up over all the pixels in the macro block size,

1743
02:40:24,620 --> 02:40:28,020
 and then you divide by n squared to take the mean, okay?

1744
02:40:28,020 --> 02:40:28,860
 Take the mean.

1745
02:40:28,860 --> 02:40:31,060
 So therefore, then by calculating this,

1746
02:40:31,060 --> 02:40:35,060
 you will be able to find the MAED at different position.

1747
02:40:37,060 --> 02:40:39,540
 So this MAED is a way to measure

1748
02:40:39,540 --> 02:40:42,460
 which position give you the smallest error.

1749
02:40:42,460 --> 02:40:44,660
 Okay, and then afterwards, right by now,

1750
02:40:44,660 --> 02:40:47,940
 you have at this different I and J position,

1751
02:40:47,940 --> 02:40:50,680
 each of them will give you one MAED.

1752
02:40:50,680 --> 02:40:53,180
 So therefore, the best match block will be the one

1753
02:40:53,180 --> 02:40:55,380
 that give you the smallest error.

1754
02:40:55,380 --> 02:40:58,660
 So therefore, the motion factor, which is defined as UV,

1755
02:40:58,660 --> 02:41:03,460
 is trying to find which of this MAED has the smallest value.

1756
02:41:03,460 --> 02:41:05,300
 Okay, so therefore, the motion factor

1757
02:41:05,300 --> 02:41:07,900
 is among these different sets of I and J,

1758
02:41:07,900 --> 02:41:11,140
 the one that give you the smallest error, okay?

1759
02:41:11,140 --> 02:41:13,180
 Within this particular search window.

1760
02:41:13,180 --> 02:41:17,860
 So that is pretty much the meaning of motion estimation.

1761
02:41:17,860 --> 02:41:22,860
 So this video here just show you simple visualizations

1762
02:41:23,060 --> 02:41:24,740
 of, you know, right?

1763
02:41:24,740 --> 02:41:26,860
 You can see if you define each of this

1764
02:41:26,860 --> 02:41:28,100
 particular macro block here,

1765
02:41:28,100 --> 02:41:30,260
 you have some small arrow here.

1766
02:41:30,260 --> 02:41:32,820
 So this small arrow just, you know,

1767
02:41:32,820 --> 02:41:34,780
 kind of indicate, right?

1768
02:41:34,780 --> 02:41:39,540
 Okay, where is the relative motion factor, right?

1769
02:41:39,540 --> 02:41:42,180
 And also the length of it will indicate, you know,

1770
02:41:42,220 --> 02:41:45,980
 how much is the relative offset that you have, okay?

1771
02:41:49,420 --> 02:41:54,420
 All right, okay, so, okay, we'll probably,

1772
02:41:55,580 --> 02:41:56,980
 just stop here today,

1773
02:41:56,980 --> 02:41:59,820
 but I'll just play you a very short video

1774
02:41:59,820 --> 02:42:01,700
 before you go just one or two minutes,

1775
02:42:01,700 --> 02:42:02,740
 so it should be fast.

1776
02:42:05,260 --> 02:42:06,740
 Okay, I know that there are many of you

1777
02:42:06,740 --> 02:42:08,780
 who are traveling from China,

1778
02:42:08,780 --> 02:42:10,460
 so I'll just play a very short song,

1779
02:42:10,500 --> 02:42:12,500
 just about one, two minutes.

1780
02:42:12,500 --> 02:42:14,460
 Let's go.

1781
02:42:42,500 --> 02:42:50,500
 I'm not sure what's the point of this

1782
02:42:50,500 --> 02:42:54,500
 I don't know what's the point of this

1783
02:42:54,500 --> 02:42:57,500
 I'm not sure what's the point of this

1784
02:42:57,500 --> 02:43:01,500
 I'm not sure what's the point of this

1785
02:43:01,500 --> 02:43:04,500
 I'm not sure what's the point of this

1786
02:43:04,500 --> 02:43:08,500
 I'm not sure what's the point of this

1787
02:43:08,500 --> 02:43:12,500
 I'm not sure what's the point of this

1788
02:43:12,500 --> 02:43:16,500
 I'm not sure what's the point of this

1789
02:43:16,500 --> 02:43:20,500
 I'm not sure what's the point of this

1790
02:43:20,500 --> 02:43:23,500
 I'm not sure what's the point of this

1791
02:43:23,500 --> 02:43:27,500
 I'm not sure what's the point of this

1792
02:43:27,500 --> 02:43:31,500
 I'm not sure what's the point of this

1793
02:43:31,500 --> 02:43:35,500
 I'm not sure what's the point of this

1794
02:43:35,500 --> 02:43:40,500
 I'm not sure what's the point of this

1795
02:44:05,500 --> 02:44:09,500
 I'm not sure what's the point of this

1796
02:44:09,500 --> 02:44:13,500
 I'm not sure what's the point of this

1797
02:44:13,500 --> 02:44:17,500
 I'm not sure what's the point of this

1798
02:44:17,500 --> 02:44:21,500
 I'm not sure what's the point of this

1799
02:44:21,500 --> 02:44:25,500
 I'm not sure what's the point of this

1800
02:44:25,500 --> 02:44:29,500
 I'm not sure what's the point of this

1801
02:44:29,500 --> 02:44:33,500
 I'm not sure what's the point of this

1802
02:44:33,500 --> 02:44:37,500
 I'm not sure what's the point of this

1803
02:44:37,500 --> 02:44:41,500
 I'm not sure what's the point of this

1804
02:44:41,500 --> 02:44:45,500
 I'm not sure what's the point of this

1805
02:44:45,500 --> 02:44:49,500
 I'm not sure what's the point of this

1806
02:44:49,500 --> 02:44:53,500
 I'm not sure what's the point of this

1807
02:44:53,500 --> 02:44:57,500
 I'm not sure what's the point of this

1808
02:44:57,500 --> 02:45:01,500
 I'm not sure what's the point of this

1809
02:45:01,500 --> 02:45:05,500
 I'm not sure what's the point of this

1810
02:45:05,500 --> 02:45:09,500
 I'm not sure what's the point of this

1811
02:45:09,500 --> 02:45:13,500
 I'm not sure what's the point of this

1812
02:45:13,500 --> 02:45:17,500
 I'm not sure what's the point of this

1813
02:45:17,500 --> 02:45:21,500
 I'm not sure what's the point of this

1814
02:45:21,500 --> 02:45:25,500
 I'm not sure what's the point of this

1815
02:45:25,500 --> 02:45:29,500
 I'm not sure what's the point of this

1816
02:45:29,500 --> 02:45:33,500
 I'm not sure what's the point of this

1817
02:45:33,500 --> 02:45:37,500
 I'm not sure what's the point of this

1818
02:45:37,500 --> 02:45:41,500
 I'm not sure what's the point of this

1819
02:45:41,500 --> 02:45:45,500
 I'm not sure what's the point of this

1820
02:45:45,500 --> 02:45:49,500
 I'm not sure what's the point of this

1821
02:45:49,500 --> 02:45:53,500
 I'm not sure what's the point of this

1822
02:45:53,500 --> 02:45:57,500
 I'm not sure what's the point of this

1823
02:45:57,500 --> 02:46:01,500
 I'm not sure what's the point of this

1824
02:46:01,500 --> 02:46:05,500
 I'm not sure what's the point of this

1825
02:46:05,500 --> 02:46:09,500
 I'm not sure what's the point of this

1826
02:46:09,500 --> 02:46:13,500
 I'm not sure what's the point of this

1827
02:46:13,500 --> 02:46:17,500
 I'm not sure what's the point of this

1828
02:46:17,500 --> 02:46:21,500
 I'm not sure what's the point of this

1829
02:46:21,500 --> 02:46:25,500
 I'm not sure what's the point of this

1830
02:46:25,500 --> 02:46:29,500
 I'm not sure what's the point of this

1831
02:46:29,500 --> 02:46:33,500
 I'm not sure what's the point of this

1832
02:46:33,500 --> 02:46:37,500
 I'm not sure what's the point of this

1833
02:46:37,500 --> 02:46:41,500
 I'm not sure what's the point of this

1834
02:46:41,500 --> 02:46:45,500
 I'm not sure what's the point of this

1835
02:46:45,500 --> 02:46:49,500
 I'm not sure what's the point of this

1836
02:46:49,500 --> 02:46:53,500
 I'm not sure what's the point of this

1837
02:46:53,500 --> 02:46:57,500
 I'm not sure what's the point of this

1838
02:46:57,500 --> 02:47:01,500
 I'm not sure what's the point of this

1839
02:47:01,500 --> 02:47:05,500
 I'm not sure what's the point of this

1840
02:47:05,500 --> 02:47:09,500
 I'm not sure what's the point of this

1841
02:47:09,500 --> 02:47:13,500
 I'm not sure what's the point of this

1842
02:47:13,500 --> 02:47:17,500
 I'm not sure what's the point of this

1843
02:47:17,500 --> 02:47:21,500
 I'm not sure what's the point of this

1844
02:47:21,500 --> 02:47:25,500
 I'm not sure what's the point of this

1845
02:47:25,500 --> 02:47:29,500
 I'm not sure what's the point of this

1846
02:47:29,500 --> 02:47:33,500
 I'm not sure what's the point of this

1847
02:47:33,500 --> 02:47:37,500
 I'm not sure what's the point of this

1848
02:47:37,500 --> 02:47:41,500
 I'm not sure what's the point of this

1849
02:47:41,500 --> 02:47:45,500
 I'm not sure what's the point of this

1850
02:47:45,500 --> 02:47:49,500
 I'm not sure what's the point of this

1851
02:47:49,500 --> 02:47:53,500
 I'm not sure what's the point of this

1852
02:47:53,500 --> 02:47:57,500
 I'm not sure what's the point of this

1853
02:47:57,500 --> 02:48:01,500
 I'm not sure what's the point of this

1854
02:48:01,500 --> 02:48:05,500
 I'm not sure what's the point of this

1855
02:48:05,500 --> 02:48:09,500
 I'm not sure what's the point of this

1856
02:48:09,500 --> 02:48:13,500
 I'm not sure what's the point of this

1857
02:48:13,500 --> 02:48:17,500
 I'm not sure what's the point of this

1858
02:48:17,500 --> 02:48:21,500
 I'm not sure what's the point of this

1859
02:48:21,500 --> 02:48:25,500
 I'm not sure what's the point of this

1860
02:48:25,500 --> 02:48:29,500
 I'm not sure what's the point of this

1861
02:48:29,500 --> 02:48:33,500
 I'm not sure what's the point of this

1862
02:48:33,500 --> 02:48:37,500
 I'm not sure what's the point of this

1863
02:48:37,500 --> 02:48:41,500
 I'm not sure what's the point of this

1864
02:48:41,500 --> 02:48:45,500
 I'm not sure what's the point of this

1865
02:48:45,500 --> 02:48:49,500
 I'm not sure what's the point of this

1866
02:48:49,500 --> 02:48:53,500
 I'm not sure what's the point of this

1867
02:48:53,500 --> 02:48:57,500
 I'm not sure what's the point of this

1868
02:48:57,500 --> 02:49:01,500
 I'm not sure what's the point of this

1869
02:49:01,500 --> 02:49:05,500
 I'm not sure what's the point of this

1870
02:49:05,500 --> 02:49:09,500
 I'm not sure what's the point of this

1871
02:49:09,500 --> 02:49:13,500
 I'm not sure what's the point of this

1872
02:49:13,500 --> 02:49:17,500
 I'm not sure what's the point of this

1873
02:49:17,500 --> 02:49:21,500
 I'm not sure what's the point of this

1874
02:49:21,500 --> 02:49:25,500
 I'm not sure what's the point of this

1875
02:49:25,500 --> 02:49:29,500
 I'm not sure what's the point of this

1876
02:49:29,500 --> 02:49:33,500
 I'm not sure what's the point of this

1877
02:49:33,500 --> 02:49:37,500
 I'm not sure what's the point of this

1878
02:49:37,500 --> 02:49:41,500
 I'm not sure what's the point of this

1879
02:49:41,500 --> 02:49:45,500
 I'm not sure what's the point of this

1880
02:49:45,500 --> 02:49:49,500
 I'm not sure what's the point of this

1881
02:49:49,500 --> 02:49:53,500
 I'm not sure what's the point of this

1882
02:49:53,500 --> 02:49:57,500
 I'm not sure what's the point of this

1883
02:49:57,500 --> 02:50:01,500
 I'm not sure what's the point of this

1884
02:50:01,500 --> 02:50:05,500
 I'm not sure what's the point of this

1885
02:50:05,500 --> 02:50:09,500
 I'm not sure what's the point of this

1886
02:50:09,500 --> 02:50:13,500
 I'm not sure what's the point of this

1887
02:50:13,500 --> 02:50:17,500
 I'm not sure what's the point of this

1888
02:50:17,500 --> 02:50:21,500
 I'm not sure what's the point of this

1889
02:50:21,500 --> 02:50:25,500
 I'm not sure what's the point of this

1890
02:50:25,500 --> 02:50:29,500
 I'm not sure what's the point of this

1891
02:50:29,500 --> 02:50:33,500
 I'm not sure what's the point of this

1892
02:50:33,500 --> 02:50:37,500
 I'm not sure what's the point of this

1893
02:50:37,500 --> 02:50:41,500
 I'm not sure what's the point of this

1894
02:50:41,500 --> 02:50:45,500
 I'm not sure what's the point of this

1895
02:50:45,500 --> 02:50:49,500
 I'm not sure what's the point of this

1896
02:50:49,500 --> 02:50:53,500
 I'm not sure what's the point of this

1897
02:50:53,500 --> 02:50:57,500
 I'm not sure what's the point of this

1898
02:50:57,500 --> 02:51:01,500
 I'm not sure what's the point of this

1899
02:51:01,500 --> 02:51:05,500
 I'm not sure what's the point of this

1900
02:51:05,500 --> 02:51:09,500
 I'm not sure what's the point of this

1901
02:51:09,500 --> 02:51:13,500
 I'm not sure what's the point of this

1902
02:51:13,500 --> 02:51:17,500
 I'm not sure what's the point of this

1903
02:51:17,500 --> 02:51:21,500
 I'm not sure what's the point of this

1904
02:51:21,500 --> 02:51:25,500
 I'm not sure what's the point of this

1905
02:51:25,500 --> 02:51:29,500
 I'm not sure what's the point of this

1906
02:51:29,500 --> 02:51:33,500
 I'm not sure what's the point of this

1907
02:51:33,500 --> 02:51:37,500
 I'm not sure what's the point of this

1908
02:51:37,500 --> 02:51:41,500
 I'm not sure what's the point of this

1909
02:51:41,500 --> 02:51:45,500
 I'm not sure what's the point of this

1910
02:51:45,500 --> 02:51:49,500
 I'm not sure what's the point of this

1911
02:51:49,500 --> 02:51:53,500
 I'm not sure what's the point of this

1912
02:51:53,500 --> 02:51:57,500
 I'm not sure what's the point of this

1913
02:51:57,500 --> 02:52:01,500
 I'm not sure what's the point of this

1914
02:52:01,500 --> 02:52:05,500
 I'm not sure what's the point of this

1915
02:52:05,500 --> 02:52:09,500
 I'm not sure what's the point of this

1916
02:52:09,500 --> 02:52:13,500
 I'm not sure what's the point of this

1917
02:52:13,500 --> 02:52:17,500
 I'm not sure what's the point of this

1918
02:52:17,500 --> 02:52:21,500
 I'm not sure what's the point of this

1919
02:52:21,500 --> 02:52:25,500
 I'm not sure what's the point of this

1920
02:52:25,500 --> 02:52:29,500
 I'm not sure what's the point of this

1921
02:52:29,500 --> 02:52:33,500
 I'm not sure what's the point of this

1922
02:52:33,500 --> 02:52:37,500
 I'm not sure what's the point of this

1923
02:52:37,500 --> 02:52:41,500
 I'm not sure what's the point of this

1924
02:52:41,500 --> 02:52:45,500
 I'm not sure what's the point of this

1925
02:52:45,500 --> 02:52:49,500
 I'm not sure what's the point of this

1926
02:52:49,500 --> 02:52:53,500
 I'm not sure what's the point of this

1927
02:52:53,500 --> 02:52:57,500
 I'm not sure what's the point of this

1928
02:52:57,500 --> 02:53:01,500
 I'm not sure what's the point of this

1929
02:53:01,500 --> 02:53:05,500
 I'm not sure what's the point of this

1930
02:53:05,500 --> 02:53:09,500
 I'm not sure what's the point of this

1931
02:53:09,500 --> 02:53:13,500
 I'm not sure what's the point of this

1932
02:53:13,500 --> 02:53:17,500
 I'm not sure what's the point of this

1933
02:53:17,500 --> 02:53:21,500
 I'm not sure what's the point of this

1934
02:53:21,500 --> 02:53:25,500
 I'm not sure what's the point of this

1935
02:53:25,500 --> 02:53:29,500
 I'm not sure what's the point of this

1936
02:53:29,500 --> 02:53:33,500
 I'm not sure what's the point of this

1937
02:53:33,500 --> 02:53:37,500
 I'm not sure what's the point of this

1938
02:53:37,500 --> 02:53:41,500
 I'm not sure what's the point of this

1939
02:53:41,500 --> 02:53:45,500
 I'm not sure what's the point of this

1940
02:53:45,500 --> 02:53:49,500
 I'm not sure what's the point of this

1941
02:53:49,500 --> 02:53:53,500
 I'm not sure what's the point of this

1942
02:53:53,500 --> 02:53:57,500
 I'm not sure what's the point of this

1943
02:53:57,500 --> 02:54:01,500
 I'm not sure what's the point of this

1944
02:54:01,500 --> 02:54:05,500
 I'm not sure what's the point of this

1945
02:54:05,500 --> 02:54:09,500
 I'm not sure what's the point of this

1946
02:54:09,500 --> 02:54:13,500
 I'm not sure what's the point of this

1947
02:54:13,500 --> 02:54:17,500
 I'm not sure what's the point of this

1948
02:54:17,500 --> 02:54:21,500
 I'm not sure what's the point of this

1949
02:54:21,500 --> 02:54:25,500
 I'm not sure what's the point of this

1950
02:54:25,500 --> 02:54:29,500
 I'm not sure what's the point of this

1951
02:54:29,500 --> 02:54:33,500
 I'm not sure what's the point of this

1952
02:54:33,500 --> 02:54:37,500
 I'm not sure what's the point of this

1953
02:54:37,500 --> 02:54:41,500
 I'm not sure what's the point of this

1954
02:54:41,500 --> 02:54:45,500
 I'm not sure what's the point of this

1955
02:54:45,500 --> 02:54:49,500
 I'm not sure what's the point of this

1956
02:54:49,500 --> 02:54:53,500
 I'm not sure what's the point of this

1957
02:54:53,500 --> 02:54:57,500
 I'm not sure what's the point of this

1958
02:54:57,500 --> 02:55:01,500
 I'm not sure what's the point of this

1959
02:55:01,500 --> 02:55:05,500
 I'm not sure what's the point of this

1960
02:55:05,500 --> 02:55:09,500
 I'm not sure what's the point of this

1961
02:55:09,500 --> 02:55:13,500
 I'm not sure what's the point of this

1962
02:55:13,500 --> 02:55:17,500
 I'm not sure what's the point of this

1963
02:55:17,500 --> 02:55:21,500
 I'm not sure what's the point of this

1964
02:55:21,500 --> 02:55:25,500
 I'm not sure what's the point of this

1965
02:55:25,500 --> 02:55:29,500
 I'm not sure what's the point of this

1966
02:55:29,500 --> 02:55:33,500
 I'm not sure what's the point of this

1967
02:55:33,500 --> 02:55:37,500
 I'm not sure what's the point of this

1968
02:55:37,500 --> 02:55:41,500
 I'm not sure what's the point of this

1969
02:55:41,500 --> 02:55:45,500
 I'm not sure what's the point of this

1970
02:55:45,500 --> 02:55:49,500
 I'm not sure what's the point of this

1971
02:55:49,500 --> 02:55:53,500
 I'm not sure what's the point of this

1972
02:55:53,500 --> 02:55:57,500
 I'm not sure what's the point of this

1973
02:55:57,500 --> 02:56:01,500
 I'm not sure what's the point of this

1974
02:56:01,500 --> 02:56:05,500
 I'm not sure what's the point of this

1975
02:56:05,500 --> 02:56:09,500
 I'm not sure what's the point of this

1976
02:56:09,500 --> 02:56:13,500
 I'm not sure what's the point of this

1977
02:56:13,500 --> 02:56:17,500
 I'm not sure what's the point of this

1978
02:56:17,500 --> 02:56:21,500
 I'm not sure what's the point of this

1979
02:56:21,500 --> 02:56:25,500
 I'm not sure what's the point of this

1980
02:56:25,500 --> 02:56:29,500
 I'm not sure what's the point of this

1981
02:56:29,500 --> 02:56:33,500
 I'm not sure what's the point of this

1982
02:56:33,500 --> 02:56:37,500
 I'm not sure what's the point of this

1983
02:56:37,500 --> 02:56:41,500
 I'm not sure what's the point of this

1984
02:56:41,500 --> 02:56:45,500
 I'm not sure what's the point of this

1985
02:56:45,500 --> 02:56:49,500
 I'm not sure what's the point of this

1986
02:56:49,500 --> 02:56:53,500
 I'm not sure what's the point of this

1987
02:56:53,500 --> 02:56:57,500
 I'm not sure what's the point of this

1988
02:56:57,500 --> 02:57:01,500
 I'm not sure what's the point of this

1989
02:57:01,500 --> 02:57:05,500
 I'm not sure what's the point of this

1990
02:57:05,500 --> 02:57:09,500
 I'm not sure what's the point of this

1991
02:57:09,500 --> 02:57:13,500
 I'm not sure what's the point of this

1992
02:57:13,500 --> 02:57:17,500
 I'm not sure what's the point of this

1993
02:57:17,500 --> 02:57:21,500
 I'm not sure what's the point of this

1994
02:57:21,500 --> 02:57:25,500
 I'm not sure what's the point of this

1995
02:57:25,500 --> 02:57:29,500
 I'm not sure what's the point of this

1996
02:57:29,500 --> 02:57:33,500
 I'm not sure what's the point of this

1997
02:57:33,500 --> 02:57:37,500
 I'm not sure what's the point of this

1998
02:57:37,500 --> 02:57:41,500
 I'm not sure what's the point of this

1999
02:57:41,500 --> 02:57:45,500
 I'm not sure what's the point of this

2000
02:57:45,500 --> 02:57:49,500
 I'm not sure what's the point of this

2001
02:57:49,500 --> 02:57:53,500
 I'm not sure what's the point of this

2002
02:57:53,500 --> 02:57:57,500
 I'm not sure what's the point of this

2003
02:57:57,500 --> 02:58:01,500
 I'm not sure what's the point of this

2004
02:58:01,500 --> 02:58:05,500
 I'm not sure what's the point of this

2005
02:58:05,500 --> 02:58:09,500
 I'm not sure what's the point of this

2006
02:58:09,500 --> 02:58:13,500
 I'm not sure what's the point of this

2007
02:58:13,500 --> 02:58:17,500
 I'm not sure what's the point of this

2008
02:58:17,500 --> 02:58:21,500
 I'm not sure what's the point of this

2009
02:58:21,500 --> 02:58:25,500
 I'm not sure what's the point of this

2010
02:58:25,500 --> 02:58:29,500
 I'm not sure what's the point of this

2011
02:58:29,500 --> 02:58:33,500
 I'm not sure what's the point of this

2012
02:58:33,500 --> 02:58:37,500
 I'm not sure what's the point of this

2013
02:58:37,500 --> 02:58:41,500
 I'm not sure what's the point of this

2014
02:58:41,500 --> 02:58:45,500
 I'm not sure what's the point of this

2015
02:58:45,500 --> 02:58:49,500
 I'm not sure what's the point of this

2016
02:58:49,500 --> 02:58:53,500
 I'm not sure what's the point of this

2017
02:58:53,500 --> 02:58:57,500
 I'm not sure what's the point of this

2018
02:58:57,500 --> 02:59:01,500
 I'm not sure what's the point of this

2019
02:59:01,500 --> 02:59:05,500
 I'm not sure what's the point of this

2020
02:59:05,500 --> 02:59:09,500
 I'm not sure what's the point of this

2021
02:59:09,500 --> 02:59:13,500
 I'm not sure what's the point of this

2022
02:59:13,500 --> 02:59:17,500
 I'm not sure what's the point of this

2023
02:59:17,500 --> 02:59:21,500
 I'm not sure what's the point of this

2024
02:59:21,500 --> 02:59:25,500
 I'm not sure what's the point of this

2025
02:59:25,500 --> 02:59:29,500
 I'm not sure what's the point of this

2026
02:59:29,500 --> 02:59:33,500
 I'm not sure what's the point of this

2027
02:59:33,500 --> 02:59:37,500
 I'm not sure what's the point of this

2028
02:59:37,500 --> 02:59:41,500
 I'm not sure what's the point of this

2029
02:59:41,500 --> 02:59:45,500
 I'm not sure what's the point of this

2030
02:59:45,500 --> 02:59:49,500
 I'm not sure what's the point of this

2031
02:59:49,500 --> 02:59:53,500
 I'm not sure what's the point of this

2032
02:59:53,500 --> 02:59:57,500
 I'm not sure what's the point of this

