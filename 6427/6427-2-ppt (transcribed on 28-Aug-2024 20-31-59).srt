1
00:00:00,000 --> 00:00:12,100
 driving and sounds

2
00:01:12,100 --> 00:01:19,100
 th

3
00:01:42,100 --> 00:01:49,100
 th

4
00:02:12,100 --> 00:02:19,100
 th

5
00:02:25,299 --> 00:02:27,820
 okay uh... greening class

6
00:02:27,820 --> 00:02:32,940
 right so we'll come back uh... so before we start the lecture today just want to

7
00:02:32,940 --> 00:02:36,420
 remind you right in case some of you uh...

8
00:02:36,420 --> 00:02:38,240
 may not be aware

9
00:02:38,240 --> 00:02:43,560
 so uh... today is twenty second of august so we are supposed to have a lecture in this LT

10
00:02:43,560 --> 00:02:45,280
 which is LT2A

11
00:02:45,280 --> 00:02:50,760
 but for the next two weeks we'll be having our lectures in this Lee Koon Cheon LT here

12
00:02:50,760 --> 00:02:54,480
 so this is the LT near Can Thim B

13
00:02:54,480 --> 00:02:56,760
 okay so just to remind you that

14
00:02:56,760 --> 00:03:00,840
 for the next two weeks the lectures will be in Lee Koon Cheon LT

15
00:03:00,840 --> 00:03:03,760
 above or near Can Thim B

16
00:03:03,760 --> 00:03:07,600
 okay and also uh... in case some of you are not aware

17
00:03:07,640 --> 00:03:12,480
 right so you can uh... download the lecture notes and some

18
00:03:12,480 --> 00:03:16,440
 uh... exercises from the uh... folder

19
00:03:16,440 --> 00:03:21,280
 right so from the course folder and also there's some recorded lectures so each week

20
00:03:21,280 --> 00:03:23,880
 the lectures will be recorded

21
00:03:23,880 --> 00:03:28,720
 okay so if you want to do some revision you are welcome to

22
00:03:28,720 --> 00:03:32,920
 uh... watch these particular lectures

23
00:03:32,920 --> 00:03:35,160
 so also from

24
00:03:35,160 --> 00:03:37,440
 can you all hear me from the back

25
00:03:37,440 --> 00:03:40,000
 yeah also from past experience we will

26
00:03:40,000 --> 00:03:42,320
 you know tends to notice that as

27
00:03:42,320 --> 00:03:43,880
 you know the lecture progress

28
00:03:43,880 --> 00:03:46,680
 the number of students will start to decrease

29
00:03:46,680 --> 00:03:50,840
 so last week you can see lots of seats are taken this week already there are some

30
00:03:50,840 --> 00:03:52,120
 uh... empty seats

31
00:03:52,120 --> 00:03:54,440
 so we expect the train to continue

32
00:03:54,440 --> 00:03:57,360
 right so one of the possible reason is that

33
00:03:57,360 --> 00:03:59,780
 uh... some students told me before they find it

34
00:03:59,780 --> 00:04:01,960
 you know they can watch this recorded lecture

35
00:04:01,960 --> 00:04:04,440
 and they can make the speed to 1.5

36
00:04:04,640 --> 00:04:08,200
 they said that when I speak my pace is a bit slow

37
00:04:08,200 --> 00:04:10,760
 so if they speed up the

38
00:04:10,760 --> 00:04:13,920
 this lecture speed by 1.5 times

39
00:04:13,920 --> 00:04:18,440
 he can actually cut down one hour so instead of coming here and stay for three hours

40
00:04:18,440 --> 00:04:19,480
 you just need to

41
00:04:19,480 --> 00:04:22,800
 you know spend two hours to watch the recorded lecture

42
00:04:22,800 --> 00:04:29,600
 okay so anyway that's a joke aside so uh... yeah please continue to come and attend the lecture

43
00:04:29,600 --> 00:04:33,159
 but just to let you know that there's this recorded lecture that you can watch

44
00:04:33,160 --> 00:04:35,800
 uh... afterwards if you find that there are some

45
00:04:35,800 --> 00:04:42,800
 uh... concepts that you are not clear with

46
00:04:51,640 --> 00:04:56,160
 okay so uh... today we are going to continue on with our lecture so we are going to move on to

47
00:04:56,160 --> 00:04:57,480
 part two now

48
00:04:57,480 --> 00:05:03,960
 so part two will be mainly dealing with image compression and jpeg standards

49
00:05:03,960 --> 00:05:08,880
 right so again these are some references should you have any questions that you want to

50
00:05:08,880 --> 00:05:10,840
 uh... find out more about the

51
00:05:10,840 --> 00:05:15,240
 uh... the topics or the content for this part of the course you can refer to this reference

52
00:05:15,240 --> 00:05:16,040
 material

53
00:05:16,040 --> 00:05:21,280
 or again you can go to google or use chatgpt to help you to

54
00:05:21,280 --> 00:05:24,800
 improve your learning experience

55
00:05:24,840 --> 00:05:30,320
 right okay so in part two these are the outline for the topics that we are going to cover

56
00:05:30,320 --> 00:05:34,620
 so first of all we are going to learn some basic terms and concepts

57
00:05:34,620 --> 00:05:38,720
 and afterwards we'll go through the entropy coding

58
00:05:38,720 --> 00:05:42,560
 and then we'll learn about some basic image and video compression

59
00:05:42,560 --> 00:05:45,560
 okay we'll learn about transform based coding

60
00:05:45,560 --> 00:05:49,440
 and afterwards we'll move on to DCT which is a very popular

61
00:05:49,440 --> 00:05:54,720
 uh... you know transform technique that's used in many media compression including

62
00:05:55,120 --> 00:05:57,400
 jpeg as well as mpeg compression

63
00:05:57,400 --> 00:06:02,800
 so we'll spend some time to learn about this particular DCT, discrete cosine transform

64
00:06:02,800 --> 00:06:06,280
 and afterwards we'll learn about the jpeg standards

65
00:06:06,280 --> 00:06:11,360
 so these are the topics that we are going to cover in part two

66
00:06:11,360 --> 00:06:15,720
 right okay so first let's try to go through some basic terms and concepts

67
00:06:15,720 --> 00:06:20,520
 just to make sure that everyone is on the same page

68
00:06:20,520 --> 00:06:23,240
 right okay so what is compression

69
00:06:23,280 --> 00:06:27,680
 or coding so in the context of media compression

70
00:06:27,680 --> 00:06:32,400
 right when we say compression it actually means the same thing as in coding

71
00:06:32,400 --> 00:06:34,240
 so in this article course

72
00:06:34,240 --> 00:06:39,840
 when we refer to compression it means the same thing as coding or encoding

73
00:06:39,840 --> 00:06:41,240
 they are all the same

74
00:06:41,240 --> 00:06:44,880
 right so what is the objective of performing compression

75
00:06:44,880 --> 00:06:50,600
 right so if you think about for typical for example image and video so from

76
00:06:50,600 --> 00:06:55,520
 last week we just do a simple calculation to see if you have a small video

77
00:06:55,520 --> 00:06:58,840
 right it already require a very large bit rate

78
00:06:58,840 --> 00:07:00,600
 okay hundreds of uh...

79
00:07:00,600 --> 00:07:04,520
 megabits per second so therefore there's a very strong motivation for us to

80
00:07:04,520 --> 00:07:06,040
 perform the compression

81
00:07:06,040 --> 00:07:09,760
 because if you don't compress it then it's very hard for us to store

82
00:07:09,760 --> 00:07:14,280
 in some uh... storage devices or transmit over the network

83
00:07:14,280 --> 00:07:18,200
 so therefore there's a strong motivation for us to perform compression

84
00:07:18,200 --> 00:07:20,080
 because without compression

85
00:07:20,080 --> 00:07:24,360
 right the data, original data is just too demanding in terms of

86
00:07:24,360 --> 00:07:26,479
 storage and bandwidth requirement

87
00:07:26,479 --> 00:07:30,440
 so therefore we need to perform compression so what's the objective of it

88
00:07:30,440 --> 00:07:32,400
 is to reduce the number of bits

89
00:07:32,400 --> 00:07:34,960
 that's needed to represent the information

90
00:07:34,960 --> 00:07:37,800
 okay so i think the motivation is quite straightforward

91
00:07:37,800 --> 00:07:40,919
 so what you have is that you have some input data

92
00:07:40,919 --> 00:07:47,919
 so this input data can be for example text, it can be audio, it can be image, it can be video

93
00:07:47,920 --> 00:07:50,840
 but in the context of this particular course

94
00:07:50,840 --> 00:07:53,080
 our focus mainly will be on

95
00:07:53,080 --> 00:07:54,480
 uh... image and video

96
00:07:54,480 --> 00:07:57,880
 right okay because we are talking about video signal processing

97
00:07:57,880 --> 00:08:02,000
 so we have some input data which can be for example image and video

98
00:08:02,000 --> 00:08:04,160
 and then you go through the encoder

99
00:08:04,160 --> 00:08:09,240
 right so the encoder in this particular context is actually used for compression

100
00:08:09,240 --> 00:08:13,360
 so we have an original for example image file

101
00:08:13,400 --> 00:08:17,920
 when we go through the encoder, we try to compress it into a small file

102
00:08:17,920 --> 00:08:19,080
 or low bit rate

103
00:08:19,080 --> 00:08:20,080
 right so that

104
00:08:20,080 --> 00:08:25,280
 right when the file is small then you can either store it or you can then transmit it

105
00:08:25,280 --> 00:08:27,240
 so you can then either store it

106
00:08:27,240 --> 00:08:30,880
 right as an image and video file or you can transmit over the network

107
00:08:30,880 --> 00:08:35,840
 okay so later on, suppose it is a network then at the receiver end

108
00:08:35,840 --> 00:08:37,960
 then you need to perform the decoder

109
00:08:37,960 --> 00:08:40,280
 right so you need to let it go through a decoder

110
00:08:40,319 --> 00:08:44,240
 so this decoder's objective is to perform decompression

111
00:08:44,240 --> 00:08:48,040
 so decompression means that you take some compressed bit stream

112
00:08:48,040 --> 00:08:50,800
 and you try to recover the original data

113
00:08:50,800 --> 00:08:54,319
 so this is the meaning of decompression

114
00:08:54,319 --> 00:08:57,120
 and afterwards you have the output data

115
00:08:57,120 --> 00:09:00,439
 right so that's the very basic ideas of a data compression

116
00:09:00,439 --> 00:09:03,680
 framework or pipeline

117
00:09:03,680 --> 00:09:09,920
 right okay so next we need to introduce this concept or this term compression ratio

118
00:09:09,959 --> 00:09:13,000
 but so what is the definitions of a compression ratio

119
00:09:13,000 --> 00:09:17,000
 so the definition of compression ratio is data storage requirement

120
00:09:17,000 --> 00:09:21,560
 of the original data over the storage requirement for the compressed data

121
00:09:22,439 --> 00:09:24,839
 so it's a number of bits or the storage requirement

122
00:09:24,839 --> 00:09:27,079
 for the original uncompressed data

123
00:09:27,199 --> 00:09:33,400
 over the data storage requirement for a compressed data

124
00:09:33,400 --> 00:09:39,719
 so by the definition, if your method is performing the compression well

125
00:09:39,720 --> 00:09:43,720
 do you think the compression ratio should be greater than one or less than one?

126
00:09:43,720 --> 00:09:51,720
 If you define compression ratio as the data storage requirement for the original data

127
00:09:51,720 --> 00:09:55,720
 over data storage requirement for compressed data,

128
00:09:55,720 --> 00:09:57,720
 and if your method is working properly,

129
00:09:57,720 --> 00:10:02,720
 you expect the compression ratio to be greater than one or less than one?

130
00:10:02,720 --> 00:10:04,720
 Greater than one.

131
00:10:04,720 --> 00:10:08,720
 Because definitely this is the original data storage requirement

132
00:10:08,720 --> 00:10:10,720
 therefore your compressed data is going to be much smaller.

133
00:10:10,720 --> 00:10:14,720
 So it's going to be a larger value over a smaller value.

134
00:10:14,720 --> 00:10:17,720
 Therefore your compression ratio typically should be greater than one.

135
00:10:17,720 --> 00:10:21,720
 So therefore the meaning of a compression ratio is quite straightforward.

136
00:10:21,720 --> 00:10:26,720
 It's a matrix or a way for you to measure how much the data has been compressed.

137
00:10:26,720 --> 00:10:29,720
 So it's defined as this B naught,

138
00:10:29,720 --> 00:10:35,720
 which is the number of bits before compression or is the original data storage requirement,

139
00:10:35,720 --> 00:10:41,720
 over B1, which is the number of bits or the storage requirement after the compression.

140
00:10:41,720 --> 00:10:45,720
 So because after compression you expect this number to be smaller than this.

141
00:10:45,720 --> 00:10:50,720
 Therefore typically for compression ratio it should be greater than one.

142
00:10:50,720 --> 00:10:56,720
 And usually the larger the value, that means the smaller size you can compress it into.

143
00:10:56,720 --> 00:11:02,720
 So from the compression perspective you want the value to be as large as possible.

144
00:11:03,720 --> 00:11:08,720
 Okay, so next we are going to touch on some basics on information theory.

145
00:11:08,720 --> 00:11:11,720
 So the concept that we are going to introduce is the entropy here.

146
00:11:11,720 --> 00:11:20,720
 So this entropy or using this symbol called eta is the measures of the amount of information in some data source.

147
00:11:20,720 --> 00:11:26,720
 Or sometimes it's also an indication of degree of randomness in the data source.

148
00:11:27,720 --> 00:11:36,720
 So the entropy eta for an information source, suppose this information source what you have is that you have a set S,

149
00:11:36,720 --> 00:11:42,720
 which consists of a number of different symbols, S1 all the way up to Sn.

150
00:11:42,720 --> 00:11:48,720
 So we are trying to measure this entropy, that means we are trying to measure the amount of information inside

151
00:11:48,720 --> 00:11:53,720
 or the degree of randomness inside this particular data source here.

152
00:11:53,720 --> 00:11:57,720
 So that's a very formal definition for entropy.

153
00:11:57,720 --> 00:12:04,720
 So for those of you if you have studied digital communication, you should definitely know the equation.

154
00:12:04,720 --> 00:12:10,720
 So the entropy eta is given by this particular symbol here, H.

155
00:12:10,720 --> 00:12:15,720
 The entropy for this set S is defined by this equation here, Pi.

156
00:12:16,720 --> 00:12:26,720
 So this Pi here is the probability of each of this particular symbol in this set here.

157
00:12:26,720 --> 00:12:35,720
 So this Pi, log Pi with a base of 2, and then you sum up over all the possible symbols in the set.

158
00:12:35,720 --> 00:12:38,720
 So that's the definitions of the entropy.

159
00:12:38,720 --> 00:12:45,720
 And afterwards if you can simplify this a little bit, Pi is P to the power of negative 1, you move it down here,

160
00:12:45,720 --> 00:12:47,720
 then you can rewrite in this form here.

161
00:12:47,720 --> 00:12:53,720
 So therefore for entropy you can also write it as Pi, log Pi to the base of 2,

162
00:12:53,720 --> 00:12:58,720
 you sum up over all the symbols in the set and you put a negative sign in front.

163
00:12:58,720 --> 00:13:00,720
 So this is the entropy.

164
00:13:00,720 --> 00:13:07,720
 So as I mentioned before, Pi is the probability of a symbol Si that occurs in this set here.

165
00:13:07,720 --> 00:13:13,720
 So what is the significance of this particular entropy in the context of compression is that

166
00:13:13,720 --> 00:13:20,720
 entropy is the smallest number of bits on average that you need to represent a symbol.

167
00:13:20,720 --> 00:13:24,720
 So for example, now you have a set S, you have many different symbols.

168
00:13:24,720 --> 00:13:33,720
 So on average, the smallest number of bits that you can use to represent this set of symbols is known as entropy.

169
00:13:33,720 --> 00:13:42,720
 So for example, if you are given a particular symbol, a set S with a certain number of symbols,

170
00:13:42,720 --> 00:13:49,720
 say suppose here you have 8 symbols, you can easily use 3 bits to represent it.

171
00:13:49,720 --> 00:13:53,720
 If you want, you can even use 8 bits or 10 bits to represent it.

172
00:13:53,720 --> 00:13:56,720
 So you can use a larger number of bits to represent it.

173
00:13:56,720 --> 00:14:04,720
 But if you want to reduce the number of bits, continue to reduce the number of bits, that is a theoretical lower bound.

174
00:14:04,720 --> 00:14:14,720
 So the theoretical lower bound, the number of bits on average that you need to represent this particular symbol is known as the entropy.

175
00:14:14,720 --> 00:14:20,720
 So that's another interpretation of the entropy in the context of compression.

176
00:14:21,720 --> 00:14:25,720
 Okay, so now we have introduced some basic terms.

177
00:14:25,720 --> 00:14:31,720
 Now we are ready to cover the next topic, which is the entropy coding.

178
00:14:31,720 --> 00:14:35,720
 So as I mentioned, coding and encoding refer to the same thing.

179
00:14:35,720 --> 00:14:38,720
 There's no difference between them.

180
00:14:38,720 --> 00:14:43,720
 Okay, so there's different ways of performing entropy encoding.

181
00:14:43,720 --> 00:14:46,720
 So for this course, we will be focusing on Huffman coding,

182
00:14:46,720 --> 00:14:51,720
 because Huffman coding is one of the most commonly used coding used in media compression,

183
00:14:51,720 --> 00:14:56,720
 either image compression or video compression, and there are corresponding standards,

184
00:14:56,720 --> 00:14:59,720
 such as JPEG standard and the MPEG standard.

185
00:14:59,720 --> 00:15:02,720
 So therefore, we'll be focusing on Huffman coding here.

186
00:15:02,720 --> 00:15:13,720
 And also just to make a note, because for this particular class here, the background is actually quite diverse.

187
00:15:13,720 --> 00:15:24,720
 I understand that there are students from SPML, students from communication, students from control, even some students from power, and also CCA.

188
00:15:24,720 --> 00:15:27,720
 So the background is quite diverse.

189
00:15:27,720 --> 00:15:31,720
 So therefore, in order to make sure that everyone understands it,

190
00:15:31,720 --> 00:15:37,720
 we'll try to cover it in such a way that at least the majority of students will be able to understand.

191
00:15:37,720 --> 00:15:41,720
 So therefore, in case if you're already familiar with some of the concepts,

192
00:15:41,720 --> 00:15:47,720
 just take it as a revision or sometimes you may gain a certain new perspective.

193
00:15:47,720 --> 00:15:52,720
 Right, okay, so having said that, next let's look at what's the Huffman coding.

194
00:15:52,720 --> 00:15:57,720
 So Huffman coding is the types of variable length coding, or VLCC.

195
00:15:57,720 --> 00:16:02,720
 So what is the, you can see by this particular term here, variable length coding,

196
00:16:02,720 --> 00:16:07,720
 it does already tell you some indication about what this coding scheme is.

197
00:16:07,720 --> 00:16:16,720
 So this particular coding scheme means that for different symbols, all right, different symbols, you use different bits to represent this particular symbol.

198
00:16:16,720 --> 00:16:23,720
 So symbol is a very general term to describe any kind of a data source that we have.

199
00:16:23,720 --> 00:16:29,720
 So to give you an example, if we refer to English, right, English, so most of you know English.

200
00:16:29,720 --> 00:16:33,720
 So English, we have 26 alphabets.

201
00:16:33,720 --> 00:16:39,720
 So if you want, for example, you can use 8 bits to represent each of these particular alphabets.

202
00:16:39,720 --> 00:16:44,720
 So for each English alphabet, if you want, you can use 8 bits to represent it.

203
00:16:44,720 --> 00:16:46,720
 It's not a problem.

204
00:16:46,720 --> 00:16:50,720
 But if you do that, it may not be so efficient, right?

205
00:16:50,720 --> 00:16:52,720
 It may not be so efficient.

206
00:16:53,720 --> 00:17:01,720
 Okay, another thing about this entropy encoding is that for example, if we take the example of the English, right,

207
00:17:01,720 --> 00:17:08,720
 some actually alphabets or some letters occur more often than the others.

208
00:17:08,720 --> 00:17:16,720
 So for example, in English, what are the letters that occur very frequently, very often?

209
00:17:16,720 --> 00:17:21,720
 Can some of you suggest some English letters that occur very often?

210
00:17:23,720 --> 00:17:27,720
 First, we have the vowel, A-E-I-O-U, those occur very often.

211
00:17:27,720 --> 00:17:39,720
 And then if you have the consonant, consonant is like T, I just given you one, T, S, M, yeah,

212
00:17:39,720 --> 00:17:42,720
 and these are very common kind of a consonant.

213
00:17:42,720 --> 00:17:45,720
 So therefore, you have these letters which occur very often.

214
00:17:45,720 --> 00:17:52,720
 So for these letters that occur very often, if you want to design certain codes to represent it,

215
00:17:52,720 --> 00:17:57,720
 do you think you should use a shorter code work or longer code work to represent it?

216
00:17:57,720 --> 00:18:01,720
 Shorter code works means you use a smaller number of bits.

217
00:18:01,720 --> 00:18:05,720
 Longer code works means that you use a larger number of bits to represent.

218
00:18:05,720 --> 00:18:12,720
 So for those letters that occur very often, do you think you should use less letter,

219
00:18:12,720 --> 00:18:17,720
 less number of shorter code work or longer code work to represent?

220
00:18:19,720 --> 00:18:21,720
 Would you use?

221
00:18:24,720 --> 00:18:30,720
 If they occur so often, because in the context of this particular course is we want to perform compression.

222
00:18:30,720 --> 00:18:38,720
 So when we want to perform compression, that means we want to use as few bits as possible to represent our information source.

223
00:18:38,720 --> 00:18:44,720
 So if you know that certain letters occur so often, therefore you should use shorter code work,

224
00:18:44,720 --> 00:18:48,720
 that means smaller number of bits or longer number of bits to represent it.

225
00:18:48,720 --> 00:18:53,720
 Shorter code works or smaller number of bits, it's very intuitive.

226
00:18:53,720 --> 00:18:58,720
 So on the other hand, if you think about it, so for some letters like in English,

227
00:18:58,720 --> 00:19:04,720
 what are the letters that occur very rarely, very infrequently?

228
00:19:05,720 --> 00:19:11,720
 Q, Z or Z depending on whether you're American or British.

229
00:19:11,720 --> 00:19:17,720
 So these are some very rare kind of English letters.

230
00:19:17,720 --> 00:19:23,720
 So for those letters, should you use a longer code work or shorter code work to represent it?

231
00:19:23,720 --> 00:19:28,720
 You should use a longer code work, because they occur so rarely,

232
00:19:28,720 --> 00:19:31,720
 so you can afford to use a longer code work to represent it.

233
00:19:31,720 --> 00:19:39,720
 So therefore, the idea now is quite clear, depending on the probability of how often a letter appears,

234
00:19:39,720 --> 00:19:45,720
 you assign different code work length to represent this particular letter.

235
00:19:45,720 --> 00:19:49,720
 So this idea now is reflected by variable length coding.

236
00:19:49,720 --> 00:19:57,720
 So what it means is that for different symbols or letters, we'll be using different variable,

237
00:19:57,720 --> 00:20:01,720
 we'll be using different number of bits to represent the letter.

238
00:20:01,720 --> 00:20:04,720
 Hence the name, variable length coding.

239
00:20:04,720 --> 00:20:11,720
 So this is as opposed to, for example, just now we say, if you want, we can use 8 bits to represent each letter.

240
00:20:11,720 --> 00:20:17,720
 But if you do that, we don't take into account the probability distribution of the letter.

241
00:20:17,720 --> 00:20:20,720
 So therefore, it's not a very clever way of doing it.

242
00:20:20,720 --> 00:20:24,720
 So therefore, the idea now is quite straightforward.

243
00:20:24,720 --> 00:20:29,720
 So the idea of variable length coding, we have just gone through an example to provide the motivation.

244
00:20:29,720 --> 00:20:35,720
 So the approach is that higher frequency patterns or symbols are assigned shorter code work.

245
00:20:35,720 --> 00:20:38,720
 Shorter code works means you require smaller number of bits.

246
00:20:38,720 --> 00:20:41,720
 So on the other hand, the reverse is also true.

247
00:20:41,720 --> 00:20:46,720
 That means lower frequency patterns or symbols, you will assign longer code work.

248
00:20:46,720 --> 00:20:52,720
 So the objective of you doing that is that such that on average,

249
00:20:52,720 --> 00:20:57,720
 the number of bits that is required to represent each pattern or symbol will be reduced.

250
00:20:57,720 --> 00:21:03,720
 So on average, the average number of bits to represent a symbol now will be shorter.

251
00:21:03,720 --> 00:21:08,720
 So that's the idea of variable length coding.

252
00:21:08,720 --> 00:21:15,720
 So in the context of Huffman coding, as I mentioned, typically we use this work symbol to represent

253
00:21:15,720 --> 00:21:18,720
 it's a very general term, symbol.

254
00:21:18,720 --> 00:21:26,720
 So for example, just now in the context of the English letter, the symbol can be used to represent the letter.

255
00:21:26,720 --> 00:21:31,720
 So in the context of example, if you are trying to perform some image compression,

256
00:21:31,720 --> 00:21:35,720
 you may partition the image into small image patches.

257
00:21:35,720 --> 00:21:39,720
 Then the symbol can be used to, for example, represent a small image patch.

258
00:21:40,720 --> 00:21:45,720
 So therefore, symbol is a very generic term that we use to describe a pattern.

259
00:21:59,720 --> 00:22:07,720
 Okay, so next we'll use a simple example to explain how do we exactly perform this Huffman coding.

260
00:22:07,720 --> 00:22:15,720
 So what it means is that given a particular set of symbols with their corresponding probability distribution,

261
00:22:15,720 --> 00:22:21,720
 we want to generate the code works that can be used to represent this particular set of symbol.

262
00:22:21,720 --> 00:22:26,720
 So that's what we plan to do. This is the objective of Huffman coding.

263
00:22:26,720 --> 00:22:29,720
 So we take a simple example first.

264
00:22:30,720 --> 00:22:35,720
 Suppose this particular example is that we have strings of character like this.

265
00:22:35,720 --> 00:22:40,720
 So we can see we have four A's, two B's, one C and one D.

266
00:22:40,720 --> 00:22:50,720
 And then we want to generate this Huffman code work set for these sets of letters with this probability distribution.

267
00:22:50,720 --> 00:22:58,720
 So we can see in this case here, A occurs four times, B occurs two times, C and D occur once.

268
00:22:58,720 --> 00:23:01,720
 For each of them, it occurs only one time.

269
00:23:01,720 --> 00:23:08,720
 So therefore, from our understanding, if you want to represent this particular letter A using code work,

270
00:23:08,720 --> 00:23:11,720
 you want it to have a shorter code work or longer code work?

271
00:23:13,720 --> 00:23:15,720
 You want it to have shorter code work.

272
00:23:15,720 --> 00:23:19,720
 And which are the symbols that have the longest code work?

273
00:23:19,720 --> 00:23:22,720
 It should be C or D.

274
00:23:22,720 --> 00:23:27,720
 So even before we do that, we know that that is the high level intuition.

275
00:23:27,720 --> 00:23:33,720
 So next, I'm going to go through with you a systematic way of generating the Huffman code work set.

276
00:23:33,720 --> 00:23:36,720
 So actually, there are many different ways you can do it.

277
00:23:36,720 --> 00:23:43,720
 But here in this course, we are just going to introduce one way of doing it, which is usually quite a common way of doing it.

278
00:23:43,720 --> 00:23:52,720
 So what we'll do first of all is that we can see that A occurs four times, B two times, C and D occur once each.

279
00:23:52,720 --> 00:24:02,720
 So the first thing that we'll do is that we'll write down this particular symbol in the decreasing order of occurrence or the decreasing probability.

280
00:24:02,720 --> 00:24:10,720
 So we write down A, B, C and D. It's because A occurs four times, B is two times, C and D is one time each.

281
00:24:10,720 --> 00:24:15,720
 So we write it down in the decreasing occurrence, number of occurrence here.

282
00:24:15,720 --> 00:24:20,720
 This C and D, you can actually sort it. It doesn't matter you sort the order.

283
00:24:20,720 --> 00:24:25,720
 But no, because in English, C occur before D. So we just happen to write this way.

284
00:24:25,720 --> 00:24:33,720
 OK, so we write down A, B, C, D. And then next week, we write down the number of occurrence, four, two, one, one here.

285
00:24:33,720 --> 00:24:41,720
 So the next thing is that we take those two symbols with the lowest number of occurrence, the C and D, we add them up, write the number.

286
00:24:41,720 --> 00:24:43,720
 So you can see one plus one, it becomes two.

287
00:24:43,720 --> 00:24:47,720
 So once you have this two here, we move it to the next column.

288
00:24:47,720 --> 00:24:54,720
 But you try to rearrange the next column again in the decreasing orders of occurrence here.

289
00:24:54,720 --> 00:25:01,720
 So if you add up one and one is two, so two happen to be the same as this number two above.

290
00:25:01,720 --> 00:25:06,720
 So if the number is the same, usually we try not to disturb it so much. We just move it at the bottom.

291
00:25:06,720 --> 00:25:15,720
 So now we have this one plus one is two here. So the rest, we just move it over. This A4 and B2, we just move it over.

292
00:25:15,720 --> 00:25:24,720
 And then afterwards, we repeat the same thing. We take the two smallest occurrence, two and two, add up is four.

293
00:25:24,720 --> 00:25:31,720
 And then four should be the same as this A4, so we just put it at the bottom here. And then the rest, we just move it up here.

294
00:25:31,720 --> 00:25:38,720
 Okay, so we have done the first step. So the second step is that we assign, we need to assign the bits patterns already.

295
00:25:38,720 --> 00:25:47,720
 So for this particular course, because we are following these textbooks, so they assign the bits as in the top branch is one, bottom branch is zero.

296
00:25:47,720 --> 00:25:51,720
 So they assign one zero, one zero, one zero here.

297
00:25:51,720 --> 00:25:56,720
 Okay, so if you want to assign zero one, zero one, zero one, actually it's also okay.

298
00:25:56,720 --> 00:26:02,720
 But for this particular course, let's try to stick to the convention that this book introduced.

299
00:26:02,720 --> 00:26:10,720
 So that in the event if I ask a question during the quiz or exam, I don't have to check all the possible version.

300
00:26:10,720 --> 00:26:15,720
 So we stick to this particular convention here, one zero, one zero, one zero.

301
00:26:15,720 --> 00:26:19,720
 Okay, so now we have more or less finished this part already.

302
00:26:19,720 --> 00:26:27,720
 Okay, and then next is we just try to transfer this symbol, the symbol, right, just before it's being merged.

303
00:26:27,720 --> 00:26:33,720
 Just for it, make it easier for us to do the tracking. So A, before it's being merged here, it's here.

304
00:26:33,720 --> 00:26:39,720
 And B, you can continue to write here before it's being merged, it's here. And C, and V are here.

305
00:26:39,720 --> 00:26:45,720
 Okay, so we have done this already. The next thing is that we need to build a Huffman code tree here.

306
00:26:45,720 --> 00:26:51,720
 So for this Huffman code tree, we start on top. On top is actually four plus four is eight.

307
00:26:51,720 --> 00:26:54,720
 Just now there's no need. If you want, we can add them up further to become eight.

308
00:26:54,720 --> 00:26:58,720
 But it's actually not really necessary.

309
00:26:58,720 --> 00:27:03,720
 So anyway, we start with the root node of eight, which is four plus four, eight.

310
00:27:03,720 --> 00:27:11,720
 Right, okay, for this Huffman code tree branching, okay, the left branch we assign a bit of zero,

311
00:27:11,720 --> 00:27:15,720
 and the right branch we assign a bit of one. So it's zero and one here.

312
00:27:15,720 --> 00:27:22,720
 So you can see this zero here corresponds to this value four, and then this one here corresponds to this branching on one, which is A4.

313
00:27:22,720 --> 00:27:28,720
 So we just write it down. Okay. And afterwards, we look at this particular four value again.

314
00:27:28,720 --> 00:27:34,720
 Left branch is zero, right branch is one. Okay, so now this zero corresponds to this two.

315
00:27:34,720 --> 00:27:40,720
 We write it down. This one here corresponds to this point, which is B2. So we write it down.

316
00:27:40,720 --> 00:27:45,720
 Okay, and then finally, from this two, left branch is zero, right branch is one.

317
00:27:45,720 --> 00:27:54,720
 So left branch is D1, okay, one is C1. So we'll be able to write down this particular Huffman code tree already.

318
00:27:54,720 --> 00:27:59,720
 So the last step that we need to do is that we need to write down all the code works already.

319
00:27:59,720 --> 00:28:03,720
 So if you want to write down the code work, for example, A, right, for the code work A,

320
00:28:03,720 --> 00:28:08,720
 we just start off from the root node and trace it until this leaf node here.

321
00:28:08,720 --> 00:28:15,720
 The number of bits that it travels through and you collect along the way is your Huffman code work.

322
00:28:15,720 --> 00:28:19,720
 So in other words, if you want to write down the Huffman code work for this number A,

323
00:28:20,720 --> 00:28:25,720
 we start from the root node, which is eight, okay, and then we traverse to this leaf node A, right,

324
00:28:25,720 --> 00:28:31,720
 the number of bits that you collect along the way is one. So therefore, the Huffman code work for A is one.

325
00:28:31,720 --> 00:28:40,720
 Okay, let's just take one more example. Suppose if you want to find what's the Huffman code work for this symbol D, right?

326
00:28:40,720 --> 00:28:47,720
 So we start from this root node, okay, we want to traverse to this leaf node, so you traverse through this path here.

327
00:28:47,720 --> 00:28:52,720
 So along the way, the number of bits that you collect is zero, zero, zero.

328
00:28:52,720 --> 00:29:00,720
 So therefore, for this symbol D, right, okay, the Huffman code work is zero, zero, zero.

329
00:29:00,720 --> 00:29:06,720
 So this is one way for us to generate the Huffman code work set, a very systematic way of doing it.

330
00:29:06,720 --> 00:29:12,720
 Okay, and also just now when we look at this particular Huffman code tree here, you can see the root on top,

331
00:29:13,720 --> 00:29:20,720
 we call it the root node, okay, the branch that, no, the node that has the branching, we call it the branch node, okay.

332
00:29:20,720 --> 00:29:24,720
 The node at the bottom, there's no further branching, we call it the leaf node, okay,

333
00:29:24,720 --> 00:29:28,720
 so that's the definitions of root node, branch node and leaf node.

334
00:29:28,720 --> 00:29:38,720
 Okay, so we are going through one simple example of showing how we can create a Huffman code set for this particular example.

335
00:29:38,720 --> 00:29:46,720
 So let's go through a bit more explanation. So this explanation here, just now I already covered earlier.

336
00:29:46,720 --> 00:29:52,720
 So a Huffman code tree is a binary tree with branches assigned a value of zero and one, okay.

337
00:29:52,720 --> 00:29:59,720
 It has a tree structure, so the root node is on top, okay, the root of the tree.

338
00:29:59,720 --> 00:30:07,720
 The branch node are the nodes that you have the branching, okay, and the leaf node is the termination nodes of the tree, right.

339
00:30:07,720 --> 00:30:13,720
 So as seen, this is the root node, these are the branch node and at the bottom, these are the leaf node.

340
00:30:13,720 --> 00:30:21,720
 Right, so at each branch node, zero and one are assigned to the left and the right branch accordingly, like what we have seen, okay.

341
00:30:21,720 --> 00:30:24,720
 Zero and one, zero and one, zero and one.

342
00:30:24,720 --> 00:30:33,720
 Okay, the code word used for each character or symbol is determined by tracing the path from the root node to the leaf node.

343
00:30:33,720 --> 00:30:42,720
 So the path from the leaf node as you trace traversed from the root node to the leaf node and the number of bits you collect along the way is actually your Huffman code.

344
00:30:42,720 --> 00:30:48,720
 Right, okay, so that's all is actually a very simple kind of example that we have gone through.

345
00:30:48,720 --> 00:30:56,720
 So next, in order to make sure that you fully understand what's the best way, yeah, the best way is for you to do an exercise, right.

346
00:30:56,720 --> 00:31:05,720
 So actually there are two exercises, okay, and it turned out that later on I find that exercise two is probably a bit easier than exercise one.

347
00:31:05,720 --> 00:31:08,720
 So therefore we'll probably swap the order a little bit.

348
00:31:08,720 --> 00:31:15,720
 Let's try to solve this exercise two first, right, and then afterwards we'll come back to exercise one.

349
00:31:15,720 --> 00:31:18,720
 So let's look at this exercise two.

350
00:31:18,720 --> 00:31:29,720
 But it states that in the compression scheme, a data source consists of eight symbols with the following probability distribution is given in table one here.

351
00:31:29,720 --> 00:31:35,720
 So in this data source, you have eight symbols, S0 to S1, and these are the probability of occurrences here.

352
00:31:35,720 --> 00:31:44,720
 So in part one, it asks you to design a set of Huffman code work set for these eight symbols and clearly show all the steps and calculations involved.

353
00:31:44,720 --> 00:31:52,720
 Right, okay, so yeah, I'll give you a bit of time, right, to try out and then we'll try to go through the answer together.

354
00:31:52,720 --> 00:31:59,720
 So I know that the earlier example is a bit simpler because it only involved four symbols and this one is eight symbols.

355
00:31:59,720 --> 00:32:02,720
 But you should be using the same principle to solve it.

356
00:32:02,720 --> 00:32:07,720
 So I'll give you a bit of time to think about it, yeah, and then we'll go through the answers together.

357
00:32:32,720 --> 00:32:56,720
 What you're looking

358
00:33:02,720 --> 00:33:13,720
 Okay, yeah, before you continue, perhaps allow me to play a very short video clip and then perhaps you can tell me what this thing is.

359
00:33:13,720 --> 00:33:32,720
 Okay, there's a voice coming out.

360
00:33:32,720 --> 00:33:39,720
 Right, do you know, any one of you know what you're watching here?

361
00:33:39,720 --> 00:33:44,720
 Yeah, it's actually the neuron growing the connections between two neurons.

362
00:33:44,720 --> 00:33:54,720
 So yeah, I just happened to attend one of the parent-teacher kind of meeting for one of my kids in secondary school.

363
00:33:54,720 --> 00:34:03,720
 So they actually explained to us that if you want your kids to learn effectively, you need to provide opportunity for them to think.

364
00:34:03,720 --> 00:34:10,720
 So if you attend any lecture and then if you just listen, usually you'll probably only retain about 30% of the material.

365
00:34:10,720 --> 00:34:15,720
 So 100% come in, you keep 30%, 70% of the material will go out.

366
00:34:15,720 --> 00:34:19,720
 So therefore we need different way to retain this knowledge.

367
00:34:19,719 --> 00:34:30,719
 So how you retain this knowledge, right, it can be, for example, by solving some problem like what we are trying to do now, or even writing some books or drawing some pictures when you do the revision.

368
00:34:30,719 --> 00:34:38,719
 All those activities will help you to strengthen these connections of the sameness, right, to improve your learning effectiveness.

369
00:34:38,719 --> 00:34:43,719
 Okay, I can see many of you are very eager to solve the problem, so I'll let you continue.

370
00:35:08,720 --> 00:35:13,720
 Okay.

371
00:35:38,720 --> 00:35:43,720
 Okay.

372
00:36:08,720 --> 00:36:13,720
 Okay.

373
00:36:38,720 --> 00:36:43,720
 Okay.

374
00:37:08,720 --> 00:37:13,720
 Okay.

375
00:37:38,720 --> 00:37:43,720
 Okay.

376
00:38:08,720 --> 00:38:13,720
 Okay.

377
00:38:38,720 --> 00:38:43,720
 Okay.

378
00:39:08,720 --> 00:39:13,720
 Okay.

379
00:39:38,720 --> 00:39:43,720
 Okay.

380
00:39:43,720 --> 00:39:48,720
 Okay.

381
00:39:48,720 --> 00:39:53,720
 Okay.

382
00:39:53,720 --> 00:39:58,720
 Okay.

383
00:39:58,720 --> 00:40:03,720
 Okay.

384
00:40:03,720 --> 00:40:08,720
 Okay.

385
00:40:08,720 --> 00:40:13,720
 So at least you have some time to get your brain start working and thinking about it.

386
00:40:13,720 --> 00:40:18,720
 So let's try to go through the key steps that we should do in order to solve the problem.

387
00:40:18,720 --> 00:40:27,720
 So based on the steps that I've described earlier on in the previous example, what's the first thing that you have to do?

388
00:40:28,720 --> 00:40:32,720
 What's the first thing that you have to do?

389
00:40:32,720 --> 00:40:35,720
 Anyone?

390
00:40:35,720 --> 00:40:40,720
 Yeah.

391
00:40:40,720 --> 00:40:56,720
 Okay, we should try to rank all these symbols in the decreasing probability of occurrence and then go through the steps of taking the two lowest probability, try to add them up, and then for the next column, try to rearrange the probability.

392
00:40:56,720 --> 00:41:02,720
 Okay, and after we take the last two probability, add them up, and then try to reorder in the next column.

393
00:41:02,720 --> 00:41:04,720
 So you do that repeatedly doing that.

394
00:41:04,720 --> 00:41:06,720
 Okay, so that's a step one.

395
00:41:06,720 --> 00:41:11,720
 And afterwards, what's step two?

396
00:41:11,720 --> 00:41:16,720
 Step two is you assign the bits on that structure, right?

397
00:41:16,720 --> 00:41:18,720
 So the top branch is one, bottom branch is zero.

398
00:41:18,720 --> 00:41:21,720
 So one, zero, one, zero, one, zero, one, zero.

399
00:41:21,720 --> 00:41:23,720
 So you do the branching.

400
00:41:23,720 --> 00:41:28,720
 Okay, and then afterwards, what's the step three?

401
00:41:28,720 --> 00:41:32,720
 You construct the Huffman code tree.

402
00:41:32,720 --> 00:41:35,720
 So you build the Huffman code tree, right, just following the structure.

403
00:41:35,720 --> 00:41:37,720
 You build the Huffman code tree.

404
00:41:37,720 --> 00:41:46,720
 And then finally, if you want to determine all the code words, you just trace from the root node all the way to the corresponding leaf node for the symbol.

405
00:41:46,720 --> 00:41:52,720
 And the number of bits you collect along the way will be your Huffman code tree, I mean the Huffman code word.

406
00:41:52,720 --> 00:42:05,720
 So that's the basic high-level ideas of how we can solve this particular problem using the approach that we have just introduced.

407
00:42:05,720 --> 00:42:08,720
 So let me try to go through the...

408
00:42:35,720 --> 00:42:40,720
 Okay.

409
00:43:05,720 --> 00:43:20,720
 All right.

410
00:43:20,720 --> 00:43:27,720
 Okay, so this particular solution file, I'm going to upload to the course site afterwards.

411
00:43:27,720 --> 00:43:34,720
 After today's lecture, I'll upload to the course site, so there's no need for you to take pictures or copy.

412
00:43:34,720 --> 00:43:39,720
 So afterwards, yeah, latest by tomorrow, you can go and download the solution already.

413
00:43:39,720 --> 00:43:44,720
 Right, okay, so what we should be paying attention is how do we solve this problem?

414
00:43:44,720 --> 00:43:57,720
 So you can see, if you look at this particular set of symbols with their corresponding probability, as we have mentioned, step one, what we need to do is try to write down these symbols in the decreasing order of probability.

415
00:43:57,720 --> 00:44:00,720
 In our previous example, it's occurrence.

416
00:44:00,720 --> 00:44:02,720
 In this particular example, it's a probability.

417
00:44:02,720 --> 00:44:05,720
 So probability is a more common cases.

418
00:44:05,720 --> 00:44:14,720
 So if you look at this set of symbols, you can see S7 has the largest probability and S0 is the smallest.

419
00:44:14,720 --> 00:44:20,720
 So therefore, we need to write down this symbol in the decreasing order of probability.

420
00:44:20,720 --> 00:44:26,720
 Okay, so from 0.26, which is the largest, to 0.02, which is the smallest.

421
00:44:26,720 --> 00:44:30,720
 And afterwards, we take those two symbols with the smallest probability.

422
00:44:30,720 --> 00:44:36,720
 Okay, for example, 0.05 and 0.02, we add them up.

423
00:44:36,720 --> 00:44:39,720
 So we add them up, we'll notice that it's 0.07.

424
00:44:39,720 --> 00:44:48,720
 So now, if you compare this 0.07 with respect to all the other probability, you can see it's the smallest.

425
00:44:48,720 --> 00:44:54,720
 So therefore, it needs to be ranked at the bottom and the rest of the probability will just simply transfer over.

426
00:44:54,720 --> 00:44:58,720
 Okay, so this in your next column.

427
00:44:58,720 --> 00:45:01,720
 And afterwards, we repeat the exercise. Let me just do it one more time.

428
00:45:01,720 --> 00:45:07,720
 For example, this 0.08 plus 0.07, that is 0.15.

429
00:45:07,720 --> 00:45:16,720
 So once this probability is 0.15, okay, when you move it over to the next column, you can see that 0.15 should be between this 0.16 and 0.14.

430
00:45:16,720 --> 00:45:23,720
 So therefore, we need to move it up here, right, the rest of the probability we transfer over.

431
00:45:23,720 --> 00:45:26,720
 So for the one that's been replaced, you have to move down here.

432
00:45:26,720 --> 00:45:30,720
 Okay, right, so this is for the next column.

433
00:45:30,720 --> 00:45:34,720
 So we repeat this exercise. Yeah, so let's just do it one more time.

434
00:45:34,720 --> 00:45:39,720
 For example, 0.14 plus 0.1 will give you 0.24.

435
00:45:39,720 --> 00:45:44,720
 So 0.24 compared with the other probability, this 0.24 now should be here.

436
00:45:44,720 --> 00:45:48,720
 Okay, so 0.26 you move over here and then this 0.19 you move it down.

437
00:45:48,720 --> 00:45:53,720
 So that again, this is still in the decreasing order of probability.

438
00:45:53,720 --> 00:45:59,720
 So you repeat this particular process, all the, okay, since there are still a few more, let me just continue.

439
00:45:59,720 --> 00:46:04,720
 So 0.16 plus 0.15 now is 0.31, which is the largest as compared to the others.

440
00:46:04,720 --> 00:46:09,720
 So you need to move the top, the rest you just transfer over, shift it down.

441
00:46:09,720 --> 00:46:14,720
 Okay, and then 0.24 plus 0.19 is 0.43, right, which is the largest now.

442
00:46:14,720 --> 00:46:20,720
 So it's 0.43 here, 0.31 and 0.26 you just transfer over, but need to move down.

443
00:46:20,720 --> 00:46:26,720
 Okay, and then finally 0.31 plus 0.26 is 0.57, right, which is larger than 0.43.

444
00:46:26,720 --> 00:46:29,720
 So you move it up and this you move it down.

445
00:46:29,720 --> 00:46:34,720
 So yeah, so the first step is we just simply do the process that we have just described.

446
00:46:34,720 --> 00:46:38,720
 And then step two is that you need to assign bits to this branching now.

447
00:46:38,720 --> 00:46:49,720
 So for this article course, the kind of convention will be used is that the top branch is V1, bottom branch will be 0.

448
00:46:49,720 --> 00:46:54,720
 So it's 1 0, 1 0, 1 0, 1 0, 1 0, 1 0 and 1 0.

449
00:46:54,720 --> 00:46:56,720
 Okay, so that's step two.

450
00:46:56,720 --> 00:47:03,720
 And step three, in order to make it easier for you to trace, right, where the original symbol is,

451
00:47:03,720 --> 00:47:10,720
 it's always a good practice that you try to trace this symbol, for example this S7, before it's being merged,

452
00:47:10,720 --> 00:47:12,720
 okay, before it's being combined here.

453
00:47:12,720 --> 00:47:14,720
 So we just write down S7 here.

454
00:47:14,720 --> 00:47:18,720
 So this is combined, before it's combined, this is S7.

455
00:47:18,720 --> 00:47:24,720
 Okay, so we do the same as well, S6, we follow the path, just before it's being combined is here.

456
00:47:24,720 --> 00:47:26,720
 So we write down this S6 here.

457
00:47:26,720 --> 00:47:29,720
 So we repeat that for all the other symbols here.

458
00:47:29,720 --> 00:47:34,720
 Then you'll be able to write down the instance of all this symbol before it's being combined.

459
00:47:34,720 --> 00:47:39,720
 So this is to make it easier for you to track, okay, all this symbol.

460
00:47:39,720 --> 00:47:44,720
 So now we have finished this particular, you know, this step already.

461
00:47:44,720 --> 00:47:49,720
 And the next thing that we need to do now is that we need to build a Huffman-Coco tree.

462
00:47:49,720 --> 00:47:54,720
 So the Huffman-Coco tree, you start off with a probability of 1, okay.

463
00:47:54,720 --> 00:48:01,720
 And the left branch, as we have mentioned in the previous description, left branch is 0, right branch is 1.

464
00:48:01,720 --> 00:48:06,720
 So these zeros here correspond to this here, 0.43.

465
00:48:06,720 --> 00:48:08,720
 So we just write down 0.43.

466
00:48:08,720 --> 00:48:14,720
 And this 1 here corresponding to this branching of 1, okay, is 0.57.

467
00:48:14,720 --> 00:48:19,720
 Sorry, the resolution is a little bit low, but you can probably still make it up.

468
00:48:19,720 --> 00:48:22,720
 It's 0.57. So we write down 0.57 here.

469
00:48:22,720 --> 00:48:24,720
 So you have done the first branching.

470
00:48:24,720 --> 00:48:28,720
 So the second branching is actually coming from 0.57.

471
00:48:28,720 --> 00:48:31,720
 So therefore the second branching is from 0.57.

472
00:48:31,720 --> 00:48:34,720
 Left branch is 0, right branch is 1.

473
00:48:34,720 --> 00:48:37,720
 So the left branch of 0 corresponds to this branch here.

474
00:48:37,720 --> 00:48:42,720
 So it's 0.26S7. So you just write down 0.26S7.

475
00:48:42,720 --> 00:48:48,720
 And the right branch here is actually 0.31, okay, a bit of 1.

476
00:48:48,720 --> 00:48:50,720
 Okay, so 0.31 here.

477
00:48:50,720 --> 00:48:54,720
 Okay, so let's just do it one more time and then the rest you should be quite clear already.

478
00:48:54,720 --> 00:48:59,720
 So the next branching is actually 0.43, so which is coming from here.

479
00:48:59,720 --> 00:49:01,720
 Left branch is 0, right branch is 1.

480
00:49:02,720 --> 00:49:10,720
 So this branch of 0 here, okay, corresponds to this 0.19S6 here.

481
00:49:10,720 --> 00:49:13,720
 So it's 0.19S6.

482
00:49:13,720 --> 00:49:16,720
 Okay, the branch of 1 here corresponds to 0.24.

483
00:49:16,720 --> 00:49:18,720
 So you just write down 0.24.

484
00:49:18,720 --> 00:49:24,720
 So if you repeat the whole process, you will be able to build up your, sorry,

485
00:49:24,720 --> 00:49:32,720
 you will be able to build up your Huffman, you will be able to build up your Huffman code work set here.

486
00:49:32,720 --> 00:49:37,720
 Okay, and then next, right, finally, you will be able to build up this Huffman code tree here.

487
00:49:37,720 --> 00:49:41,720
 And then finally, if you want to write down the Huffman code work for each of the symbols,

488
00:49:41,720 --> 00:49:45,720
 for example, if we talk about S0, S0 is here.

489
00:49:45,720 --> 00:49:52,720
 So as we traverse from the root node through the leaf node, so you can see, right, it's through this branch here.

490
00:49:52,720 --> 00:49:57,720
 The bits that you collect along the way is 1, 1, 0, 0, 0.

491
00:49:57,720 --> 00:50:01,720
 So therefore this symbol S0 is 1, 1, 0, 0, 0.

492
00:50:01,720 --> 00:50:04,720
 Okay, and then let's take one more example.

493
00:50:04,720 --> 00:50:11,720
 Suppose S6, if you write down the Huffman code work for S6, you start from the root node, you traverse to the leaf node.

494
00:50:11,720 --> 00:50:14,720
 The bits you collect along the way is 0, 0.

495
00:50:14,720 --> 00:50:18,720
 So S6 here, the Huffman code work is 0, 0.

496
00:50:18,720 --> 00:50:30,720
 So therefore by repeating this process, you will be able to write down the Huffman code work set for this particular data distribution.

497
00:50:30,720 --> 00:50:36,720
 So that is actually the answer to part one.

498
00:50:36,720 --> 00:50:40,720
 So next let's continue to part two now.

499
00:50:40,720 --> 00:50:44,720
 So by the way, this is actually one of the past year exam questions.

500
00:50:44,720 --> 00:50:55,720
 So I also mentioned in last week's lecture that I'll try to put in some past year exam questions so that in the class we can go through some of the questions and answers together.

501
00:50:55,720 --> 00:51:00,720
 So you also have some idea about what kind of question will come out in the exam.

502
00:51:00,720 --> 00:51:07,720
 Also for those discussion questions, you have some idea how to respond to those questions.

503
00:51:07,720 --> 00:51:09,720
 Okay, so let's continue.

504
00:51:09,720 --> 00:51:17,720
 So for part two now, it says that a student originally used eight bits to represent each symbol in an uncompressed scheme.

505
00:51:17,720 --> 00:51:27,720
 So you're asked to find the compression ratio of the Huffman coding scheme developed in your part one, when compared with the original uncompressed scheme.

506
00:51:27,720 --> 00:51:37,720
 So in other words, you're asked to find what is the compression ratio for the Huffman code work set that you have just designed in part one.

507
00:51:38,720 --> 00:51:47,720
 Okay, I'll give you a bit of time to think about it and then we'll go through the answers together.

508
00:51:47,720 --> 00:51:58,720
 Right, so yeah, for those of you who have not obtained the answer for part one, I'll leave it here because you will need it to solve your part two.

509
00:52:17,720 --> 00:52:18,720
 Okay.

510
00:52:47,720 --> 00:52:48,720
 Okay.

511
00:53:17,720 --> 00:53:18,720
 Okay.

512
00:53:47,720 --> 00:53:48,720
 Okay.

513
00:54:17,720 --> 00:54:18,720
 Okay.

514
00:54:47,720 --> 00:54:48,720
 Okay.

515
00:55:17,720 --> 00:55:18,720
 Okay.

516
00:55:47,720 --> 00:56:15,720
 Okay.

517
00:56:15,720 --> 00:56:19,720
 Okay, so again, you probably have some time to think about it already.

518
00:56:19,720 --> 00:56:21,720
 So, okay, any suggestion?

519
00:56:21,720 --> 00:56:32,720
 How do you find the compression ratio for this particular part two?

520
00:56:32,720 --> 00:56:38,720
 Any suggestion?

521
00:56:38,720 --> 00:56:54,720
 So if you remember, just now in the earlier part of the lecture, we said that compression ratio is defined as the data storage requirement for an uncompressed data over the data storage requirement for compressed data.

522
00:56:54,720 --> 00:57:07,720
 So in this case here, we want to look at a typical, on average, if you are talking about a symbol or a letter, on average, how many bits is required to represent a symbol?

523
00:57:07,720 --> 00:57:16,720
 Right, if it's uncompressed scheme, uncompressed or the original scheme, how many bits do you need to represent a symbol?

524
00:57:16,720 --> 00:57:18,720
 According to the question is?

525
00:57:18,720 --> 00:57:20,720
 8 bits, right?

526
00:57:20,720 --> 00:57:27,720
 So therefore, the storage requirement to represent for the uncompressed scheme is actually 8 bits per symbol.

527
00:57:27,720 --> 00:57:36,720
 Okay, now the next question is that what is the average number of bits that is required to represent a symbol for this compressed scheme?

528
00:57:36,720 --> 00:57:47,720
 In other words, for this Huffman code work set that you have designed just now, what is the average number of bits that is required to represent a symbol?

529
00:57:48,720 --> 00:57:56,720
 So we have just now designed our Huffman code work set already.

530
00:57:56,720 --> 00:58:07,720
 What is the average number of bits that is required to represent this symbol using this Huffman code work set?

531
00:58:07,720 --> 00:58:10,720
 How do we do that?

532
00:58:10,720 --> 00:58:16,720
 Okay, so but the approach is that you need to find the expected number of bits per symbol, right?

533
00:58:16,720 --> 00:58:23,720
 So which would then be, how do you find the expected number of bits required to represent the symbol?

534
00:58:23,720 --> 00:58:39,720
 Is the probability multiplied with the number of bits, right, for the particular symbol, the probability of the symbol multiplied with the number of bits required to represent the symbol, and you sum up over all the symbols.

535
00:58:39,720 --> 00:58:46,720
 So in other words, if you look at it, okay, for this S2, the probability that you occur is 0.02.

536
00:58:46,720 --> 00:58:57,720
 And how many bits is required to represent this S0? For S0, the probability is actually 0.02.

537
00:58:57,720 --> 00:59:02,720
 So how many bits is required to represent this S0 based on what we have designed?

538
00:59:02,720 --> 00:59:05,720
 It's actually 5 bits.

539
00:59:05,720 --> 00:59:20,720
 So therefore, the probability now is actually 0.02 multiplied with these 5 bits, yeah, plus, okay, what is the probability, if you choose any symbol, what is the probability that it will be S1?

540
00:59:20,720 --> 00:59:27,720
 It will be 0.05. And if it's S1, what is the number of bits that is required to represent it?

541
00:59:27,720 --> 00:59:30,720
 It's actually 5 bits, huh?

542
00:59:30,720 --> 00:59:36,720
 Okay, so, and then if you choose a symbol randomly, what is the probability that it will be S2 ASB?

543
00:59:36,720 --> 00:59:42,720
 It's actually 0.08. And with 0.08, how many bits is required to represent it?

544
00:59:42,720 --> 00:59:44,720
 It's actually 4 bits, huh?

545
00:59:44,720 --> 00:59:54,720
 So therefore, you can see pretty much it's like this. You ask the question, if you choose a symbol randomly, what is the probability that it will belong to each of these particular symbols?

546
00:59:54,720 --> 01:00:00,720
 Okay, and then you need to multiply with the corresponding number of bits to represent the symbol and then add them up.

547
01:00:00,720 --> 01:00:03,720
 That's pretty much the answer.

548
01:00:03,720 --> 01:00:08,720
 Okay, so therefore, let's try to go through this part two.

549
01:00:08,720 --> 01:00:14,720
 So part two, you can see, first we need to calculate the average number of bits that is used to represent the symbol.

550
01:00:14,720 --> 01:00:23,720
 So as I mentioned, to do this calculation, we ask ourselves, if we choose a symbol randomly, what is the chances it will be a symbol S0?

551
01:00:23,720 --> 01:00:31,720
 Okay, so the probability is 0.02. And if it's S0, the number of bits that is required to represent it is 5 bits.

552
01:00:31,720 --> 01:00:36,720
 Okay, and afterwards, if you choose a symbol randomly, what is the chances it will be S1?

553
01:00:36,720 --> 01:00:43,720
 So it's actually 0.05. And if it's S1, then the number of bits that is required to represent it is 5 bits.

554
01:00:43,720 --> 01:00:46,720
 Okay, and then, yeah, and then so on and so forth.

555
01:00:47,720 --> 01:00:53,720
 Let me just do one more. If you choose a symbol randomly, what are the chances it will belong to S2?

556
01:00:53,720 --> 01:01:00,720
 So it's 0.08. So if it's 0.08, how many bits is required to represent it? It's 4 bits, so you multiply by 4.

557
01:01:00,720 --> 01:01:07,720
 So you continue for all the symbols, and afterwards, at the end, you'll see that it's 2.77 bits per symbol.

558
01:01:07,720 --> 01:01:14,720
 So on average, that means on average, you require 2.77 bits to represent a symbol.

559
01:01:14,720 --> 01:01:22,720
 Okay, so now, as explained earlier on, from this question, it still tells you that for uncompressed scheme,

560
01:01:22,720 --> 01:01:29,720
 you will be using 8 bits to represent a symbol. Now, if you use our Huffman code work set that we've designed,

561
01:01:29,720 --> 01:01:36,720
 the number of bits to represent, I don't know why, is 2.77 bits per symbol.

562
01:01:37,720 --> 01:01:44,720
 So therefore, the compression ratio is a storage requirement for uncompressed data over the compressed data.

563
01:01:44,720 --> 01:01:52,720
 So if you do some calculation, you'll see that it's 2.888. So this is the compression ratio for this scheme.

564
01:01:52,720 --> 01:02:02,720
 That means you're actually almost able to achieve a compression ratio of every 2.88 bits, you can compress it into 1 bit, yeah?

565
01:02:02,720 --> 01:02:08,720
 Okay, which is pretty good. So next, let's look at the last question.

566
01:02:13,720 --> 01:02:17,720
 So last question, it asks you to find the entropy of this data source,

567
01:02:17,720 --> 01:02:28,720
 and briefly discuss whether it's possible to design a Huffman code work set which can achieve a target of less than 2.5 bits per symbol.

568
01:02:28,720 --> 01:02:35,720
 Okay, right, so we have just learned about the entropy for a data set. Let's try to calculate using the formula.

569
01:02:35,720 --> 01:02:40,720
 You can do a bit of calculation, and afterwards, based on your result, try to answer the question,

570
01:02:40,720 --> 01:02:45,720
 can we ever achieve a target of less than 2.5 bits per symbol?

571
01:02:45,720 --> 01:02:50,720
 Again, I'll give you a bit of time to think about it, and we'll go through the answers together.

572
01:02:58,720 --> 01:03:00,720
 Okay.

573
01:03:28,720 --> 01:03:30,720
 Okay.

574
01:03:58,720 --> 01:04:00,720
 Okay.

575
01:04:28,720 --> 01:04:30,720
 Okay.

576
01:04:58,720 --> 01:05:00,720
 Okay.

577
01:05:28,720 --> 01:05:30,720
 Okay.

578
01:05:58,720 --> 01:06:00,720
 Okay.

579
01:06:15,720 --> 01:06:18,720
 Okay, so yeah, at least you have some time to think about it.

580
01:06:18,720 --> 01:06:24,720
 Any suggestion? How do we find the entropy of this data source?

581
01:06:25,720 --> 01:06:30,720
 Just apply a formula that we have learned earlier on, right?

582
01:06:30,720 --> 01:06:36,720
 Okay, so I think that part should be quite straightforward. Okay, so let's go ahead and do it.

583
01:06:45,720 --> 01:06:52,720
 Right, okay, so therefore the answer to that part is that we just applied this formula that we have mentioned earlier on.

584
01:06:52,720 --> 01:07:01,720
 So the probability Pi, log Pi with a base of 2, you sum up over all the possible symbols in this data set,

585
01:07:01,720 --> 01:07:03,720
 and you put a negative sign in front.

586
01:07:03,720 --> 01:07:09,720
 Okay, so therefore for this particular question, you can see the first term is actually 0.02.

587
01:07:09,720 --> 01:07:19,720
 So 0.02, log 0.02 to the base of 2, right, add up, second term is 0.05, log 0.05, and then you repeat for all the symbols.

588
01:07:19,720 --> 01:07:24,720
 Okay, you add all of them up, and finally you put a negative sign in front of it.

589
01:07:24,720 --> 01:07:35,720
 So if you're not so familiar with using the calculator to do it, yeah, probably it's a good time for you to familiarize yourself how to do some logarithm with base 2.

590
01:07:35,720 --> 01:07:41,720
 Or you can actually also use some simple mathematics to convert it into base 10 as well.

591
01:07:42,720 --> 01:07:49,720
 So anyway, either way, just do the calculation, you see that it's 2.733 bits per symbol.

592
01:07:49,720 --> 01:07:55,720
 So then with that particular answer, now we need to answer the last question, which is,

593
01:07:55,720 --> 01:08:03,720
 discuss whether it's possible to design a half-moon cobalt set that can achieve the target of less than 2.5 bits per symbol.

594
01:08:03,720 --> 01:08:05,720
 So is it possible to do that?

595
01:08:08,720 --> 01:08:09,720
 Is it possible?

596
01:08:09,720 --> 01:08:10,720
 No, huh?

597
01:08:10,720 --> 01:08:22,719
 So earlier on, if you remember what we discussed, right, so entropy actually is the smallest value that you need, right, in order to,

598
01:08:22,719 --> 01:08:33,719
 the smallest number of bits that you need to represent a symbol, right, so theoretically it's a theoretical lower bound, you cannot go anything below it.

599
01:08:33,720 --> 01:08:40,720
 You can use more bits to represent each symbol, but you cannot use less bit than this entropy.

600
01:08:40,720 --> 01:08:48,720
 So since entropy is already 2.73, you cannot get any value less than that, okay.

601
01:08:48,720 --> 01:08:54,720
 So therefore, the answer to that part is that as the target of 2.5 bits per symbol is less than the entropy,

602
01:08:54,720 --> 01:08:59,720
 it's not possible to design a half-moon cobalt set that can meet this target, right.

603
01:08:59,720 --> 01:09:03,720
 So that's the answer to this question.

604
01:09:03,720 --> 01:09:11,720
 So as I mentioned, the answer to this question, I will upload to the course site and then I'll release it by tomorrow.

605
01:09:11,720 --> 01:09:15,720
 So tomorrow on works, you can go and download it, okay.

606
01:09:15,720 --> 01:09:21,720
 So that's the answer to question one.

607
01:09:21,720 --> 01:09:25,720
 So let's move on to question two.

608
01:09:30,720 --> 01:09:38,720
 Right, okay, so today we start out with two pretty lengthy exercises, right, so let's try to do it,

609
01:09:38,720 --> 01:09:42,720
 because sometimes it's easier for you to learn through exercise rather than just reading.

610
01:09:42,720 --> 01:09:44,720
 So let's look at these questions here.

611
01:09:44,720 --> 01:09:51,720
 It says that in a compression scheme, eight symbols are used to represent different patterns in the information source, right.

612
01:09:51,720 --> 01:09:55,720
 The symbols are encoded using this particular code, codebook A.

613
01:09:55,720 --> 01:10:02,720
 So codebook A and the probability of occurrence is given in this table, whereas m and n are positive real value.

614
01:10:02,720 --> 01:10:09,720
 So you have this particular set that consists of eight symbols, s0 to s7, right.

615
01:10:09,720 --> 01:10:14,720
 So these are probability of occurrence, okay, m and n, we do not know their value yet, okay.

616
01:10:14,720 --> 01:10:17,720
 And we also have a particular codebook A.

617
01:10:17,720 --> 01:10:23,720
 So someone has come up with this particular codebook A, and this is the codebook A here, right.

618
01:10:23,720 --> 01:10:26,720
 So now let's look at the first question.

619
01:10:26,720 --> 01:10:33,720
 So the first question is that in the first scenario, if the average number of bits per symbol for the compression scheme

620
01:10:33,720 --> 01:10:39,720
 need to be less than 2.86, right, find the required condition for this value m and n, right.

621
01:10:39,720 --> 01:10:42,720
 So I think the question is quite straightforward, okay.

622
01:10:42,720 --> 01:10:47,720
 You have this particular, this set has eight symbols.

623
01:10:47,720 --> 01:10:51,720
 These are the probability of occurrence, and m and n are known, right.

624
01:10:51,720 --> 01:10:56,720
 This is, someone has already designed this codebook set here, right, we call it codebook A, right.

625
01:10:56,720 --> 01:11:04,720
 And you are told that for this codebook A, right, the number of, if the average number of bits per symbol

626
01:11:04,720 --> 01:11:11,720
 need to be less than this value, what should be the condition that this m and n need to satisfy?

627
01:11:11,720 --> 01:11:17,720
 Right, okay, so again, I'll give you a bit of time to think about it, and then we'll go through the answers together.

628
01:11:41,720 --> 01:11:46,720
 Okay.

629
01:12:11,720 --> 01:12:16,720
 Okay.

630
01:12:41,720 --> 01:12:46,720
 Okay.

631
01:13:11,720 --> 01:13:16,720
 Okay.

632
01:13:41,720 --> 01:13:46,720
 Okay.

633
01:14:11,720 --> 01:14:16,720
 Okay.

634
01:14:41,720 --> 01:14:46,720
 Okay.

635
01:15:11,720 --> 01:15:16,720
 Okay.

636
01:15:41,720 --> 01:15:46,720
 Okay.

637
01:15:46,720 --> 01:15:51,720
 Okay.

638
01:15:51,720 --> 01:15:56,720
 Okay.

639
01:15:56,720 --> 01:16:01,720
 Okay.

640
01:16:01,720 --> 01:16:06,720
 Okay.

641
01:16:06,720 --> 01:16:11,720
 Yeah, again, I hope that you have some time to think about this question.

642
01:16:11,720 --> 01:16:20,720
 Right, okay, so yeah, in order to find out the condition, so what do we need to do?

643
01:16:20,720 --> 01:16:23,720
 So we need to establish some inequality, right.

644
01:16:23,720 --> 01:16:36,720
 So first of all, how do we find out an expression, right, for the average number of bits that's required to represent a symbol for this scheme here?

645
01:16:36,720 --> 01:16:46,720
 How do you find out the average number of bits that's required to represent a symbol in terms of m and n here?

646
01:16:46,720 --> 01:16:48,720
 What do we have to do?

647
01:16:48,720 --> 01:16:56,720
 We take m multiplied, okay, so again, we use the same argument like the previous question.

648
01:16:56,720 --> 01:17:02,720
 If you choose a symbol randomly, what is the chances it will be s0?

649
01:17:02,720 --> 01:17:04,720
 It will be m, right?

650
01:17:04,720 --> 01:17:08,720
 m is m, how many bits do you require to represent?

651
01:17:08,720 --> 01:17:11,720
 Two bits, so it's m times 2.

652
01:17:11,720 --> 01:17:16,720
 Plus, if you choose a symbol randomly, what's the chances it's s1?

653
01:17:16,720 --> 01:17:18,720
 It's n, huh?

654
01:17:18,720 --> 01:17:21,720
 If it's n, how many bits do you require to represent it?

655
01:17:21,720 --> 01:17:24,720
 Three bits, so it's three times n, right?

656
01:17:24,720 --> 01:17:29,720
 Okay, and what is the, choose a symbol randomly, what's the chances it will be s2?

657
01:17:29,720 --> 01:17:35,720
 It will be 0.15, m is 0.15, for s2, how many bits do you require to represent it?

658
01:17:35,720 --> 01:17:39,720
 It's three bits, so you just actually do that, right?

659
01:17:39,720 --> 01:17:46,720
 You just take a probability, multiply with the number of bits, and you sum up over all the possible combination,

660
01:17:46,720 --> 01:17:52,720
 but that is the average number of bits that is required to represent a symbol.

661
01:17:52,720 --> 01:17:56,720
 Okay, so, and you know that the average number of bits that is required to represent a symbol

662
01:17:56,720 --> 01:18:03,720
 need to be less than 2.86, so therefore, you will have your first inequality.

663
01:18:09,720 --> 01:18:14,720
 Actually, I don't want to show so quickly.

664
01:18:14,720 --> 01:18:26,720
 Yeah, so you can see, right, m times 2 bits plus n times 3 bits plus 0.5 times 3 bits and so on and so forth,

665
01:18:26,720 --> 01:18:28,720
 you add up over all of them.

666
01:18:28,720 --> 01:18:35,720
 If you have done that at the end, okay, it will be this particular expression.

667
01:18:35,720 --> 01:18:38,720
 It will be this particular expression.

668
01:18:38,720 --> 01:18:41,720
 And we know that this is an average number of bits for a symbol,

669
01:18:41,720 --> 01:18:45,720
 and from the question you are told that this number needs to be less than 2.86,

670
01:18:45,720 --> 01:18:49,720
 so this number needs to be less than 2.86, right?

671
01:18:49,720 --> 01:18:55,720
 If you do some simplification, you can see then 2m plus 3m needs to be less than 1.41.

672
01:18:55,720 --> 01:18:58,720
 So that is the first inequality.

673
01:18:58,720 --> 01:19:04,720
 So are there any other conditions that you can impose for this question, for m and n?

674
01:19:04,720 --> 01:19:06,720
 Any other condition?

675
01:19:08,720 --> 01:19:12,720
 Yeah, so the sum of all the probability must be equal to 1, right?

676
01:19:12,720 --> 01:19:19,720
 So therefore, what it means is that if you sum up all this probability, it should be equal to 1.

677
01:19:19,720 --> 01:19:24,720
 Then afterwards, you can obtain your second condition.

678
01:19:24,720 --> 01:19:30,720
 So with that in mind, knowing that sum of probability should be equal to 1, okay?

679
01:19:30,720 --> 01:19:36,720
 So we just add up all this probability here.

680
01:19:36,720 --> 01:19:39,720
 You can see it's equal to 1. We simplify a little bit.

681
01:19:39,720 --> 01:19:46,720
 We see that m plus n is 0.54, or you can write n is equal to 0.54 minus n.

682
01:19:46,720 --> 01:19:49,720
 So you have one inequality and one equality.

683
01:19:49,720 --> 01:19:53,720
 So afterwards, you substitute this 2 into 1.

684
01:19:53,720 --> 01:19:56,720
 I think most of you should be familiar with this.

685
01:19:56,720 --> 01:20:03,720
 So if you simplify a little bit, you can see that you can derive the condition m needs to be greater than 0.21.

686
01:20:03,720 --> 01:20:13,720
 And then likewise, if you simplify a little bit further, you put this condition into, put this thing into here,

687
01:20:13,720 --> 01:20:19,720
 simplify a little bit, you'll be able to see n will be between 0 and 0.33.

688
01:20:19,720 --> 01:20:29,720
 So this is how you can find the condition that m and n need to satisfy for this question.

689
01:20:29,720 --> 01:20:31,720
 So let's continue.

690
01:20:31,720 --> 01:20:40,720
 So next it says that in the second scenario, in the second case now, if the value of m is 0.3, n is 0.24,

691
01:20:40,720 --> 01:20:46,720
 discuss the effectiveness of code work A in encoding the symbol to achieve compression.

692
01:20:46,720 --> 01:20:54,720
 And then afterwards, they ask you to compare code work A and Huffman coding and discuss whether code work A is optimal

693
01:20:54,720 --> 01:20:57,720
 in terms of performing the compression.

694
01:20:57,720 --> 01:21:00,720
 So let's look at the first part first.

695
01:21:00,720 --> 01:21:12,720
 They say if the value m is 0.3, n is 0.24, discuss whether code work A is effective in performing the compression.

696
01:21:12,720 --> 01:21:21,720
 And if you have a quick look, if m is 0.3, this is 0.24, and this code work A is, this is the pattern here.

697
01:21:21,720 --> 01:21:30,720
 So based on the principles of entropy encoding, does it seems reasonable?

698
01:21:30,720 --> 01:21:38,720
 So if this is 0.3, this is 0.2, you can see this is actually in decreasing probability.

699
01:21:38,720 --> 01:21:46,720
 And also if you observe the number of bits, right, for those symbols with larger probability, the number of bit is actually less.

700
01:21:46,720 --> 01:21:51,720
 Those with the smallest probability, the number of bit is larger.

701
01:21:51,720 --> 01:21:57,720
 So therefore, from the principles of entropy encoding or variable length coding, it seems reasonable.

702
01:21:57,720 --> 01:22:00,720
 It seems reasonable.

703
01:22:00,720 --> 01:22:04,720
 It's consistent with our understanding of how variable length coding should work.

704
01:22:04,720 --> 01:22:10,720
 But now, okay, the next one is they ask you to compare code book A with Huffman coding.

705
01:22:10,720 --> 01:22:15,720
 And then afterwards decide whether this code book A is optimal, whether it's the best.

706
01:22:15,720 --> 01:22:19,720
 So this will require you to do some calculation.

707
01:22:19,720 --> 01:22:23,720
 So I'll give you some time to think about it or to do your calculation.

708
01:22:23,720 --> 01:22:26,720
 And then we'll go through this last part together.

709
01:22:53,720 --> 01:22:56,720
 So this is Huffman.

710
01:22:56,720 --> 01:22:59,720
 So this is Huffman.

711
01:22:59,720 --> 01:23:02,720
 So this is Huffman.

712
01:23:02,720 --> 01:23:05,720
 So this is Huffman.

713
01:23:05,720 --> 01:23:08,720
 So this is Huffman.

714
01:23:08,720 --> 01:23:11,720
 So this is Huffman.

715
01:23:11,720 --> 01:23:14,720
 So this is Huffman.

716
01:23:14,720 --> 01:23:17,720
 So this is Huffman.

717
01:23:17,720 --> 01:23:20,720
 So this is Huffman.

718
01:23:20,720 --> 01:23:23,720
 So this is Huffman.

719
01:23:23,720 --> 01:23:26,720
 So this is Huffman.

720
01:23:26,720 --> 01:23:29,720
 So this is Huffman.

721
01:23:29,720 --> 01:23:32,720
 So this is Huffman.

722
01:23:32,720 --> 01:23:35,720
 So this is Huffman.

723
01:23:35,720 --> 01:23:38,720
 So this is Huffman.

724
01:23:38,720 --> 01:23:41,720
 So this is Huffman.

725
01:23:41,720 --> 01:23:44,720
 So this is Huffman.

726
01:23:44,720 --> 01:23:47,720
 So this is Huffman.

727
01:23:47,720 --> 01:23:50,720
 So this is Huffman.

728
01:23:50,720 --> 01:23:53,720
 So this is Huffman.

729
01:23:53,720 --> 01:23:56,720
 So this is Huffman.

730
01:23:56,720 --> 01:23:59,720
 So this is Huffman.

731
01:23:59,720 --> 01:24:02,720
 So this is Huffman.

732
01:24:02,720 --> 01:24:05,720
 So this is Huffman.

733
01:24:05,720 --> 01:24:08,720
 So this is Huffman.

734
01:24:08,720 --> 01:24:11,720
 So this is Huffman.

735
01:24:11,720 --> 01:24:14,720
 So this is Huffman.

736
01:24:14,720 --> 01:24:17,720
 So this is Huffman.

737
01:24:17,720 --> 01:24:20,720
 So this is Huffman.

738
01:24:20,720 --> 01:24:23,720
 So this is Huffman.

739
01:24:23,720 --> 01:24:26,720
 So this is Huffman.

740
01:24:26,720 --> 01:24:29,720
 So this is Huffman.

741
01:24:29,720 --> 01:24:32,720
 So this is Huffman.

742
01:24:32,720 --> 01:24:35,720
 So this is Huffman.

743
01:24:35,720 --> 01:24:38,720
 So this is Huffman.

744
01:24:38,720 --> 01:24:41,720
 So this is Huffman.

745
01:24:41,720 --> 01:24:44,720
 So this is Huffman.

746
01:24:44,720 --> 01:24:47,720
 So this is Huffman.

747
01:24:47,720 --> 01:24:50,720
 So this is Huffman.

748
01:24:50,720 --> 01:24:53,720
 So this is Huffman.

749
01:24:53,720 --> 01:24:56,720
 So this is Huffman.

750
01:24:56,720 --> 01:24:59,720
 So this is Huffman.

751
01:24:59,720 --> 01:25:02,720
 So this is Huffman.

752
01:25:02,720 --> 01:25:05,720
 So this is Huffman.

753
01:25:05,720 --> 01:25:08,720
 So this is Huffman.

754
01:25:08,720 --> 01:25:11,720
 Yes.

755
01:25:11,720 --> 01:25:14,720
 Yes.

756
01:25:14,720 --> 01:25:17,720
 Yes.

757
01:25:17,720 --> 01:25:20,720
 Yes.

758
01:25:20,720 --> 01:25:23,720
 Yes.

759
01:25:23,720 --> 01:25:26,720
 Can we answer the question a bit later?

760
01:25:26,720 --> 01:25:29,720
 Sorry?

761
01:25:29,720 --> 01:25:32,720
 Yeah, yeah.

762
01:25:32,720 --> 01:25:35,720
 Yeah, yeah.

763
01:25:35,720 --> 01:25:38,720
 Okay.

764
01:25:38,720 --> 01:25:41,720
 Yes, you see this.

765
01:25:59,720 --> 01:26:02,720
 Okay, so any suggestion

766
01:26:02,720 --> 01:26:05,720
 on how we can do this part B?

767
01:26:05,720 --> 01:26:08,720
 You want to compare this

768
01:26:08,720 --> 01:26:11,720
 codebook A and the Huffman coding,

769
01:26:11,720 --> 01:26:14,720
 whether this codebook A

770
01:26:14,720 --> 01:26:17,720
 is optimal or not, what should we do?

771
01:26:17,720 --> 01:26:20,720
 So first of all, we need to...

772
01:26:20,720 --> 01:26:23,720
 Sorry?

773
01:26:23,720 --> 01:26:26,720
 Yeah, okay, so we need to go through the process

774
01:26:26,720 --> 01:26:29,720
 of building the Huffman codebook set

775
01:26:29,720 --> 01:26:32,720
 and afterwards, suppose once you have done that,

776
01:26:32,720 --> 01:26:35,720
 once you have done that, what should we do?

777
01:26:35,720 --> 01:26:38,720
 What should we do?

778
01:26:38,720 --> 01:26:41,720
 Calculate the average number of bits per symbol

779
01:26:41,720 --> 01:26:44,720
 that's required for Huffman codebook set, right?

780
01:26:44,720 --> 01:26:47,720
 And afterwards you compare which one is larger, right?

781
01:26:47,720 --> 01:26:50,720
 So if, for example, your Huffman

782
01:26:50,720 --> 01:26:53,720
 codebook set can represent the symbol

783
01:26:53,720 --> 01:26:56,720
 with a smaller number of bits per symbol,

784
01:26:56,720 --> 01:26:59,720
 then that means your codebook A is not optimal already.

785
01:26:59,720 --> 01:27:02,720
 So that's pretty much the plan.

786
01:27:02,720 --> 01:27:05,720
 So that's what we need to do.

787
01:27:05,720 --> 01:27:08,720
 So in order to do that, we need to go through the process.

788
01:27:08,720 --> 01:27:11,720
 So this process I will not

789
01:27:11,720 --> 01:27:14,720
 go through too much in detail.

790
01:27:14,720 --> 01:27:17,720
 But anyway, from the earlier part,

791
01:27:17,720 --> 01:27:20,720
 we say that in order to see

792
01:27:20,720 --> 01:27:23,720
 whether, for example, codebook A, whether it's reasonable

793
01:27:23,720 --> 01:27:26,720
 from the entropy coding perspective,

794
01:27:26,720 --> 01:27:29,720
 so we can see that from the probability of occurrence,

795
01:27:29,720 --> 01:27:32,720
 larger probability corresponds to shorter codebook.

796
01:27:32,720 --> 01:27:35,720
 This is the idea of entropy coding.

797
01:27:35,720 --> 01:27:38,720
 So early on, you will see this is point three and this is point two,

798
01:27:38,720 --> 01:27:41,720
 just like we mentioned here.

799
01:27:41,720 --> 01:27:44,720
 Larger probability is shorter codebook, smaller probability larger codebook.

800
01:27:44,720 --> 01:27:47,720
 So therefore, this is actually consistent

801
01:27:47,720 --> 01:27:50,720
 with the idea of entropy coding.

802
01:27:50,720 --> 01:27:53,720
 So now, however, to check whether this codebook A is optimal,

803
01:27:53,720 --> 01:27:56,720
 we need to actually derive this Huffman codebook set.

804
01:27:56,720 --> 01:27:59,720
 So we go through this particular motion,

805
01:27:59,720 --> 01:28:02,720
 this process that I mentioned to you before.

806
01:28:02,720 --> 01:28:05,720
 So we try to rank this particular symbol

807
01:28:05,720 --> 01:28:08,720
 in decreasing order of probability.

808
01:28:08,720 --> 01:28:11,720
 And then for the two smallest probability, we add them up.

809
01:28:11,720 --> 01:28:14,720
 And then we move it to the next column

810
01:28:14,720 --> 01:28:17,720
 by rearranging the probability.

811
01:28:17,720 --> 01:28:20,720
 So this is point seven, it should be here.

812
01:28:20,720 --> 01:28:23,720
 The rest just transfer over.

813
01:28:23,720 --> 01:28:26,720
 So we repeat that particular process,

814
01:28:26,720 --> 01:28:29,720
 we'll be able to draw these particular structures here.

815
01:28:29,720 --> 01:28:32,720
 So that's step one.

816
01:28:32,720 --> 01:28:35,720
 Step two is that we assign the bits, top branch is one, bottom branch is zero.

817
01:28:35,720 --> 01:28:38,720
 One zero, one zero, one zero. So that's step two.

818
01:28:38,720 --> 01:28:41,720
 Step three is that we transfer this particular symbol

819
01:28:41,720 --> 01:28:44,720
 just before it's being merged for easy tracking.

820
01:28:44,720 --> 01:28:47,720
 So this is zero, this is S1.

821
01:28:47,720 --> 01:28:50,720
 So for easy tracking when you want to draw the Huffman code tree.

822
01:28:50,720 --> 01:28:53,720
 So suppose we go through this particular process.

823
01:28:53,720 --> 01:28:56,720
 Let's continue this one, we can skip for one moment.

824
01:28:56,720 --> 01:28:59,720
 So based on this particular structure,

825
01:28:59,720 --> 01:29:02,720
 then we can build our Huffman code tree.

826
01:29:02,720 --> 01:29:05,720
 So let's assume that you can go home and try it out yourself.

827
01:29:05,720 --> 01:29:08,720
 You will see that this is the Huffman code tree

828
01:29:08,720 --> 01:29:11,720
 that you'll be able to construct.

829
01:29:11,720 --> 01:29:14,720
 And then finally, if you want to find out what is the Huffman code work for each of the symbols,

830
01:29:14,720 --> 01:29:17,720
 for example for S0 which is somewhere here,

831
01:29:17,720 --> 01:29:20,720
 the code work should be 1, 1.

832
01:29:20,720 --> 01:29:23,720
 If you take one example which is S7,

833
01:29:23,720 --> 01:29:26,720
 which is here, as you can see from this root node,

834
01:29:26,720 --> 01:29:29,720
 is 1, 0, 0, 1, 0.

835
01:29:29,720 --> 01:29:32,720
 So S7 is 1, 0, 0, 1, 0 here.

836
01:29:32,720 --> 01:29:35,720
 So you'll be able to write down all the code works

837
01:29:35,720 --> 01:29:38,720
 that you want to construct.

838
01:29:39,720 --> 01:29:42,720
 So you'll be able to write down all the code work

839
01:29:42,720 --> 01:29:45,720
 for this particular Huffman coding here.

840
01:29:45,720 --> 01:29:50,720
 So once you have built up this particular Huffman code work set here,

841
01:29:50,720 --> 01:29:54,720
 you can go through the process that we have mentioned a couple of times already.

842
01:29:54,720 --> 01:29:59,720
 We can calculate the average number of bits per symbol for this Huffman code work set.

843
01:29:59,720 --> 01:30:02,720
 So if you do that, you can see,

844
01:30:02,720 --> 01:30:07,720
 so the probability that it will be this symbol S0 is 0.3,

845
01:30:08,720 --> 01:30:10,720
 and it's 2 bits.

846
01:30:10,720 --> 01:30:13,720
 If it's the probability it will be S1 is 0.24 from the question,

847
01:30:13,720 --> 01:30:15,720
 and it's 2 bits.

848
01:30:15,720 --> 01:30:17,720
 So if you do that, you do the calculation,

849
01:30:17,720 --> 01:30:20,720
 you'll see that it's 2.66 bits per symbol.

850
01:30:20,720 --> 01:30:25,720
 This is if you use the Huffman code work set that you just derived.

851
01:30:25,720 --> 01:30:29,720
 So on the other hand, if you use just now the code book A,

852
01:30:29,720 --> 01:30:32,720
 so this is the code book A,

853
01:30:32,720 --> 01:30:35,720
 so the code book A, the number of bits per symbol that we have,

854
01:30:35,720 --> 01:30:39,720
 if you choose this particular symbol S0,

855
01:30:39,720 --> 01:30:43,720
 it's actually 0.3, and it's 2 bits.

856
01:30:43,720 --> 01:30:46,720
 If you choose that the symbol randomly is S1,

857
01:30:46,720 --> 01:30:50,720
 the probability is actually 0.24 from the question,

858
01:30:50,720 --> 01:30:54,720
 and it's 0.24, and the number of bits that is required is 3 bits.

859
01:30:54,720 --> 01:30:59,720
 So if you choose the symbol S2, the probability is 0.15,

860
01:30:59,720 --> 01:31:03,720
 and for code book A, it's actually 3 bits.

861
01:31:03,720 --> 01:31:05,720
 So therefore, for code book A,

862
01:31:05,720 --> 01:31:07,720
 if you calculate the average number of bits per symbol,

863
01:31:07,720 --> 01:31:10,720
 if you go through the process and you do the calculation,

864
01:31:10,720 --> 01:31:14,720
 you'll see it's 2.77 bits per symbol.

865
01:31:14,720 --> 01:31:18,720
 So on the other hand, if you go through the process,

866
01:31:18,720 --> 01:31:22,720
 you build your Huffman code work set,

867
01:31:22,720 --> 01:31:28,720
 if you do the calculation, you'll see you only require 2.66 bits per symbol.

868
01:31:28,720 --> 01:31:32,720
 Therefore, using your Huffman code work set is actually more effective

869
01:31:32,720 --> 01:31:34,720
 and more efficient.

870
01:31:34,720 --> 01:31:37,720
 So therefore, from that particular perspective,

871
01:31:37,720 --> 01:31:44,720
 we can say that this code book A is not optimal in terms of performing the compression,

872
01:31:44,720 --> 01:31:49,720
 because at least the Huffman code work set that you've designed

873
01:31:49,720 --> 01:31:55,720
 is more effective in terms of compression as compared to code book A.

874
01:31:55,720 --> 01:32:03,720
 So therefore, you can see that code book A requires 2.77 bits per symbol,

875
01:32:03,720 --> 01:32:07,720
 which is greater than 2.66 bits per symbol by Huffman coding.

876
01:32:07,720 --> 01:32:11,720
 So therefore, we can conclude that code book A is actually not optimal.

877
01:32:11,720 --> 01:32:15,720
 Even though at first glance it looks like it's actually good,

878
01:32:15,720 --> 01:32:19,720
 because it's consistent with your entropy coding principle,

879
01:32:19,720 --> 01:32:22,720
 but if you do some closer examination,

880
01:32:22,720 --> 01:32:26,720
 if you compare to Huffman coding, which is usually the benchmark,

881
01:32:26,720 --> 01:32:30,720
 you can see that your Huffman coding is actually more efficient.

882
01:32:30,720 --> 01:32:34,720
 So therefore, your code book A is not the optimal choice.

883
01:32:34,720 --> 01:32:38,720
 So this is the answer to this exercise.

884
01:32:38,720 --> 01:32:43,720
 So as I mentioned, both exercises I'll upload to the course site after tomorrow,

885
01:32:43,720 --> 01:32:45,720
 so you can go and download it.

886
01:32:45,720 --> 01:32:49,720
 So we spent quite a fair bit of time going through these two exercises,

887
01:32:49,720 --> 01:32:53,720
 and hopefully you have a better understanding about this entropy and coding

888
01:32:53,720 --> 01:32:55,720
 and Huffman coding process already.

889
01:32:55,720 --> 01:32:57,720
 We'll take a short break.

890
01:32:57,720 --> 01:32:59,720
 Now it's 8.02.

891
01:32:59,720 --> 01:33:05,720
 So probably let's come back at 8.20.

892
01:33:19,720 --> 01:33:21,720
 Ah.

893
01:33:49,720 --> 01:33:51,720
 So you're not saying that the probability is not M?

894
01:33:51,720 --> 01:33:53,720
 No, no.

895
01:33:53,720 --> 01:33:57,720
 There's no need to say that the probability is not M.

896
01:33:57,720 --> 01:34:00,720
 Just that I wanted to make it easier for students.

897
01:34:00,720 --> 01:34:05,720
 In the exam, I intentionally increased the probability of the answer.

898
01:34:05,720 --> 01:34:08,720
 But I don't necessarily say that the probability is not M.

899
01:34:08,720 --> 01:34:10,720
 Okay, okay.

900
01:34:10,720 --> 01:34:12,720
 That's it.

901
01:34:12,720 --> 01:34:16,720
 Could you show me the X is one in first scenario?

902
01:34:16,720 --> 01:34:32,720
 One limitation is 2M plus 3M is less than 1.41.

903
01:34:32,720 --> 01:34:36,720
 How is the second limitation?

904
01:34:36,720 --> 01:34:40,720
 Okay, because this is a probability,

905
01:34:40,720 --> 01:34:44,720
 so all the probability add up must be equal to 1.

906
01:34:44,720 --> 01:34:46,720
 Okay, I got it.

907
01:34:46,720 --> 01:34:48,720
 Thank you.

908
01:34:50,720 --> 01:34:52,720
 So this is the first one.

909
01:34:52,720 --> 01:34:56,720
 If this is a big or small table,

910
01:34:56,720 --> 01:34:58,720
 should we keep a N?

911
01:34:58,720 --> 01:35:02,720
 Actually, this question is the same as what the student said earlier.

912
01:35:02,720 --> 01:35:06,720
 In fact, it doesn't say that the probability is not M.

913
01:35:06,720 --> 01:35:10,720
 Just that the other symbols,

914
01:35:10,720 --> 01:35:12,720
 the probability is all 8 to 5.

915
01:35:12,720 --> 01:35:14,720
 These two are actually M.

916
01:35:14,720 --> 01:35:18,720
 So actually, N can be a big or small table.

917
01:35:26,720 --> 01:35:30,720
 This is basically the Hafen rule.

918
01:35:30,720 --> 01:35:34,720
 Hafen rule itself is a rule.

919
01:35:34,720 --> 01:35:36,720
 These are the processes we analyzed earlier.

920
01:35:36,720 --> 01:35:40,720
 In fact, people have already analyzed it.

921
01:35:40,720 --> 01:35:42,720
 This is a rule.

922
01:35:42,720 --> 01:35:46,720
 So it can't be more than, or more than 1M?

923
01:35:46,720 --> 01:35:50,720
 Actually, in the Hafen rule,

924
01:35:50,720 --> 01:35:54,720
 it is possible that there is a condition of 0 and 1.

925
01:35:54,720 --> 01:35:58,720
 But this question, because of its probability distribution,

926
01:35:58,720 --> 01:36:02,720
 the probability distribution causes this Hafen rule,

927
01:36:02,720 --> 01:36:08,720
 which is the smallest, the biggest opportunity for the symbol to be a 0.

928
01:36:08,720 --> 01:36:10,720
 What I want to say is,

929
01:36:10,720 --> 01:36:12,720
 if your question is,

930
01:36:12,720 --> 01:36:16,720
 is it possible that there are some symbols in the Hafen rule,

931
01:36:16,720 --> 01:36:18,720
 just one 0 or something?

932
01:36:18,720 --> 01:36:20,720
 It is possible.

933
01:36:20,720 --> 01:36:22,720
 But this question, because of its probability distribution,

934
01:36:22,720 --> 01:36:28,720
 the shortest Hafen rule is not a 0 or something.

935
01:36:28,720 --> 01:36:34,720
 But this 0 cannot be a 0?

936
01:36:34,720 --> 01:36:36,720
 This is a probability distribution.

937
01:36:36,720 --> 01:36:38,720
 Because according to its probability distribution,

938
01:36:38,720 --> 01:36:40,720
 and the description process,

939
01:36:40,720 --> 01:36:43,720
 it is a systemized,

940
01:36:43,720 --> 01:36:46,720
 a small, half-or-half rule.

941
01:36:46,720 --> 01:36:49,720
 This is a standard rule.

942
01:36:49,720 --> 01:36:53,720
 So this is a 1?

943
01:36:53,720 --> 01:36:57,720
 The above 1 is a type of 1.

944
01:36:57,720 --> 01:37:01,720
 This is the question.

945
01:37:01,720 --> 01:37:04,720
 This question is calculated by the length of the smallest average

946
01:37:04,720 --> 01:37:08,720
 and the length of the code.

947
01:37:08,720 --> 01:37:10,720
 Can it reach 2.5G?

948
01:37:10,720 --> 01:37:12,720
 No, it cannot.

949
01:37:12,720 --> 01:37:14,720
 This is the second question.

950
01:37:14,720 --> 01:37:16,720
 It is the last question.

951
01:37:16,720 --> 01:37:19,720
 It is called entropy.

952
01:37:19,720 --> 01:37:25,720
 Entropy is the smallest theory.

953
01:37:25,720 --> 01:37:27,720
 But in many cases,

954
01:37:27,720 --> 01:37:31,720
 you cannot find the lower bound.

955
01:37:31,720 --> 01:37:34,720
 So generally, we will not...

956
01:37:34,720 --> 01:37:36,720
 If you say you want to force it,

957
01:37:36,720 --> 01:37:39,720
 you will know immediately by using entropy.

958
01:37:39,720 --> 01:37:41,720
 No, it is not possible.

959
01:37:41,720 --> 01:37:47,720
 Because entropy is the smallest of the theories.

960
01:37:47,720 --> 01:37:51,720
 So if you want to be smaller than this value,

961
01:37:51,720 --> 01:37:54,720
 entropy can tell you.

962
01:37:54,720 --> 01:37:57,720
 I know if it can be smaller than this.

963
01:37:57,720 --> 01:38:00,720
 But if you want to be higher than entropy,

964
01:38:00,720 --> 01:38:06,720
 there are different codes and methods.

965
01:38:06,720 --> 01:38:11,720
 The half-code is the smallest.

966
01:38:11,720 --> 01:38:15,720
 It is not necessarily the same as entropy.

967
01:38:15,720 --> 01:38:17,720
 Sometimes it will be higher than entropy.

968
01:38:17,720 --> 01:38:20,720
 But I read in the CSDN,

969
01:38:20,720 --> 01:38:24,720
 it can say that this question is 00 and 10.

970
01:38:24,720 --> 01:38:26,720
 But I can say that...

971
01:38:26,720 --> 01:38:28,720
 Because it is different from the latter,

972
01:38:28,720 --> 01:38:30,720
 I can use 0 and 1 to express it.

973
01:38:30,720 --> 01:38:33,720
 Because the design of the half-code

974
01:38:33,720 --> 01:38:39,720
 is not just about the average number of bits,

975
01:38:39,720 --> 01:38:41,720
 or symbol.

976
01:38:41,720 --> 01:38:43,720
 That is not the only thing.

977
01:38:43,720 --> 01:38:47,720
 So we can consider uniquely decodable.

978
01:38:47,720 --> 01:38:49,720
 When you have a bitstream,

979
01:38:49,720 --> 01:38:52,720
 it must have no half-code.

980
01:38:52,720 --> 01:38:59,720
 It must have only one way to decode it.

981
01:38:59,720 --> 01:39:02,720
 If you do not know the process,

982
01:39:02,720 --> 01:39:04,720
 when you decode it,

983
01:39:04,720 --> 01:39:06,720
 sometimes it will have a half-code.

984
01:39:06,720 --> 01:39:10,720
 You have to cut it into different symbols.

985
01:39:10,720 --> 01:39:13,720
 It will have a mess.

986
01:39:13,720 --> 01:39:15,720
 When I press and hold the button,

987
01:39:15,720 --> 01:39:16,720
 it may change.

988
01:39:16,720 --> 01:39:19,720
 It will not know where to cut.

989
01:39:19,720 --> 01:39:21,720
 If you use half-code,

990
01:39:21,720 --> 01:39:25,720
 it has a concept called uniquely decodable.

991
01:39:25,720 --> 01:39:30,720
 You have to use this method to cut it into symbols.

992
01:39:30,720 --> 01:39:34,720
 So it must be using 00 and 10 to express the difference between 0 and 10.

993
01:39:34,720 --> 01:39:37,720
 This is the probability.

994
01:39:37,720 --> 01:39:40,720
 If it is not half-code,

995
01:39:40,720 --> 01:39:43,720
 or if I use other codes to express it,

996
01:39:43,720 --> 01:39:46,720
 it can cut it into shorter symbols.

997
01:39:46,720 --> 01:39:51,720
 Half-mode pudding can actually be calculated as the shortest.

998
01:39:51,720 --> 01:39:55,720
 You mean it is the shortest.

999
01:39:55,720 --> 01:39:57,720
 It is not shorter than it.

1000
01:39:57,720 --> 01:39:58,720
 I understand. Thank you.

1001
01:39:58,720 --> 01:40:00,720
 This is the method.

1002
01:40:00,720 --> 01:40:01,720
 OK.

1003
01:40:02,720 --> 01:40:05,720
 I want to ask about the official website.

1004
01:40:05,720 --> 01:40:08,720
 I saw that you have a new project.

1005
01:40:08,720 --> 01:40:12,720
 But a student said that she is not doing it.

1006
01:40:12,720 --> 01:40:15,720
 She wants to change to another project.

1007
01:40:15,720 --> 01:40:17,720
 So you have one?

1008
01:40:17,720 --> 01:40:19,720
 I see that there is a problem with the system.

1009
01:40:19,720 --> 01:40:20,720
 There is one now.

1010
01:40:20,720 --> 01:40:22,720
 It is because a student has launched it.

1011
01:40:22,720 --> 01:40:24,720
 I will show you the link later.

1012
01:40:24,720 --> 01:40:26,720
 You can show me.

1013
01:40:26,720 --> 01:40:27,720
 I have an account.

1014
01:40:27,720 --> 01:40:28,720
 OK.

1015
01:40:28,720 --> 01:40:33,720
 I want to ask about this.

1016
01:40:33,720 --> 01:40:37,720
 It should not be three people to express this.

1017
01:40:37,720 --> 01:40:38,720
 It is two people.

1018
01:40:38,720 --> 01:40:42,720
 It means that N is smaller than M.

1019
01:40:42,720 --> 01:40:46,720
 But I saw that you wrote N is smaller than 0.33.

1020
01:40:46,720 --> 01:40:48,720
 It is bigger than 0.

1021
01:40:48,720 --> 01:40:50,720
 It should not be smaller than 0.27.

1022
01:40:50,720 --> 01:40:52,720
 It should be smaller than half of this.

1023
01:40:52,720 --> 01:40:53,720
 OK.

1024
01:40:56,720 --> 01:41:05,720
 Because this A is not the ideal code.

1025
01:41:05,720 --> 01:41:08,720
 It is designed by someone.

1026
01:41:08,720 --> 01:41:11,720
 It is the ideal code.

1027
01:41:12,720 --> 01:41:18,720
 So this is only for the Pokemon code.

1028
01:41:18,720 --> 01:41:23,720
 Only higher code will be smaller.

1029
01:41:23,720 --> 01:41:24,720
 Yes.

1030
01:41:24,720 --> 01:41:33,720
 The other idea is that the code A is designed by someone.

1031
01:41:33,720 --> 01:41:38,720
 So it does not follow the code.

1032
01:41:38,720 --> 01:41:47,720
 This is the code that is designed by someone.

1033
01:41:47,720 --> 01:41:48,720
 Thank you.

1034
01:41:50,720 --> 01:41:54,720
 I want to ask if you can wear a calculator when you take the exam?

1035
01:41:54,720 --> 01:41:55,720
 What calculator?

1036
01:41:55,720 --> 01:41:56,720
 When you take the exam.

1037
01:41:56,720 --> 01:41:58,720
 What should I wear?

1038
01:41:58,720 --> 01:41:59,720
 Calculator.

1039
01:41:59,720 --> 01:42:02,720
 Calculator.

1040
01:42:02,720 --> 01:42:03,720
 Calculator.

1041
01:42:03,720 --> 01:42:10,720
 I just draw this when I take the exam.

1042
01:42:10,720 --> 01:42:12,720
 Or I have to draw this?

1043
01:42:12,720 --> 01:42:18,720
 Generally, it is better to draw all the steps.

1044
01:42:18,720 --> 01:42:19,720
 Because it is like this.

1045
01:42:19,720 --> 01:42:23,720
 Because it is like this when we change.

1046
01:42:23,720 --> 01:42:25,720
 We change it like this.

1047
01:42:25,720 --> 01:42:28,720
 Because we have to change the words in a short time.

1048
01:42:28,720 --> 01:42:30,720
 So we usually look at the answer.

1049
01:42:30,720 --> 01:42:32,720
 If the answer is the same as the words,

1050
01:42:32,720 --> 01:42:34,720
 we will not understand it.

1051
01:42:34,720 --> 01:42:38,720
 Because it is not possible to say that the process is wrong and the answer is wrong.

1052
01:42:38,720 --> 01:42:44,720
 So if the answer is wrong, we look at the artist and give the artist a point.

1053
01:42:44,720 --> 01:42:47,720
 The problem is that if the answer is wrong,

1054
01:42:47,720 --> 01:42:50,720
 I will look back when the answer is wrong.

1055
01:42:50,720 --> 01:42:53,720
 If I find that there is no step,

1056
01:42:53,720 --> 01:42:54,720
 you just write this to me.

1057
01:42:54,720 --> 01:42:56,720
 Then I will get a point.

1058
01:42:57,720 --> 01:42:58,720
 Understand?

1059
01:42:59,720 --> 01:43:07,720
 Our code is calculated from the smallest probability.

1060
01:43:07,720 --> 01:43:11,720
 I saw that there was a probability on the Internet.

1061
01:43:11,720 --> 01:43:14,720
 I think it is a big and small number.

1062
01:43:14,720 --> 01:43:17,720
 In fact, the code is fixed.

1063
01:43:17,720 --> 01:43:21,720
 Some people have different methods.

1064
01:43:21,720 --> 01:43:23,720
 We use different methods.

1065
01:43:23,720 --> 01:43:28,720
 Although I started to talk about how to generate this code.

1066
01:43:28,720 --> 01:43:31,720
 Some people use a slightly different method.

1067
01:43:31,720 --> 01:43:35,720
 We use a standard method.

1068
01:43:35,720 --> 01:43:38,720
 The most common one.

1069
01:43:38,720 --> 01:43:40,720
 Because it is a most common method.

1070
01:43:40,720 --> 01:43:43,720
 So if you want to simplify it,

1071
01:43:43,720 --> 01:43:46,720
 there are several methods that you can find.

1072
01:43:46,720 --> 01:43:49,720
 Although it may not be the fastest,

1073
01:43:49,720 --> 01:43:51,720
 it is the most standard.

1074
01:43:52,720 --> 01:43:54,720
 I think we should follow this method.

1075
01:43:54,720 --> 01:43:56,720
 I suggest you use this method.

1076
01:43:56,720 --> 01:43:59,720
 Because the time difference is not too big.

1077
01:44:22,720 --> 01:44:24,720
 So it is 4 plus 4.

1078
01:44:24,720 --> 01:44:26,720
 That is why it is big here.

1079
01:44:26,720 --> 01:44:29,720
 But most of the questions are given in the following.

1080
01:44:29,720 --> 01:44:35,720
 Therefore, the examples given in the exercises are the more common ones.

1081
01:44:35,720 --> 01:44:37,720
 This is just an example.

1082
01:44:37,720 --> 01:44:40,720
 This example is by occurrence.

1083
01:44:40,720 --> 01:44:44,720
 But most of the time it is given in the following.

1084
01:44:44,720 --> 01:44:46,720
 Then we will talk about the step.

1085
01:46:22,720 --> 01:46:24,720
 This is the step.

1086
01:46:24,720 --> 01:46:26,720
 This is the step.

1087
01:46:26,720 --> 01:46:28,720
 This is the step.

1088
01:46:28,720 --> 01:46:30,720
 This is the step.

1089
01:46:30,720 --> 01:46:32,720
 This is the step.

1090
01:46:32,720 --> 01:46:34,720
 This is the step.

1091
01:46:34,720 --> 01:46:36,720
 This is the step.

1092
01:46:36,720 --> 01:46:38,720
 This is the step.

1093
01:46:38,720 --> 01:46:40,720
 This is the step.

1094
01:46:40,720 --> 01:46:42,720
 This is the step.

1095
01:46:42,720 --> 01:46:44,720
 This is the step.

1096
01:46:44,720 --> 01:46:46,720
 This is the step.

1097
01:46:46,720 --> 01:46:48,720
 This is the step.

1098
01:46:49,720 --> 01:46:51,720
 This is the step.

1099
01:46:51,720 --> 01:46:53,720
 This is the step.

1100
01:46:53,720 --> 01:46:55,720
 This is the step.

1101
01:46:55,720 --> 01:46:57,720
 This is the step.

1102
01:46:57,720 --> 01:46:59,720
 This is the step.

1103
01:46:59,720 --> 01:47:01,720
 This is the step.

1104
01:47:01,720 --> 01:47:03,720
 This is the step.

1105
01:47:03,720 --> 01:47:05,720
 This is the step.

1106
01:47:05,720 --> 01:47:07,720
 This is the step.

1107
01:47:07,720 --> 01:47:09,720
 This is the step.

1108
01:47:09,720 --> 01:47:11,720
 This is the step.

1109
01:47:11,720 --> 01:47:13,720
 This is the step.

1110
01:47:13,720 --> 01:47:15,720
 This is the step.

1111
01:47:15,720 --> 01:47:17,720
 This is the step.

1112
01:47:17,720 --> 01:47:19,720
 This is the step.

1113
01:47:19,720 --> 01:47:21,720
 This is the step.

1114
01:47:21,720 --> 01:47:23,720
 This is the step.

1115
01:47:23,720 --> 01:47:25,720
 This is the step.

1116
01:47:25,720 --> 01:47:27,720
 This is the step.

1117
01:47:27,720 --> 01:47:29,720
 This is the step.

1118
01:47:29,720 --> 01:47:31,720
 This is the step.

1119
01:47:31,720 --> 01:47:33,720
 This is the step.

1120
01:47:33,720 --> 01:47:35,720
 This is the step.

1121
01:47:35,720 --> 01:47:37,720
 This is the step.

1122
01:47:37,720 --> 01:47:39,720
 This is the step.

1123
01:47:39,720 --> 01:47:41,720
 This is the step.

1124
01:47:41,720 --> 01:47:43,720
 This is the step.

1125
01:47:43,720 --> 01:47:45,720
 This is the step.

1126
01:47:45,720 --> 01:47:47,720
 This is the step.

1127
01:47:47,720 --> 01:47:49,720
 This is the step.

1128
01:47:49,720 --> 01:47:51,720
 This is the step.

1129
01:47:51,720 --> 01:47:53,720
 This is the step.

1130
01:47:53,720 --> 01:47:55,720
 This is the step.

1131
01:47:55,720 --> 01:47:57,720
 This is the step.

1132
01:47:57,720 --> 01:47:59,720
 This is the step.

1133
01:47:59,720 --> 01:48:01,720
 This is the step.

1134
01:48:01,720 --> 01:48:03,720
 This is the step.

1135
01:48:03,720 --> 01:48:05,720
 This is the step.

1136
01:48:05,720 --> 01:48:07,720
 This is the step.

1137
01:48:07,720 --> 01:48:09,720
 This is the step.

1138
01:48:09,720 --> 01:48:11,720
 This is the step.

1139
01:48:11,720 --> 01:48:13,720
 This is the step.

1140
01:48:13,720 --> 01:48:15,720
 This is the step.

1141
01:48:15,720 --> 01:48:17,720
 This is the step.

1142
01:48:17,720 --> 01:48:19,720
 This is the step.

1143
01:48:19,720 --> 01:48:21,720
 This is the step.

1144
01:48:21,720 --> 01:48:23,720
 This is the step.

1145
01:48:23,720 --> 01:48:25,720
 This is the step.

1146
01:48:25,720 --> 01:48:27,720
 This is the step.

1147
01:48:27,720 --> 01:48:29,720
 This is the step.

1148
01:48:29,720 --> 01:48:31,720
 This is the step.

1149
01:48:31,720 --> 01:48:33,720
 This is the step.

1150
01:48:33,720 --> 01:48:35,720
 This is the step.

1151
01:48:35,720 --> 01:48:37,720
 This is the step.

1152
01:48:37,720 --> 01:48:39,720
 This is the step.

1153
01:48:39,720 --> 01:48:41,720
 This is the step.

1154
01:48:41,720 --> 01:48:43,720
 This is the step.

1155
01:48:43,720 --> 01:48:45,720
 This is the step.

1156
01:48:45,720 --> 01:48:47,720
 This is the step.

1157
01:48:47,720 --> 01:48:49,720
 This is the step.

1158
01:48:49,720 --> 01:48:51,720
 This is the step.

1159
01:48:51,720 --> 01:48:53,720
 This is the step.

1160
01:48:53,720 --> 01:48:55,720
 This is the step.

1161
01:48:55,720 --> 01:48:57,720
 This is the step.

1162
01:48:57,720 --> 01:48:59,720
 This is the step.

1163
01:48:59,720 --> 01:49:01,720
 This is the step.

1164
01:49:01,720 --> 01:49:03,720
 This is the step.

1165
01:49:03,720 --> 01:49:05,720
 This is the step.

1166
01:49:05,720 --> 01:49:07,720
 This is the step.

1167
01:49:07,720 --> 01:49:09,720
 This is the step.

1168
01:49:09,720 --> 01:49:11,720
 This is the step.

1169
01:49:11,720 --> 01:49:13,720
 This is the step.

1170
01:49:13,720 --> 01:49:15,720
 This is the step.

1171
01:49:15,720 --> 01:49:17,720
 This is the step.

1172
01:49:17,720 --> 01:49:19,720
 This is the step.

1173
01:49:19,720 --> 01:49:21,720
 This is the step.

1174
01:49:21,720 --> 01:49:23,720
 This is the step.

1175
01:49:23,720 --> 01:49:25,720
 This is the step.

1176
01:49:25,720 --> 01:49:27,720
 This is the step.

1177
01:49:27,720 --> 01:49:29,720
 This is the step.

1178
01:49:29,720 --> 01:49:31,720
 This is the step.

1179
01:49:31,720 --> 01:49:33,720
 This is the step.

1180
01:49:33,720 --> 01:49:35,720
 This is the step.

1181
01:49:35,720 --> 01:49:37,720
 This is the step.

1182
01:49:37,720 --> 01:49:41,720
 If I draw the numbers and know that they are related,

1183
01:49:41,720 --> 01:49:45,720
 then in this case, I need to consider the size of M0.15.

1184
01:49:45,720 --> 01:49:47,720
 Or this situation will not appear?

1185
01:49:49,720 --> 01:49:51,720
 If I understand your question,

1186
01:49:51,720 --> 01:50:05,060
 you mean if the

1187
01:50:05,060 --> 01:50:07,060
 If the

1188
01:50:07,060 --> 01:50:09,060
 The question just now

1189
01:50:09,060 --> 01:50:11,060
 is not the one that provides the number 1111.

1190
01:50:11,060 --> 01:50:13,060
 The reason is that

1191
01:50:13,060 --> 01:50:15,060
 if I cross a number of steps,

1192
01:50:15,060 --> 01:50:17,060
 I will get the number of steps.

1193
01:50:17,060 --> 01:50:19,060
 Do you know that question?

1194
01:50:19,060 --> 01:50:21,060
 Generally speaking,

1195
01:50:21,060 --> 01:50:23,060
 we can do it in one direction.

1196
01:50:23,060 --> 01:50:25,060
 I know.

1197
01:50:25,060 --> 01:50:27,060
 I don't think it will appear in the question.

1198
01:50:27,060 --> 01:50:29,060
 Generally speaking,

1199
01:50:29,060 --> 01:50:31,060
 it will not appear.

1200
01:50:31,060 --> 01:50:33,060
 I heard that student said

1201
01:50:33,060 --> 01:50:35,060
 that it is reasonable.

1202
01:50:35,060 --> 01:50:37,060
 I am sorry.

1203
01:51:03,060 --> 01:51:31,060
 Okay.

1204
01:51:31,060 --> 01:51:33,060
 Welcome back.

1205
01:51:33,060 --> 01:51:35,060
 Let's continue on with the

1206
01:51:35,060 --> 01:51:37,060
 image or video compression basics.

1207
01:51:37,060 --> 01:51:39,060
 Why do we want to perform

1208
01:51:39,060 --> 01:51:41,060
 image or video compression?

1209
01:51:41,060 --> 01:51:43,060
 Earlier on, I already mentioned

1210
01:51:43,060 --> 01:51:45,060
 for media types such as

1211
01:51:45,060 --> 01:51:47,060
 image and video,

1212
01:51:47,060 --> 01:51:49,060
 the data storage requirement is very large.

1213
01:51:49,060 --> 01:51:51,060
 If you do not compress it,

1214
01:51:51,060 --> 01:51:53,060
 then it is very hard for us

1215
01:51:53,060 --> 01:51:55,060
 to either store or transmit it.

1216
01:51:55,060 --> 01:51:57,060
 That is the key motivation.

1217
01:51:57,060 --> 01:51:59,060
 Why do we want to do that?

1218
01:51:59,060 --> 01:52:01,060
 That is the key motivation.

1219
01:52:01,060 --> 01:52:03,060
 Why do we want to perform the compression?

1220
01:52:03,060 --> 01:52:05,060
 You can see that

1221
01:52:05,060 --> 01:52:07,060
 image and video compression is necessary

1222
01:52:07,060 --> 01:52:09,060
 for two reasons.

1223
01:52:09,060 --> 01:52:11,060
 One is to reduce the storage requirement.

1224
01:52:11,060 --> 01:52:13,060
 The other is that if you want to

1225
01:52:13,060 --> 01:52:15,060
 transmit over the network,

1226
01:52:15,060 --> 01:52:17,060
 then you can reduce the bitrate

1227
01:52:17,060 --> 01:52:19,060
 or the bandwidth requirement.

1228
01:52:19,060 --> 01:52:21,060
 The next question is that

1229
01:52:21,060 --> 01:52:23,060
 we know that there is a motivation

1230
01:52:23,060 --> 01:52:25,060
 why we need to perform the compression.

1231
01:52:25,060 --> 01:52:27,060
 But what is so special

1232
01:52:27,060 --> 01:52:29,060
 about this media type

1233
01:52:29,060 --> 01:52:31,060
 that allows us to perform the compression?

1234
01:52:31,060 --> 01:52:33,060
 The next question is

1235
01:52:33,060 --> 01:52:35,060
 why is it possible to perform the compression?

1236
01:52:35,060 --> 01:52:37,060
 The reason why

1237
01:52:37,060 --> 01:52:39,060
 for image and video

1238
01:52:39,060 --> 01:52:41,060
 it is possible for us to compress it

1239
01:52:41,060 --> 01:52:43,060
 is because it contains some redundancy.

1240
01:52:43,060 --> 01:52:45,060
 What is the meaning of

1241
01:52:45,060 --> 01:52:47,060
 this word redundancy?

1242
01:52:47,060 --> 01:52:49,060
 This word redundancy

1243
01:52:49,060 --> 01:52:51,060
 means that it is the extra

1244
01:52:51,060 --> 01:52:53,060
 unnecessary information

1245
01:52:53,060 --> 01:52:55,060
 that is captured in the

1246
01:52:55,060 --> 01:52:57,060
 image and video domain.

1247
01:52:57,060 --> 01:52:59,060
 There are two types of redundancy

1248
01:52:59,060 --> 01:53:01,060
 in terms of image and video.

1249
01:53:01,060 --> 01:53:03,060
 The first one is known as

1250
01:53:03,060 --> 01:53:05,060
 the statistical redundancy.

1251
01:53:05,060 --> 01:53:07,060
 It is the extra unnecessary

1252
01:53:07,060 --> 01:53:09,060
 information from the

1253
01:53:09,060 --> 01:53:11,060
 statistical viewpoint.

1254
01:53:11,060 --> 01:53:13,060
 The first type is the spatial redundancy.

1255
01:53:13,060 --> 01:53:15,060
 This word spatial,

1256
01:53:15,060 --> 01:53:17,060
 what is the word spatial?

1257
01:53:17,060 --> 01:53:19,060
 Spatial means it is a space-based redundancy.

1258
01:53:19,060 --> 01:53:21,060
 Space-based redundancy

1259
01:53:21,060 --> 01:53:23,060
 means that it is a redundancy

1260
01:53:23,060 --> 01:53:25,060
 that exists in an image.

1261
01:53:25,060 --> 01:53:27,060
 Anyway, this slide will just give

1262
01:53:27,060 --> 01:53:29,060
 a quick overview.

1263
01:53:29,060 --> 01:53:31,060
 Afterwards, for the next few slides, we are going to

1264
01:53:31,060 --> 01:53:33,060
 explain a little bit more

1265
01:53:33,060 --> 01:53:35,060
 in detail. Therefore,

1266
01:53:35,060 --> 01:53:37,060
 spatial redundancy refers to

1267
01:53:37,060 --> 01:53:39,060
 the redundancy that exists in a

1268
01:53:39,060 --> 01:53:41,060
 single image or single

1269
01:53:41,060 --> 01:53:43,060
 frame.

1270
01:53:43,060 --> 01:53:45,060
 The next word is the temporal redundancy.

1271
01:53:45,060 --> 01:53:47,060
 Temporal come from

1272
01:53:47,060 --> 01:53:49,060
 the base term time.

1273
01:53:49,060 --> 01:53:51,060
 It is a time-based redundancy.

1274
01:53:51,060 --> 01:53:53,060
 When you think about time-based redundancy,

1275
01:53:53,060 --> 01:53:55,060
 what comes to your mind right away are

1276
01:53:55,060 --> 01:53:57,060
 things like audio or

1277
01:53:57,060 --> 01:53:59,060
 video. For video,

1278
01:53:59,060 --> 01:54:01,060
 it is nothing but a sequence of frames.

1279
01:54:01,060 --> 01:54:03,060
 Across

1280
01:54:03,060 --> 01:54:05,060
 two different frames, usually because

1281
01:54:05,060 --> 01:54:07,060
 for the motion to appear to be

1282
01:54:07,060 --> 01:54:09,060
 smooth, each frame must be

1283
01:54:09,060 --> 01:54:11,060
 very similar to the next frame.

1284
01:54:11,060 --> 01:54:13,060
 What it means is that the movement

1285
01:54:13,060 --> 01:54:15,060
 of, for example, an object in one

1286
01:54:15,060 --> 01:54:17,060
 frame and the next frame, they are very

1287
01:54:17,060 --> 01:54:19,060
 similar. If these two

1288
01:54:19,060 --> 01:54:21,060
 frames are very similar, that means there are lots of

1289
01:54:21,060 --> 01:54:23,060
 extra,

1290
01:54:23,060 --> 01:54:25,060
 they are very similar, that means there are lots of

1291
01:54:25,060 --> 01:54:27,060
 extra unnecessary information

1292
01:54:27,060 --> 01:54:29,060
 that exists across a frame.

1293
01:54:29,060 --> 01:54:31,060
 And across a frame, because

1294
01:54:31,060 --> 01:54:33,060
 this frame is in the

1295
01:54:33,060 --> 01:54:35,060
 time axis, so that's why

1296
01:54:35,060 --> 01:54:37,060
 it's also known as a temporal

1297
01:54:37,060 --> 01:54:39,060
 redundancy. So,

1298
01:54:39,060 --> 01:54:41,060
 this is the redundancy that exists in

1299
01:54:41,060 --> 01:54:43,060
 the video. Okay, the next

1300
01:54:43,060 --> 01:54:45,060
 one is the coding redundancy.

1301
01:54:45,060 --> 01:54:47,060
 Coding redundancy is the extra

1302
01:54:47,060 --> 01:54:49,060
 unnecessary information that exists

1303
01:54:49,060 --> 01:54:51,060
 in terms of how you

1304
01:54:51,060 --> 01:54:53,060
 represent the information. Like, for

1305
01:54:53,060 --> 01:54:55,060
 example, early on we compare

1306
01:54:55,060 --> 01:54:57,060
 uncompressed versus

1307
01:54:57,060 --> 01:54:59,060
 Huffman coding. So, it's the types of

1308
01:54:59,060 --> 01:55:01,060
 coding redundancy.

1309
01:55:01,060 --> 01:55:03,060
 If you don't perform things like Huffman

1310
01:55:03,060 --> 01:55:05,060
 coding. So, the next types

1311
01:55:05,060 --> 01:55:07,060
 of redundancy that we have is called

1312
01:55:07,060 --> 01:55:09,060
 psychovisual redundancy.

1313
01:55:09,060 --> 01:55:11,060
 So, psychovisual is how

1314
01:55:11,060 --> 01:55:13,060
 human visual system perceives

1315
01:55:13,060 --> 01:55:15,060
 an object. Okay? So, specifically,

1316
01:55:15,060 --> 01:55:17,060
 there are two types. One is the frequency masking.

1317
01:55:17,060 --> 01:55:19,060
 So, frequency masking

1318
01:55:19,060 --> 01:55:21,060
 actually means that, you know, how our

1319
01:55:21,060 --> 01:55:23,060
 eye perceives to different frequency

1320
01:55:23,060 --> 01:55:25,060
 components. So, our eyes

1321
01:55:25,060 --> 01:55:27,060
 are more sensitive to

1322
01:55:27,060 --> 01:55:29,060
 any changes or noise

1323
01:55:29,060 --> 01:55:31,060
 in smooth regions. Okay?

1324
01:55:31,060 --> 01:55:33,060
 And it's, you know, less sensitive

1325
01:55:33,060 --> 01:55:35,060
 to any distortion in the

1326
01:55:35,060 --> 01:55:37,060
 texture region. So, one very

1327
01:55:37,060 --> 01:55:39,060
 simple example is, you know,

1328
01:55:39,060 --> 01:55:41,060
 if you look at, for example, the shirt I'm

1329
01:55:41,060 --> 01:55:43,060
 wearing here is quite

1330
01:55:43,060 --> 01:55:45,060
 smooth. So, you can see there's this

1331
01:55:45,060 --> 01:55:47,060
 patch here. So, this is

1332
01:55:47,060 --> 01:55:49,060
 when, this patch here, that means

1333
01:55:49,060 --> 01:55:51,060
 actually it's low frequency region.

1334
01:55:51,060 --> 01:55:53,060
 So, if there's particular spots

1335
01:55:53,060 --> 01:55:55,060
 here, most of you will be able

1336
01:55:55,060 --> 01:55:57,060
 to spot it quite readily.

1337
01:55:57,060 --> 01:55:59,060
 So, this is because our eyes are more

1338
01:55:59,060 --> 01:56:01,060
 sensitive to any noise or

1339
01:56:01,060 --> 01:56:03,060
 distortion in low frequency

1340
01:56:03,060 --> 01:56:05,060
 region. Okay? Anyway, later

1341
01:56:05,060 --> 01:56:07,060
 on we'll explain a little bit more.

1342
01:56:07,060 --> 01:56:09,060
 This color masking is actually

1343
01:56:09,060 --> 01:56:11,060
 based on what we discussed last time.

1344
01:56:11,060 --> 01:56:13,060
 Our eyes are more sensitive to the

1345
01:56:13,060 --> 01:56:15,060
 brightness or the luminance component

1346
01:56:15,060 --> 01:56:17,060
 and less sensitive to

1347
01:56:17,060 --> 01:56:19,060
 the color or the

1348
01:56:19,060 --> 01:56:21,060
 chrominance component. So, we can also

1349
01:56:21,060 --> 01:56:23,060
 use that to help us to perform

1350
01:56:23,060 --> 01:56:25,060
 image and video compression.

1351
01:56:25,060 --> 01:56:27,060
 So, because there are lots of

1352
01:56:27,060 --> 01:56:29,060
 redundancy across this

1353
01:56:29,060 --> 01:56:31,060
 statistical and psycho-visual

1354
01:56:31,060 --> 01:56:33,060
 redundancy, that's why it allows us to

1355
01:56:33,060 --> 01:56:35,060
 perform decompression.

1356
01:56:35,060 --> 01:56:37,060
 Right, okay. So, next

1357
01:56:37,060 --> 01:56:39,060
 we are going to explain a little bit more

1358
01:56:39,060 --> 01:56:41,060
 about each of these

1359
01:56:41,060 --> 01:56:43,060
 redundancy a bit more in detail.

1360
01:56:43,060 --> 01:56:45,060
 So, the first one is a spatial redundancy.

1361
01:56:45,060 --> 01:56:47,060
 So, spatial redundancy

1362
01:56:47,060 --> 01:56:49,060
 refers to the statistical correlation.

1363
01:56:49,060 --> 01:56:51,060
 So, correlation means

1364
01:56:51,060 --> 01:56:53,060
 similarity or relatedness

1365
01:56:53,060 --> 01:56:55,060
 between

1366
01:56:55,060 --> 01:56:57,060
 pixels within an image

1367
01:56:57,060 --> 01:56:59,060
 or more specifically, within a small

1368
01:56:59,060 --> 01:57:01,060
 image neighborhood

1369
01:57:01,060 --> 01:57:03,060
 here. So,

1370
01:57:03,060 --> 01:57:05,060
 spatial redundancy, pretty much the high-level

1371
01:57:05,060 --> 01:57:07,060
 concept is like this. So, if you

1372
01:57:07,060 --> 01:57:09,060
 look at the image, okay, and specifically

1373
01:57:09,060 --> 01:57:11,060
 if you look at a small

1374
01:57:11,060 --> 01:57:13,060
 kind of image

1375
01:57:13,060 --> 01:57:15,060
 region, the pixel values

1376
01:57:15,060 --> 01:57:17,060
 tends to be quite similar

1377
01:57:17,060 --> 01:57:19,060
 to each other. For most

1378
01:57:19,060 --> 01:57:21,060
 natural image, right, we are

1379
01:57:21,060 --> 01:57:23,060
 talking about most natural image,

1380
01:57:23,060 --> 01:57:25,060
 if you look at a small pixel

1381
01:57:25,060 --> 01:57:27,060
 neighborhood or image neighborhood,

1382
01:57:27,060 --> 01:57:29,060
 the pixel values tends to be

1383
01:57:29,060 --> 01:57:31,060
 very similar to each other.

1384
01:57:31,060 --> 01:57:33,060
 So, if the pixel values tends to be

1385
01:57:33,060 --> 01:57:35,060
 very similar to each other,

1386
01:57:35,060 --> 01:57:37,060
 that means there is lots of extra

1387
01:57:37,060 --> 01:57:39,060
 unnecessary information

1388
01:57:39,060 --> 01:57:41,060
 that exists in a small

1389
01:57:41,060 --> 01:57:43,060
 image region. Because

1390
01:57:43,060 --> 01:57:45,060
 instead of representing each pixel

1391
01:57:45,060 --> 01:57:47,060
 in this small image region,

1392
01:57:47,060 --> 01:57:49,060
 you actually just need

1393
01:57:49,060 --> 01:57:51,060
 to have one single pixel, it can

1394
01:57:51,060 --> 01:57:53,060
 more or less represent this region already.

1395
01:57:53,060 --> 01:57:55,060
 So, if

1396
01:57:55,060 --> 01:57:57,060
 you are using every single pixel

1397
01:57:57,060 --> 01:57:59,060
 to represent this image region,

1398
01:57:59,060 --> 01:58:01,060
 that means you exist lots

1399
01:58:01,060 --> 01:58:03,060
 of redundant information

1400
01:58:03,060 --> 01:58:05,060
 already. So, this kind of redundancy

1401
01:58:05,060 --> 01:58:07,060
 is known as the

1402
01:58:07,060 --> 01:58:09,060
 spatial redundancy.

1403
01:58:09,060 --> 01:58:11,060
 So, for example, if you

1404
01:58:11,060 --> 01:58:13,060
 look at this image here, if you

1405
01:58:13,060 --> 01:58:15,060
 look at a small image region, for example

1406
01:58:15,060 --> 01:58:17,060
 here, you can see within this small

1407
01:58:17,060 --> 01:58:19,060
 image region or patch,

1408
01:58:19,060 --> 01:58:21,060
 the pixel values are very similar to

1409
01:58:21,060 --> 01:58:23,060
 each other. So, if the pixel values

1410
01:58:23,060 --> 01:58:25,060
 are very similar to each other,

1411
01:58:25,060 --> 01:58:27,060
 that means there is lots of redundant information

1412
01:58:27,060 --> 01:58:29,060
 there. But there is no need actually

1413
01:58:29,060 --> 01:58:31,060
 for you to represent each

1414
01:58:31,060 --> 01:58:33,060
 pixel.

1415
01:58:33,060 --> 01:58:35,060
 So, this type of redundancy

1416
01:58:35,060 --> 01:58:37,060
 is also known as the intra-frame redundancy.

1417
01:58:37,060 --> 01:58:39,060
 Intra means

1418
01:58:39,060 --> 01:58:41,060
 routine. So, it's the redundancy

1419
01:58:41,060 --> 01:58:43,060
 that exists

1420
01:58:43,060 --> 01:58:45,060
 within one single frame.

1421
01:58:45,060 --> 01:58:47,060
 So, therefore, spatial

1422
01:58:47,060 --> 01:58:49,060
 redundancy is actually

1423
01:58:49,060 --> 01:58:51,060
 also known as the intra-frame redundancy.

1424
01:58:51,060 --> 01:58:53,060
 Redundancy that exists across

1425
01:58:53,060 --> 01:58:55,060
 a single image or frame.

1426
01:58:55,060 --> 01:58:57,060
 So, the

1427
01:58:57,060 --> 01:58:59,060
 next one is the temporal redundancy.

1428
01:58:59,060 --> 01:59:01,060
 So, temporal redundancy, as I mentioned,

1429
01:59:01,060 --> 01:59:03,060
 I actually explained to you earlier.

1430
01:59:03,060 --> 01:59:05,060
 So, let's look at the definition.

1431
01:59:05,060 --> 01:59:07,060
 So, temporal redundancy refers to the

1432
01:59:07,060 --> 01:59:09,060
 statistical correlation.

1433
01:59:09,060 --> 01:59:11,060
 So, this word correlation means

1434
01:59:11,060 --> 01:59:13,060
 similarity or relatedness.

1435
01:59:13,060 --> 01:59:15,060
 Between pixels from successive

1436
01:59:15,060 --> 01:59:17,060
 frames in a video sequence.

1437
01:59:17,060 --> 01:59:19,060
 So, if you look at this particular example

1438
01:59:19,060 --> 01:59:21,060
 here, this is different frames in

1439
01:59:21,060 --> 01:59:23,060
 a video, just as we mentioned.

1440
01:59:23,060 --> 01:59:25,060
 In a video,

1441
01:59:25,060 --> 01:59:27,060
 if you have many different frames, and for

1442
01:59:27,060 --> 01:59:29,060
 this particular video to appear to be

1443
01:59:29,060 --> 01:59:31,060
 smooth, each of the frames are

1444
01:59:31,060 --> 01:59:33,060
 very similar to each other.

1445
01:59:33,060 --> 01:59:35,060
 So, if you, for example, look at a small

1446
01:59:35,060 --> 01:59:37,060
 image

1447
01:59:37,060 --> 01:59:39,060
 regions here,

1448
01:59:39,060 --> 01:59:41,060
 you can see this current

1449
01:59:41,060 --> 01:59:43,060
 frame and the

1450
01:59:43,060 --> 01:59:45,060
 next frame, they'll be very similar.

1451
01:59:45,060 --> 01:59:47,060
 So, if these regions are very similar,

1452
01:59:47,060 --> 01:59:49,060
 that means there are lots of

1453
01:59:49,060 --> 01:59:51,060
 extra unnecessary

1454
01:59:51,060 --> 01:59:53,060
 information, or what we call redundancy.

1455
01:59:53,060 --> 01:59:55,060
 So, this kind of redundancy

1456
01:59:55,060 --> 01:59:57,060
 exists across

1457
01:59:57,060 --> 01:59:59,060
 the frame axis or the time axis.

1458
01:59:59,060 --> 02:00:01,060
 So, that's why it's called

1459
02:00:01,060 --> 02:00:03,060
 temporal redundancy.

1460
02:00:03,060 --> 02:00:05,060
 So, temporal redundancy is also

1461
02:00:05,060 --> 02:00:07,060
 known as inter-frame redundancy.

1462
02:00:07,060 --> 02:00:09,060
 So, you can guess more or less why that's

1463
02:00:09,060 --> 02:00:11,060
 the case, because it's the redundant

1464
02:00:11,060 --> 02:00:13,060
 information that exists across

1465
02:00:13,060 --> 02:00:15,060
 different frames, specifically

1466
02:00:15,060 --> 02:00:17,060
 for video.

1467
02:00:17,060 --> 02:00:19,060
 Right, so, next one is

1468
02:00:19,060 --> 02:00:21,060
 the coding redundancy.

1469
02:00:21,060 --> 02:00:23,060
 So, coding redundancy actually is

1470
02:00:23,060 --> 02:00:25,060
 how you represent the

1471
02:00:25,060 --> 02:00:27,060
 information, just like in our

1472
02:00:27,060 --> 02:00:29,060
 previous part when we talked about entropy

1473
02:00:29,060 --> 02:00:31,060
 coding. You can already

1474
02:00:31,060 --> 02:00:33,060
 see just by analyzing

1475
02:00:33,060 --> 02:00:35,060
 the data a little bit more

1476
02:00:35,060 --> 02:00:37,060
 carefully, and then try to

1477
02:00:37,060 --> 02:00:39,060
 assign shorter

1478
02:00:39,060 --> 02:00:41,060
 code work to more probable

1479
02:00:41,060 --> 02:00:43,060
 symbol and longer code work to less

1480
02:00:43,060 --> 02:00:45,060
 probable symbol, you can already

1481
02:00:45,060 --> 02:00:47,060
 reduce the number of bits

1482
02:00:47,060 --> 02:00:49,060
 to represent the symbol. So,

1483
02:00:49,060 --> 02:00:51,060
 this is a type of coding

1484
02:00:51,060 --> 02:00:53,060
 redundancy. So, that means if you don't

1485
02:00:53,060 --> 02:00:55,060
 exploit those properties, then there's

1486
02:00:55,060 --> 02:00:57,060
 lots of redundant information

1487
02:00:57,060 --> 02:00:59,060
 in your, like, fixed length

1488
02:00:59,060 --> 02:01:01,060
 representation already.

1489
02:01:01,060 --> 02:01:03,060
 Okay, so coding redundancy

1490
02:01:03,060 --> 02:01:05,060
 focus on representation of the information

1491
02:01:05,060 --> 02:01:07,060
 or the code itself. Right, so

1492
02:01:07,060 --> 02:01:09,060
 the easiest way to understand this

1493
02:01:09,060 --> 02:01:11,060
 is through an example.

1494
02:01:11,060 --> 02:01:13,060
 So, you look at this example here. Suppose we have

1495
02:01:13,060 --> 02:01:15,060
 five symbols, A1 to A5,

1496
02:01:15,060 --> 02:01:17,060
 and this is the probability of occurrence.

1497
02:01:17,060 --> 02:01:19,060
 So, now, based on what you

1498
02:01:19,060 --> 02:01:21,060
 have studied in the previous part, you can see

1499
02:01:21,060 --> 02:01:23,060
 there's a few different ways you can represent

1500
02:01:23,060 --> 02:01:25,060
 these

1501
02:01:25,060 --> 02:01:27,060
 symbols using the bit patterns.

1502
02:01:27,060 --> 02:01:29,060
 So, one simple way, if you use a very

1503
02:01:29,060 --> 02:01:31,060
 naive way, which is

1504
02:01:31,060 --> 02:01:33,060
 uniform length coding

1505
02:01:33,060 --> 02:01:35,060
 or fixed length coding,

1506
02:01:35,060 --> 02:01:37,060
 because you have five symbols,

1507
02:01:37,060 --> 02:01:39,060
 so you can actually use three bits

1508
02:01:39,060 --> 02:01:41,060
 to represent. So, if you decided

1509
02:01:41,060 --> 02:01:43,060
 to use three bits to represent each

1510
02:01:43,060 --> 02:01:45,060
 symbol, okay, for example, you use

1511
02:01:45,060 --> 02:01:47,060
 this bit pattern

1512
02:01:47,060 --> 02:01:49,060
 to represent this symbol. So, you can see

1513
02:01:49,060 --> 02:01:51,060
 in this case, the average

1514
02:01:51,060 --> 02:01:53,060
 number of bits that's required to represent

1515
02:01:53,060 --> 02:01:55,060
 a symbol is actually three bits.

1516
02:01:55,060 --> 02:01:57,060
 But, on the other hand, if

1517
02:01:57,060 --> 02:01:59,060
 you're a little bit more clever, especially after

1518
02:01:59,060 --> 02:02:01,060
 you have studied the

1519
02:02:01,060 --> 02:02:03,060
 first part of the lecture, you know that

1520
02:02:03,060 --> 02:02:05,060
 for those

1521
02:02:05,060 --> 02:02:07,060
 symbols that has a higher probability,

1522
02:02:07,060 --> 02:02:09,060
 we should assign a shorter

1523
02:02:09,060 --> 02:02:11,060
 code. Those with a lower probability,

1524
02:02:11,060 --> 02:02:13,060
 we should assign a longer

1525
02:02:13,060 --> 02:02:15,060
 code. Just by being a little bit more

1526
02:02:15,060 --> 02:02:17,060
 clever about it, using

1527
02:02:17,060 --> 02:02:19,060
 this variable length coding,

1528
02:02:19,060 --> 02:02:21,060
 if you try to calculate

1529
02:02:21,060 --> 02:02:23,060
 the average number of bits per

1530
02:02:23,060 --> 02:02:25,060
 symbol, so like what

1531
02:02:25,060 --> 02:02:27,060
 we mentioned just now, probability multiplied

1532
02:02:27,060 --> 02:02:29,060
 with the number of bits, in this case it's four

1533
02:02:29,060 --> 02:02:31,060
 bits,

1534
02:02:31,060 --> 02:02:33,060
 probability of 0.2 multiplied with

1535
02:02:33,060 --> 02:02:35,060
 two bits, by repeating the process

1536
02:02:35,060 --> 02:02:37,060
 that we have explained earlier,

1537
02:02:37,060 --> 02:02:39,060
 we can see we can obtain 1.95.

1538
02:02:39,060 --> 02:02:41,060
 So, in other words, what it means

1539
02:02:41,060 --> 02:02:43,060
 is that just if you are a bit more

1540
02:02:43,060 --> 02:02:45,060
 clever, if you can come up with some

1541
02:02:45,060 --> 02:02:47,060
 more intelligent

1542
02:02:47,060 --> 02:02:49,060
 way of designing your code,

1543
02:02:49,060 --> 02:02:51,060
 actually you can

1544
02:02:51,060 --> 02:02:53,060
 achieve better

1545
02:02:53,060 --> 02:02:55,060
 efficiency or representation.

1546
02:02:55,060 --> 02:02:57,060
 So, that means in terms of code itself,

1547
02:02:57,060 --> 02:02:59,060
 there's some kind of redundancy.

1548
02:02:59,060 --> 02:03:01,060
 If you don't do anything, there's some redundancy

1549
02:03:01,060 --> 02:03:03,060
 inside that you can exploit

1550
02:03:03,060 --> 02:03:05,060
 to remove it.

1551
02:03:05,060 --> 02:03:07,060
 So, the next one that

1552
02:03:07,060 --> 02:03:09,060
 we mentioned is a psychovisual redundancy.

1553
02:03:09,060 --> 02:03:11,060
 So, the first one is

1554
02:03:11,060 --> 02:03:13,060
 frequency masking. So, earlier on,

1555
02:03:13,060 --> 02:03:15,060
 I mentioned that human

1556
02:03:15,060 --> 02:03:17,060
 is less sensitive to noise or distortion

1557
02:03:17,060 --> 02:03:19,060
 in the high frequency component.

1558
02:03:19,060 --> 02:03:21,060
 So, this frequency masking

1559
02:03:21,060 --> 02:03:23,060
 is like this.

1560
02:03:23,060 --> 02:03:25,060
 So, I believe most of you have

1561
02:03:25,060 --> 02:03:27,060
 studied time-based signals.

1562
02:03:27,060 --> 02:03:29,060
 So, for time-based signals,

1563
02:03:29,060 --> 02:03:31,060
 for example, if you are measuring the

1564
02:03:31,060 --> 02:03:33,060
 temperature in this room, the

1565
02:03:33,060 --> 02:03:35,060
 horizontal axis is the time,

1566
02:03:35,060 --> 02:03:37,060
 vertical axis is the temperature.

1567
02:03:37,060 --> 02:03:39,060
 So, then you have the signal,

1568
02:03:39,060 --> 02:03:41,060
 time-based signal, which looks like that.

1569
02:03:41,060 --> 02:03:43,060
 So, we know that for time-based

1570
02:03:43,060 --> 02:03:45,060
 signal, when you say

1571
02:03:45,060 --> 02:03:47,060
 for a time-based signal, it has high

1572
02:03:47,060 --> 02:03:49,060
 frequency component.

1573
02:03:49,060 --> 02:03:51,060
 What does that mean? If you have

1574
02:03:51,060 --> 02:03:53,060
 a time-based signal, for example,

1575
02:03:53,060 --> 02:03:55,060
 temperature in this room,

1576
02:03:55,060 --> 02:03:57,060
 and you say that

1577
02:03:57,060 --> 02:03:59,060
 this time-based signal or temperature

1578
02:03:59,060 --> 02:04:01,060
 in this room has high frequency

1579
02:04:01,060 --> 02:04:03,060
 component, what does that mean?

1580
02:04:03,060 --> 02:04:05,060
 It means that your signal is

1581
02:04:05,060 --> 02:04:07,060
 fluctuating very quickly.

1582
02:04:07,060 --> 02:04:09,060
 High frequency means that it's changing

1583
02:04:09,060 --> 02:04:11,060
 very quickly. So, that's the interpretation

1584
02:04:11,060 --> 02:04:13,060
 in the time domain,

1585
02:04:13,060 --> 02:04:15,060
 which is a 1D signal.

1586
02:04:15,060 --> 02:04:17,060
 But, if you are talking about image domain,

1587
02:04:17,060 --> 02:04:19,060
 so for image domain, what we

1588
02:04:19,060 --> 02:04:21,060
 have is that, for example,

1589
02:04:21,060 --> 02:04:23,060
 this image here,

1590
02:04:23,060 --> 02:04:25,060
 we have the x-y coordinate

1591
02:04:25,060 --> 02:04:27,060
 system,

1592
02:04:27,060 --> 02:04:29,060
 x and y coordinate system.

1593
02:04:29,060 --> 02:04:31,060
 x and y coordinate system.

1594
02:04:31,060 --> 02:04:33,060
 And then afterwards, from last lecture,

1595
02:04:33,060 --> 02:04:35,060
 we know we have different pixels.

1596
02:04:35,060 --> 02:04:37,060
 If you look at each of the RGB

1597
02:04:37,060 --> 02:04:39,060
 channel value,

1598
02:04:39,060 --> 02:04:41,060
 it can be interpreted as a

1599
02:04:41,060 --> 02:04:43,060
 z-value, the

1600
02:04:43,060 --> 02:04:45,060
 z-axis value. So, therefore,

1601
02:04:45,060 --> 02:04:47,060
 for an image like this,

1602
02:04:47,060 --> 02:04:49,060
 this is the x and y

1603
02:04:49,060 --> 02:04:51,060
 coordinate system, and each

1604
02:04:51,060 --> 02:04:53,060
 of the RGB channel can be

1605
02:04:53,060 --> 02:04:55,060
 interpreted as the z-value,

1606
02:04:55,060 --> 02:04:57,060
 or like the mountain and valley,

1607
02:04:57,060 --> 02:04:59,060
 the landscape. So, therefore,

1608
02:04:59,060 --> 02:05:01,060
 for an image like this,

1609
02:05:01,060 --> 02:05:03,060
 you can interpret it like,

1610
02:05:03,060 --> 02:05:05,060
 you have a landscape,

1611
02:05:05,060 --> 02:05:07,060
 you have mountains and valleys.

1612
02:05:07,060 --> 02:05:09,060
 So, if these particular mountains

1613
02:05:09,060 --> 02:05:11,060
 and valleys change very quickly,

1614
02:05:11,060 --> 02:05:13,060
 then we say that this image

1615
02:05:13,060 --> 02:05:15,060
 has high frequency component.

1616
02:05:15,060 --> 02:05:17,060
 And if,

1617
02:05:17,060 --> 02:05:19,060
 for example, in this particular image,

1618
02:05:19,060 --> 02:05:21,060
 these regions here,

1619
02:05:21,060 --> 02:05:23,060
 you can see the pixel value change

1620
02:05:23,060 --> 02:05:25,060
 very slowly. So, this is the

1621
02:05:25,060 --> 02:05:27,060
 x and y coordinate. If the

1622
02:05:27,060 --> 02:05:29,060
 pixel value change very slowly,

1623
02:05:29,060 --> 02:05:31,060
 then we say it has low frequency component.

1624
02:05:31,060 --> 02:05:33,060
 But if the pixel value

1625
02:05:33,060 --> 02:05:35,060
 change very quickly, we can say

1626
02:05:35,060 --> 02:05:37,060
 that it has high frequency component.

1627
02:05:37,060 --> 02:05:39,060
 So, this is the interpretation for

1628
02:05:39,060 --> 02:05:41,060
 image and video, when we are

1629
02:05:41,060 --> 02:05:43,060
 talking about a high or

1630
02:05:43,060 --> 02:05:45,060
 low frequency content. So,

1631
02:05:45,060 --> 02:05:47,060
 therefore, if we take this particular

1632
02:05:47,060 --> 02:05:49,060
 image here, you can see that this image mainly

1633
02:05:49,060 --> 02:05:51,060
 has low frequency content,

1634
02:05:51,060 --> 02:05:53,060
 because the pixel values change very

1635
02:05:53,060 --> 02:05:55,060
 slowly. Okay? In a small region,

1636
02:05:55,060 --> 02:05:57,060
 the pixel value changes slowly.

1637
02:05:57,060 --> 02:05:59,060
 But this particular image, we

1638
02:05:59,060 --> 02:06:01,060
 can say that it has high frequency component,

1639
02:06:01,060 --> 02:06:03,060
 because in a lot of these

1640
02:06:03,060 --> 02:06:05,060
 small regions, the pixel value

1641
02:06:05,060 --> 02:06:07,060
 change very quickly. So, this is

1642
02:06:07,060 --> 02:06:09,060
 the high-frequency- this image has lots of

1643
02:06:09,060 --> 02:06:11,060
 high frequency component. This

1644
02:06:11,060 --> 02:06:13,060
 image has lots of low-frequency

1645
02:06:13,060 --> 02:06:15,060
 component. Okay?

1646
02:06:15,060 --> 02:06:17,060
 So, now we know how to interpret

1647
02:06:17,060 --> 02:06:19,060
 the meaning of low frequency

1648
02:06:19,060 --> 02:06:21,060
 and high frequency component. Next,

1649
02:06:21,060 --> 02:06:23,060
 we look at just now the example

1650
02:06:23,060 --> 02:06:25,060
 that we mentioned. Right, okay.

1651
02:06:25,060 --> 02:06:27,060
 So, again, we take the example of

1652
02:06:27,060 --> 02:06:29,060
 the clothes I'm wearing today. Right?

1653
02:06:29,060 --> 02:06:31,060
 So, this particular- the clothes

1654
02:06:31,060 --> 02:06:33,060
 I'm wearing today mainly has

1655
02:06:33,060 --> 02:06:35,060
 lots of low-frequency component,

1656
02:06:35,060 --> 02:06:37,060
 because you can see lots of regions

1657
02:06:37,060 --> 02:06:39,060
 changing very slowly. So,

1658
02:06:39,060 --> 02:06:41,060
 our eyes are very sensitive to any

1659
02:06:41,060 --> 02:06:43,060
 noise or distortion,

1660
02:06:43,060 --> 02:06:45,060
 or changes in low-frequency region.

1661
02:06:45,060 --> 02:06:47,060
 So, what I'm trying to say is, imagine

1662
02:06:47,060 --> 02:06:49,060
 if just now dinner time, I eat some

1663
02:06:49,060 --> 02:06:51,060
 noodle, and then there's a spot here,

1664
02:06:51,060 --> 02:06:53,060
 right, most of you will be able to

1665
02:06:53,060 --> 02:06:55,060
 identify quite quickly. Right? Because

1666
02:06:55,060 --> 02:06:57,060
 if this is a low-frequency region,

1667
02:06:57,060 --> 02:06:59,060
 if there's any noise or distortion

1668
02:06:59,060 --> 02:07:01,060
 in low-frequency region, our eyes

1669
02:07:01,060 --> 02:07:03,060
 can notice it very quickly.

1670
02:07:03,060 --> 02:07:05,060
 Yeah. So, as opposed to that,

1671
02:07:05,060 --> 02:07:07,060
 right, for example, if I'm wearing

1672
02:07:07,060 --> 02:07:09,060
 a shirt, which has

1673
02:07:09,060 --> 02:07:11,060
 lots of vertical stripe, you know,

1674
02:07:11,060 --> 02:07:13,060
 if there's a shirt with lots of- or

1675
02:07:13,060 --> 02:07:15,060
 checkered shirt, you know, checkered shirt,

1676
02:07:15,060 --> 02:07:17,060
 yeah, and if I have the same spots,

1677
02:07:17,060 --> 02:07:19,060
 most of you will not be able to notice it,

1678
02:07:19,060 --> 02:07:21,060
 because our eyes are not so sensitive

1679
02:07:21,060 --> 02:07:23,060
 to any changes in high-

1680
02:07:23,060 --> 02:07:25,060
 frequency component. So, that's one example.

1681
02:07:25,060 --> 02:07:27,060
 So, if you take this example,

1682
02:07:27,060 --> 02:07:29,060
 we can see this image has

1683
02:07:29,060 --> 02:07:31,060
 low-frequency component,

1684
02:07:31,060 --> 02:07:33,060
 so if there's any distortion,

1685
02:07:33,060 --> 02:07:35,060
 for example, if there's a small bird here,

1686
02:07:35,060 --> 02:07:37,060
 most of you will be able to spot

1687
02:07:37,060 --> 02:07:39,060
 it very quickly. As opposed to

1688
02:07:39,060 --> 02:07:41,060
 this, suppose this is an image

1689
02:07:41,060 --> 02:07:43,060
 with high-frequency component,

1690
02:07:43,060 --> 02:07:45,060
 if there's a small bird here, most of you

1691
02:07:45,060 --> 02:07:47,060
 cannot see it so quickly.

1692
02:07:47,060 --> 02:07:49,060
 So, this particular thing is known as

1693
02:07:49,060 --> 02:07:51,060
 the frequency masking. A human

1694
02:07:51,060 --> 02:07:53,060
 is more sensitive to noise or distortion

1695
02:07:53,060 --> 02:07:55,060
 in- is less sensitive,

1696
02:07:55,060 --> 02:07:57,060
 less sensitive to noise and distortion

1697
02:07:57,060 --> 02:07:59,060
 in high-frequency

1698
02:07:59,060 --> 02:08:01,060
 component. So, the reverse

1699
02:08:01,060 --> 02:08:03,060
 means that it's more sensitive

1700
02:08:03,060 --> 02:08:05,060
 to noise and distortion in low-frequency

1701
02:08:05,060 --> 02:08:07,060
 component. So, this

1702
02:08:07,060 --> 02:08:09,060
 property will be exploited

1703
02:08:09,060 --> 02:08:11,060
 later on when we study about

1704
02:08:11,060 --> 02:08:13,060
 image and video compression.

1705
02:08:13,060 --> 02:08:15,060
 So, later on, we'll- when we come to

1706
02:08:15,060 --> 02:08:17,060
 the necessary place, I'll explain

1707
02:08:17,060 --> 02:08:19,060
 a little bit more. So, the next

1708
02:08:19,060 --> 02:08:21,060
 one is that colour masking.

1709
02:08:21,060 --> 02:08:23,060
 So, human is more sensitive to the

1710
02:08:23,060 --> 02:08:25,060
 luminance or the brightness

1711
02:08:25,060 --> 02:08:27,060
 component. Sometimes we also call

1712
02:08:27,060 --> 02:08:29,060
 it the luma, okay?

1713
02:08:29,060 --> 02:08:31,060
 Then, the colour or the

1714
02:08:31,060 --> 02:08:33,060
 chrominance or the chroma component.

1715
02:08:33,060 --> 02:08:35,060
 So, this point we have actually explained

1716
02:08:35,060 --> 02:08:37,060
 in last lecture

1717
02:08:37,060 --> 02:08:39,060
 as well. So, this is also

1718
02:08:39,060 --> 02:08:41,060
 another property that

1719
02:08:41,060 --> 02:08:43,060
 we exploit to

1720
02:08:43,060 --> 02:08:45,060
 perform image and video

1721
02:08:45,060 --> 02:08:47,060
 compression. So, how do we do that?

1722
02:08:47,060 --> 02:08:49,060
 So, the first thing is that

1723
02:08:49,060 --> 02:08:51,060
 for those colour channel,

1724
02:08:51,060 --> 02:08:53,060
 so if you remember

1725
02:08:53,060 --> 02:08:55,060
 in previous lecture, we say that

1726
02:08:55,060 --> 02:08:57,060
 in image and video compression,

1727
02:08:57,060 --> 02:08:59,060
 very often we represent the image in

1728
02:08:59,060 --> 02:09:01,060
 Y, C, B, C, R kind of colour model.

1729
02:09:01,060 --> 02:09:03,060
 And Y is the component,

1730
02:09:03,060 --> 02:09:05,060
 C, B and C, R is the colour

1731
02:09:05,060 --> 02:09:07,060
 component. So, because our eyes are

1732
02:09:07,060 --> 02:09:09,060
 not so sensitive to the C, B and C,

1733
02:09:09,060 --> 02:09:11,060
 R, the colour component,

1734
02:09:11,060 --> 02:09:13,060
 we can afford to drop some of the

1735
02:09:13,060 --> 02:09:15,060
 sample. So, that is the

1736
02:09:15,060 --> 02:09:17,060
 idea that will be used later on,

1737
02:09:17,060 --> 02:09:19,060
 as we will see later,

1738
02:09:19,060 --> 02:09:21,060
 to perform image and video

1739
02:09:21,060 --> 02:09:23,060
 compression.

1740
02:09:23,060 --> 02:09:25,060
 Right, okay, so,

1741
02:09:25,060 --> 02:09:27,060
 I think about

1742
02:09:27,060 --> 02:09:29,060
 10 years ago, around 10 years

1743
02:09:29,060 --> 02:09:31,060
 ago, this is a very famous kind of

1744
02:09:31,060 --> 02:09:33,060
 image.

1745
02:09:33,060 --> 02:09:35,060
 I'm just wondering whether

1746
02:09:35,060 --> 02:09:37,060
 any one of you has seen this image before?

1747
02:09:37,060 --> 02:09:39,060
 Any one of you

1748
02:09:39,060 --> 02:09:41,060
 has seen this image? That means you are

1749
02:09:41,060 --> 02:09:43,060
 all very young.

1750
02:09:43,060 --> 02:09:45,060
 I think it's more than 10

1751
02:09:45,060 --> 02:09:47,060
 or 15 years ago already.

1752
02:09:47,060 --> 02:09:49,060
 Right, okay, so this particular

1753
02:09:49,060 --> 02:09:51,060
 image, what is so interesting about this image

1754
02:09:51,060 --> 02:09:53,060
 is that different person

1755
02:09:53,060 --> 02:09:55,060
 will perceive this

1756
02:09:55,060 --> 02:09:57,060
 image differently. Okay,

1757
02:09:57,060 --> 02:09:59,060
 so, I just want to

1758
02:09:59,060 --> 02:10:01,060
 check, okay, how many

1759
02:10:01,060 --> 02:10:03,060
 of you can see this particular image

1760
02:10:03,060 --> 02:10:05,060
 as a gold and white

1761
02:10:05,060 --> 02:10:07,060
 colour? Gold and white.

1762
02:10:07,060 --> 02:10:09,060
 Can you just raise your hand?

1763
02:10:09,060 --> 02:10:11,060
 If you see this particular

1764
02:10:11,060 --> 02:10:13,060
 dress, the colour is

1765
02:10:13,060 --> 02:10:15,060
 white and gold. Please raise your hand.

1766
02:10:19,060 --> 02:10:21,060
 Wow, okay, your class, not so many, but

1767
02:10:21,060 --> 02:10:23,060
 some to see it. Okay,

1768
02:10:23,060 --> 02:10:25,060
 so, some other people, what

1769
02:10:25,060 --> 02:10:27,060
 other colour do you see?

1770
02:10:29,060 --> 02:10:31,060
 Black and?

1771
02:10:31,060 --> 02:10:33,060
 Black and blue, right? So some of you see

1772
02:10:33,060 --> 02:10:35,060
 as black and blue.

1773
02:10:35,060 --> 02:10:37,060
 Can I just have a show of hands?

1774
02:10:37,060 --> 02:10:39,060
 I just want to see the

1775
02:10:39,060 --> 02:10:41,060
 statistics roughly. Black,

1776
02:10:41,060 --> 02:10:43,060
 who of you see black

1777
02:10:43,060 --> 02:10:45,060
 and blue?

1778
02:10:45,060 --> 02:10:47,060
 Okay, I think more

1779
02:10:47,060 --> 02:10:49,060
 than just now the gold and

1780
02:10:49,060 --> 02:10:51,060
 white. Actually,

1781
02:10:51,060 --> 02:10:53,060
 for myself, I see it as white

1782
02:10:53,060 --> 02:10:55,060
 and gold colour. This is gold colour

1783
02:10:55,060 --> 02:10:57,060
 and this is white colour.

1784
02:10:57,060 --> 02:10:59,060
 So, okay, so actually this is one of the

1785
02:10:59,060 --> 02:11:01,060
 images that account

1786
02:11:01,060 --> 02:11:03,060
 it depends on

1787
02:11:03,060 --> 02:11:05,060
 human vision system. Therefore, human vision system

1788
02:11:05,060 --> 02:11:07,060
 is very imprecise. Different people

1789
02:11:07,060 --> 02:11:09,060
 would perceive it differently.

1790
02:11:09,060 --> 02:11:11,060
 So, according to some studies,

1791
02:11:11,060 --> 02:11:13,060
 they say that it depends on

1792
02:11:13,060 --> 02:11:15,060
 each individual's

1793
02:11:15,060 --> 02:11:17,060
 types of, you know, how many

1794
02:11:17,060 --> 02:11:19,060
 rod and cone

1795
02:11:19,060 --> 02:11:21,060
 perceive different colour.

1796
02:11:21,060 --> 02:11:23,060
 So, that's why some of you will see

1797
02:11:23,060 --> 02:11:25,060
 the colour slightly differently.

1798
02:11:25,060 --> 02:11:27,060
 So, there's no right and wrong, it's just

1799
02:11:27,060 --> 02:11:29,060
 how human vision system

1800
02:11:29,060 --> 02:11:31,060
 perceives it.

1801
02:11:31,060 --> 02:11:33,060
 And then later on, there was someone who actually

1802
02:11:33,060 --> 02:11:35,060
 take an image. So, because

1803
02:11:35,060 --> 02:11:37,060
 what happened is that, you know, person who

1804
02:11:37,060 --> 02:11:39,060
 see as white and yellow,

1805
02:11:39,060 --> 02:11:41,060
 they do not know what other people are

1806
02:11:41,060 --> 02:11:43,060
 seeing. And other people see

1807
02:11:43,060 --> 02:11:45,060
 black and blue,

1808
02:11:45,060 --> 02:11:47,060
 they also do not know what other people are

1809
02:11:47,060 --> 02:11:49,060
 seeing. So, this is one image

1810
02:11:49,060 --> 02:11:51,060
 that try to show

1811
02:11:51,060 --> 02:11:53,060
 what the other party

1812
02:11:53,060 --> 02:11:55,060
 see. So, according to what they say,

1813
02:11:55,060 --> 02:11:57,060
 some people see this colour

1814
02:11:57,060 --> 02:11:59,060
 white and gold, some people

1815
02:11:59,060 --> 02:12:01,060
 see this colour more like closer

1816
02:12:01,060 --> 02:12:03,060
 to blue and

1817
02:12:03,060 --> 02:12:05,060
 black, but actually I still see

1818
02:12:05,060 --> 02:12:07,060
 gold and white, but

1819
02:12:07,060 --> 02:12:09,060
 okay, can some of you who

1820
02:12:09,060 --> 02:12:11,060
 see

1821
02:12:11,060 --> 02:12:13,060
 black and blue see this gold and

1822
02:12:13,060 --> 02:12:15,060
 white here?

1823
02:12:15,060 --> 02:12:17,060
 Can some of you see?

1824
02:12:17,060 --> 02:12:19,060
 Okay, or do you see two different

1825
02:12:19,060 --> 02:12:21,060
 set of colour?

1826
02:12:21,060 --> 02:12:23,060
 Okay,

1827
02:12:23,060 --> 02:12:25,060
 so anyway, this is

1828
02:12:25,060 --> 02:12:27,060
 a very interesting thing. Last year

1829
02:12:27,060 --> 02:12:29,060
 actually, I asked a student as well,

1830
02:12:29,060 --> 02:12:31,060
 it turned out that about two-third of them

1831
02:12:31,060 --> 02:12:33,060
 see them as black and blue,

1832
02:12:33,060 --> 02:12:35,060
 about one-third see

1833
02:12:35,060 --> 02:12:37,060
 as yellow and white.

1834
02:12:37,060 --> 02:12:39,060
 So, obviously I'm the minority

1835
02:12:39,060 --> 02:12:41,060
 here as well.

1836
02:12:43,060 --> 02:12:45,060
 Right, okay, so

1837
02:12:45,060 --> 02:12:47,060
 let's continue.

1838
02:12:47,060 --> 02:12:49,060
 Right, okay, so the next

1839
02:12:49,060 --> 02:12:51,060
 things we want to explain is this concept

1840
02:12:51,060 --> 02:12:53,060
 about lossy and lossless compression.

1841
02:12:53,060 --> 02:12:55,060
 So, what is the lossy and lossless compression?

1842
02:12:55,060 --> 02:12:57,060
 So, lossless

1843
02:12:57,060 --> 02:12:59,060
 compression is like this. So, initially

1844
02:12:59,060 --> 02:13:01,060
 you have the media, right?

1845
02:13:01,060 --> 02:13:03,060
 You perform the compression to make it into

1846
02:13:03,060 --> 02:13:05,060
 a smaller file size, and afterwards

1847
02:13:05,060 --> 02:13:07,060
 you decompress it

1848
02:13:07,060 --> 02:13:09,060
 to make it into a bigger file size,

1849
02:13:09,060 --> 02:13:11,060
 to reconstruct the media.

1850
02:13:11,060 --> 02:13:13,060
 So, if you're reconstructed,

1851
02:13:13,060 --> 02:13:15,060
 for example, image, you're

1852
02:13:15,060 --> 02:13:17,060
 reconstructed data, and your

1853
02:13:17,060 --> 02:13:19,060
 original data are exactly the

1854
02:13:19,060 --> 02:13:21,060
 same, then we call it lossless

1855
02:13:21,060 --> 02:13:23,060
 compression, because no

1856
02:13:23,060 --> 02:13:25,060
 information has been lost. Okay?

1857
02:13:25,060 --> 02:13:27,060
 So, therefore that's quite clear. So, that's

1858
02:13:27,060 --> 02:13:29,060
 lossless compression. So, as opposed to

1859
02:13:29,060 --> 02:13:31,060
 that, lossy compression means that

1860
02:13:31,060 --> 02:13:33,060
 you have the media, right, or data,

1861
02:13:33,060 --> 02:13:35,060
 you compress it to become smaller

1862
02:13:35,060 --> 02:13:37,060
 file size, afterwards you

1863
02:13:37,060 --> 02:13:39,060
 try to decompress it to

1864
02:13:39,060 --> 02:13:41,060
 reconstruct your data. If your

1865
02:13:41,060 --> 02:13:43,060
 reconstructed data is different

1866
02:13:43,060 --> 02:13:45,060
 from your original data, then

1867
02:13:45,060 --> 02:13:47,060
 this is known as a lossy compression,

1868
02:13:47,060 --> 02:13:49,060
 because some

1869
02:13:49,060 --> 02:13:51,060
 information has been lost already.

1870
02:13:51,060 --> 02:13:53,060
 Okay? So, therefore the definition

1871
02:13:53,060 --> 02:13:55,060
 between lossless and lossy compression

1872
02:13:55,060 --> 02:13:57,060
 is quite clear. So, in

1873
02:13:57,060 --> 02:13:59,060
 most of the typical

1874
02:13:59,060 --> 02:14:01,060
 image and video compression,

1875
02:14:01,060 --> 02:14:03,060
 do you think most of them

1876
02:14:03,060 --> 02:14:05,060
 fall under lossy

1877
02:14:05,060 --> 02:14:07,060
 or lossless compression?

1878
02:14:09,060 --> 02:14:11,060
 So, now that we understand

1879
02:14:11,060 --> 02:14:13,060
 what's lossy compression and what's

1880
02:14:13,060 --> 02:14:15,060
 lossless compression, in most

1881
02:14:15,060 --> 02:14:17,060
 kind of typical

1882
02:14:17,060 --> 02:14:19,060
 application, right, do you

1883
02:14:19,060 --> 02:14:21,060
 think we use lossless compression

1884
02:14:21,060 --> 02:14:23,060
 more or lossy compression more?

1885
02:14:25,060 --> 02:14:27,060
 Lot?

1886
02:14:27,060 --> 02:14:29,060
 Actually, I can't hear

1887
02:14:29,060 --> 02:14:31,060
 so clearly. It seems that there are

1888
02:14:31,060 --> 02:14:33,060
 a mix of, some

1889
02:14:33,060 --> 02:14:35,060
 people say it's lossy, some people say

1890
02:14:35,060 --> 02:14:37,060
 it's lossless. Right, okay.

1891
02:14:37,060 --> 02:14:39,060
 So, if

1892
02:14:39,060 --> 02:14:41,060
 you are a beginner, if you have not studied this

1893
02:14:41,060 --> 02:14:43,060
 topic before, you will tend to think it's

1894
02:14:43,060 --> 02:14:45,060
 lossless, right, because lossless is good, no information

1895
02:14:45,060 --> 02:14:47,060
 is lost. But it turned out that

1896
02:14:47,060 --> 02:14:49,060
 actually we use lossy

1897
02:14:49,060 --> 02:14:51,060
 compression more.

1898
02:14:51,060 --> 02:14:53,060
 So, what's the reason actually we use lossy

1899
02:14:53,060 --> 02:14:55,060
 compression more?

1900
02:15:13,060 --> 02:15:15,060
 So, anyone?

1901
02:15:15,060 --> 02:15:17,060
 What's the reason actually we use a lossy

1902
02:15:17,060 --> 02:15:19,060
 compression more, in

1903
02:15:19,060 --> 02:15:21,060
 real life?

1904
02:15:23,060 --> 02:15:25,060
 So, what's the objective of performing

1905
02:15:25,060 --> 02:15:27,060
 compression?

1906
02:15:29,060 --> 02:15:31,060
 What's the objective of performing compression?

1907
02:15:33,060 --> 02:15:35,060
 You want to

1908
02:15:35,060 --> 02:15:37,060
 reduce the number of

1909
02:15:37,060 --> 02:15:39,060
 bits or file size, right?

1910
02:15:39,060 --> 02:15:41,060
 So, it turned out that lossy compression

1911
02:15:41,060 --> 02:15:43,060
 is more effective in compressing

1912
02:15:43,060 --> 02:15:45,060
 the file into a smaller

1913
02:15:45,060 --> 02:15:47,060
 file size as compared to

1914
02:15:47,060 --> 02:15:49,060
 lossless compression.

1915
02:15:49,060 --> 02:15:51,060
 So, the reason why we use lossy compression

1916
02:15:51,060 --> 02:15:53,060
 more is because, right, your

1917
02:15:53,060 --> 02:15:55,060
 compressed file size is actually much

1918
02:15:55,060 --> 02:15:57,060
 smaller as compared to lossless

1919
02:15:57,060 --> 02:15:59,060
 compression. Even though you

1920
02:15:59,060 --> 02:16:01,060
 may have a little bit of distortion,

1921
02:16:01,060 --> 02:16:03,060
 but lots of these changes of distortion

1922
02:16:03,060 --> 02:16:05,060
 is not so perceptible

1923
02:16:05,060 --> 02:16:07,060
 by human. That means when human, you

1924
02:16:07,060 --> 02:16:09,060
 see it, you hardly tell there's

1925
02:16:09,060 --> 02:16:11,060
 any difference in it.

1926
02:16:11,060 --> 02:16:13,060
 So, therefore, that's why lossy compression

1927
02:16:13,060 --> 02:16:15,060
 is actually more commonly used.

1928
02:16:15,060 --> 02:16:17,060
 So, now let's look at this

1929
02:16:17,060 --> 02:16:19,060
 lossless compression. So, lossless compression,

1930
02:16:19,060 --> 02:16:21,060
 as we have already explained,

1931
02:16:21,060 --> 02:16:23,060
 your reconstructed image

1932
02:16:23,060 --> 02:16:25,060
 is the same as

1933
02:16:25,060 --> 02:16:27,060
 your original image after reconstruction

1934
02:16:27,060 --> 02:16:29,060
 or decompression. So,

1935
02:16:29,060 --> 02:16:31,060
 we use lossless compression in important

1936
02:16:31,060 --> 02:16:33,060
 media such as medical images.

1937
02:16:33,060 --> 02:16:35,060
 Because for

1938
02:16:35,060 --> 02:16:37,060
 medical images,

1939
02:16:37,060 --> 02:16:39,060
 sometimes you don't want to

1940
02:16:39,060 --> 02:16:41,060
 have any changes. Because any

1941
02:16:41,060 --> 02:16:43,060
 artifacts or any changes,

1942
02:16:43,060 --> 02:16:45,060
 sometimes the doctor may interpret

1943
02:16:45,060 --> 02:16:47,060
 it's actually a cancer. So, therefore,

1944
02:16:47,059 --> 02:16:49,059
 for those cases, your

1945
02:16:49,059 --> 02:16:51,059
 reconstructed data

1946
02:16:51,059 --> 02:16:53,059
 and your original data must be

1947
02:16:53,059 --> 02:16:55,059
 the same. So, that's

1948
02:16:55,059 --> 02:16:57,059
 for lossless compression.

1949
02:16:57,059 --> 02:16:59,059
 For lossless compression,

1950
02:16:59,059 --> 02:17:01,059
 we typically use it in media such as

1951
02:17:01,059 --> 02:17:03,059
 image and video.

1952
02:17:03,059 --> 02:17:05,059
 So, the reason why we use it

1953
02:17:05,059 --> 02:17:07,059
 in image and video is because if you have image and video,

1954
02:17:07,059 --> 02:17:09,059
 you compress it and afterwards

1955
02:17:09,059 --> 02:17:11,059
 you reconstruct.

1956
02:17:11,059 --> 02:17:13,059
 You have this reconstructed or

1957
02:17:13,059 --> 02:17:15,059
 decompressed media. Even though

1958
02:17:15,059 --> 02:17:17,059
 your original data

1959
02:17:17,059 --> 02:17:19,059
 and your reconstructed data are a little

1960
02:17:19,059 --> 02:17:21,059
 bit different, but from the human

1961
02:17:21,059 --> 02:17:23,059
 perception,

1962
02:17:23,059 --> 02:17:25,059
 from the human perception perspective, you can hardly

1963
02:17:25,059 --> 02:17:27,059
 tell the difference. Just now,

1964
02:17:27,059 --> 02:17:29,059
 for example, the image that we show,

1965
02:17:29,059 --> 02:17:31,059
 even the image, different person

1966
02:17:31,059 --> 02:17:33,059
 will perceive it a little bit differently

1967
02:17:33,059 --> 02:17:35,059
 already. So, therefore,

1968
02:17:35,059 --> 02:17:37,059
 for these types of approach,

1969
02:17:37,059 --> 02:17:39,059
 lossy compression,

1970
02:17:39,059 --> 02:17:41,059
 even though your reconstructed data

1971
02:17:41,059 --> 02:17:43,059
 is different from the original data,

1972
02:17:43,059 --> 02:17:45,059
 but these two data, actually, there are

1973
02:17:45,059 --> 02:17:47,059
 so little difference that human

1974
02:17:47,059 --> 02:17:49,059
 cannot tell the difference. So, therefore, it's

1975
02:17:49,059 --> 02:17:51,059
 okay, even though they are not exactly the

1976
02:17:51,059 --> 02:17:53,059
 same, but it's okay because we can hardly

1977
02:17:53,059 --> 02:17:55,059
 tell much difference in it.

1978
02:17:55,059 --> 02:17:57,059
 But the advantage of this now

1979
02:17:57,059 --> 02:17:59,059
 is that we can deploy

1980
02:17:59,059 --> 02:18:01,059
 method to compress it much better

1981
02:18:01,059 --> 02:18:03,059
 into a smaller file size.

1982
02:18:05,059 --> 02:18:07,059
 So, for media like image and video,

1983
02:18:07,059 --> 02:18:09,059
 it's not necessary to display

1984
02:18:09,059 --> 02:18:11,059
 more information

1985
02:18:11,059 --> 02:18:13,059
 than what human can see or hear.

1986
02:18:15,059 --> 02:18:17,059
 So, in these types of cases, actually,

1987
02:18:17,059 --> 02:18:19,059
 the compression technique will

1988
02:18:19,059 --> 02:18:21,059
 may discard data

1989
02:18:21,059 --> 02:18:23,059
 with little perceived difference by human.

1990
02:18:23,059 --> 02:18:25,059
 That means it will throw away those

1991
02:18:25,059 --> 02:18:27,059
 information that human can actually

1992
02:18:27,059 --> 02:18:29,059
 not tell much

1993
02:18:29,059 --> 02:18:31,059
 difference as compared to the original data.

1994
02:18:31,059 --> 02:18:33,059
 So, your reconstructed data

1995
02:18:33,059 --> 02:18:35,059
 is different, not

1996
02:18:35,059 --> 02:18:37,059
 identical or different from the original

1997
02:18:37,059 --> 02:18:39,059
 data after decompression.

1998
02:18:39,059 --> 02:18:41,059
 So, that's the basic idea of lossy compression.

1999
02:18:43,059 --> 02:18:45,059
 So, there's a few different common

2000
02:18:45,059 --> 02:18:47,059
 matrix to measure

2001
02:18:47,059 --> 02:18:49,059
 for this lossy

2002
02:18:51,059 --> 02:18:53,059
 decompression.

2003
02:18:53,059 --> 02:18:55,059
 So, first, you have this

2004
02:18:57,059 --> 02:18:59,059
 X, we call it the original data.

2005
02:18:59,059 --> 02:19:01,059
 Suppose the original data we call

2006
02:19:01,059 --> 02:19:03,059
 X, the reconstructed or

2007
02:19:03,059 --> 02:19:05,059
 decompressed data we call

2008
02:19:05,059 --> 02:19:07,059
 Y. So, therefore, there's a few

2009
02:19:07,059 --> 02:19:09,059
 different ways we can measure the

2010
02:19:09,059 --> 02:19:11,059
 difference between them for lossy

2011
02:19:11,059 --> 02:19:13,059
 compression. So, the first one is

2012
02:19:13,059 --> 02:19:15,059
 known as a mean square error.

2013
02:19:15,059 --> 02:19:17,059
 So, for the mean square error, if you look at the

2014
02:19:17,059 --> 02:19:19,059
 equation, you try to take the

2015
02:19:19,059 --> 02:19:21,059
 difference between your original pixel

2016
02:19:21,059 --> 02:19:23,059
 and

2017
02:19:23,059 --> 02:19:25,059
 the reconstructed pixel.

2018
02:19:25,059 --> 02:19:27,059
 And then you square, you sum up over

2019
02:19:27,059 --> 02:19:29,059
 all the pixel, for example, in an image.

2020
02:19:29,059 --> 02:19:31,059
 And then you divide by

2021
02:19:31,059 --> 02:19:33,059
 the total number of pixel in the image.

2022
02:19:33,059 --> 02:19:35,059
 This is known as a mean square error.

2023
02:19:35,059 --> 02:19:37,059
 So, obviously,

2024
02:19:37,059 --> 02:19:39,059
 the smaller this value is,

2025
02:19:39,059 --> 02:19:41,059
 that means the better your reconstructed

2026
02:19:41,059 --> 02:19:43,059
 image is.

2027
02:19:43,059 --> 02:19:45,059
 So, that's the definition of the mean square error.

2028
02:19:45,059 --> 02:19:47,059
 So, the next one is the signal to

2029
02:19:47,059 --> 02:19:49,060
 noise ratio. So, the signal

2030
02:19:49,060 --> 02:19:51,060
 to noise ratio is defined by this equation.

2031
02:19:51,060 --> 02:19:53,060
 So, this is a signal power.

2032
02:19:53,060 --> 02:19:55,060
 This is the noise power here.

2033
02:19:55,060 --> 02:19:57,060
 So, the signal power is defined

2034
02:19:57,060 --> 02:19:59,060
 by, right, so the

2035
02:19:59,060 --> 02:20:01,060
 this particular symbol here,

2036
02:20:01,060 --> 02:20:03,060
 the average square value of your

2037
02:20:03,060 --> 02:20:05,060
 original data.

2038
02:20:05,060 --> 02:20:07,060
 So, each of the pixel value,

2039
02:20:07,060 --> 02:20:09,060
 right, you square and then

2040
02:20:09,060 --> 02:20:11,060
 you take its average, right, so therefore

2041
02:20:11,060 --> 02:20:13,060
 it's a signal power.

2042
02:20:13,060 --> 02:20:15,060
 And then this noise power,

2043
02:20:15,060 --> 02:20:17,060
 noise power here is actually just now

2044
02:20:17,060 --> 02:20:19,060
 the error that we have found

2045
02:20:19,060 --> 02:20:21,060
 earlier on. So, if you take the signal

2046
02:20:21,060 --> 02:20:23,060
 power, the average

2047
02:20:23,060 --> 02:20:25,060
 signal power divided by the noise

2048
02:20:25,060 --> 02:20:27,060
 that we have computed earlier,

2049
02:20:27,060 --> 02:20:29,060
 then this is actually known as a

2050
02:20:29,060 --> 02:20:31,060
 signal to noise ratio, or S and R.

2051
02:20:31,060 --> 02:20:33,060
 So, for a good

2052
02:20:33,060 --> 02:20:35,060
 reconstructed

2053
02:20:35,060 --> 02:20:37,060
 compression method,

2054
02:20:37,060 --> 02:20:39,060
 you want your S and R to be as high

2055
02:20:39,060 --> 02:20:41,060
 as possible, because you want

2056
02:20:41,060 --> 02:20:43,060
 your noise to be as small as possible.

2057
02:20:43,060 --> 02:20:45,060
 If your noise is small, that means

2058
02:20:45,060 --> 02:20:47,060
 this value will be large.

2059
02:20:49,060 --> 02:20:51,060
 Right, okay, so the third commonly

2060
02:20:51,060 --> 02:20:53,060
 used matrix is known as peak signal

2061
02:20:53,060 --> 02:20:55,060
 to noise ratio. So, the peak signal

2062
02:20:55,060 --> 02:20:57,060
 to noise ratio, if you look at this

2063
02:20:57,060 --> 02:20:59,060
 equation and this equation, they are very similar.

2064
02:20:59,060 --> 02:21:01,060
 The only difference now is that

2065
02:21:01,060 --> 02:21:03,060
 here, in this signal to noise

2066
02:21:03,060 --> 02:21:05,060
 ratio, this is the average signal

2067
02:21:05,060 --> 02:21:07,060
 power. But, for this

2068
02:21:07,060 --> 02:21:09,060
 peak signal to noise ratio,

2069
02:21:09,060 --> 02:21:11,060
 this one here, we just take the maximum

2070
02:21:11,060 --> 02:21:13,060
 value. For example, if you use

2071
02:21:13,060 --> 02:21:15,060
 8 bits to represent it, then

2072
02:21:15,060 --> 02:21:17,060
 this value will be 255.

2073
02:21:17,060 --> 02:21:19,060
 Okay, this X peak here

2074
02:21:19,060 --> 02:21:21,060
 will be 255, 255 square.

2075
02:21:21,060 --> 02:21:23,060
 Okay, so, therefore

2076
02:21:23,060 --> 02:21:25,060
 this particular matrix

2077
02:21:25,060 --> 02:21:27,060
 is known as peak signal,

2078
02:21:27,060 --> 02:21:29,060
 the largest value.

2079
02:21:29,060 --> 02:21:31,060
 Peak signal to noise, noise

2080
02:21:31,060 --> 02:21:33,060
 is the error. So, peak signal to

2081
02:21:33,060 --> 02:21:35,060
 noise ratio. So, this is another

2082
02:21:35,060 --> 02:21:37,060
 common matrix to measure the

2083
02:21:37,060 --> 02:21:39,060
 distortion between your original

2084
02:21:39,060 --> 02:21:41,060
 data and your reconstructed

2085
02:21:41,060 --> 02:21:43,060
 data.

2086
02:21:45,060 --> 02:21:47,060
 Right, okay, so the next

2087
02:21:47,060 --> 02:21:49,060
 topic we are going to look at now is a

2088
02:21:49,060 --> 02:21:51,060
 transform-based coding and compression.

2089
02:21:53,060 --> 02:21:55,060
 So, transform coding.

2090
02:21:55,060 --> 02:21:57,060
 So, why do we want to do transform coding?

2091
02:21:57,060 --> 02:21:59,060
 So, what is this idea of transform

2092
02:21:59,060 --> 02:22:01,060
 coding? So, the idea of transform

2093
02:22:01,060 --> 02:22:03,060
 coding is that, right, so you have

2094
02:22:03,060 --> 02:22:05,060
 for example, original

2095
02:22:05,060 --> 02:22:07,060
 data, right, so

2096
02:22:07,060 --> 02:22:09,060
 for example, let's start with the image.

2097
02:22:09,060 --> 02:22:11,060
 You have some images, right,

2098
02:22:11,060 --> 02:22:13,060
 you may want to do some transformation

2099
02:22:13,060 --> 02:22:15,060
 into a

2100
02:22:15,060 --> 02:22:17,060
 transform domain. So, the

2101
02:22:17,060 --> 02:22:19,060
 image in its original

2102
02:22:19,060 --> 02:22:21,060
 form is called in the pixel domain.

2103
02:22:21,060 --> 02:22:23,060
 Right, so after you

2104
02:22:23,060 --> 02:22:25,060
 have performed some transform, so

2105
02:22:25,060 --> 02:22:27,060
 some transform is a mathematical

2106
02:22:27,060 --> 02:22:29,060
 operation, right, so you have the

2107
02:22:29,060 --> 02:22:31,060
 image in the pixel domain,

2108
02:22:31,060 --> 02:22:33,060
 you let it go through some transform

2109
02:22:33,060 --> 02:22:35,060
 which is a mathematical operation

2110
02:22:35,060 --> 02:22:37,060
 to get your transform domain

2111
02:22:37,060 --> 02:22:39,060
 or transform kvc.

2112
02:22:39,060 --> 02:22:41,060
 And then afterwards you try to perform compression

2113
02:22:41,060 --> 02:22:43,060
 in this transform domain

2114
02:22:43,060 --> 02:22:45,060
 using the transform kvc.

2115
02:22:45,060 --> 02:22:47,060
 So, at high level,

2116
02:22:47,060 --> 02:22:49,060
 why do you want to do that?

2117
02:22:49,060 --> 02:22:51,060
 Why do you want to take the data

2118
02:22:51,060 --> 02:22:53,060
 from the original pixel, right,

2119
02:22:53,060 --> 02:22:55,060
 domain, or the individual pixel

2120
02:22:55,060 --> 02:22:57,060
 to transform it into

2121
02:22:57,060 --> 02:22:59,060
 some transform domain and

2122
02:22:59,060 --> 02:23:01,060
 then perform compression on this transform

2123
02:23:01,060 --> 02:23:03,060
 domain? Why do we want to do that?

2124
02:23:03,060 --> 02:23:05,060
 So, the reason why

2125
02:23:05,060 --> 02:23:07,060
 we want to do this mathematical

2126
02:23:07,060 --> 02:23:09,060
 mapping or transformation is

2127
02:23:09,060 --> 02:23:11,060
 because, right, the data once

2128
02:23:11,060 --> 02:23:13,060
 is transformed into the transform

2129
02:23:13,060 --> 02:23:15,060
 domain, it has some good properties

2130
02:23:15,060 --> 02:23:17,060
 that we can exploit

2131
02:23:17,060 --> 02:23:19,060
 to perform the compression. At high

2132
02:23:19,060 --> 02:23:21,060
 level, this is what it is. It has some

2133
02:23:21,060 --> 02:23:23,060
 good property in the transform domain

2134
02:23:23,060 --> 02:23:25,060
 that we can use to

2135
02:23:25,060 --> 02:23:27,060
 perform the compression. So, this is a

2136
02:23:27,060 --> 02:23:29,060
 high level idea, and later

2137
02:23:29,060 --> 02:23:31,060
 on we are going to take some example and

2138
02:23:31,060 --> 02:23:33,060
 see this point a lot

2139
02:23:33,060 --> 02:23:35,060
 more clearer.

2140
02:23:35,060 --> 02:23:37,060
 So, therefore, why do you want to do this

2141
02:23:37,060 --> 02:23:39,060
 transform? The

2142
02:23:39,060 --> 02:23:41,060
 idea is we want to convert the data

2143
02:23:41,060 --> 02:23:43,060
 into a form, right, which

2144
02:23:43,060 --> 02:23:45,060
 is more suitable for compression, that means

2145
02:23:45,060 --> 02:23:47,060
 into the transform domain.

2146
02:23:47,060 --> 02:23:49,060
 So, the transformation

2147
02:23:49,060 --> 02:23:51,060
 may have some good properties. So,

2148
02:23:51,060 --> 02:23:53,060
 one is called energy compaction,

2149
02:23:53,060 --> 02:23:55,060
 the other is to offer

2150
02:23:55,060 --> 02:23:57,060
 redundancy reduction.

2151
02:23:57,060 --> 02:23:59,060
 So, this energy compaction

2152
02:23:59,060 --> 02:24:01,060
 at high level, what it means is that

2153
02:24:01,060 --> 02:24:03,060
 initially you have this particular

2154
02:24:03,060 --> 02:24:05,060
 image, which is in the pixel domain

2155
02:24:05,060 --> 02:24:07,060
 or image domain. After

2156
02:24:07,060 --> 02:24:09,060
 you have done the transformation, you have

2157
02:24:09,060 --> 02:24:11,060
 it in the transform domain. So, this

2158
02:24:11,060 --> 02:24:13,060
 energy, right, okay,

2159
02:24:13,060 --> 02:24:15,060
 the energy will be packed into a small

2160
02:24:15,060 --> 02:24:17,060
 number of kvc. Right, so, in

2161
02:24:17,060 --> 02:24:19,060
 your original image or pixel domain,

2162
02:24:19,060 --> 02:24:21,060
 right, okay, how do we measure

2163
02:24:21,060 --> 02:24:23,060
 the energy in the

2164
02:24:23,060 --> 02:24:25,060
 image is that we take

2165
02:24:25,060 --> 02:24:27,060
 each of the pixel value and we

2166
02:24:27,060 --> 02:24:29,060
 square. So, each of the

2167
02:24:29,060 --> 02:24:31,060
 pixel value, if we square,

2168
02:24:31,060 --> 02:24:33,060
 that will reflect the energy.

2169
02:24:33,060 --> 02:24:35,060
 So, in the original pixel

2170
02:24:35,060 --> 02:24:37,060
 domain, okay, right,

2171
02:24:37,060 --> 02:24:39,060
 because we do not know

2172
02:24:39,060 --> 02:24:41,060
 each pixel, whether the value

2173
02:24:41,060 --> 02:24:43,060
 is large or not. So, therefore, in the

2174
02:24:43,060 --> 02:24:45,060
 original image or pixel domain,

2175
02:24:45,060 --> 02:24:47,060
 we do not know where the energy

2176
02:24:47,060 --> 02:24:49,060
 is concentrating.

2177
02:24:49,060 --> 02:24:51,060
 Because if you think about even a

2178
02:24:51,060 --> 02:24:53,060
 particular image, for

2179
02:24:53,060 --> 02:24:55,060
 each of the pixel value, do you know

2180
02:24:55,060 --> 02:24:57,060
 which pixel value is large

2181
02:24:57,060 --> 02:24:59,060
 or small in advance? You

2182
02:24:59,060 --> 02:25:01,060
 do not know, right. So, therefore,

2183
02:25:01,060 --> 02:25:03,060
 you do not have a good way to know where

2184
02:25:03,060 --> 02:25:05,060
 the energy is located. But,

2185
02:25:05,060 --> 02:25:07,060
 if you apply the transform,

2186
02:25:07,060 --> 02:25:09,060
 once you have the data in the transform

2187
02:25:09,060 --> 02:25:11,060
 domain, you can see most of the energy

2188
02:25:11,060 --> 02:25:13,060
 will be concentrated to a small

2189
02:25:13,060 --> 02:25:15,060
 number of kVc.

2190
02:25:15,060 --> 02:25:17,060
 So, this is the high level

2191
02:25:17,060 --> 02:25:19,060
 kind of explanation.

2192
02:25:19,060 --> 02:25:21,060
 Later on, when we study about DCT,

2193
02:25:21,060 --> 02:25:23,060
 a lot of this concept will

2194
02:25:23,060 --> 02:25:25,060
 become a lot more concrete and clear.

2195
02:25:25,060 --> 02:25:27,060
 So, anyway,

2196
02:25:27,060 --> 02:25:29,060
 this is the point I was trying to say.

2197
02:25:29,060 --> 02:25:31,060
 But after the transform, the energy

2198
02:25:31,060 --> 02:25:33,060
 will be focusing to

2199
02:25:33,060 --> 02:25:35,060
 a small number of kVc.

2200
02:25:35,060 --> 02:25:37,060
 So, the second

2201
02:25:37,060 --> 02:25:39,060
 is that it offers a redundancy

2202
02:25:39,060 --> 02:25:41,060
 reduction, so which means that

2203
02:25:41,060 --> 02:25:43,060
 you reduce the correlation between

2204
02:25:43,060 --> 02:25:45,060
 the transform kVc. So, what it means

2205
02:25:45,060 --> 02:25:47,060
 at this point is that if you look at the

2206
02:25:47,060 --> 02:25:49,060
 original image

2207
02:25:49,060 --> 02:25:51,060
 domain or pixel domain,

2208
02:25:51,060 --> 02:25:53,060
 if you know this current pixel,

2209
02:25:53,060 --> 02:25:55,060
 do you think you more or less

2210
02:25:55,060 --> 02:25:57,060
 know what is the pixel value next to it?

2211
02:25:57,060 --> 02:25:59,060
 In the original

2212
02:25:59,060 --> 02:26:01,060
 image domain,

2213
02:26:01,060 --> 02:26:03,060
 if you know this pixel value,

2214
02:26:03,060 --> 02:26:05,060
 do you think you more or less know

2215
02:26:05,060 --> 02:26:07,060
 what is the pixel value next to it?

2216
02:26:09,060 --> 02:26:11,060
 Yes or no?

2217
02:26:11,060 --> 02:26:13,060
 In the

2218
02:26:13,060 --> 02:26:15,060
 image domain, if you know this current

2219
02:26:15,060 --> 02:26:17,060
 pixel value, do you think more or less

2220
02:26:17,060 --> 02:26:19,060
 you know the pixel value surrounding it?

2221
02:26:21,060 --> 02:26:23,060
 Yes or no?

2222
02:26:25,060 --> 02:26:27,060
 In order to answer this question,

2223
02:26:27,060 --> 02:26:29,060
 kind of go back to just

2224
02:26:29,060 --> 02:26:31,060
 a few slides ago, one of

2225
02:26:31,060 --> 02:26:33,060
 the redundancies that I mentioned to you,

2226
02:26:33,060 --> 02:26:35,060
 which is specifically spatial redundancy.

2227
02:26:35,060 --> 02:26:37,060
 What does spatial

2228
02:26:37,060 --> 02:26:39,060
 redundancy tell you?

2229
02:26:39,060 --> 02:26:41,060
 If you look at a small

2230
02:26:41,060 --> 02:26:43,060
 pixel neighbourhood,

2231
02:26:43,060 --> 02:26:45,060
 the pixel value tends to

2232
02:26:45,060 --> 02:26:47,060
 be very

2233
02:26:47,060 --> 02:26:49,060
 similar to each other. For most natural

2234
02:26:49,060 --> 02:26:51,060
 images, that is the case.

2235
02:26:51,060 --> 02:26:53,060
 If you look at a very small

2236
02:26:53,060 --> 02:26:55,060
 pixel neighbourhood, like for example,

2237
02:26:55,060 --> 02:26:57,060
 4x4 or 8x8, the pixel

2238
02:26:57,060 --> 02:26:59,060
 values tends to be very similar

2239
02:26:59,060 --> 02:27:01,060
 to each other most of the time.

2240
02:27:01,060 --> 02:27:03,060
 So, if the pixel value

2241
02:27:03,060 --> 02:27:05,060
 tends to be very similar to each other, that means

2242
02:27:05,060 --> 02:27:07,060
 if you know this current pixel value,

2243
02:27:07,060 --> 02:27:09,060
 do you think you more or less

2244
02:27:09,060 --> 02:27:11,060
 can tell what is the pixel value close

2245
02:27:11,060 --> 02:27:13,060
 to it? Yes, right?

2246
02:27:13,060 --> 02:27:15,060
 That's what I've been telling you,

2247
02:27:15,060 --> 02:27:17,060
 the spatial redundancy.

2248
02:27:17,060 --> 02:27:19,060
 Most images have this kind of redundancy,

2249
02:27:19,060 --> 02:27:21,060
 which is spatial redundancy.

2250
02:27:21,060 --> 02:27:23,060
 So, if you, in the image

2251
02:27:23,060 --> 02:27:25,060
 domain, if you know this current pixel value, that means

2252
02:27:25,060 --> 02:27:27,060
 you also know the pixel values around

2253
02:27:27,060 --> 02:27:29,060
 it, okay, from the

2254
02:27:29,060 --> 02:27:31,060
 compression perspective, this is not

2255
02:27:31,060 --> 02:27:33,060
 good. Why? Because you

2256
02:27:33,060 --> 02:27:35,060
 store lots of redundant,

2257
02:27:35,060 --> 02:27:37,060
 unnecessary information. For example,

2258
02:27:37,060 --> 02:27:39,060
 if you look at a 4x4 pixel block, if

2259
02:27:39,060 --> 02:27:41,060
 all the pixel values are very similar to

2260
02:27:41,060 --> 02:27:43,060
 each other, why do I need to store

2261
02:27:43,060 --> 02:27:45,060
 all the pixel value?

2262
02:27:45,060 --> 02:27:47,060
 I just need to roughly store one pixel

2263
02:27:47,060 --> 02:27:49,060
 value, more or less can represent this block

2264
02:27:49,060 --> 02:27:51,060
 already. So, therefore,

2265
02:27:51,060 --> 02:27:53,060
 okay, if you are talking

2266
02:27:53,060 --> 02:27:55,060
 about image in the original

2267
02:27:55,060 --> 02:27:57,060
 image domain, it contains

2268
02:27:57,060 --> 02:27:59,060
 a, right, okay,

2269
02:27:59,060 --> 02:28:01,060
 knowing this particular

2270
02:28:01,060 --> 02:28:03,060
 pixel value means you also

2271
02:28:03,060 --> 02:28:05,060
 more or less can tell the pixel value

2272
02:28:05,060 --> 02:28:07,060
 surrounding it. So, that means

2273
02:28:07,060 --> 02:28:09,060
 they actually have strong correlation.

2274
02:28:09,060 --> 02:28:11,060
 The pixel value,

2275
02:28:11,060 --> 02:28:13,060
 the current pixel value and its surrounding

2276
02:28:13,060 --> 02:28:15,060
 pixel value has strong

2277
02:28:15,060 --> 02:28:17,060
 correlation. When they have strong

2278
02:28:17,060 --> 02:28:19,060
 correlation, that means there's lots of redundancy.

2279
02:28:19,060 --> 02:28:21,060
 And when they have

2280
02:28:21,060 --> 02:28:23,060
 lots of redundancy, this is not good

2281
02:28:23,060 --> 02:28:25,060
 from the compression

2282
02:28:25,060 --> 02:28:27,060
 perspective, because you have so much

2283
02:28:27,060 --> 02:28:29,060
 extra unnecessary information

2284
02:28:29,060 --> 02:28:31,060
 that you are storing. Okay? So, that's

2285
02:28:31,060 --> 02:28:33,060
 what it states here.

2286
02:28:33,060 --> 02:28:35,060
 On the other hand, right, this particular

2287
02:28:35,060 --> 02:28:37,060
 image in the original pixel

2288
02:28:37,060 --> 02:28:39,060
 domain, if you transform it

2289
02:28:39,060 --> 02:28:41,060
 into the transform domain, so in

2290
02:28:41,060 --> 02:28:43,060
 the transform domain, you have some

2291
02:28:43,060 --> 02:28:45,060
 transform coefficient.

2292
02:28:45,060 --> 02:28:47,060
 Right, so just based on what I

2293
02:28:47,060 --> 02:28:49,060
 explained, do you think that in the transform

2294
02:28:49,060 --> 02:28:51,060
 domain now, knowing this

2295
02:28:51,060 --> 02:28:53,060
 pixel value will tell you what is

2296
02:28:53,060 --> 02:28:55,060
 the, knowing this coefficient

2297
02:28:55,060 --> 02:28:57,060
 will tell you what is the

2298
02:28:57,060 --> 02:28:59,060
 coefficient next to it?

2299
02:29:01,060 --> 02:29:03,060
 Chances are, no.

2300
02:29:03,060 --> 02:29:05,060
 Okay, in the transform domain now,

2301
02:29:05,060 --> 02:29:07,060
 in the transform domain, you have lots

2302
02:29:07,060 --> 02:29:09,060
 of transform coefficient.

2303
02:29:09,060 --> 02:29:11,060
 So, if you know this transform coefficient,

2304
02:29:11,060 --> 02:29:13,060
 it doesn't tell you much

2305
02:29:13,060 --> 02:29:15,060
 the transform coefficient next

2306
02:29:15,060 --> 02:29:17,060
 to it. So, this is

2307
02:29:17,060 --> 02:29:19,060
 actually good from the compression perspective.

2308
02:29:19,060 --> 02:29:21,060
 Why? Because knowing

2309
02:29:21,060 --> 02:29:23,060
 this particular coefficient doesn't tell you

2310
02:29:23,060 --> 02:29:25,060
 the coefficient around it. That means you

2311
02:29:25,060 --> 02:29:27,060
 remove lots of the redundant

2312
02:29:27,060 --> 02:29:29,060
 information already.

2313
02:29:29,060 --> 02:29:31,060
 So, from the compression perspective,

2314
02:29:31,060 --> 02:29:33,060
 that is good. Right, so again,

2315
02:29:33,060 --> 02:29:35,060
 this is high level. Yeah, later on when

2316
02:29:35,060 --> 02:29:37,060
 we study DCT, we will give you

2317
02:29:37,060 --> 02:29:39,060
 a lot more concrete example.

2318
02:29:39,060 --> 02:29:41,060
 But in short, what it means is that it offers

2319
02:29:41,060 --> 02:29:43,060
 redundancy reduction.

2320
02:29:43,060 --> 02:29:45,060
 It reduces the correlation, or the

2321
02:29:45,060 --> 02:29:47,060
 similarity, okay, between

2322
02:29:47,060 --> 02:29:49,060
 the transform coefficient, just like what I mentioned.

2323
02:29:49,060 --> 02:29:51,060
 Now, in the transform domain, knowing this

2324
02:29:51,060 --> 02:29:53,060
 pixel value doesn't, knowing

2325
02:29:53,060 --> 02:29:55,060
 this coefficient doesn't tell you the

2326
02:29:55,060 --> 02:29:57,060
 coefficient surrounding it.

2327
02:29:57,060 --> 02:29:59,060
 Okay, so which is good from

2328
02:29:59,060 --> 02:30:01,060
 the compression perspective.

2329
02:30:01,060 --> 02:30:03,060
 And then for this transform coding,

2330
02:30:03,060 --> 02:30:05,060
 it's a reversible process.

2331
02:30:05,060 --> 02:30:07,060
 That means the original

2332
02:30:07,060 --> 02:30:09,060
 signal can be obtained by applying

2333
02:30:09,060 --> 02:30:11,060
 the inverse transform. So, if you

2334
02:30:11,060 --> 02:30:13,060
 have the data in the

2335
02:30:13,060 --> 02:30:15,060
 image domain, you can perform the

2336
02:30:15,060 --> 02:30:17,060
 forward transform to get the transform

2337
02:30:17,060 --> 02:30:19,060
 coefficient. And for this particular

2338
02:30:19,060 --> 02:30:21,060
 transform coefficient, you can

2339
02:30:21,060 --> 02:30:23,060
 take the inverse transform to recover

2340
02:30:23,060 --> 02:30:25,060
 your original pixel.

2341
02:30:25,060 --> 02:30:27,060
 So therefore, it's actually

2342
02:30:27,060 --> 02:30:29,060
 a reversible process.

2343
02:30:29,060 --> 02:30:31,060
 That's what I mean by reversible

2344
02:30:31,060 --> 02:30:33,060
 process here.

2345
02:30:33,060 --> 02:30:35,060
 Right, okay, so let's look at some typical

2346
02:30:35,060 --> 02:30:37,060
 transform-based image compression scheme.

2347
02:30:37,060 --> 02:30:39,060
 Right, so there's many ways

2348
02:30:39,060 --> 02:30:41,060
 for you to perform image compression.

2349
02:30:41,060 --> 02:30:43,060
 So, transform-based image compression

2350
02:30:43,060 --> 02:30:45,060
 is one of the most popular

2351
02:30:45,060 --> 02:30:47,060
 way to perform compression.

2352
02:30:47,060 --> 02:30:49,060
 Right, so techniques such as

2353
02:30:49,060 --> 02:30:51,060
 standards such as JPEG compression

2354
02:30:51,060 --> 02:30:53,060
 and MPEG compression is based

2355
02:30:53,060 --> 02:30:55,060
 on transform-based image compression.

2356
02:30:55,060 --> 02:30:57,060
 So, what's the typical

2357
02:30:57,060 --> 02:30:59,060
 pipelines of a transform-based

2358
02:30:59,060 --> 02:31:01,060
 image compression?

2359
02:31:01,060 --> 02:31:03,060
 Right, so a typical transform-based image

2360
02:31:03,060 --> 02:31:05,060
 compression consists of the following steps.

2361
02:31:05,060 --> 02:31:07,060
 Yes, image partitioning, transform,

2362
02:31:07,060 --> 02:31:09,060
 quantization and coding.

2363
02:31:09,060 --> 02:31:11,060
 So, let's look at each of these steps a bit

2364
02:31:11,060 --> 02:31:13,060
 more in detail. So, first of all,

2365
02:31:13,060 --> 02:31:15,060
 right, we have an input

2366
02:31:15,060 --> 02:31:17,060
 image, supposed to be an input image.

2367
02:31:17,060 --> 02:31:19,060
 The first thing is that we do this

2368
02:31:19,060 --> 02:31:21,060
 particular partitioning. This image,

2369
02:31:21,060 --> 02:31:23,060
 we partition it into

2370
02:31:23,060 --> 02:31:25,060
 numerous sub-images

2371
02:31:25,060 --> 02:31:27,060
 or pixel blocks.

2372
02:31:27,060 --> 02:31:29,060
 So, we can partition

2373
02:31:29,060 --> 02:31:31,060
 to construct end-by-end

2374
02:31:31,060 --> 02:31:33,060
 sub-image or pixel block.

2375
02:31:33,060 --> 02:31:35,060
 Right, okay, so and afterwards

2376
02:31:35,060 --> 02:31:37,060
 for each of this sub-image or pixel block

2377
02:31:37,060 --> 02:31:39,060
 we'll let it go through a forward

2378
02:31:39,060 --> 02:31:41,060
 transform. Okay, let me just

2379
02:31:41,060 --> 02:31:43,060
 repeat. Given the image,

2380
02:31:43,060 --> 02:31:45,060
 we partition it into numerous

2381
02:31:45,060 --> 02:31:47,060
 pixel block or sub-image.

2382
02:31:47,060 --> 02:31:49,060
 For each of this particular pixel block,

2383
02:31:49,060 --> 02:31:51,060
 we can do the transformation

2384
02:31:51,060 --> 02:31:53,060
 to transform it into

2385
02:31:53,060 --> 02:31:55,060
 the transform coefficient.

2386
02:31:55,060 --> 02:31:57,060
 So, this is what it means

2387
02:31:57,060 --> 02:31:59,060
 by the forward transform.

2388
02:31:59,060 --> 02:32:01,060
 So, this

2389
02:32:01,060 --> 02:32:03,060
 pixel block,

2390
02:32:03,060 --> 02:32:05,060
 you do the transform, you have the transform

2391
02:32:05,060 --> 02:32:07,060
 coefficient now. So, this

2392
02:32:07,060 --> 02:32:09,060
 transform coefficient next, you need to go through

2393
02:32:09,060 --> 02:32:11,060
 a quantizer here.

2394
02:32:11,060 --> 02:32:13,060
 So, the objective of this

2395
02:32:13,060 --> 02:32:15,060
 particular quantizer is because

2396
02:32:15,060 --> 02:32:17,060
 for our work,

2397
02:32:17,060 --> 02:32:19,060
 nowadays we are using

2398
02:32:19,060 --> 02:32:21,060
 a digital representation.

2399
02:32:21,060 --> 02:32:23,060
 That means we are using computer

2400
02:32:23,060 --> 02:32:25,060
 and computers are using some

2401
02:32:25,060 --> 02:32:27,060
 finite number of bits

2402
02:32:27,060 --> 02:32:29,060
 to represent it. So, right,

2403
02:32:29,060 --> 02:32:31,060
 when you do this

2404
02:32:31,060 --> 02:32:33,060
 forward transform, the value

2405
02:32:33,060 --> 02:32:35,060
 potentially are continuous value.

2406
02:32:35,060 --> 02:32:37,060
 It's a continuous

2407
02:32:37,060 --> 02:32:39,060
 value signal.

2408
02:32:39,060 --> 02:32:41,060
 But we are using computer to represent

2409
02:32:41,060 --> 02:32:43,060
 this data. So,

2410
02:32:43,060 --> 02:32:45,060
 when using computer, that means you are using

2411
02:32:45,060 --> 02:32:47,060
 a finite number of bits.

2412
02:32:47,060 --> 02:32:49,060
 So, finite number of bits means that you can

2413
02:32:49,060 --> 02:32:51,060
 only have a finite number of levels

2414
02:32:51,060 --> 02:32:53,060
 to represent it. Right, so,

2415
02:32:53,060 --> 02:32:55,060
 therefore, in order to

2416
02:32:55,060 --> 02:32:57,060
 be able to use only finite number of

2417
02:32:57,060 --> 02:32:59,060
 levels to represent, we have to perform

2418
02:32:59,060 --> 02:33:01,060
 quantization. So,

2419
02:33:01,060 --> 02:33:03,060
 this quantizer is to perform

2420
02:33:03,060 --> 02:33:05,060
 the quantization, similar to

2421
02:33:05,060 --> 02:33:07,060
 any, you know, similar

2422
02:33:07,060 --> 02:33:09,060
 quantizer you have studied before.

2423
02:33:09,060 --> 02:33:11,060
 So, once you have quantized it,

2424
02:33:11,060 --> 02:33:13,060
 the output at this

2425
02:33:13,060 --> 02:33:15,060
 particular junction is you have some symbol.

2426
02:33:15,060 --> 02:33:17,060
 So, you have some pattern.

2427
02:33:17,060 --> 02:33:19,060
 So, this pattern, now you have some patterns

2428
02:33:19,060 --> 02:33:21,060
 here. Some of these patterns will occur

2429
02:33:21,060 --> 02:33:23,060
 more often than the others.

2430
02:33:23,060 --> 02:33:25,060
 So, then, in your mind,

2431
02:33:25,060 --> 02:33:27,060
 right away you think, okay, if that's the case,

2432
02:33:27,060 --> 02:33:29,060
 then what I'm going to do is I'm going to use

2433
02:33:29,060 --> 02:33:31,060
 a symbol encoder,

2434
02:33:31,060 --> 02:33:33,060
 such as a Huffman coding, to

2435
02:33:33,060 --> 02:33:35,060
 perform decompression. So, therefore,

2436
02:33:35,060 --> 02:33:37,060
 this is the typical pipeline.

2437
02:33:37,060 --> 02:33:39,060
 Right, we have image, we partition into

2438
02:33:39,060 --> 02:33:41,060
 numerous pixel blocks or sub-image.

2439
02:33:41,060 --> 02:33:43,060
 Each of the blocks we let it go through

2440
02:33:43,060 --> 02:33:45,060
 a forward transform. We

2441
02:33:45,060 --> 02:33:47,060
 let it go through a quantizer to quantize

2442
02:33:47,060 --> 02:33:49,060
 into a finite number of patterns.

2443
02:33:49,060 --> 02:33:51,060
 Okay, and then we use a symbol decoder,

2444
02:33:51,060 --> 02:33:53,060
 because some patterns occur more often

2445
02:33:53,060 --> 02:33:55,060
 than the others. We use some symbol decoder

2446
02:33:55,060 --> 02:33:57,060
 such as Huffman coding, right,

2447
02:33:57,060 --> 02:33:59,060
 to convert it into

2448
02:33:59,060 --> 02:34:01,060
 the bitstream. So, when you see this

2449
02:34:01,060 --> 02:34:03,060
 compressed image, then it means that now

2450
02:34:03,060 --> 02:34:05,060
 you have a compressed bitstream already.

2451
02:34:05,060 --> 02:34:07,060
 So, this is the

2452
02:34:07,060 --> 02:34:09,060
 encoder. So, encoder

2453
02:34:09,060 --> 02:34:11,060
 means that you take an image,

2454
02:34:11,060 --> 02:34:13,060
 right, after you have gone through this

2455
02:34:13,060 --> 02:34:15,060
 encoder, right, you will have

2456
02:34:15,060 --> 02:34:17,060
 the compressed bitstream.

2457
02:34:17,060 --> 02:34:19,060
 Okay, it's much smaller.

2458
02:34:19,060 --> 02:34:21,060
 Right, so this particular figure now is a

2459
02:34:21,060 --> 02:34:23,060
 decoder. So, the decoder means

2460
02:34:23,060 --> 02:34:25,060
 that you have a compressed image

2461
02:34:25,060 --> 02:34:27,060
 of bitstream, right, after you

2462
02:34:27,060 --> 02:34:29,060
 go through this decoder, you'll

2463
02:34:29,060 --> 02:34:31,060
 get your reconstructed

2464
02:34:31,060 --> 02:34:33,060
 or decompressed image.

2465
02:34:33,060 --> 02:34:35,060
 So, for this particular process here,

2466
02:34:35,060 --> 02:34:37,060
 it's the reverse of this.

2467
02:34:37,060 --> 02:34:39,060
 So, first you have the compressed image of

2468
02:34:39,060 --> 02:34:41,060
 bitstream, you let it go through the symbol

2469
02:34:41,060 --> 02:34:43,060
 decoder. So, this is encoder,

2470
02:34:43,060 --> 02:34:45,060
 this is decoder. Right, and

2471
02:34:45,060 --> 02:34:47,060
 afterwards, actually there's a missing block here,

2472
02:34:47,060 --> 02:34:49,060
 right, this textbook

2473
02:34:49,060 --> 02:34:51,060
 missed out this block. So, this block here,

2474
02:34:51,060 --> 02:34:53,060
 this is quantizer, this is the de-quantizer.

2475
02:34:53,060 --> 02:34:55,060
 It's just performing the reverse.

2476
02:34:55,060 --> 02:34:57,060
 One of them you divide the other,

2477
02:34:57,060 --> 02:34:59,060
 one of them you divide the other, you multiply.

2478
02:34:59,060 --> 02:35:01,060
 Okay, this is a

2479
02:35:01,060 --> 02:35:03,060
 full transform, this is the inverse transform.

2480
02:35:03,060 --> 02:35:05,060
 You partition it into numerous

2481
02:35:05,060 --> 02:35:07,060
 blocks, this you put the blocks

2482
02:35:07,060 --> 02:35:09,060
 together. Right, so that's pretty much

2483
02:35:09,060 --> 02:35:11,060
 the reverse of it. So,

2484
02:35:11,060 --> 02:35:13,060
 this full transform, this is the inverse

2485
02:35:13,060 --> 02:35:15,060
 transform. Okay, so

2486
02:35:15,060 --> 02:35:17,060
 next let's look at some of the

2487
02:35:17,060 --> 02:35:19,060
 common transform.

2488
02:35:19,060 --> 02:35:21,060
 So, okay, so for this common

2489
02:35:21,060 --> 02:35:23,060
 transform is that we apply a one-to-one

2490
02:35:23,060 --> 02:35:25,060
 transform to the input data.

2491
02:35:25,060 --> 02:35:27,060
 So, this transformation is a

2492
02:35:27,060 --> 02:35:29,060
 one-to-one transformation. Okay,

2493
02:35:29,060 --> 02:35:31,060
 so why do we want to do the transform? I think we

2494
02:35:31,060 --> 02:35:33,060
 mentioned it early on.

2495
02:35:33,060 --> 02:35:35,060
 The reason why we want to perform the transform

2496
02:35:35,060 --> 02:35:37,060
 is the transform output is in

2497
02:35:37,060 --> 02:35:39,060
 a representation which is more

2498
02:35:39,060 --> 02:35:41,060
 suitable for efficient compression

2499
02:35:41,060 --> 02:35:43,060
 than the raw image data. So,

2500
02:35:43,060 --> 02:35:45,060
 this point pretty much is what I mentioned.

2501
02:35:45,060 --> 02:35:47,060
 Yeah, once you have this particular

2502
02:35:47,060 --> 02:35:49,060
 small image

2503
02:35:49,060 --> 02:35:51,060
 block, okay,

2504
02:35:51,060 --> 02:35:53,060
 when you do the transformation,

2505
02:35:53,060 --> 02:35:55,060
 once it's in this transform domain,

2506
02:35:55,060 --> 02:35:57,060
 this transform domain, you know,

2507
02:35:57,060 --> 02:35:59,060
 has some good property that we can exploit

2508
02:35:59,060 --> 02:36:01,060
 or its representation

2509
02:36:01,060 --> 02:36:03,060
 is more suitable for compression.

2510
02:36:03,060 --> 02:36:05,060
 Yeah, okay, so

2511
02:36:05,060 --> 02:36:07,060
 among all those transform, one of the

2512
02:36:07,060 --> 02:36:09,060
 most popular transform is the

2513
02:36:09,060 --> 02:36:11,060
 DCT. Okay,

2514
02:36:11,060 --> 02:36:13,060
 so DCT is a

2515
02:36:13,060 --> 02:36:15,060
 unitary mapping.

2516
02:36:15,060 --> 02:36:17,060
 So, unitary mapping

2517
02:36:17,060 --> 02:36:19,060
 means that this particular transform

2518
02:36:19,060 --> 02:36:21,060
 matrix, if you call this

2519
02:36:21,060 --> 02:36:23,060
 transform matrix T,

2520
02:36:23,060 --> 02:36:25,060
 then it's T, T-transposed

2521
02:36:25,060 --> 02:36:27,060
 is equal to T-transposed,

2522
02:36:27,060 --> 02:36:29,060
 T is equal to identity.

2523
02:36:29,060 --> 02:36:31,060
 So, anyway, for those of you who study

2524
02:36:31,060 --> 02:36:33,060
 linear algebra, you

2525
02:36:33,060 --> 02:36:35,060
 know that this particular

2526
02:36:35,060 --> 02:36:37,060
 properties of unitary

2527
02:36:37,060 --> 02:36:39,060
 transformation.

2528
02:36:39,060 --> 02:36:41,060
 Okay, so DCT is a

2529
02:36:41,060 --> 02:36:43,060
 type of unitary

2530
02:36:43,060 --> 02:36:45,060
 mapping. So, later on, when we

2531
02:36:45,060 --> 02:36:47,060
 study about how do we perform

2532
02:36:47,060 --> 02:36:49,060
 this DCT will become clear.

2533
02:36:49,060 --> 02:36:51,060
 So, DCT has a good property

2534
02:36:51,060 --> 02:36:53,060
 because it can pack the energy

2535
02:36:53,060 --> 02:36:55,060
 into a small number of kVc.

2536
02:36:55,060 --> 02:36:57,060
 So, just like what I mentioned

2537
02:36:57,060 --> 02:36:59,060
 earlier on, so if you look at

2538
02:36:59,060 --> 02:37:01,060
 a small pixel block, we do not know

2539
02:37:01,060 --> 02:37:03,060
 where the energy is located.

2540
02:37:03,060 --> 02:37:05,060
 But after you use a DCT

2541
02:37:05,060 --> 02:37:07,060
 transform, the energy will be packed

2542
02:37:07,060 --> 02:37:09,060
 into a small number of kVc.

2543
02:37:09,060 --> 02:37:11,060
 So, once we can pack into a small number

2544
02:37:11,060 --> 02:37:13,060
 of kVc, then we can pay our

2545
02:37:13,060 --> 02:37:15,060
 attention to try to represent

2546
02:37:15,060 --> 02:37:17,060
 data for this

2547
02:37:17,060 --> 02:37:19,060
 small number of kVc.

2548
02:37:19,060 --> 02:37:21,060
 So, there are some

2549
02:37:21,060 --> 02:37:23,060
 well-known transforms,

2550
02:37:23,060 --> 02:37:25,060
 which include, for

2551
02:37:25,060 --> 02:37:27,060
 example, some of the well-known transforms.

2552
02:37:27,060 --> 02:37:29,060
 It's a DFT,

2553
02:37:29,060 --> 02:37:31,060
 discrete Fourier Transform,

2554
02:37:31,060 --> 02:37:33,060
 discrete Cosine Transform, discrete

2555
02:37:33,060 --> 02:37:35,060
 Wave Flare Transform. So, these are some of the

2556
02:37:35,060 --> 02:37:37,060
 popular transforms that have been used.

2557
02:37:37,060 --> 02:37:39,060
 But for JPEG

2558
02:37:39,060 --> 02:37:41,060
 and MPAC, we will be using

2559
02:37:41,060 --> 02:37:43,060
 this DCT. That's why we will

2560
02:37:43,060 --> 02:37:45,060
 study, our key focus will be studying

2561
02:37:45,060 --> 02:37:47,060
 on this. This

2562
02:37:47,060 --> 02:37:49,060
 DWT is used in JPEG

2563
02:37:49,060 --> 02:37:51,060
 2000, right? Actually,

2564
02:37:51,060 --> 02:37:53,060
 now it's less commonly used.

2565
02:37:53,060 --> 02:37:55,060
 That's why we will not touch on it. We will

2566
02:37:55,060 --> 02:37:57,060
 only be focusing on this DCT

2567
02:37:57,060 --> 02:37:59,060
 transform. And then, based on

2568
02:37:59,060 --> 02:38:01,060
 this DCT transform, then we will explain

2569
02:38:01,060 --> 02:38:03,060
 all those properties that we have just mentioned.

2570
02:38:05,060 --> 02:38:07,060
 So, just now, this slide here is pretty

2571
02:38:07,060 --> 02:38:09,060
 much explaining about this transform

2572
02:38:09,060 --> 02:38:11,060
 block. So, the next

2573
02:38:11,060 --> 02:38:13,060
 block that we have is the quantization.

2574
02:38:13,060 --> 02:38:15,060
 So, as I mentioned, the objective

2575
02:38:15,060 --> 02:38:17,060
 of quantization is that you want to generate

2576
02:38:17,060 --> 02:38:19,060
 a small number of symbols

2577
02:38:19,060 --> 02:38:21,060
 from the transform coefficient.

2578
02:38:21,060 --> 02:38:23,060
 Because, alright,

2579
02:38:23,060 --> 02:38:25,060
 after you have performed this

2580
02:38:25,060 --> 02:38:27,060
 transform, the output, right, so

2581
02:38:27,060 --> 02:38:29,060
 for example, the signal

2582
02:38:29,060 --> 02:38:31,060
 at this particular junction is

2583
02:38:31,060 --> 02:38:33,060
 4x4 pixel block.

2584
02:38:33,060 --> 02:38:35,060
 After you have performed the transform,

2585
02:38:35,060 --> 02:38:37,060
 what you have is a 4x4, for example,

2586
02:38:37,060 --> 02:38:39,060
 transform coefficients

2587
02:38:39,060 --> 02:38:41,060
 here. So, this transform

2588
02:38:41,060 --> 02:38:43,060
 coefficients, their values are

2589
02:38:43,060 --> 02:38:45,060
 continuous value.

2590
02:38:45,060 --> 02:38:47,060
 So, therefore, if you want to use

2591
02:38:47,060 --> 02:38:49,060
 a computer to represent,

2592
02:38:49,060 --> 02:38:51,060
 we must perform quantization.

2593
02:38:51,060 --> 02:38:53,060
 So, it's to generate

2594
02:38:53,060 --> 02:38:55,060
 a finite number of symbols from the

2595
02:38:55,060 --> 02:38:57,060
 transform coefficient. Because transform

2596
02:38:57,060 --> 02:38:59,060
 coefficient initially is continuous value.

2597
02:38:59,060 --> 02:39:01,060
 So, we need to perform quantization.

2598
02:39:01,060 --> 02:39:03,060
 So, it's irreversible

2599
02:39:03,060 --> 02:39:05,060
 many-to-one mapping causing information

2600
02:39:05,060 --> 02:39:07,060
 loss. So, for many of you

2601
02:39:07,060 --> 02:39:09,060
 who have studied your undergrad before, you

2602
02:39:09,060 --> 02:39:11,060
 know that once you perform quantization,

2603
02:39:11,060 --> 02:39:13,060
 information will be lost.

2604
02:39:13,060 --> 02:39:15,060
 So, information, when information is lost,

2605
02:39:15,060 --> 02:39:17,060
 that means it's an irreversible process.

2606
02:39:17,060 --> 02:39:19,060
 So, what it means is that

2607
02:39:19,060 --> 02:39:21,060
 if you look at this simple scalar

2608
02:39:21,060 --> 02:39:23,060
 quantization, your horizontal

2609
02:39:23,060 --> 02:39:25,060
 axis is the input and the vertical axis

2610
02:39:25,060 --> 02:39:27,060
 is the output. So, suppose

2611
02:39:27,060 --> 02:39:29,060
 if your input is in this

2612
02:39:29,060 --> 02:39:31,060
 range here, you can see the input

2613
02:39:31,060 --> 02:39:33,060
 in this range here will be mapped

2614
02:39:33,060 --> 02:39:35,060
 to this same output of 0.5.

2615
02:39:35,060 --> 02:39:37,060
 For this range of input,

2616
02:39:37,060 --> 02:39:39,060
 okay, this range of input

2617
02:39:39,060 --> 02:39:41,060
 here will be mapped to this output value

2618
02:39:41,060 --> 02:39:43,060
 of 0.5. So, that means when you do that,

2619
02:39:43,060 --> 02:39:45,060
 it's a many-to-one mapping.

2620
02:39:45,060 --> 02:39:47,060
 Many value from here

2621
02:39:47,060 --> 02:39:49,060
 will be mapped to this single output

2622
02:39:49,060 --> 02:39:51,060
 value. So, it's a many-to-one

2623
02:39:51,060 --> 02:39:53,060
 mapping. When you do that,

2624
02:39:53,060 --> 02:39:55,060
 that means some information has been lost

2625
02:39:55,060 --> 02:39:57,060
 already. Why do we say some information has

2626
02:39:57,060 --> 02:39:59,060
 been lost? Because now

2627
02:39:59,060 --> 02:40:01,060
 you know the output is 0.5,

2628
02:40:01,060 --> 02:40:03,060
 can you recover what is your

2629
02:40:03,060 --> 02:40:05,060
 original input? You cannot. You do

2630
02:40:05,060 --> 02:40:07,060
 not know which of this

2631
02:40:07,060 --> 02:40:09,060
 input value mapped to this output.

2632
02:40:09,060 --> 02:40:11,060
 So, therefore, you can see quite clearly

2633
02:40:11,060 --> 02:40:13,060
 from this particular example, it's a

2634
02:40:13,060 --> 02:40:15,060
 many-to-one mapping,

2635
02:40:15,060 --> 02:40:17,060
 and some information has been lost

2636
02:40:17,060 --> 02:40:19,060
 already because input value within this

2637
02:40:19,060 --> 02:40:21,060
 range will be mapped to this output

2638
02:40:21,060 --> 02:40:23,060
 value. So, from these output values

2639
02:40:23,060 --> 02:40:25,060
 of 0.5, you cannot recover

2640
02:40:25,060 --> 02:40:27,060
 your original input.

2641
02:40:27,060 --> 02:40:29,060
 If that happened,

2642
02:40:29,060 --> 02:40:31,060
 that means some information has been lost.

2643
02:40:31,060 --> 02:40:33,060
 So, these are some, two examples

2644
02:40:33,060 --> 02:40:35,060
 of the scalar

2645
02:40:35,060 --> 02:40:37,060
 quantization just to illustrate

2646
02:40:37,060 --> 02:40:39,060
 the point.

2647
02:40:39,060 --> 02:40:41,060
 Right, okay. So, now we have gone through

2648
02:40:41,060 --> 02:40:43,060
 the, we have explained about

2649
02:40:43,060 --> 02:40:45,060
 this quantization already.

2650
02:40:45,060 --> 02:40:47,060
 So, the last one is a symbol

2651
02:40:47,060 --> 02:40:49,060
 encoder.

2652
02:40:49,060 --> 02:40:51,060
 So, the symbol encoder,

2653
02:40:51,060 --> 02:40:53,060
 as I mentioned, after you

2654
02:40:53,060 --> 02:40:55,060
 have done the quantization,

2655
02:40:55,060 --> 02:40:57,060
 so, very often, some pattern

2656
02:40:57,060 --> 02:40:59,060
 will occur more often than the others.

2657
02:40:59,060 --> 02:41:01,060
 So, once you hear that some patterns

2658
02:41:01,060 --> 02:41:03,060
 occur more than the others,

2659
02:41:03,060 --> 02:41:05,060
 that means you know that for different patterns, there are

2660
02:41:05,060 --> 02:41:07,060
 some probability distribution.

2661
02:41:07,060 --> 02:41:09,060
 So, when there are some probability distribution,

2662
02:41:09,060 --> 02:41:11,060
 some pattern occur more than the others,

2663
02:41:11,060 --> 02:41:13,060
 then right away, you know, you have to

2664
02:41:13,060 --> 02:41:15,060
 use techniques such as entropy and coding

2665
02:41:15,060 --> 02:41:17,060
 to compress it,

2666
02:41:17,060 --> 02:41:19,060
 because it's more efficient.

2667
02:41:19,060 --> 02:41:21,060
 So, this coding part, the objective is to

2668
02:41:21,060 --> 02:41:23,060
 assign a code word of

2669
02:41:23,060 --> 02:41:25,060
 patterns to each symbol

2670
02:41:25,060 --> 02:41:27,060
 at the

2671
02:41:27,060 --> 02:41:29,060
 output of the quantization.

2672
02:41:29,060 --> 02:41:31,060
 So, you can, of course, you can choose

2673
02:41:31,060 --> 02:41:33,060
 to use a fixed length or variable length

2674
02:41:33,060 --> 02:41:35,060
 coding, but nowadays, you already know,

2675
02:41:35,060 --> 02:41:37,060
 after you have studied the first part, you know

2676
02:41:37,060 --> 02:41:39,060
 that variable length coding is definitely

2677
02:41:39,060 --> 02:41:41,060
 a much better choice.

2678
02:41:41,060 --> 02:41:43,060
 So, the idea of variable length coding

2679
02:41:43,060 --> 02:41:45,060
 or entropy coding is

2680
02:41:45,060 --> 02:41:47,060
 like what we mentioned before, you assign

2681
02:41:47,060 --> 02:41:49,060
 the code in such a way,

2682
02:41:49,060 --> 02:41:51,060
 such that the average length of the

2683
02:41:51,060 --> 02:41:53,060
 code word will be reduced.

2684
02:41:53,060 --> 02:41:55,060
 So, those more probable

2685
02:41:55,060 --> 02:41:57,060
 symbols or more common symbols, you assign

2686
02:41:57,060 --> 02:41:59,060
 shorter code word.

2687
02:41:59,060 --> 02:42:01,060
 Those less probable symbols, you assign

2688
02:42:01,060 --> 02:42:03,060
 a longer code word, so that overall,

2689
02:42:03,060 --> 02:42:05,060
 the aim is that the average

2690
02:42:05,060 --> 02:42:07,060
 number of bits per symbol is reduced.

2691
02:42:07,060 --> 02:42:09,060
 So, this is achieved

2692
02:42:09,060 --> 02:42:11,060
 by assigning shorter code word

2693
02:42:11,060 --> 02:42:13,060
 to more probable symbol,

2694
02:42:13,060 --> 02:42:15,060
 and this is the fundamental principle

2695
02:42:15,060 --> 02:42:17,060
 of entropy and coding, such as

2696
02:42:17,060 --> 02:42:19,060
 half-moon coding that we have studied.

2697
02:42:21,060 --> 02:42:23,060
 So, I think

2698
02:42:23,060 --> 02:42:25,060
 we'll probably stop today.

2699
02:42:25,060 --> 02:42:27,060
 So, that was...

2700
02:42:27,060 --> 02:42:29,060
 Thank you.

2701
02:42:29,060 --> 02:42:31,060
 I'll see you next week.

2702
02:42:59,060 --> 02:43:01,060
 I'll take it down for you.

2703
02:43:01,060 --> 02:43:03,060
 Okay.

2704
02:43:03,060 --> 02:43:05,060
 This sigma s square is

2705
02:43:05,060 --> 02:43:07,060
 according to its description,

2706
02:43:07,060 --> 02:43:09,060
 it's more like the average to the power of q.

2707
02:43:09,060 --> 02:43:11,060
 But according to this formula,

2708
02:43:11,060 --> 02:43:13,060
 it's more like the variance.

2709
02:43:13,060 --> 02:43:15,060
 So, I wonder what you mean.

2710
02:43:15,060 --> 02:43:17,060
 This is a signal.

2711
02:43:17,060 --> 02:43:19,060
 This is not a noise.

2712
02:43:19,060 --> 02:43:21,060
 This one is x.

2713
02:43:21,060 --> 02:43:23,060
 So, this is the signal.

2714
02:43:23,060 --> 02:43:25,060
 This is the signal.

2715
02:43:25,060 --> 02:43:27,060
 This is the signal.

2716
02:43:27,060 --> 02:43:29,060
 This is not a noise.

2717
02:43:29,060 --> 02:43:31,060
 This one is x.

2718
02:43:31,060 --> 02:43:33,060
 So, in the pixel,

2719
02:43:33,060 --> 02:43:35,060
 in the pixel,

2720
02:43:35,060 --> 02:43:37,060
 if you talk about image

2721
02:43:37,060 --> 02:43:39,060
 as an example,

2722
02:43:39,060 --> 02:43:41,060
 so, image has different pixel values.

2723
02:43:41,060 --> 02:43:43,060
 So, that means what? Each of the pixel values

2724
02:43:43,060 --> 02:43:45,060
 is squared.

2725
02:43:45,060 --> 02:43:47,060
 Each of the pixel values

2726
02:43:47,060 --> 02:43:49,060
 is squared,

2727
02:43:49,060 --> 02:43:51,060
 and afterwards, you take the average.

2728
02:43:51,060 --> 02:43:53,060
 So, yeah.

2729
02:43:53,060 --> 02:43:55,060
 The term below is a noise.

2730
02:43:55,060 --> 02:43:57,060
 Okay.

2731
02:43:57,060 --> 02:43:59,060
 So, it's more like...

2732
02:44:03,060 --> 02:44:05,060
 It's more like this one?

2733
02:44:05,060 --> 02:44:07,060
 Yes.

2734
02:44:07,060 --> 02:44:09,060
 Okay. Thank you.

2735
02:44:17,060 --> 02:44:19,060
 So, what's x, d indicate

2736
02:44:19,060 --> 02:44:21,060
 in the

2737
02:44:21,060 --> 02:44:23,060
 peak signal

2738
02:44:23,060 --> 02:44:25,060
 signal-noise ratio?

2739
02:44:27,060 --> 02:44:29,060
 So,

2740
02:44:29,060 --> 02:44:31,060
 as it is, I just pick

2741
02:44:31,060 --> 02:44:33,060
 signal to noise, right? Pick signal

2742
02:44:33,060 --> 02:44:35,060
 means that the largest

2743
02:44:35,060 --> 02:44:37,060
 value in the

2744
02:44:37,060 --> 02:44:39,060
 original sequence of the signal.

2745
02:44:39,060 --> 02:44:41,060
 Okay. So, suppose

2746
02:44:41,060 --> 02:44:43,060
 if you take the...

2747
02:44:43,060 --> 02:44:45,060
 This signal-noise ratio is

2748
02:44:45,060 --> 02:44:47,060
 a common matrix used in

2749
02:44:47,060 --> 02:44:49,060
 measuring the quality for image

2750
02:44:49,060 --> 02:44:51,060
 restoration.

2751
02:44:51,060 --> 02:44:53,060
 So, for image,

2752
02:44:53,060 --> 02:44:55,060
 for example,

2753
02:44:55,060 --> 02:44:57,060
 if you talk about grayscale first,

2754
02:44:57,060 --> 02:44:59,060
 so, grayscale, each pixel, you use 8 bits

2755
02:44:59,060 --> 02:45:01,060
 to represent. So, that means

2756
02:45:01,060 --> 02:45:03,060
 it's possible values from 0 to 255.

2757
02:45:03,060 --> 02:45:05,060
 So, this peak value is

2758
02:45:05,060 --> 02:45:07,060
 255. So, therefore, the number on top is

2759
02:45:07,060 --> 02:45:09,060
 255 squared.

2760
02:45:09,060 --> 02:45:11,060
 I know.

2761
02:45:11,060 --> 02:45:13,060
 I have a question

2762
02:45:13,060 --> 02:45:15,060
 that's not relevant to the course.

2763
02:45:15,060 --> 02:45:17,060
 Because my

2764
02:45:17,060 --> 02:45:19,060
 annual project is

2765
02:45:19,060 --> 02:45:21,060
 a newer system of

2766
02:45:21,060 --> 02:45:23,060
 EMT. I'm a year-old student.

2767
02:45:23,060 --> 02:45:25,060
 And I see

2768
02:45:25,060 --> 02:45:27,060
 he informed me there's a

2769
02:45:27,060 --> 02:45:29,060
 joint PT with Shanghai Jiao Tong.

2770
02:45:29,060 --> 02:45:31,060
 For

2771
02:45:31,060 --> 02:45:33,060
 PT.

2772
02:45:33,060 --> 02:45:35,060
 For him? Yeah, for him. I also see your name

2773
02:45:35,060 --> 02:45:37,060
 there. The question is

2774
02:45:37,060 --> 02:45:39,060
 it's not the topic.

2775
02:45:39,060 --> 02:45:41,060
 It's just his annual project. You really don't know

2776
02:45:41,060 --> 02:45:43,060
 so much information.

2777
02:45:43,060 --> 02:45:45,060
 I don't know if you have any connection

2778
02:45:45,060 --> 02:45:47,060
 or existing PT students

2779
02:45:47,060 --> 02:45:49,060
 who like under this program.

2780
02:45:49,060 --> 02:45:51,060
 Who is the supervisor?

2781
02:45:51,060 --> 02:45:53,060
 I mean, the

2782
02:45:53,060 --> 02:45:55,060
 I still don't quite understand what's the question

2783
02:45:55,060 --> 02:45:57,060
 you're trying to ask. I just want to ask

2784
02:45:57,060 --> 02:45:59,060
 if there's any existing students

2785
02:45:59,060 --> 02:46:01,060
 who under this joint PT program,

2786
02:46:01,060 --> 02:46:03,060
 like, I want to ask him

2787
02:46:03,060 --> 02:46:05,060
 if there's some

2788
02:46:05,060 --> 02:46:07,060
 questions about the degree

2789
02:46:07,060 --> 02:46:09,060
 verification for Chinese, because

2790
02:46:09,060 --> 02:46:11,060
 we need the distribution system.

2791
02:46:11,060 --> 02:46:13,060
 Oh, so you're saying

2792
02:46:13,060 --> 02:46:15,060
 is there are there some other

2793
02:46:15,060 --> 02:46:17,060
 seniors who have actually gone through this

2794
02:46:17,060 --> 02:46:19,060
 kind of program before?

2795
02:46:19,060 --> 02:46:21,060
 My prof is a new prof, so I think he

2796
02:46:21,060 --> 02:46:23,060
 don't have that cut out. Actually this program is

2797
02:46:23,060 --> 02:46:25,060
 very new. This is also the first time

2798
02:46:25,060 --> 02:46:27,060
 I'm doing it. Yeah, so it's a very new

2799
02:46:27,060 --> 02:46:29,060
 program. So if you have such

2800
02:46:29,060 --> 02:46:31,060
 a question, the best is to ask the office.

2801
02:46:31,060 --> 02:46:35,060
 They even show me the sample of the degree.

2802
02:46:35,060 --> 02:46:37,060
 But

2803
02:46:37,060 --> 02:46:39,060
 we cannot say like for

2804
02:46:39,060 --> 02:46:41,060
 the site of China, if they verify

2805
02:46:41,060 --> 02:46:43,060
 like a foreign or local.

2806
02:46:43,060 --> 02:46:45,060
 So I know the US have

2807
02:46:45,060 --> 02:46:47,060
 a connection with them

2808
02:46:47,060 --> 02:46:49,060
 for a long time, but NTU is

2809
02:46:49,060 --> 02:46:51,060
 from...

2810
02:46:51,060 --> 02:46:53,060
 There are some universities

2811
02:46:53,060 --> 02:46:55,060
 that we have some collaboration

2812
02:46:55,060 --> 02:46:57,060
 for, like, Tsinghua.

2813
02:46:57,060 --> 02:46:59,060
 Yeah, this Tsinghua

2814
02:46:59,060 --> 02:47:01,060
 collaboration with Tsinghua has been ongoing

2815
02:47:01,060 --> 02:47:03,060
 for some time already.

2816
02:47:03,060 --> 02:47:05,060
 But other

2817
02:47:05,060 --> 02:47:07,060
 universities like

2818
02:47:07,060 --> 02:47:09,060
 Shanghai, Jiangtong, De1,

2819
02:47:09,060 --> 02:47:11,060
 or at least this is the first time I see

2820
02:47:11,060 --> 02:47:13,060
 it. Yeah.

2821
02:47:13,060 --> 02:47:15,060
 Yeah, so, but I know it's

2822
02:47:15,060 --> 02:47:17,060
 pretty new.

2823
02:47:17,060 --> 02:47:19,060
 So therefore, again,

2824
02:47:19,060 --> 02:47:21,060
 I think this

2825
02:47:21,060 --> 02:47:23,060
 kind of question is definitely hard for me to answer.

2826
02:47:23,060 --> 02:47:25,060
 I cannot answer that.

2827
02:47:25,060 --> 02:47:27,060
 So far, at least for myself,

2828
02:47:27,060 --> 02:47:29,060
 is that I don't have...

2829
02:47:29,060 --> 02:47:31,060
 I'm not aware of any

2830
02:47:31,060 --> 02:47:33,060
 senior who have

2831
02:47:33,060 --> 02:47:35,060
 gone through this program yet.

2832
02:47:35,060 --> 02:47:37,060
 Yeah.

2833
02:47:37,060 --> 02:47:39,060
 Okay.

2834
02:47:39,060 --> 02:47:41,060
 I have another

2835
02:47:41,060 --> 02:47:43,060
 question.

2836
02:47:43,060 --> 02:47:45,060
 So how

2837
02:47:45,060 --> 02:47:47,060
 I can comprehend

2838
02:47:47,060 --> 02:47:49,060
 that the

2839
02:47:49,060 --> 02:47:51,060
 entropy

2840
02:47:51,060 --> 02:47:53,060
 can indicate the

2841
02:47:53,060 --> 02:47:55,060
 smallest number of bits

2842
02:47:55,060 --> 02:47:57,060
 necessary to

2843
02:47:57,060 --> 02:48:01,060
 do the encoding?

2844
02:48:01,060 --> 02:48:03,060
 Okay.

2845
02:48:03,060 --> 02:48:05,060
 So this entropy,

2846
02:48:05,060 --> 02:48:07,060
 this term, actually, loosely

2847
02:48:07,060 --> 02:48:09,060
 speaking, they are using...

2848
02:48:09,060 --> 02:48:11,060
 they are more commonly used in communication theory.

2849
02:48:11,060 --> 02:48:13,060
 Yeah.

2850
02:48:13,060 --> 02:48:15,060
 So in the communication theory,

2851
02:48:15,060 --> 02:48:17,060
 it's an indication of the degree

2852
02:48:17,060 --> 02:48:19,060
 of randomness and how

2853
02:48:19,060 --> 02:48:21,060
 much information is contained

2854
02:48:21,060 --> 02:48:23,060
 in the source.

2855
02:48:23,060 --> 02:48:25,060
 But in the context of our

2856
02:48:25,060 --> 02:48:27,060
 compression

2857
02:48:27,060 --> 02:48:29,060
 perspective, this entropy,

2858
02:48:29,060 --> 02:48:31,060
 if you have a data source that

2859
02:48:31,060 --> 02:48:33,060
 consists of different symbols,

2860
02:48:33,060 --> 02:48:35,060
 but you can calculate its entropy.

2861
02:48:35,060 --> 02:48:37,060
 When you calculate the entropy,

2862
02:48:37,060 --> 02:48:39,060
 this number actually

2863
02:48:39,060 --> 02:48:41,060
 indicates to you what is the smallest

2864
02:48:41,060 --> 02:48:43,060
 number of bits

2865
02:48:43,060 --> 02:48:45,060
 per symbol that you

2866
02:48:45,060 --> 02:48:47,060
 can use to represent

2867
02:48:47,060 --> 02:48:49,060
 a symbol.

2868
02:48:49,060 --> 02:48:51,060
 So it's

2869
02:48:51,060 --> 02:48:53,060
 easy to understand. For example, you have

2870
02:48:53,060 --> 02:48:55,060
 a symbol. You can always use more bits

2871
02:48:55,060 --> 02:48:57,060
 to represent. You can use three...

2872
02:48:57,060 --> 02:48:59,060
 I mean, you can use eight bits, you can use

2873
02:48:59,060 --> 02:49:01,060
 ten bits, you can use twenty bits. More is

2874
02:49:01,060 --> 02:49:03,060
 okay. But when you try to

2875
02:49:03,060 --> 02:49:05,060
 use what is the smallest

2876
02:49:05,060 --> 02:49:07,060
 number of bits that you can use

2877
02:49:07,060 --> 02:49:09,060
 to represent this symbol,

2878
02:49:09,060 --> 02:49:11,060
 there's a theoretical lower

2879
02:49:11,060 --> 02:49:13,060
 bound. So this theoretical lower bound

2880
02:49:13,060 --> 02:49:15,060
 is the entropy

2881
02:49:15,060 --> 02:49:17,060
 from the context of compression.

2882
02:49:33,060 --> 02:49:35,060
 Okay.

2883
02:50:03,060 --> 02:50:05,060
 So

2884
02:50:33,060 --> 02:50:35,060
 .

2885
02:51:03,060 --> 02:51:05,060
 .

2886
02:51:33,060 --> 02:51:35,060
 .

2887
02:52:03,060 --> 02:52:05,060
 .

2888
02:52:33,060 --> 02:52:35,060
 .

2889
02:53:03,060 --> 02:53:05,060
 .

2890
02:53:33,060 --> 02:53:35,060
 .

2891
02:54:03,060 --> 02:54:05,060
 .

2892
02:54:33,060 --> 02:54:35,060
 .

2893
02:55:03,060 --> 02:55:05,060
 .

2894
02:55:33,060 --> 02:55:35,060
 .

2895
02:56:03,060 --> 02:56:05,060
 .

2896
02:56:33,060 --> 02:56:35,060
 .

2897
02:57:03,060 --> 02:57:05,060
 .

2898
02:57:33,060 --> 02:57:35,060
 .

2899
02:58:03,060 --> 02:58:06,060
 .

2900
02:58:33,060 --> 02:58:36,060
 .

2901
02:59:03,060 --> 02:59:06,060
 .

2902
02:59:33,060 --> 02:59:36,060
 .

